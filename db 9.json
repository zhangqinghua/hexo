{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1586680109595},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1586680109596},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1586680109596},{"_id":"themes/cactus/_config.yml","hash":"91141285ae581dc1e30a646f536cbca272d9f7ea","modified":1588318955236},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1586680109596},{"_id":"themes/cactus/README.md","hash":"859d11941c46be4f7b4a6d62297ccbeb4f732bc9","modified":1586680109596},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1586680109596},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1586680109603},{"_id":"source/_data/projects.json","hash":"ffca6b630d7d49eee4f5a95c6a4a2bec301381d4","modified":1586680109196},{"_id":"source/_posts/.DS_Store","hash":"f48ae02c2b1b06d69465dd9caf4d37ec068e43c2","modified":1586695828146},{"_id":"source/_posts/corn表达式.md","hash":"f76bfc837e4ebc90249f8434e80d3b920cfcd997","modified":1586680109311},{"_id":"source/about/index.md","hash":"f03a8b727a143320dddae0a3f178ab7f3d11dd48","modified":1586680109594},{"_id":"source/categories/index.md","hash":"999ce6bf53da43f7dec62f17a27f1b73379a4b88","modified":1586680109595},{"_id":"source/search/index.md","hash":"7418483102ece2b94a7ea0a883a93451705cb202","modified":1586680109595},{"_id":"source/tags/index.md","hash":"b105290763af11e8333525049fd854cbd51504e6","modified":1586680109595},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1586680109597},{"_id":"themes/cactus/languages/default.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1586680109597},{"_id":"themes/cactus/languages/en.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1586680109597},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1586680109597},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1586680109597},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1586680109598},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1586680109598},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1586680109598},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1586680109598},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1586680109598},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1586680109598},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1586680109599},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1586680109599},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1586680109599},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1586680109599},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1586680109602},{"_id":"themes/cactus/layout/index.ejs","hash":"c53484094a7c30ab82b0ea984404157ab9711e71","modified":1586680109603},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1586680109603},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1586680109603},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1586680109603},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1586680109603},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1586680109604},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1586680109604},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1586680109604},{"_id":"source/_posts/.vscode/settings.json","hash":"53eba7ed3ade6545c67f29052431b412f27add15","modified":1588318955218},{"_id":"source/_posts/Interview/Chapter 1.1 Java 基础.md","hash":"0c4e708aa7ec956f6cf266e1aa2e6426b86216cf","modified":1588318955218},{"_id":"source/_posts/HTTPS 教程/SSL 协议.md","hash":"b95e0344473268cd7ebde65a8ad772a85de97daa","modified":1586680109197},{"_id":"source/_posts/Interview/Chapter 1.2 数据结构.md","hash":"6da216def69289500467ab9a622f51252fa37968","modified":1588318955219},{"_id":"source/_posts/HTTPS 教程/导言.md","hash":"eeddf376017f3b522d787e903cfbc5da5770ec9e","modified":1586680109197},{"_id":"source/_posts/Interview/Chapter 1.3 线程.md","hash":"b14251a1e5ecdfe968426a7c214515b58fc43292","modified":1588318955219},{"_id":"source/_posts/Interview/Chapter 2.1 虚拟机.md","hash":"b2e34105f034bed28c599de2a6de2527bdc17799","modified":1588318955219},{"_id":"source/_posts/Java 8 系列/新时间与日期 API.md","hash":"e9d063aff66bccaaa15d3aae6c5a45d2544781fc","modified":1586680109198},{"_id":"source/_posts/Java 8 系列/Stream 示例.md","hash":"4d08ce5863d29bb5928bd0f0b3d3ed47e8133c86","modified":1586680109197},{"_id":"source/_posts/JavaWorld/.DS_Store","hash":"fc15a2116d0d28e37f447bc6375a04449740bdfe","modified":1587207215185},{"_id":"source/_posts/JavaWorld/Advanced features Part 1, Static classes and inner classes in Java.md","hash":"69d7012a4339e8a9bd1cb33f27f9a6b6930cfa19","modified":1587298878452},{"_id":"source/_posts/JavaWorld/Advanced features Part 2, Exception handling basics.md","hash":"87ed63f47c4746fc2f83e944e7a02a08fd5212fa","modified":1587298855148},{"_id":"source/_posts/JavaWorld/Advanced features Part 3, Advanced features and types.md","hash":"e66f7d81ff1a74be4e8745dc9ade27eaeed5cf77","modified":1587298937620},{"_id":"source/_posts/JavaWorld/Advanced features Part 4, Get started with method references in Java.md","hash":"0214c869d8e7bbf977171eadeed515825c091996","modified":1587298999917},{"_id":"source/_posts/JavaWorld/Advanced features Part 5, Get started with lambda expressions in Java.md","hash":"d46ee9dd1685b153623e4d4a07ee2c50ca47a1c2","modified":1587299117314},{"_id":"source/_posts/JavaWorld/Doubly-linked lists and circular-linked lists, and their algorithms.md","hash":"524b98b235f81cee548c6d4c5757b3a8da11cbfc","modified":1587278426302},{"_id":"source/_posts/JavaWorld/How to store data in Java Objects.md","hash":"7a743f684da357b23eea68e43ac42cdd168dac89","modified":1586680109198},{"_id":"source/_posts/JavaWorld/Regular expressions Part 1 - Pattern matching and the Pattern class.md","hash":"6fce71775ab321ccb593f3a78361115decab0f9e","modified":1587299762116},{"_id":"source/_posts/JavaWorld/Spring Series Part 1, What is Spring.md","hash":"00c1953a3a1beb8ab9df69b58407b7063e9a57a1","modified":1588318955220},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms.md","hash":"460a624b1a517f2eef32270aecbb306ccba3f35b","modified":1587278426303},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm.md","hash":"caece471754fe435ba5c7cda1ff5bb62901d4700","modified":1587278426303},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC.md","hash":"b1aef4f8b585cef37a101329d9f7f8f05d332c71","modified":1588318955223},{"_id":"source/_posts/JavaWorld/Spring Series Part 3, Spring WebFlux.md","hash":"72934ced02428df6e92a311ea416bac386f76f21","modified":1588318955226},{"_id":"source/_posts/JavaWorld/What is a data structure and how to write your first algorithm in Java.md","hash":"48194519c240708b2a4169c89b5c19fd5ecb17e4","modified":1587278426305},{"_id":"source/_posts/Linux 教程/SSH原理与运用（二）：远程操作与端口转发.md","hash":"4ae516b0e18a3a3453bfaef866f6832c57dec562","modified":1586680109201},{"_id":"source/_posts/Linux 教程/SSH原理与运用（一）：远程登录.md","hash":"42eb14c8a916bba0a67a5e9ae6f30fabe5ff80e3","modified":1586680109201},{"_id":"source/_posts/Linux 教程/防火墙设置.md","hash":"501045b57762df6a1f9f6559ec28810b489a2f53","modified":1586680109201},{"_id":"source/_posts/JavaWorld/What is an array and how are arrays represented in Java.md","hash":"a068a563a3b51e899864d453057afa0a1aa162f4","modified":1587278426307},{"_id":"source/_posts/MySQL 教程/3.2 cp方式.md","hash":"ed708f333335f7b8b04883df869679e523f5cd0f","modified":1586680109202},{"_id":"source/_posts/MySQL 教程/1.1 MySQL的安装.md","hash":"13acb7b4ce39b4e80c328684812c8567cc4a8738","modified":1586680109202},{"_id":"source/_posts/MySQL 教程/3.1 数据备份与恢复.md","hash":"813526b838cb6683890a5f8110841d0d19157044","modified":1586680109202},{"_id":"source/_posts/MySQL 教程/3.3 mysqldump方式.md","hash":"7d4b85f8c0dc96c4bee8f85a69a1b3d431831e2a","modified":1586680109202},{"_id":"source/_posts/MySQL 性能调优/Chapter 1.1 什么决定了电商双11大促的成败.md","hash":"824d730748291118a79f235789d946150e75f079","modified":1588318955229},{"_id":"source/_posts/MySQL 教程/3.6 总结.md","hash":"41d4eccc5d2e208c66397de11695f657f1a344bc","modified":1586680109203},{"_id":"source/_posts/MySQL 性能调优/Chapter 1.2 在双11大促中的数据库服务器.md","hash":"bbd497b3086ba51498801da47f15272ad1d7c4fd","modified":1588318955229},{"_id":"source/_posts/MySQL 性能调优/Chapter 1.3 在大促中什么影响了数据库性能.md","hash":"8e70e61197a568b493e27cc818de7589e2f6c215","modified":1588318955229},{"_id":"source/_posts/MySQL 性能调优/Chapter 1.4 大表带来的问题.md","hash":"885d72effc460c7016f27cc0fb6ca99eb5880eb2","modified":1588318955230},{"_id":"source/_posts/MySQL 性能调优/Chapter 1.5 大事物带来的问题.md","hash":"fb54ca7f0811efe984547586a8e21631ed0c8752","modified":1588318955230},{"_id":"source/_posts/MySQL 性能调优/Chapter 2.1 影响性能的几个方面.md","hash":"c065d336f198c5f24b792c77441103e186df3018","modified":1588318955230},{"_id":"source/_posts/MySQL 性能调优/Chapter 2.2 CPU 资源和可用内存大小.md","hash":"96b46374060b90c4592dbe2b009d8fd79b8df10e","modified":1588318955230},{"_id":"source/_posts/MySQL 性能调优/Chapter 2.3 磁盘的配置和选择.md","hash":"4b1b747fa8514657fc0c57811b3ec06f7de0ed34","modified":1588318955230},{"_id":"source/_posts/MySQL 性能调优/Chapter 2.4 使用 RAID 增加传统机器硬盘的性能.md","hash":"f20fac9dd0a564183ae60c94937d5eaa8045f000","modified":1588318955231},{"_id":"source/_posts/MySQL 性能调优/Chapter 2.5 使用固态存储 SSD 或 PCIe 卡.md","hash":"d0c0ac31499c3c375c8541655d6e1249d046c216","modified":1588318955231},{"_id":"source/_posts/MySQL 性能调优/Chapter 2.6 使用网络存储 SAN 和 NAS.md","hash":"f413960ba13f669fd0d61b2c1a0c14c9377d717e","modified":1588318955231},{"_id":"source/_posts/MySQL 性能调优/Chapter 2.7 总结.md","hash":"69f7ee1f0efd07fa086717ad111756df3750ee3c","modified":1588318955231},{"_id":"source/_posts/MySQL 性能调优/Chapter 3.1 操作系统对性能的影响.md","hash":"1fcb06d2c26783bed02e3afabc60e849951abb22","modified":1588318955231},{"_id":"source/_posts/MySQL 性能调优/Chapter 3.2 CentOS 系统参数优化.md","hash":"96d42af3c8e90c5d38f069d7c09e171a3fbe7c6c","modified":1588318955232},{"_id":"source/_posts/MySQL 性能调优/Chapter 3.3 文件系统对性能的影响.md","hash":"a036b877b9ddf492b9a49dbff079b0bf82c686df","modified":1588318955232},{"_id":"source/_posts/MySQL 性能调优/Chapter 3.4 MySQL 体系结构.md","hash":"f85ef7929487b7caa85b27ce2a3149dfffe22575","modified":1588318955232},{"_id":"source/_posts/MySQL 性能调优/Chapter 4.1 MySQL 常用存储引擎之 MyISAM.md","hash":"5f968f3380671b91c467ea426ab57173237cdfd3","modified":1588318955232},{"_id":"source/_posts/MySQL 性能调优/Chapter 4.2 MySQL 常用存储引擎之 Innodb.md","hash":"c49b2822b3e5d5137b6e0e2ea7a93d6eeac8e55c","modified":1588318955232},{"_id":"source/_posts/MySQL 性能调优/Chapter 4.3 Innodb 存储引擎的特性一.md","hash":"58405cbc2b037b59fdecf3e061a882572902216b","modified":1588318955233},{"_id":"source/_posts/MySQL 性能调优/Chapter 4.4 Innodb 存储引擎的特性二.md","hash":"2df38555d002f5e56e2b1b005da9cdc53c51a145","modified":1588318955233},{"_id":"source/_posts/MySQL 性能调优/Chapter 4.5 MySQL 常用存储引擎之 CSV.md","hash":"1a7059eb25d33d790c4c5466afccfa94cd410f65","modified":1588318955233},{"_id":"source/_posts/MySQL 性能调优/Chapter 4.6 MySQL 常用存储引擎之 Archive.md","hash":"89a2cf81e52258a1edc770b3e8154077c48498f6","modified":1588318955233},{"_id":"source/_posts/MySQL 性能调优/Chapter 4.7 MySQL 常用存储引擎之 Memory.md","hash":"226d959310e100d4b008f5e4dd438d7efb36431f","modified":1588318955233},{"_id":"source/_posts/MySQL 性能调优/Chapter 4.8 MySQL 常用存储引擎之 Federated.md","hash":"29007f4d114bdbc2fac6341d675393e4cf2039aa","modified":1588318955233},{"_id":"source/_posts/MySQL 性能调优/Chapter 4.9 如何选择存储引擎.md","hash":"22d233768b997e9ce5f207145b63365f22f86941","modified":1588318955234},{"_id":"source/_posts/MySQL 性能调优/Chapter 6.1 什么是基准测试.md","hash":"7a52edccce07542920286ea785b94489d2fdeabf","modified":1588318955234},{"_id":"source/_posts/MySQL 性能调优/Chapter 6.2 如何进行基准测试.md","hash":"0dcb200e919fddba1a47ca006a8703c10f4d38fc","modified":1588318955234},{"_id":"source/_posts/Nginx 教程/1. 什么是 Nginx.md","hash":"dc8adfa04249fc0a2f00d5ed735865631827cddc","modified":1586680109203},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍.md","hash":"ceab91b230f5313cd4684003eaa18320b69f658e","modified":1586680109203},{"_id":"source/_posts/Nginx 教程/3. 安装 Nginx.md","hash":"f55dc8b0b002e22f42e02b6e15c6c1c788292eff","modified":1588318955234},{"_id":"source/_posts/Nginx 教程/4. Nginx 日志.md","hash":"68be7b9dcab1b3b4ec9a588a8918227a2f4bbdd7","modified":1586680109311},{"_id":"source/_posts/Spring Tutorial/Building REST services with Spring.md","hash":"92327218f759664eb1d92c89c473b082691b4f28","modified":1588318955235},{"_id":"source/_posts/Nginx 教程/5. 配置文件.md","hash":"a211eca68a16e614e08027b848ed5a5a37c5ed04","modified":1586680109311},{"_id":"source/_posts/Redis 教程/安装 Redis.md","hash":"caf3e79f3128481757fbbe09ee3eb78c06933304","modified":1586680109311},{"_id":"source/_posts/业务汇总/用户登录系统.md","hash":"45eb00ac910fa0edd5d5821f01ddc556762d62f6","modified":1586680109312},{"_id":"source/_posts/其它/2020年度计划.md","hash":"cd99775ee7158cee2158c80ee87aafbd99069e6b","modified":1586680109312},{"_id":"source/_posts/其它/Git常用操作.md","hash":"f1a6ce1b4e363a31b740957815ba3a2fa6827984","modified":1586680109312},{"_id":"source/_posts/其它/IDEA常用技巧.md","hash":"3e1d3c9724b418d61dbf506211fca4fdb0f74480","modified":1586680109312},{"_id":"source/_posts/其它/Icebartech 配置.md","hash":"b1d566a5a157fe2a21121da96f710ba702e2a43b","modified":1586680109312},{"_id":"source/_posts/其它/思维导图.md","hash":"032b0c790b9f85cb15036db459054a97f2f08f58","modified":1586680109313},{"_id":"source/_posts/其它/科学上网.md","hash":"564b43e8196ea0bb28a6bbf0027026bace9c6c35","modified":1586680109313},{"_id":"source/_posts/其它/自然拼读法.md","hash":"a2f9fcbead2db9444ce5471b2afdaaac79860fc6","modified":1586680264170},{"_id":"source/_posts/其它/黑苹果使用指南.md","hash":"4057fda11d6577145ff411fa6b1225fb3cd60584","modified":1586680109313},{"_id":"source/_posts/单点登录/用户帐号系统设计.md","hash":"41afe433d850476d052e09777a6e373793eb460a","modified":1586680109317},{"_id":"source/_posts/多线程高并发编程/001.md","hash":"eb5512b863da35cbc1310260b806751084581c96","modified":1586680109318},{"_id":"source/_posts/多线程高并发编程/2.1 火车售票问题.md","hash":"bafd9bc57a119b4db14f8d8c2d2eb6ff35047e9e","modified":1586680109318},{"_id":"source/_posts/多线程高并发编程/2.2 ConcurrentMap.md","hash":"106f7233a1a668ce4364c45243a38837d4dc9c7f","modified":1586680109318},{"_id":"source/_posts/多线程高并发编程/2.3 CopyOnWriteList.md","hash":"106f7233a1a668ce4364c45243a38837d4dc9c7f","modified":1586680109318},{"_id":"source/_posts/多线程高并发编程/2.4 SynchronizedList.md","hash":"106f7233a1a668ce4364c45243a38837d4dc9c7f","modified":1586680109319},{"_id":"source/_posts/多线程高并发编程/2.5 ConcurrentQueue.md","hash":"106f7233a1a668ce4364c45243a38837d4dc9c7f","modified":1586680109319},{"_id":"source/_posts/多线程高并发编程/3.1 Executor.md","hash":"bafd9bc57a119b4db14f8d8c2d2eb6ff35047e9e","modified":1586680109319},{"_id":"source/_posts/多线程高并发编程/3.3 Executors.md","hash":"bafd9bc57a119b4db14f8d8c2d2eb6ff35047e9e","modified":1586680109319},{"_id":"source/_posts/多线程高并发编程/3.2 ExecutorService.md","hash":"bafd9bc57a119b4db14f8d8c2d2eb6ff35047e9e","modified":1586680109319},{"_id":"source/_posts/多线程高并发编程/3.4 ThreadPool.md","hash":"bafd9bc57a119b4db14f8d8c2d2eb6ff35047e9e","modified":1586680109319},{"_id":"source/_posts/多线程高并发编程/3.5 Future.md","hash":"bafd9bc57a119b4db14f8d8c2d2eb6ff35047e9e","modified":1586680109319},{"_id":"source/_posts/多线程高并发编程/3.6 ParallelComputing.md","hash":"bafd9bc57a119b4db14f8d8c2d2eb6ff35047e9e","modified":1586680109320},{"_id":"source/_posts/多线程高并发编程/4.2 FixedThreadPool copy.md","hash":"b046ed8585f730c300c12b8fc5214b591b2db7a9","modified":1586680109320},{"_id":"source/_posts/多线程高并发编程/4.1 线程池.md","hash":"655545a30b8dd69941bc2ca7aaa2b19f9c8a6ba6","modified":1586680109320},{"_id":"source/_posts/多线程高并发编程/4.3 CachedThreadPool.md","hash":"91fffa2ac77e92295048fce49973abdc2bad1334","modified":1586680109320},{"_id":"source/_posts/多线程高并发编程/4.4 SingleThreadExecutor.md","hash":"35d126c892879af587906b0cf99ac2df099de589","modified":1586680109320},{"_id":"source/_posts/多线程高并发编程/4.5 ScheduledThreadPool.md","hash":"e7444fa3007d806b759d3390d767eb5e1594a5a4","modified":1586680109321},{"_id":"source/_posts/多线程高并发编程/4.6 ForkJoinPool.md","hash":"f179c5d46d72175cebba8302c02f5ac39c3c70c5","modified":1586680109321},{"_id":"source/_posts/多线程高并发编程/4.7 自定义线程池.md","hash":"13e502fd97aa2b929e40c9a94bf31fa7d46d743b","modified":1586680109321},{"_id":"source/_posts/多线程高并发编程/5.1 Problems.md","hash":"7483f2aa8f22f95828b47061b1ceddb8c3d0b3b3","modified":1586680109321},{"_id":"source/_posts/多线程高并发编程/reentrantlock.md","hash":"19c4ad9ee88ace76c03eaa25e1e416bf516b5c37","modified":1586680109321},{"_id":"source/_posts/学习观/第01期：何为学习.md","hash":"96c725e32e9e762f321566ef78e1d1abc1c155ab","modified":1586680109322},{"_id":"source/_posts/学习观/第02期：学习步骤.md","hash":"2a2ce8ecb16e65c2bf481cc19081cfb4debe88db","modified":1586680109325},{"_id":"source/_posts/学习观/第03期：学习误区.md","hash":"72828753f847fff1c40e8e0f356afdf81b3413ab","modified":1586680109326},{"_id":"source/_posts/学习观/第04期：分而治之.md","hash":"66e4b74664f64131a65e9684c59ad68c32f7e1fd","modified":1586680109329},{"_id":"source/_posts/学习观/第05期：思维导图.md","hash":"14317369f9950d32194583a0a4d0314924c22f1f","modified":1586680109334},{"_id":"source/_posts/学习观/第06期：导图步骤.md","hash":"a72b23f07fa0d6810ae2cb9d6aeecad0e801f393","modified":1586680109344},{"_id":"source/_posts/学习观/第07期：费曼技巧.md","hash":"7083bec6d53c7f09a8d04564f6ce8cab7cb81beb","modified":1586680109345},{"_id":"source/_posts/正则表达式/常用正则表达式.md","hash":"97f0d4b602c0ad93c0e8641cabf8b4ab3a73e181","modified":1586680109349},{"_id":"source/_posts/深入浅出JVM/1. 什么是JVM.md","hash":"4e6e468829602fb5ba3ea4096d51b67ce0d8c109","modified":1586680109349},{"_id":"source/_posts/深入浅出JVM/2. JVM Stacks.md","hash":"9b3b5b86e81292a45984f5152e1d2cb1cbbc5b4a","modified":1586680109369},{"_id":"source/_posts/深入浅出JVM/3. Heap.md","hash":"73a1365abe9739ac1635b8df559c08bab1cf8bd3","modified":1586680109374},{"_id":"source/_posts/深入浅出JVM/5. Other.md","hash":"6e01aa5418793e34aebdb214cf5e9d69c4a1b73d","modified":1586680109374},{"_id":"source/_posts/深入浅出JVM/Questions.md","hash":"bc4efa3c5b8a10ed2a135744423c52448b45792d","modified":1586680109375},{"_id":"source/_posts/深入浅出JVM/Run-Time Data Areas.md","hash":"cac242d10c96fba466e8a174b15f439f8477cdb3","modified":1586680109378},{"_id":"source/_posts/绘图插件mermaid/5. Pie chart diagrams.md","hash":"d5a9e9b99a7ddd0790209e813dd4453ec39197da","modified":1586680109379},{"_id":"source/_posts/绘图插件mermaid/4. Sequence diagrams.md","hash":"0f73685e464a99a5169e432cddb432c22c217cc4","modified":1586680109379},{"_id":"source/_posts/绘图插件mermaid/custom.styl","hash":"def3cc8315668f8700046373e9dbdf4d5cec6894","modified":1586680109380},{"_id":"source/_posts/绘图插件mermaid/第 1 章 - mermaid简介.md","hash":"cfacbfcef1c9ad8bb4f387bb8ed977fda0f8011f","modified":1586680109380},{"_id":"source/_posts/绘图插件mermaid/第 2 章 - Hexo 与 mermaid 集成.md","hash":"432194a7cf02efde18924ba9859476666090ddeb","modified":1586680109381},{"_id":"source/_posts/绘图插件mermaid/第 3 章 - 流程图.md","hash":"42479a8c0742ad853d3e40e2badc680850edefdf","modified":1586680109381},{"_id":"source/_posts2/JPA/jap.md","hash":"10f3e1b85d375241149bc5f770f777a7a01de7ef","modified":1586680109382},{"_id":"source/_posts2/Java/Hibernate.md","hash":"e72fc6cd983a9d4f8af88911e7e6c583a7f0cfc8","modified":1586680109403},{"_id":"source/_posts2/Java/JPA 笔记.md","hash":"6437620235488c02b8f1dacef6400dc71b1627f8","modified":1586680109404},{"_id":"source/_posts2/Java/Java Map List 初始化.md","hash":"55f3c023e2764eff3e4257191030f37240269950","modified":1586680109404},{"_id":"source/_posts2/Java/Java8 Lambda.md","hash":"608bdbadd45076bdba08a78c80d9673e6f43f177","modified":1586680109404},{"_id":"source/_posts2/Java/Java8 新特性.md","hash":"1e1d1b100b6a13d4cd388049d0f5791a36b0f59b","modified":1586680109405},{"_id":"source/_posts2/Java/Java对象与Map的转换.md","hash":"273b74f138a7fb4239c1d6886cdf6e56a0ca45d8","modified":1586680109405},{"_id":"source/_posts2/Java/Jenkins.md","hash":"0cbec28f4267bc6be7a51a2b58e88d5932f6d6fd","modified":1586680109406},{"_id":"source/_posts2/Java/Mybatis.md","hash":"acee393bf7aa0633bff07f48123e89dd512e2f46","modified":1586680109412},{"_id":"source/_posts2/Java/Redis.md","hash":"2b445874344d48fbd7bb5f03e165a0b4384140c1","modified":1586680109412},{"_id":"source/_posts2/Java/SpringBoot.md","hash":"ba96a43b2759ec62475c1adb95c5999fa3cb2750","modified":1586680109485},{"_id":"source/_posts2/Java/Swagger2 笔记.md","hash":"c227d29d1e41c7904113b12d8f2bff643af0e0e5","modified":1586680109489},{"_id":"source/_posts2/Java/Thymeleaf 笔记.md","hash":"29d54e799970c44562f0422fcda164c2f608792c","modified":1586680109489},{"_id":"source/_posts2/Java/Web.md","hash":"461d685b5506ff795c8848453e8f050d6e3b6f51","modified":1586680109489},{"_id":"source/_posts2/Java/WebMagic.md","hash":"9dcb76f51781c9c5cba7ae62feaf3108be143cc9","modified":1586680109490},{"_id":"source/_posts2/Java/分布式.md","hash":"a0767bb98400995c497bba1621b6d47d7ef69650","modified":1586680109490},{"_id":"source/_posts2/Java/基础.md","hash":"fb2b2b925d52e54610e57b49a589c791b01f12d9","modified":1586680109497},{"_id":"source/_posts2/Java/泛型.md","hash":"7686491ab2fb94d5d88e9cd61b12aad112d6d7e8","modified":1586680109497},{"_id":"source/_posts2/Java/消息队列.md","hash":"ef3f0a8ed923952eb5684c550a77e23169d14772","modified":1586680109498},{"_id":"source/_posts2/Java/线程.md","hash":"ca14c3a0401369743c4eba2fdc9c77780bc827a2","modified":1586680109502},{"_id":"source/_posts2/Java/网络.md","hash":"962c8c4fb676b3c53b4a6d9705fcf2e140cf8ebb","modified":1586680109502},{"_id":"source/_posts2/Java/虚拟机.md","hash":"242acc2bf45ea4e93bff3f00665e9a2a75faa67c","modified":1586680109506},{"_id":"source/_posts2/Java/设计模式.md","hash":"60156d39864d18201ba1ca86bea6d4925f537cba","modified":1586680109507},{"_id":"source/_posts2/Java/集合.md","hash":"b96c5e42676748cd5e767cb3d24ae020bca9dd00","modified":1586680109507},{"_id":"source/_posts2/Java/高并发优化.md","hash":"3f2771eb42719c6936beec880d58ad0cb46d09b4","modified":1586680109514},{"_id":"source/_posts2/Java 101/Mastering Java exceptions.md","hash":"d23eb2b4e0ca52f96486ac8c2499650e5a2fb0ea","modified":1586680109383},{"_id":"source/_posts2/Java 反射/1. 什么是反射.md","hash":"908170a284c2c92bc9b350d43b3d272c9360e75f","modified":1586680109385},{"_id":"source/_posts2/Java 反射/2. Class类和Class实例.md","hash":"8c92f49fc11324efe8f4253f47f4fe2dfa0f222d","modified":1586680109395},{"_id":"source/_posts2/Java 反射/3. 基本数据类型和数组的Class实例.md","hash":"8921610c88ab05ae69091252e1c22c782c92a40e","modified":1586680109395},{"_id":"source/_posts2/Java 反射/4. 获取构造器.md","hash":"267fb024871a2e722f4d2db97cc1b6d4adc8b6ff","modified":1586680109396},{"_id":"source/_posts2/Java 反射/5. 调用构造器-创建对象.md","hash":"0064b61c2ec2d60590c23e2cc4e5b05daf71fd22","modified":1586680109397},{"_id":"source/_posts2/Java 反射/Eclipse项目的classpath文件.md","hash":"40ae628652a4212bb2597d18bc1736c13fc9d680","modified":1586680109398},{"_id":"source/_posts2/Java 反射/使用反射实现对象工厂.md","hash":"62a4cb9bfd9508aa983d5f75e98c134314401613","modified":1586680109398},{"_id":"source/_posts2/Java 反射/加载资源的几种方式.md","hash":"3dd2f280343dcef5ab605520c61d735c8ddff4dc","modified":1586680109399},{"_id":"source/_posts2/Java 反射/反射其它的一些API.md","hash":"d28dd1de75dbe13ec7449817b118da7ffcd06d0b","modified":1586680109399},{"_id":"source/_posts2/Java 反射/如何获取泛型参数信息.md","hash":"0dcf22c4def96336e6a25a7549f67bde9199eb65","modified":1586680109400},{"_id":"source/_posts2/Java 反射/工具类的编写方式.md","hash":"30045850a3166efda53c71789af4ee77ed45ebdb","modified":1586680109400},{"_id":"source/_posts2/Java 反射/操作字段-给字段设置获取值.md","hash":"417e02fbddd389520c4dcfdd3c942f87d0af0338","modified":1586680109401},{"_id":"source/_posts2/Java 反射/获取字段.md","hash":"925da8683421e3e63ca9fee9f876bf0711de5f71","modified":1586680109401},{"_id":"source/_posts2/Java 反射/获取方法.md","hash":"dd9ea437992f79b46b5a35103d0f4966df629d71","modified":1586680109402},{"_id":"source/_posts2/Java 反射/调用方法.md","hash":"468111061d0d2bae989bd5b89232d7d210088f2e","modified":1586680109402},{"_id":"source/_posts2/Java 反射/调用静态方法和可变参数方法.md","hash":"437dcf45fa7efd7e59a1b0bd02df5981439915a8","modified":1586680109403},{"_id":"source/_posts2/Linux/Linux 笔记.md","hash":"ec79dff344a2138967dcbcee158e152775fbeddc","modified":1586680109515},{"_id":"source/_posts2/Python/Matplotlib 笔记.md","hash":"bc72fc84a74707957ba33164c7f76e310d11b79f","modified":1586680109515},{"_id":"source/_posts2/Python/Python 笔记.md","hash":"2b08f118d642405acd4ffceb3800e47ea2839fd3","modified":1586680109520},{"_id":"source/_posts2/Python/Scipy 笔记.md","hash":"579550a7ff6c972a3ca8a3e905cc9c6c652151b3","modified":1586680109521},{"_id":"source/_posts2/Python/cv2 笔记.md","hash":"5b2c8d9c678a54f8590b40768485285e691e98a3","modified":1586680109521},{"_id":"source/_posts2/Regular/Java 正则表达式.md","hash":"075a8179dee3e7a88e5914a72f1fe4832125b806","modified":1586680109521},{"_id":"source/_posts2/Regular/Qulifiers 限定语.md","hash":"f7c035d44742c241768c790c2360431b72e8511e","modified":1586680109522},{"_id":"source/_posts2/Regular/字符串分组.md","hash":"29d791979679e4ce5d87c8a127b03a72e43b2175","modified":1586680109522},{"_id":"source/_posts2/Regular/常用正则.md","hash":"4fbd43ad74480e90e48b2e840809ae5c1a3f582f","modified":1586680109522},{"_id":"source/_posts2/Regular/替换字符串.md","hash":"0d46a1c3d9b0cf35f8a7d7bd1c5d64ad960aa38c","modified":1586680109522},{"_id":"source/_posts2/Regular/查找字符串.md","hash":"ca5924669cf497331283881e51a5a8d0658391e2","modified":1586680109523},{"_id":"source/_posts2/Regular/简介.md","hash":"f39285ba9716764a12ae5df8f99867945ce22e12","modified":1586680109523},{"_id":"source/_posts2/Regular/语法.md","hash":"28aae572addacbd9e3392288cb68512a2efdd32f","modified":1586680109523},{"_id":"source/_posts2/Spring Data JPA/1. Project Metadata.md","hash":"ffaef892dff35e3b3a0df7be78d1ef89281b6b24","modified":1586680109523},{"_id":"source/_posts2/Spring Data JPA/3. Dependencies.md","hash":"7d57f596d12e787a02e4fbab0841673af72b4a78","modified":1586680109524},{"_id":"source/_posts2/Spring Data JPA/2. New & Noteworthy.md","hash":"b0080e8dc201f0f2f468e389f4dafd9887e06f8b","modified":1586680109524},{"_id":"source/_posts2/Spring Data JPA/5. JPA Repositories.md","hash":"eb31a2099f33d52e9838893266e997597f2c0bd0","modified":1586680109525},{"_id":"source/_posts2/SpringBoot/SpringBoot AOP.md","hash":"909ced56416a3e053c4ff6a4962195a1485e268e","modified":1586680109525},{"_id":"source/_posts2/Spring Data JPA/4. Working with Spring Data Repositories.md","hash":"d232752e338521f577521a86ab95c98e2b8550cb","modified":1586680109524},{"_id":"source/_posts2/SpringBoot/SpringBoot 内置注解.md","hash":"9fc6f434984efaf13cec2ec2275079fb0e9d2ff0","modified":1586680109525},{"_id":"source/_posts2/SpringBoot/SpringBoot 参数校验.md","hash":"40ce510990b8514ec1b36e6486a30975a3b3df64","modified":1586680109546},{"_id":"source/_posts2/SpringBoot/SpringBoot 自定义注解.md","hash":"a37086d297cbdaa3d8f5662b1049082253770855","modified":1586680109547},{"_id":"source/_posts2/前端/HTML 面试题.md","hash":"1c8e4b75e5ba706f58cf237490529b0c39c5a0c4","modified":1586680109547},{"_id":"source/_posts2/前端/CSS 面试题.md","hash":"9da4c7e491f948939322793c80adf5ebf1ca7971","modified":1586680109547},{"_id":"source/_posts2/前端/JS 面试题.md","hash":"91445a1ce12b1f422c63e2d999ee80993e97ee5c","modified":1586680109547},{"_id":"source/_posts2/前端/微信开发笔记.md","hash":"a2655495ca71a61ecb62bc9e1c8f2d13ee8a16b4","modified":1586680109548},{"_id":"source/_posts2/工具/Hexo 笔记.md","hash":"881fd12e7c0288e4fdb0b6b52d3aa88591c4d898","modified":1586680109549},{"_id":"source/_posts2/工具/IntelliJ IDEA 笔记.md","hash":"6531b8db36cd9de38158c997589bc09660c45cd0","modified":1586680109557},{"_id":"source/_posts2/工具/Sublime Text3 笔记.md","hash":"2d9cd524776bebd5435dc5799f3502292c6f9d61","modified":1586680109563},{"_id":"source/_posts2/数据库/MySQL 笔记.md","hash":"90890288e2f1686aa6dfeed805e664cd534dfc47","modified":1586680109564},{"_id":"source/_posts2/数据库/SQL 训练题.md","hash":"02b610ef42320245c53a83537d8feb6e23a978f5","modified":1586680109564},{"_id":"source/_posts2/数据库/事务.md","hash":"ef89b66c1ffb114198ed6a50c41afba143d04c0b","modified":1586680109568},{"_id":"source/_posts2/数据库/常用字段定义.md","hash":"35f4d886c2a3ae772f989634a7c9dea0243efb7d","modified":1586680109586},{"_id":"source/_posts2/数据库/数据库优化.md","hash":"0163cb2889f2b4acdb56a154083c144a17b21f36","modified":1586680109586},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1586680109599},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"9e8bd7179467eef9a338ca12c90e24208df7c621","modified":1586680109600},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"6b534801486f6baa989bd351915a9156b838b777","modified":1586680109600},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"b7db191b7ad066b1f3f9c34d8a4b77e1ee815215","modified":1586680109600},{"_id":"themes/cactus/layout/_partial/mathjax.ejs","hash":"0cea4696db8fcd4b18f18f6a580f1108f76abab8","modified":1586680109600},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1586680109600},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"83d912956b00537e0b20a9905f14885ff3899ed4","modified":1586680109602},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1586680109602},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1586680109602},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1586680109605},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2c8751d132e62f5f068dc3a184d160670737ba1f","modified":1586680109605},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1586680109625},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1586680109629},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1586680109629},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1586680109629},{"_id":"themes/cactus/source/css/style.styl","hash":"299aa7d490249e859a0a2f8e41d78e06ab78fe88","modified":1586680109630},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1586680109631},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1586680109630},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1586680109631},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1586680109636},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1586680109636},{"_id":"source/_posts/HTTPS 教程/SSL 协议/001.webp","hash":"63891dc6ac32717fc7ad5c912b0725eb7bd8f88f","modified":1586680109197},{"_id":"source/_posts/JavaWorld/Doubly-linked lists and circular-linked lists, and their algorithms/001.jpg","hash":"8e9bae9642490813117c99cee1491f31976a65ef","modified":1587195172073},{"_id":"source/_posts/JavaWorld/Doubly-linked lists and circular-linked lists, and their algorithms/002.jpg","hash":"200a44b81115056aaf5e26ea0e5b2be5742b9e1f","modified":1587197037938},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm/001.jpg","hash":"e0afa24f2cff7d6009594e2f78f1f691dca6b0e5","modified":1586868079838},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm/004.jpg","hash":"7c486257efd83a1fbdb9dc36a567b6df4b08ba3c","modified":1587193548064},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm/005.jpg","hash":"bfff0eaa33b8cdfa89c05ed3f7c4ba8171e08de3","modified":1587193548064},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms/001.jpg","hash":"ce60a8df76bd404411f04af6677ebdc72f9a8a85","modified":1587193548067},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm/003.jpg","hash":"143ce40e6a006cdf5bb8b9f074fed40097f7e7d0","modified":1586871425136},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms/003.jpg","hash":"8209af9bf3f11b44b0d272a14aa4efa4c1231cc1","modified":1587193548069},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms/002.jpg","hash":"d093a93b6c355dc52daf5583f3b3db7052f0a5c5","modified":1587193548068},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms/005.jpg","hash":"536818ab15e0dbbd114be61671471b02413f30f1","modified":1587193548070},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms/004.jpg","hash":"35aba7ab69702eb7c85e7e1a81e139a79f8904b1","modified":1587193548069},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC/001.jpg","hash":"82d3ee7b4c486d231efc52eebaf0244195360065","modified":1588318955224},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC/002.jpg","hash":"00b89169ab9e0243410937e08a771b15288cc083","modified":1588318955224},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC/003.jpg","hash":"340d93900ab9a2615aafef8ed5f79cf4733e82ee","modified":1588318955225},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC/004.jpg","hash":"ab9959ced4c51f6e38bfc4ed4244928c7b155700","modified":1588318955225},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC/005.jpg","hash":"10a7a2faf72286783e66908f08754e941b70294c","modified":1588318955225},{"_id":"source/_posts/JavaWorld/Spring Series Part 3, Spring WebFlux/001.jpg","hash":"a844c5a55ad60be10f2ff9d21a436ad6b7e159b7","modified":1588318955227},{"_id":"source/_posts/JavaWorld/Spring Series Part 3, Spring WebFlux/002.jpg","hash":"0371fa8d249fd0e224b278d85b819c5a42dfb140","modified":1588318955227},{"_id":"source/_posts/JavaWorld/Spring Series Part 3, Spring WebFlux/003.jpg","hash":"e9d74f21d052c8b63d4c6dcb50a338ec640c5e30","modified":1588318955228},{"_id":"source/_posts/JavaWorld/What is a data structure and how to write your first algorithm in Java/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1586871449325},{"_id":"source/_posts/其它/黑苹果使用指南/001.webp","hash":"71f41f57883e42bc4f35883e2d7b4f6481abde29","modified":1586680109314},{"_id":"source/_posts/其它/黑苹果使用指南/002.jpg","hash":"874a02f7cd833899923c48a6a4b26a4c5138eade","modified":1586680109315},{"_id":"source/_posts/其它/黑苹果使用指南/003.jpg","hash":"b32f1838da943f5ac3ae2a9e7ec1338e11fbd8b1","modified":1586680109315},{"_id":"source/_posts/其它/黑苹果使用指南/004.jpg","hash":"67f94339a49cacb91121c69922034e8770292418","modified":1586680109316},{"_id":"source/_posts/其它/黑苹果使用指南/005.jpg","hash":"87e015f85643f7e9fe24b66969f72d52b544fb7c","modified":1586680109316},{"_id":"source/_posts/其它/黑苹果使用指南/006.png","hash":"7adb01077d47f9a55b0842559860b9aef31ebbd7","modified":1586680109317},{"_id":"source/_posts/学习观/第01期：何为学习/001.png","hash":"d59a04c183e867d7055c2eaf9beaa478a9c6a998","modified":1586680109324},{"_id":"source/_posts/学习观/第02期：学习步骤/001.jpeg","hash":"b13136e7bc67993298feb9f2c13f37cd2c07735c","modified":1586680109325},{"_id":"source/_posts/学习观/第03期：学习误区/001.png","hash":"47c7bc263a65a13fbb9f8444bc3d18f5be73dc9e","modified":1586680109327},{"_id":"source/_posts/学习观/第04期：分而治之/002.png","hash":"abd87360f5850dad97621c53b25707509a6af9ca","modified":1586680109331},{"_id":"source/_posts/学习观/第04期：分而治之/003.png","hash":"d6a6f386e7cba4a73b7b9c99b7c396b4ab346bfe","modified":1586680109333},{"_id":"source/_posts/学习观/第04期：分而治之/001.png","hash":"e9fedc675022d960f9a9a1d600cf8c36d72b750c","modified":1586680109330},{"_id":"source/_posts/学习观/第05期：思维导图/001.png","hash":"25bcabbb54ac4206ec5a0021f2039b9eea45f4c6","modified":1586680109337},{"_id":"source/_posts/学习观/第05期：思维导图/002.png","hash":"714291ee49b453d3560fc4a290767ee97a755b6d","modified":1586680109340},{"_id":"source/_posts/学习观/第05期：思维导图/003.png","hash":"f1eb1f00e2836bc8836a57df282181cdeab491df","modified":1586680109343},{"_id":"source/_posts/学习观/第06期：导图步骤/001.jpeg","hash":"a283acc5a73af3581caf2315608e324078fa3edf","modified":1586680109345},{"_id":"source/_posts/学习观/第07期：费曼技巧/001.png","hash":"3f0090b496dd25cb5d480f6346c05aa97e633860","modified":1586680109346},{"_id":"source/_posts/学习观/第07期：费曼技巧/002.png","hash":"8f9e7d4b13bd8fd71075d8dac5a71c7dfdebc377","modified":1586680109347},{"_id":"source/_posts/学习观/第07期：费曼技巧/003.png","hash":"dc96350162fdcfc334b1c4b72afece5ab4826c8d","modified":1586680109348},{"_id":"source/_posts/学习观/第07期：费曼技巧/004.png","hash":"08b1d6b10210a4eb6d8293316f04c0a0896247be","modified":1586680109348},{"_id":"source/_posts2/Java/Jenkins/001.png","hash":"8b14f4f932817a0191c692a53c7c84b11f1a810b","modified":1586680109406},{"_id":"source/_posts2/Java/Jenkins/002.png","hash":"91673dd9f99c7ad3b842d62cb63587a5ca9c1bc5","modified":1586680109407},{"_id":"source/_posts2/Java/Jenkins/003.jpg","hash":"a44bc7202ba5557bee92edb39e2a95e82e5b0fc6","modified":1586680109408},{"_id":"source/_posts2/Java/Jenkins/004.jpg","hash":"ac0d9a9ec1c01445b5b1e9b78e98445c0847fdc5","modified":1586680109409},{"_id":"source/_posts2/Java/Jenkins/005.jpg","hash":"703b6febc2317152b80903606119662063be57c4","modified":1586680109411},{"_id":"source/_posts2/Java/SpringBoot/001.png","hash":"a9e91e5e31ddd79ef0eca4aa197fcf037bae073a","modified":1586680109489},{"_id":"source/_posts2/Java/消息队列/001.png","hash":"f0bfbec95f9679fde46e43127ead7dc095a97f8e","modified":1586680109499},{"_id":"source/_posts2/Java/消息队列/003.png","hash":"ba60685fc2add9dd784005658fc1d88f601dba5b","modified":1586680109501},{"_id":"source/_posts2/Java/消息队列/004.png","hash":"dde92683a5816517bb966d0082285e27931bd321","modified":1586680109502},{"_id":"source/_posts2/Java/消息队列/002.png","hash":"daaf98764b759713897d0748d0420aeaa72585ce","modified":1586680109500},{"_id":"source/_posts2/Java 反射/1. 什么是反射/001.png","hash":"0b42d2255c11b33a077780cd1622fe0d3505ec6b","modified":1586680109387},{"_id":"source/_posts2/Python/Matplotlib 笔记/02.png","hash":"93312594b6f9fc3f74096f079ca164bc8ba3a688","modified":1586680109520},{"_id":"source/_posts2/前端/微信开发笔记/001.png","hash":"1a12edc620054cd357f3ea12dcc6379791a7c828","modified":1586680109548},{"_id":"source/_posts2/工具/Hexo 笔记/01.png","hash":"4d19f79bbb461ef844bfcb2a7c69837d378d2478","modified":1586680109549},{"_id":"source/_posts2/工具/Hexo 笔记/02.png","hash":"2f216a3e7f19ea0a16d5608674db23a621220752","modified":1586680109552},{"_id":"source/_posts2/工具/Hexo 笔记/03.png","hash":"5dcaa67a191d1ebbe3a92367be8f85d8d71f310f","modified":1586680109555},{"_id":"source/_posts2/工具/Hexo 笔记/04.png","hash":"9bbcbc2e728af63d09f8fcbfb31bd744169a9ee8","modified":1586680109556},{"_id":"source/_posts2/工具/Hexo 笔记/05.png","hash":"adddbfa3234b227c13677a7df92b287fcf56b7e3","modified":1586680109557},{"_id":"source/_posts2/工具/Hexo 笔记/06.png","hash":"6cc9565f0a95f3eed9506e0d669d36a3cf65a8e1","modified":1586680109557},{"_id":"source/_posts2/数据库/事务/006.png","hash":"f0ce63920c8a3e845156d6e85f0d0772d00da2b0","modified":1586680109584},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1586680109601},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1586680109601},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1586680109601},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1586680109601},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1586680109601},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1586680109601},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1586680109602},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1586680109602},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1586680109604},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1586680109604},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1586680109605},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1586680109605},{"_id":"themes/cactus/source/css/_custom/custom.styl","hash":"c633b5c9b4fa1264d41f5a91d565d6a21d18a152","modified":1586680109605},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1586680109606},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1586680109606},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1586680109606},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1586680109606},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1586680109607},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1586680109607},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1586680109607},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1586680109607},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1586680109608},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1586680109607},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1586680109608},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1586680109608},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1586680109608},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1586680109609},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1586680109608},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1586680109608},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1586680109609},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1586680109609},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1586680109609},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1586680109610},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1586680109610},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1586680109610},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1586680109610},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1586680109610},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1586680109610},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1586680109610},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1586680109613},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1586680109614},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1586680109614},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1586680109614},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1586680109614},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1586680109615},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1586680109615},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1586680109615},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1586680109615},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1586680109616},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1586680109616},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1586680109616},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1586680109616},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1586680109617},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1586680109617},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1586680109617},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1586680109617},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1586680109618},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1586680109618},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1586680109618},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1586680109619},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1586680109619},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1586680109619},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1586680109619},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1586680109619},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1586680109620},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1586680109620},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1586680109620},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1586680109621},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1586680109621},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1586680109621},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1586680109621},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1586680109621},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1586680109622},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1586680109622},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1586680109622},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1586680109622},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1586680109623},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1586680109623},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1586680109623},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1586680109623},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1586680109624},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1586680109624},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1586680109624},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1586680109624},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1586680109625},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1586680109625},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1586680109626},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1586680109626},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1586680109626},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1586680109626},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1586680109626},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"b64021d680f856d24dc17bc8f53674bfe2e241e4","modified":1586680109627},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1586680109627},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1586680109627},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1586680109628},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1586680109629},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1586680109628},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1586680109637},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1586680109724},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1586680109727},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1586680109724},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1586680109727},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1586680109730},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1586680109730},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1586680109733},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1586680109734},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1586680109736},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1586680109736},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1586680109738},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1586680109738},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1586680109738},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm/002.jpg","hash":"f6eed268cc86968b2f8e51dc548f62adac8951c6","modified":1586868810827},{"_id":"source/_posts/JavaWorld/Spring Series Part 3, Spring WebFlux/004.jpg","hash":"3abbb3fd3f83260238e322b4e5d97e1b2752c4ba","modified":1588318955229},{"_id":"source/_posts/JavaWorld/What is a data structure and how to write your first algorithm in Java/001.jpg","hash":"17d3e565bd770de60952d343a5907f12cbdba35b","modified":1586680109200},{"_id":"source/_posts/JavaWorld/What is a data structure and how to write your first algorithm in Java/002.jpg","hash":"0281d1823780c5d5a67c64e8f823a5090e66d946","modified":1586680109200},{"_id":"source/_posts/JavaWorld/What is a data structure and how to write your first algorithm in Java/003.jpg","hash":"9f311776e10d3dcd841c6ecb019d70f9a99da152","modified":1586695838238},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/006.png","hash":"732ccc438dfad02f1e08a5e4c23f3a8e8ee8538c","modified":1586680109261},{"_id":"source/_posts/学习观/第03期：学习误区/002.png","hash":"557894218749d50a947a1f14feb358811020eeeb","modified":1586680109328},{"_id":"source/_posts/深入浅出JVM/Questions/001.png","hash":"feda8185d3f1d1bcedb362895921bc46703e2ede","modified":1586680109377},{"_id":"source/_posts2/Java/Redis/001.png","hash":"8723343dc09fc27a1d386995b86524a05b248154","modified":1586680109414},{"_id":"source/_posts2/Java/Redis/006.png","hash":"073c9403eb50bce730c8af38c3305cb3466b1b6b","modified":1586680109430},{"_id":"source/_posts2/Java/Redis/010.png","hash":"30943dbce3c8d09d9f0d063a793efe3da3e16973","modified":1586680109470},{"_id":"source/_posts2/Java/分布式/001.png","hash":"69afe4235e301f6bb28005cf7f9843ea37fb55f1","modified":1586680109493},{"_id":"source/_posts2/Java/分布式/002.png","hash":"ad03d0aa7405d314c2993958f51969a9783fe61c","modified":1586680109497},{"_id":"source/_posts2/Java/集合/001.png","hash":"037abacec83fcbbc29b45069aeb21a5acebeef2b","modified":1586680109511},{"_id":"source/_posts2/Java/集合/002.png","hash":"dfa63489d5771ba5297946761d37d96a8f945aae","modified":1586680109514},{"_id":"source/_posts2/Java 反射/1. 什么是反射/002.png","hash":"cd26185e0e151a1ab48fbefeed2264b86ffac150","modified":1586680109390},{"_id":"source/_posts2/Java 反射/1. 什么是反射/003.png","hash":"9d5eec03057446828d2ddcc82df63321ed62f153","modified":1586680109394},{"_id":"source/_posts2/SpringBoot/SpringBoot 内置注解/005.png","hash":"41bb7203d313c9e3d5688ef72c26da65d931ef9d","modified":1586680109546},{"_id":"source/_posts2/工具/IntelliJ IDEA 笔记/02.png","hash":"b9964ad35a1e21dbf942f153475289937f598616","modified":1586680109563},{"_id":"source/_posts2/数据库/事务/001.png","hash":"3dc10ce4ff8142b8983e33f212c1dc20359769f2","modified":1586680109570},{"_id":"source/_posts2/数据库/事务/004.png","hash":"fd55e9290f5af3aa4fa8587f88783f792a2e1bcb","modified":1586680109580},{"_id":"source/_posts2/数据库/事务/003.png","hash":"dbbf7cbe06490d525bc6d02f925f8e117698c428","modified":1586680109577},{"_id":"source/_posts2/数据库/事务/005.png","hash":"08d47c76c7d82a944b51ed2351cb06220827a1f6","modified":1586680109581},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1586680109636},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1586680109671},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1586680109719},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1586680109723},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1586680109725},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1586680109726},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1586680109729},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1586680109730},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1586680109732},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1586680109733},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1586680109734},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1586680109735},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1586680109737},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1586680109738},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/023.png","hash":"f2fe528fecc9958f5d3cf8a1517457f7fd62b83b","modified":1586680109310},{"_id":"source/_posts2/Java/Redis/003.png","hash":"bfbe1c3ebf3038c9ed7d6eeb85c7a5b1a40da2de","modified":1586680109422},{"_id":"source/_posts2/Java/Redis/004.png","hash":"73c9b253ab83625ee27daa8f37bd65773076309f","modified":1586680109426},{"_id":"source/_posts2/数据库/SQL 训练题/001.png","hash":"85ebc68bdb486ed0e0d61d5c290866dca8bcdb7b","modified":1586680109568},{"_id":"source/_posts2/数据库/事务/007.png","hash":"664c37a970f08fe9f8b7f6990265f1d3a9a9c7cb","modified":1586680109586},{"_id":"source/_posts2/数据库/数据库优化/001.png","hash":"efaa85fd7e14586dbf743d5520ef5dd12c8774d5","modified":1586680109590},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"dc726537928fc0d7703e73c0a5e4b82ad1731d59","modified":1586680109628},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1586680109628},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1586680109637},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1586680109655},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1586680109659},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1586680109660},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1586680109659},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1586680109670},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1586680109672},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1586680109671},{"_id":"source/_posts2/Java/Redis/005.png","hash":"172aa1ed18c7b68ef1e26cb655224d94b2614ac0","modified":1586680109429},{"_id":"source/_posts2/SpringBoot/SpringBoot 内置注解/001.png","hash":"fddd35d9465770283f12a065fd0c0720a9364207","modified":1586680109531},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1586680109653},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1586680109649},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1586680109670},{"_id":"source/_posts2/Java/网络/001.png","hash":"25cb1337d166e3deac3cda3ef9bc65d12b06b3b8","modified":1586680109506},{"_id":"source/_posts2/SpringBoot/SpringBoot 内置注解/002.png","hash":"c06618ebff08edcc8e6c3e6ab1649477184b3535","modified":1586680109536},{"_id":"source/_posts2/SpringBoot/SpringBoot 内置注解/003.png","hash":"faf228081a1c56a056cb67f1b6e4116a3858c977","modified":1586680109540},{"_id":"source/_posts2/SpringBoot/SpringBoot 内置注解/004.png","hash":"6406eff6c9d5ee1705959eced9b54afb9ec4ca19","modified":1586680109545},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1586680109654},{"_id":"source/_posts2/Java/Redis/007.png","hash":"f7e00e986c11f1b0162bca5c1ad71070c5cec378","modified":1586680109435},{"_id":"source/_posts2/数据库/事务/002.png","hash":"8852e9e268685191e65f8e3da82620597521907e","modified":1586680109576},{"_id":"source/_posts2/数据库/数据库优化/002.png","hash":"4baf68e37c2d73a5e3fba762f3e90d93366b55e9","modified":1586680109594},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1586680109640},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1586680109658},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1586680109700},{"_id":"source/_posts2/Python/Matplotlib 笔记/01.png","hash":"e5b0acd5a85660ef1375c58614b25d0b21124160","modified":1586680109519},{"_id":"source/_posts2/工具/IntelliJ IDEA 笔记/01.png","hash":"3f86b70959d70ac76d6af8713662d11cc84c6961","modified":1586680109559},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1586680109669},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1586680109689},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1586680109690},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/008.png","hash":"e445b864edc5ce8874f8b17df5953bcaa18d0633","modified":1586680109294},{"_id":"source/_posts2/Java/Redis/002.png","hash":"08689415d74993d70517631e86330a6d30bde62d","modified":1586680109417},{"_id":"source/_posts2/Java/Redis/012.png","hash":"8bfbdcd1c3fd8304c8f10c3d4af76664949b4ade","modified":1586680109484},{"_id":"source/_posts2/Java/Redis/011.png","hash":"991ad0709cd2edb6141f16ea93f3bbb086b80dd5","modified":1586680109476},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1586680109701},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/021.png","hash":"f144a21ef9211ce93c8c0bb13ac67c5b270e5d0c","modified":1586680109302},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/003.png","hash":"3524cbc87d30d4efb622218ac7022326f80a73cd","modified":1586680109232},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1586680109664},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1586680109687},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1586680109699},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1586680109691},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1586680109679},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1586680109715},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/001.png","hash":"f0e18e7265fbdd9102126f08fafee54aaca7a723","modified":1586680109210},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/004.png","hash":"727f37ecb00ab88483d762d11287589d9c7da4b5","modified":1586680109238},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/005.png","hash":"bec40aad8d1be794f1f700fceff45db883fa123e","modified":1586680109246},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/007.png","hash":"43e7abf39f893316706fc7c88099aaa41611e652","modified":1586680109285},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1586680109676},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1586680109681},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1586680109682},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/022.png","hash":"d216b4aa95f409918a108720d1325dd84eb7a6f3","modified":1586680109308},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/002.png","hash":"29235fcb6d9ebb1230592ed80409c182f6583274","modified":1586680109221},{"_id":"source/_posts2/Java/Redis/009.png","hash":"e95426e956db8d438b4004ac311be081d26b951d","modified":1586680109462},{"_id":"source/_posts2/Java/Redis/008.png","hash":"33c35b0fdff4b7b0fe9ae27da29935862e2dbe3d","modified":1586680109445},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1586680109668},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1586680109647},{"_id":"source/_posts/深入浅出JVM/1. 什么是JVM/001.png","hash":"53f52e3f264fbb178a7f84665f3819f407136c68","modified":1586680109360}],"Category":[{"name":"Interview","_id":"ck9nw3m2s0007m33p1x7nki6m"},{"name":"HTTPS 教程","_id":"ck9nw3m33000cm33pb46c1qva"},{"name":"Java 8 系列","_id":"ck9nw3m3c000om33p59hzbnvg"},{"name":"JavaWorld","_id":"ck9nw3m3m000zm33pft2xambs"},{"name":"Linux 系列","_id":"ck9nw3m3z001bm33pd94nw1rr"},{"name":"MySQL教程","_id":"ck9nw3m4a001pm33p01k01el5"},{"name":"MySQL 性能调优","_id":"ck9nw3m4m0026m33pz0fcmqlb"},{"name":"Nginx 教程","_id":"ck9nw3m690049m33popfolwfp"},{"name":"Redis 教程","_id":"ck9nw3m6y004zm33pb0lncjni"},{"name":"Spring Tutorial","_id":"ck9nw3m740057m33pozekb6ly"},{"name":"业务汇总","_id":"ck9nw3m77005em33pv4gb2k5e"},{"name":"其它","_id":"ck9nw3m7d005lm33pnxitgdth"},{"name":"多线程高并发编程","_id":"ck9nw3m8f0072m33pl2g02vvh"},{"name":"单点登录","_id":"ck9nw3m8k0079m33pe42afrd7"},{"name":"学习观","_id":"ck9nw3m9r009nm33p8jtp4akw"},{"name":"正则表达式","_id":"ck9nw3ma500afm33p015917hx"},{"name":"深入浅出JVM","_id":"ck9nw3maa00akm33pd2dvsoht"},{"name":"Java Virtual Machine Specification","_id":"ck9nw3maf00azm33pkxkde9p4"},{"name":"绘图插件 mermaid","_id":"ck9nw3mah00b4m33pc1i0oph0"}],"Data":[{"_id":"projects","data":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}],"Page":[{"title":"Categories","date":"2019-08-26T17:45:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2019-08-27 01:45:40\ntype: categories\n---\n","updated":"2020-04-12T08:28:29.595Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck9nw3lzb0001m33p44a9d059","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"about","date":"2019-08-26T17:47:32.000Z","_content":"\nHi, I’m a theme for the Hexo blogging framework. I’m particularly great for a personal web page with a simple blog.\n\n![](https://probberechts.github.io/hexo-theme-cactus/cactus-dark/public/assets/cactus.png)\n\nThese are my best features:\n\n- I am fully responsive\n- I support Disqus integration\n- I support Google Analytics\n- I have a configurable navigation menu\n- I support several code highlighting schemes\n- I have Font Awesome icons\n- I can live for months without \n\nClone or fork my  repo if you like me!","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-08-27 01:47:32\n---\n\nHi, I’m a theme for the Hexo blogging framework. I’m particularly great for a personal web page with a simple blog.\n\n![](https://probberechts.github.io/hexo-theme-cactus/cactus-dark/public/assets/cactus.png)\n\nThese are my best features:\n\n- I am fully responsive\n- I support Disqus integration\n- I support Google Analytics\n- I have a configurable navigation menu\n- I support several code highlighting schemes\n- I have Font Awesome icons\n- I can live for months without \n\nClone or fork my  repo if you like me!","updated":"2020-04-12T08:28:29.594Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck9nw3lzd0002m33pfrgim9n6","content":"<p>Hi, I’m a theme for the Hexo blogging framework. I’m particularly great for a personal web page with a simple blog.</p>\n<p><img src=\"https://probberechts.github.io/hexo-theme-cactus/cactus-dark/public/assets/cactus.png\" alt=\"\"></p>\n<p>These are my best features:</p>\n<ul>\n<li>I am fully responsive</li>\n<li>I support Disqus integration</li>\n<li>I support Google Analytics</li>\n<li>I have a configurable navigation menu</li>\n<li>I support several code highlighting schemes</li>\n<li>I have Font Awesome icons</li>\n<li>I can live for months without </li>\n</ul>\n<p>Clone or fork my  repo if you like me!</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Hi, I’m a theme for the Hexo blogging framework. I’m particularly great for a personal web page with a simple blog.</p>\n<p><img src=\"https://probberechts.github.io/hexo-theme-cactus/cactus-dark/public/assets/cactus.png\" alt=\"\"></p>\n<p>These are my best features:</p>\n<ul>\n<li>I am fully responsive</li>\n<li>I support Disqus integration</li>\n<li>I support Google Analytics</li>\n<li>I have a configurable navigation menu</li>\n<li>I support several code highlighting schemes</li>\n<li>I have Font Awesome icons</li>\n<li>I can live for months without </li>\n</ul>\n<p>Clone or fork my  repo if you like me!</p>\n"},{"type":"search","_content":"","source":"search/index.md","raw":"---\ntype: search\n---\n","date":"2020-04-12T08:28:32.414Z","updated":"2020-04-12T08:28:29.595Z","path":"search/index.html","title":"","comments":1,"layout":"page","_id":"ck9nw3lzf0003m33p47jn3sod","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Tags","date":"2019-08-26T17:51:47.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2019-08-27 01:51:47\ntype: tags\n---\n","updated":"2020-04-12T08:28:29.595Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck9nw3lzi0004m33pj5xd0dhr","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""}],"Post":[{"date":"2019-09-02T16:00:00.000Z","title":"corn表达式","_content":"\n## 格式\ncron 表达式的格式为`秒 分钟 小时 日期 月份 星期 年份（可选）`。\n\n|字段|允许值|允许的特殊字符|\n|:-|:-|:-|\n|秒|0-59|, - * /|\n|分钟|0-59|, - * /|\n|小时|0-23|, - * /|\n|日期|1-31|, - * ? / L W C\n|月份|1-12或者JAN-DEC|, - * /\n|星期|1-7或者SUN-SAT|, - * ? / L C #\n|年份（可为空）|留空, 1970-2099|, - * /|\n\n## 秒\n允许值范围：0~59，不允许为空值，若值不合法，调度器将抛出`SchedulerException`异常。\n\n- `*`代表每隔1秒钟触发。\n- `,`代表在指定的秒数触发，比如`0,15,45`代表0秒、15秒和45秒时触发任务。\n- `-`代表在指定的范围内触发，比如`25-45`代表从25秒开始触发到45秒结束触发，每隔1秒触发1次。\n- `/`代表触发步进（step），`/`前面的值代表初始值（`*`等同`0`），后面的值代表偏移量，比如`0/20`或者`*/20`代表从0秒钟开始，每隔20秒钟触发1次，即0秒触发1次，20秒触发1次，40秒触发1次；`5/20`代表5秒触发1次，25秒触发1次，45秒触发1次；`10-45/20`代表在[10,45]内步进20秒命中的时间点触发，即10秒触发1次，30秒触发1次。\n\n## 分钟\n允许值范围：0~59，不允许为空值，若值不合法，调度器将抛出`SchedulerException`异常。\n\n- `*`代表每隔1分钟触发。\n- `,`代表在指定的分钟触发，比如`10,20,40`\"代表10分钟、20分钟和40分钟时触发任务。\n- `-`代表在指定的范围内触发，比如`5-30`代表从5分钟开始触发到30分钟结束触发，每隔1分钟触发。\n- `/`代表触发步进（step），`/`前面的值代表初始值（`*`等同`0`），后面的值代表偏移量，比如`0/25`或者`*/25`代表从0分钟开始，每隔25分钟触发1次，即0分钟触发1次，第25分钟触发1次，第50分钟触发1次；`5/25`代表5分钟触发1次，30分钟触发1次，55分钟触发1次；`10-45/20`代表在[10,45]内步进20分钟命中的时间点触发，即10分钟触发1次，30分钟触发1次。\n\n## 小时\n允许值范围：0~23，不允许为空值，若值不合法，调度器将抛出`SchedulerException`异常。\n\n- `*`代表每隔1小时触发。\n- `,`代表在指定的时间点触发，比如\"10,20,23\"代表10点钟、20点钟和23点触发任务。\n- `-`代表在指定的时间段内触发，比如\"20-23\"代表从20点开始触发到23点结束触发，每隔1小时触发。\n- `/`代表触发步进（step），`/`前面的值代表初始值（`*`等同`0`），后面的值代表偏移量，比如`0/1`或者`*/1`代表从0点开始触发，每隔1小时触发1次；`1/2`代表从1点开始触发，以后每隔2小时触发一次。\n\n## 月份\n允许值范围：1~12 (JAN-DEC)，不允许为空值，若值不合法，调度器将抛出`SchedulerException`异常。\n\n- `*`代表每个月都触发。\n- `,`代表在指定的月份触发，比如\"1,6,12\"代表1月份、6月份和12月份触发任务。\n- `-`代表在指定的月份范围内触发，比如\"1-6\"代表从1月份开始触发到6月份结束触发，每隔1个月触发。\n- `/`代表触发步进（step），`/`前面的值代表初始值（`*`等同`1`），后面的值代表偏移量，比如`1/2`或者`*/2`代表从1月份开始触发，每隔2个月触发1次；`6/6`代表从6月份开始触发，以后每隔6个月触发一次；`1-6/12`表达式意味着每年1月份触发。\n\n## 星期\n允许值范围：1~7 (SUN-SAT)，1代表星期天（一星期的第一天），以此类推，7代表星期六（一星期的最后一天），不允许为空值，若值不合法，调度器将抛出`SchedulerException`异常。\n\n- `*`代表每星期都触发。\n- `?`与`日期`互斥，即意味着若明确指定`日期`触发，则表示`星期`无意义，以免引起冲突和混乱。\n- `,`代表在指定的星期约定触发，比如`1,3,5`代表星期天、星期二和星期四触发。\n- `-`代表在指定的星期范围内触发，比如`2-4`代表从星期一开始触发到星期三结束触发，每隔1天触发。\n- `/`代表触发步进（step），`/`前面的值代表初始值（`*`等同`1`），后面的值代表偏移量，比如`1/3`或者`*/3`代表从星期天开始触发，每隔3天触发1次；`1-5/2`表达式意味着在[1,5]范围内，每隔2天触发，即星期天、星期二、星期四触发。\n\n## 年份\n\n## 特殊字符\n\n## 常用例子\n\n1. 每天凌晨4点执行：`0 0 4 * * ?`\n1. 每周一凌晨4点执行：`0 0 4 * * ?`\n1. 每月初晨4点执行：\n","source":"_posts/corn表达式.md","raw":"---\ndate: 2019-09-03\ntitle: corn表达式\n---\n\n## 格式\ncron 表达式的格式为`秒 分钟 小时 日期 月份 星期 年份（可选）`。\n\n|字段|允许值|允许的特殊字符|\n|:-|:-|:-|\n|秒|0-59|, - * /|\n|分钟|0-59|, - * /|\n|小时|0-23|, - * /|\n|日期|1-31|, - * ? / L W C\n|月份|1-12或者JAN-DEC|, - * /\n|星期|1-7或者SUN-SAT|, - * ? / L C #\n|年份（可为空）|留空, 1970-2099|, - * /|\n\n## 秒\n允许值范围：0~59，不允许为空值，若值不合法，调度器将抛出`SchedulerException`异常。\n\n- `*`代表每隔1秒钟触发。\n- `,`代表在指定的秒数触发，比如`0,15,45`代表0秒、15秒和45秒时触发任务。\n- `-`代表在指定的范围内触发，比如`25-45`代表从25秒开始触发到45秒结束触发，每隔1秒触发1次。\n- `/`代表触发步进（step），`/`前面的值代表初始值（`*`等同`0`），后面的值代表偏移量，比如`0/20`或者`*/20`代表从0秒钟开始，每隔20秒钟触发1次，即0秒触发1次，20秒触发1次，40秒触发1次；`5/20`代表5秒触发1次，25秒触发1次，45秒触发1次；`10-45/20`代表在[10,45]内步进20秒命中的时间点触发，即10秒触发1次，30秒触发1次。\n\n## 分钟\n允许值范围：0~59，不允许为空值，若值不合法，调度器将抛出`SchedulerException`异常。\n\n- `*`代表每隔1分钟触发。\n- `,`代表在指定的分钟触发，比如`10,20,40`\"代表10分钟、20分钟和40分钟时触发任务。\n- `-`代表在指定的范围内触发，比如`5-30`代表从5分钟开始触发到30分钟结束触发，每隔1分钟触发。\n- `/`代表触发步进（step），`/`前面的值代表初始值（`*`等同`0`），后面的值代表偏移量，比如`0/25`或者`*/25`代表从0分钟开始，每隔25分钟触发1次，即0分钟触发1次，第25分钟触发1次，第50分钟触发1次；`5/25`代表5分钟触发1次，30分钟触发1次，55分钟触发1次；`10-45/20`代表在[10,45]内步进20分钟命中的时间点触发，即10分钟触发1次，30分钟触发1次。\n\n## 小时\n允许值范围：0~23，不允许为空值，若值不合法，调度器将抛出`SchedulerException`异常。\n\n- `*`代表每隔1小时触发。\n- `,`代表在指定的时间点触发，比如\"10,20,23\"代表10点钟、20点钟和23点触发任务。\n- `-`代表在指定的时间段内触发，比如\"20-23\"代表从20点开始触发到23点结束触发，每隔1小时触发。\n- `/`代表触发步进（step），`/`前面的值代表初始值（`*`等同`0`），后面的值代表偏移量，比如`0/1`或者`*/1`代表从0点开始触发，每隔1小时触发1次；`1/2`代表从1点开始触发，以后每隔2小时触发一次。\n\n## 月份\n允许值范围：1~12 (JAN-DEC)，不允许为空值，若值不合法，调度器将抛出`SchedulerException`异常。\n\n- `*`代表每个月都触发。\n- `,`代表在指定的月份触发，比如\"1,6,12\"代表1月份、6月份和12月份触发任务。\n- `-`代表在指定的月份范围内触发，比如\"1-6\"代表从1月份开始触发到6月份结束触发，每隔1个月触发。\n- `/`代表触发步进（step），`/`前面的值代表初始值（`*`等同`1`），后面的值代表偏移量，比如`1/2`或者`*/2`代表从1月份开始触发，每隔2个月触发1次；`6/6`代表从6月份开始触发，以后每隔6个月触发一次；`1-6/12`表达式意味着每年1月份触发。\n\n## 星期\n允许值范围：1~7 (SUN-SAT)，1代表星期天（一星期的第一天），以此类推，7代表星期六（一星期的最后一天），不允许为空值，若值不合法，调度器将抛出`SchedulerException`异常。\n\n- `*`代表每星期都触发。\n- `?`与`日期`互斥，即意味着若明确指定`日期`触发，则表示`星期`无意义，以免引起冲突和混乱。\n- `,`代表在指定的星期约定触发，比如`1,3,5`代表星期天、星期二和星期四触发。\n- `-`代表在指定的星期范围内触发，比如`2-4`代表从星期一开始触发到星期三结束触发，每隔1天触发。\n- `/`代表触发步进（step），`/`前面的值代表初始值（`*`等同`1`），后面的值代表偏移量，比如`1/3`或者`*/3`代表从星期天开始触发，每隔3天触发1次；`1-5/2`表达式意味着在[1,5]范围内，每隔2天触发，即星期天、星期二、星期四触发。\n\n## 年份\n\n## 特殊字符\n\n## 常用例子\n\n1. 每天凌晨4点执行：`0 0 4 * * ?`\n1. 每周一凌晨4点执行：`0 0 4 * * ?`\n1. 每月初晨4点执行：\n","slug":"corn表达式","published":1,"updated":"2020-04-12T08:28:29.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3lz30000m33pwsx08092","content":"<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><p>cron 表达式的格式为<code>秒 分钟 小时 日期 月份 星期 年份（可选）</code>。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">允许值</th>\n<th style=\"text-align:left\">允许的特殊字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">秒</td>\n<td style=\"text-align:left\">0-59</td>\n<td style=\"text-align:left\">, - * /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">分钟</td>\n<td style=\"text-align:left\">0-59</td>\n<td style=\"text-align:left\">, - * /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">小时</td>\n<td style=\"text-align:left\">0-23</td>\n<td style=\"text-align:left\">, - * /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">日期</td>\n<td style=\"text-align:left\">1-31</td>\n<td style=\"text-align:left\">, - * ? / L W C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">月份</td>\n<td style=\"text-align:left\">1-12或者JAN-DEC</td>\n<td style=\"text-align:left\">, - * /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期</td>\n<td style=\"text-align:left\">1-7或者SUN-SAT</td>\n<td style=\"text-align:left\">, - * ? / L C #</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">年份（可为空）</td>\n<td style=\"text-align:left\">留空, 1970-2099</td>\n<td style=\"text-align:left\">, - * /</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"秒\"><a href=\"#秒\" class=\"headerlink\" title=\"秒\"></a>秒</h2><p>允许值范围：0~59，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p>\n<ul>\n<li><code>*</code>代表每隔1秒钟触发。</li>\n<li><code>,</code>代表在指定的秒数触发，比如<code>0,15,45</code>代表0秒、15秒和45秒时触发任务。</li>\n<li><code>-</code>代表在指定的范围内触发，比如<code>25-45</code>代表从25秒开始触发到45秒结束触发，每隔1秒触发1次。</li>\n<li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>0</code>），后面的值代表偏移量，比如<code>0/20</code>或者<code>*/20</code>代表从0秒钟开始，每隔20秒钟触发1次，即0秒触发1次，20秒触发1次，40秒触发1次；<code>5/20</code>代表5秒触发1次，25秒触发1次，45秒触发1次；<code>10-45/20</code>代表在[10,45]内步进20秒命中的时间点触发，即10秒触发1次，30秒触发1次。</li>\n</ul>\n<h2 id=\"分钟\"><a href=\"#分钟\" class=\"headerlink\" title=\"分钟\"></a>分钟</h2><p>允许值范围：0~59，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p>\n<ul>\n<li><code>*</code>代表每隔1分钟触发。</li>\n<li><code>,</code>代表在指定的分钟触发，比如<code>10,20,40</code>“代表10分钟、20分钟和40分钟时触发任务。</li>\n<li><code>-</code>代表在指定的范围内触发，比如<code>5-30</code>代表从5分钟开始触发到30分钟结束触发，每隔1分钟触发。</li>\n<li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>0</code>），后面的值代表偏移量，比如<code>0/25</code>或者<code>*/25</code>代表从0分钟开始，每隔25分钟触发1次，即0分钟触发1次，第25分钟触发1次，第50分钟触发1次；<code>5/25</code>代表5分钟触发1次，30分钟触发1次，55分钟触发1次；<code>10-45/20</code>代表在[10,45]内步进20分钟命中的时间点触发，即10分钟触发1次，30分钟触发1次。</li>\n</ul>\n<h2 id=\"小时\"><a href=\"#小时\" class=\"headerlink\" title=\"小时\"></a>小时</h2><p>允许值范围：0~23，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p>\n<ul>\n<li><code>*</code>代表每隔1小时触发。</li>\n<li><code>,</code>代表在指定的时间点触发，比如”10,20,23”代表10点钟、20点钟和23点触发任务。</li>\n<li><code>-</code>代表在指定的时间段内触发，比如”20-23”代表从20点开始触发到23点结束触发，每隔1小时触发。</li>\n<li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>0</code>），后面的值代表偏移量，比如<code>0/1</code>或者<code>*/1</code>代表从0点开始触发，每隔1小时触发1次；<code>1/2</code>代表从1点开始触发，以后每隔2小时触发一次。</li>\n</ul>\n<h2 id=\"月份\"><a href=\"#月份\" class=\"headerlink\" title=\"月份\"></a>月份</h2><p>允许值范围：1~12 (JAN-DEC)，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p>\n<ul>\n<li><code>*</code>代表每个月都触发。</li>\n<li><code>,</code>代表在指定的月份触发，比如”1,6,12”代表1月份、6月份和12月份触发任务。</li>\n<li><code>-</code>代表在指定的月份范围内触发，比如”1-6”代表从1月份开始触发到6月份结束触发，每隔1个月触发。</li>\n<li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>1</code>），后面的值代表偏移量，比如<code>1/2</code>或者<code>*/2</code>代表从1月份开始触发，每隔2个月触发1次；<code>6/6</code>代表从6月份开始触发，以后每隔6个月触发一次；<code>1-6/12</code>表达式意味着每年1月份触发。</li>\n</ul>\n<h2 id=\"星期\"><a href=\"#星期\" class=\"headerlink\" title=\"星期\"></a>星期</h2><p>允许值范围：1~7 (SUN-SAT)，1代表星期天（一星期的第一天），以此类推，7代表星期六（一星期的最后一天），不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p>\n<ul>\n<li><code>*</code>代表每星期都触发。</li>\n<li><code>?</code>与<code>日期</code>互斥，即意味着若明确指定<code>日期</code>触发，则表示<code>星期</code>无意义，以免引起冲突和混乱。</li>\n<li><code>,</code>代表在指定的星期约定触发，比如<code>1,3,5</code>代表星期天、星期二和星期四触发。</li>\n<li><code>-</code>代表在指定的星期范围内触发，比如<code>2-4</code>代表从星期一开始触发到星期三结束触发，每隔1天触发。</li>\n<li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>1</code>），后面的值代表偏移量，比如<code>1/3</code>或者<code>*/3</code>代表从星期天开始触发，每隔3天触发1次；<code>1-5/2</code>表达式意味着在[1,5]范围内，每隔2天触发，即星期天、星期二、星期四触发。</li>\n</ul>\n<h2 id=\"年份\"><a href=\"#年份\" class=\"headerlink\" title=\"年份\"></a>年份</h2><h2 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h2><h2 id=\"常用例子\"><a href=\"#常用例子\" class=\"headerlink\" title=\"常用例子\"></a>常用例子</h2><ol>\n<li>每天凌晨4点执行：<code>0 0 4 * * ?</code></li>\n<li>每周一凌晨4点执行：<code>0 0 4 * * ?</code></li>\n<li>每月初晨4点执行：</li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><p>cron 表达式的格式为<code>秒 分钟 小时 日期 月份 星期 年份（可选）</code>。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">允许值</th>\n<th style=\"text-align:left\">允许的特殊字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">秒</td>\n<td style=\"text-align:left\">0-59</td>\n<td style=\"text-align:left\">, - * /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">分钟</td>\n<td style=\"text-align:left\">0-59</td>\n<td style=\"text-align:left\">, - * /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">小时</td>\n<td style=\"text-align:left\">0-23</td>\n<td style=\"text-align:left\">, - * /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">日期</td>\n<td style=\"text-align:left\">1-31</td>\n<td style=\"text-align:left\">, - * ? / L W C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">月份</td>\n<td style=\"text-align:left\">1-12或者JAN-DEC</td>\n<td style=\"text-align:left\">, - * /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期</td>\n<td style=\"text-align:left\">1-7或者SUN-SAT</td>\n<td style=\"text-align:left\">, - * ? / L C #</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">年份（可为空）</td>\n<td style=\"text-align:left\">留空, 1970-2099</td>\n<td style=\"text-align:left\">, - * /</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"秒\"><a href=\"#秒\" class=\"headerlink\" title=\"秒\"></a>秒</h2><p>允许值范围：0~59，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p>\n<ul>\n<li><code>*</code>代表每隔1秒钟触发。</li>\n<li><code>,</code>代表在指定的秒数触发，比如<code>0,15,45</code>代表0秒、15秒和45秒时触发任务。</li>\n<li><code>-</code>代表在指定的范围内触发，比如<code>25-45</code>代表从25秒开始触发到45秒结束触发，每隔1秒触发1次。</li>\n<li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>0</code>），后面的值代表偏移量，比如<code>0/20</code>或者<code>*/20</code>代表从0秒钟开始，每隔20秒钟触发1次，即0秒触发1次，20秒触发1次，40秒触发1次；<code>5/20</code>代表5秒触发1次，25秒触发1次，45秒触发1次；<code>10-45/20</code>代表在[10,45]内步进20秒命中的时间点触发，即10秒触发1次，30秒触发1次。</li>\n</ul>\n<h2 id=\"分钟\"><a href=\"#分钟\" class=\"headerlink\" title=\"分钟\"></a>分钟</h2><p>允许值范围：0~59，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p>\n<ul>\n<li><code>*</code>代表每隔1分钟触发。</li>\n<li><code>,</code>代表在指定的分钟触发，比如<code>10,20,40</code>“代表10分钟、20分钟和40分钟时触发任务。</li>\n<li><code>-</code>代表在指定的范围内触发，比如<code>5-30</code>代表从5分钟开始触发到30分钟结束触发，每隔1分钟触发。</li>\n<li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>0</code>），后面的值代表偏移量，比如<code>0/25</code>或者<code>*/25</code>代表从0分钟开始，每隔25分钟触发1次，即0分钟触发1次，第25分钟触发1次，第50分钟触发1次；<code>5/25</code>代表5分钟触发1次，30分钟触发1次，55分钟触发1次；<code>10-45/20</code>代表在[10,45]内步进20分钟命中的时间点触发，即10分钟触发1次，30分钟触发1次。</li>\n</ul>\n<h2 id=\"小时\"><a href=\"#小时\" class=\"headerlink\" title=\"小时\"></a>小时</h2><p>允许值范围：0~23，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p>\n<ul>\n<li><code>*</code>代表每隔1小时触发。</li>\n<li><code>,</code>代表在指定的时间点触发，比如”10,20,23”代表10点钟、20点钟和23点触发任务。</li>\n<li><code>-</code>代表在指定的时间段内触发，比如”20-23”代表从20点开始触发到23点结束触发，每隔1小时触发。</li>\n<li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>0</code>），后面的值代表偏移量，比如<code>0/1</code>或者<code>*/1</code>代表从0点开始触发，每隔1小时触发1次；<code>1/2</code>代表从1点开始触发，以后每隔2小时触发一次。</li>\n</ul>\n<h2 id=\"月份\"><a href=\"#月份\" class=\"headerlink\" title=\"月份\"></a>月份</h2><p>允许值范围：1~12 (JAN-DEC)，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p>\n<ul>\n<li><code>*</code>代表每个月都触发。</li>\n<li><code>,</code>代表在指定的月份触发，比如”1,6,12”代表1月份、6月份和12月份触发任务。</li>\n<li><code>-</code>代表在指定的月份范围内触发，比如”1-6”代表从1月份开始触发到6月份结束触发，每隔1个月触发。</li>\n<li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>1</code>），后面的值代表偏移量，比如<code>1/2</code>或者<code>*/2</code>代表从1月份开始触发，每隔2个月触发1次；<code>6/6</code>代表从6月份开始触发，以后每隔6个月触发一次；<code>1-6/12</code>表达式意味着每年1月份触发。</li>\n</ul>\n<h2 id=\"星期\"><a href=\"#星期\" class=\"headerlink\" title=\"星期\"></a>星期</h2><p>允许值范围：1~7 (SUN-SAT)，1代表星期天（一星期的第一天），以此类推，7代表星期六（一星期的最后一天），不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p>\n<ul>\n<li><code>*</code>代表每星期都触发。</li>\n<li><code>?</code>与<code>日期</code>互斥，即意味着若明确指定<code>日期</code>触发，则表示<code>星期</code>无意义，以免引起冲突和混乱。</li>\n<li><code>,</code>代表在指定的星期约定触发，比如<code>1,3,5</code>代表星期天、星期二和星期四触发。</li>\n<li><code>-</code>代表在指定的星期范围内触发，比如<code>2-4</code>代表从星期一开始触发到星期三结束触发，每隔1天触发。</li>\n<li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>1</code>），后面的值代表偏移量，比如<code>1/3</code>或者<code>*/3</code>代表从星期天开始触发，每隔3天触发1次；<code>1-5/2</code>表达式意味着在[1,5]范围内，每隔2天触发，即星期天、星期二、星期四触发。</li>\n</ul>\n<h2 id=\"年份\"><a href=\"#年份\" class=\"headerlink\" title=\"年份\"></a>年份</h2><h2 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h2><h2 id=\"常用例子\"><a href=\"#常用例子\" class=\"headerlink\" title=\"常用例子\"></a>常用例子</h2><ol>\n<li>每天凌晨4点执行：<code>0 0 4 * * ?</code></li>\n<li>每周一凌晨4点执行：<code>0 0 4 * * ?</code></li>\n<li>每月初晨4点执行：</li>\n</ol>\n"},{"title":"Chapter 1.1 Java 基础","date":"2020-04-27T16:00:11.000Z","_content":"\n#### ==、equals、hashCode 的区别\n\n#### int、char、long 各占多少字节数\n\n#### int 与 Integer 的区别\n\n#### 谈谈对 Java 多态的理解\n\n#### Spring、StringBuffer、StringBuilder 的区别\n\n#### 什么是内部类？内部类的作用是什么\n\n#### 抽象类和接口的区别\n\n#### 抽象类的意义\n\n#### 抽象类与接口的应用场景\n\n#### 抽象类是否可以没有方法和属性\n\n#### 接口的意义\n\n#### 泛型中 extends 和 super 的区别\n\n#### 父类的静态方法能否被子类重写\n\n#### 进程和线程的区别\n\n#### final、finally、finalize 的区别\n\n#### 序列化的方式\n\n#### Serializable 和 Parcelable 的区别\n\n#### 静态属性和静态方法是否可以被继承？是否可以被重写？原因是什么\n\n#### 静态内部类的设计意图\n\n#### 成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及在项目中的应用\n\n#### 谈谈对 Kotlin 的理解\n\n#### 闭包和局部内部类的区别\n\n#### String 转换成 Integer 的方式以及原理\n\n## 高难度\n#### 哪些情况下的对象会被垃圾回收机制处理掉\n\n#### 讲一下常见的编码方式\n\n#### UTF-8 编码中的中文占几个字节？int 类型占几个字节\n\n#### 静态代理和动态代理的区别，以及它们的使用场景\n\n#### Java 的异常体系\n\n#### 谈谈你对解析和分派的认识\n\n#### 修改对象 A 和 equals 方法的签名，那么使用 HashMap 存放这个对象实例的时候，会调用哪个 equals 方法\n\n#### Java 中实现多态的机制是什么\n\n#### 如何将一个 Java 对象序列化到文件里\n\n#### 说说你对 Java 反射的理解\n\n#### 说说你对 Java 注解的理解\n\n#### 说说你对依赖注入的理解\n\n#### 说一下泛型原理，并举例说明\n\n#### 说一下 Java 中的 String 的理解\n\n#### String 为什么要设计成不可变的\n\n#### Object 类的 equals 和 hashCode 方法重写，为什么","source":"_posts/Interview/Chapter 1.1 Java 基础.md","raw":"---\ntitle: Chapter 1.1 Java 基础\n\ncategories:\n- Interview\n\ndate: 2020-04-28 00:00:11\n---\n\n#### ==、equals、hashCode 的区别\n\n#### int、char、long 各占多少字节数\n\n#### int 与 Integer 的区别\n\n#### 谈谈对 Java 多态的理解\n\n#### Spring、StringBuffer、StringBuilder 的区别\n\n#### 什么是内部类？内部类的作用是什么\n\n#### 抽象类和接口的区别\n\n#### 抽象类的意义\n\n#### 抽象类与接口的应用场景\n\n#### 抽象类是否可以没有方法和属性\n\n#### 接口的意义\n\n#### 泛型中 extends 和 super 的区别\n\n#### 父类的静态方法能否被子类重写\n\n#### 进程和线程的区别\n\n#### final、finally、finalize 的区别\n\n#### 序列化的方式\n\n#### Serializable 和 Parcelable 的区别\n\n#### 静态属性和静态方法是否可以被继承？是否可以被重写？原因是什么\n\n#### 静态内部类的设计意图\n\n#### 成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及在项目中的应用\n\n#### 谈谈对 Kotlin 的理解\n\n#### 闭包和局部内部类的区别\n\n#### String 转换成 Integer 的方式以及原理\n\n## 高难度\n#### 哪些情况下的对象会被垃圾回收机制处理掉\n\n#### 讲一下常见的编码方式\n\n#### UTF-8 编码中的中文占几个字节？int 类型占几个字节\n\n#### 静态代理和动态代理的区别，以及它们的使用场景\n\n#### Java 的异常体系\n\n#### 谈谈你对解析和分派的认识\n\n#### 修改对象 A 和 equals 方法的签名，那么使用 HashMap 存放这个对象实例的时候，会调用哪个 equals 方法\n\n#### Java 中实现多态的机制是什么\n\n#### 如何将一个 Java 对象序列化到文件里\n\n#### 说说你对 Java 反射的理解\n\n#### 说说你对 Java 注解的理解\n\n#### 说说你对依赖注入的理解\n\n#### 说一下泛型原理，并举例说明\n\n#### 说一下 Java 中的 String 的理解\n\n#### String 为什么要设计成不可变的\n\n#### Object 类的 equals 和 hashCode 方法重写，为什么","slug":"Interview/Chapter 1.1 Java 基础","published":1,"updated":"2020-05-01T07:42:35.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m2p0005m33pi47d0umf","content":"<h4 id=\"、equals、hashCode-的区别\"><a href=\"#、equals、hashCode-的区别\" class=\"headerlink\" title=\"==、equals、hashCode 的区别\"></a>==、equals、hashCode 的区别</h4><h4 id=\"int、char、long-各占多少字节数\"><a href=\"#int、char、long-各占多少字节数\" class=\"headerlink\" title=\"int、char、long 各占多少字节数\"></a>int、char、long 各占多少字节数</h4><h4 id=\"int-与-Integer-的区别\"><a href=\"#int-与-Integer-的区别\" class=\"headerlink\" title=\"int 与 Integer 的区别\"></a>int 与 Integer 的区别</h4><h4 id=\"谈谈对-Java-多态的理解\"><a href=\"#谈谈对-Java-多态的理解\" class=\"headerlink\" title=\"谈谈对 Java 多态的理解\"></a>谈谈对 Java 多态的理解</h4><h4 id=\"Spring、StringBuffer、StringBuilder-的区别\"><a href=\"#Spring、StringBuffer、StringBuilder-的区别\" class=\"headerlink\" title=\"Spring、StringBuffer、StringBuilder 的区别\"></a>Spring、StringBuffer、StringBuilder 的区别</h4><h4 id=\"什么是内部类？内部类的作用是什么\"><a href=\"#什么是内部类？内部类的作用是什么\" class=\"headerlink\" title=\"什么是内部类？内部类的作用是什么\"></a>什么是内部类？内部类的作用是什么</h4><h4 id=\"抽象类和接口的区别\"><a href=\"#抽象类和接口的区别\" class=\"headerlink\" title=\"抽象类和接口的区别\"></a>抽象类和接口的区别</h4><h4 id=\"抽象类的意义\"><a href=\"#抽象类的意义\" class=\"headerlink\" title=\"抽象类的意义\"></a>抽象类的意义</h4><h4 id=\"抽象类与接口的应用场景\"><a href=\"#抽象类与接口的应用场景\" class=\"headerlink\" title=\"抽象类与接口的应用场景\"></a>抽象类与接口的应用场景</h4><h4 id=\"抽象类是否可以没有方法和属性\"><a href=\"#抽象类是否可以没有方法和属性\" class=\"headerlink\" title=\"抽象类是否可以没有方法和属性\"></a>抽象类是否可以没有方法和属性</h4><h4 id=\"接口的意义\"><a href=\"#接口的意义\" class=\"headerlink\" title=\"接口的意义\"></a>接口的意义</h4><h4 id=\"泛型中-extends-和-super-的区别\"><a href=\"#泛型中-extends-和-super-的区别\" class=\"headerlink\" title=\"泛型中 extends 和 super 的区别\"></a>泛型中 extends 和 super 的区别</h4><h4 id=\"父类的静态方法能否被子类重写\"><a href=\"#父类的静态方法能否被子类重写\" class=\"headerlink\" title=\"父类的静态方法能否被子类重写\"></a>父类的静态方法能否被子类重写</h4><h4 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h4><h4 id=\"final、finally、finalize-的区别\"><a href=\"#final、finally、finalize-的区别\" class=\"headerlink\" title=\"final、finally、finalize 的区别\"></a>final、finally、finalize 的区别</h4><h4 id=\"序列化的方式\"><a href=\"#序列化的方式\" class=\"headerlink\" title=\"序列化的方式\"></a>序列化的方式</h4><h4 id=\"Serializable-和-Parcelable-的区别\"><a href=\"#Serializable-和-Parcelable-的区别\" class=\"headerlink\" title=\"Serializable 和 Parcelable 的区别\"></a>Serializable 和 Parcelable 的区别</h4><h4 id=\"静态属性和静态方法是否可以被继承？是否可以被重写？原因是什么\"><a href=\"#静态属性和静态方法是否可以被继承？是否可以被重写？原因是什么\" class=\"headerlink\" title=\"静态属性和静态方法是否可以被继承？是否可以被重写？原因是什么\"></a>静态属性和静态方法是否可以被继承？是否可以被重写？原因是什么</h4><h4 id=\"静态内部类的设计意图\"><a href=\"#静态内部类的设计意图\" class=\"headerlink\" title=\"静态内部类的设计意图\"></a>静态内部类的设计意图</h4><h4 id=\"成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及在项目中的应用\"><a href=\"#成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及在项目中的应用\" class=\"headerlink\" title=\"成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及在项目中的应用\"></a>成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及在项目中的应用</h4><h4 id=\"谈谈对-Kotlin-的理解\"><a href=\"#谈谈对-Kotlin-的理解\" class=\"headerlink\" title=\"谈谈对 Kotlin 的理解\"></a>谈谈对 Kotlin 的理解</h4><h4 id=\"闭包和局部内部类的区别\"><a href=\"#闭包和局部内部类的区别\" class=\"headerlink\" title=\"闭包和局部内部类的区别\"></a>闭包和局部内部类的区别</h4><h4 id=\"String-转换成-Integer-的方式以及原理\"><a href=\"#String-转换成-Integer-的方式以及原理\" class=\"headerlink\" title=\"String 转换成 Integer 的方式以及原理\"></a>String 转换成 Integer 的方式以及原理</h4><h2 id=\"高难度\"><a href=\"#高难度\" class=\"headerlink\" title=\"高难度\"></a>高难度</h2><h4 id=\"哪些情况下的对象会被垃圾回收机制处理掉\"><a href=\"#哪些情况下的对象会被垃圾回收机制处理掉\" class=\"headerlink\" title=\"哪些情况下的对象会被垃圾回收机制处理掉\"></a>哪些情况下的对象会被垃圾回收机制处理掉</h4><h4 id=\"讲一下常见的编码方式\"><a href=\"#讲一下常见的编码方式\" class=\"headerlink\" title=\"讲一下常见的编码方式\"></a>讲一下常见的编码方式</h4><h4 id=\"UTF-8-编码中的中文占几个字节？int-类型占几个字节\"><a href=\"#UTF-8-编码中的中文占几个字节？int-类型占几个字节\" class=\"headerlink\" title=\"UTF-8 编码中的中文占几个字节？int 类型占几个字节\"></a>UTF-8 编码中的中文占几个字节？int 类型占几个字节</h4><h4 id=\"静态代理和动态代理的区别，以及它们的使用场景\"><a href=\"#静态代理和动态代理的区别，以及它们的使用场景\" class=\"headerlink\" title=\"静态代理和动态代理的区别，以及它们的使用场景\"></a>静态代理和动态代理的区别，以及它们的使用场景</h4><h4 id=\"Java-的异常体系\"><a href=\"#Java-的异常体系\" class=\"headerlink\" title=\"Java 的异常体系\"></a>Java 的异常体系</h4><h4 id=\"谈谈你对解析和分派的认识\"><a href=\"#谈谈你对解析和分派的认识\" class=\"headerlink\" title=\"谈谈你对解析和分派的认识\"></a>谈谈你对解析和分派的认识</h4><h4 id=\"修改对象-A-和-equals-方法的签名，那么使用-HashMap-存放这个对象实例的时候，会调用哪个-equals-方法\"><a href=\"#修改对象-A-和-equals-方法的签名，那么使用-HashMap-存放这个对象实例的时候，会调用哪个-equals-方法\" class=\"headerlink\" title=\"修改对象 A 和 equals 方法的签名，那么使用 HashMap 存放这个对象实例的时候，会调用哪个 equals 方法\"></a>修改对象 A 和 equals 方法的签名，那么使用 HashMap 存放这个对象实例的时候，会调用哪个 equals 方法</h4><h4 id=\"Java-中实现多态的机制是什么\"><a href=\"#Java-中实现多态的机制是什么\" class=\"headerlink\" title=\"Java 中实现多态的机制是什么\"></a>Java 中实现多态的机制是什么</h4><h4 id=\"如何将一个-Java-对象序列化到文件里\"><a href=\"#如何将一个-Java-对象序列化到文件里\" class=\"headerlink\" title=\"如何将一个 Java 对象序列化到文件里\"></a>如何将一个 Java 对象序列化到文件里</h4><h4 id=\"说说你对-Java-反射的理解\"><a href=\"#说说你对-Java-反射的理解\" class=\"headerlink\" title=\"说说你对 Java 反射的理解\"></a>说说你对 Java 反射的理解</h4><h4 id=\"说说你对-Java-注解的理解\"><a href=\"#说说你对-Java-注解的理解\" class=\"headerlink\" title=\"说说你对 Java 注解的理解\"></a>说说你对 Java 注解的理解</h4><h4 id=\"说说你对依赖注入的理解\"><a href=\"#说说你对依赖注入的理解\" class=\"headerlink\" title=\"说说你对依赖注入的理解\"></a>说说你对依赖注入的理解</h4><h4 id=\"说一下泛型原理，并举例说明\"><a href=\"#说一下泛型原理，并举例说明\" class=\"headerlink\" title=\"说一下泛型原理，并举例说明\"></a>说一下泛型原理，并举例说明</h4><h4 id=\"说一下-Java-中的-String-的理解\"><a href=\"#说一下-Java-中的-String-的理解\" class=\"headerlink\" title=\"说一下 Java 中的 String 的理解\"></a>说一下 Java 中的 String 的理解</h4><h4 id=\"String-为什么要设计成不可变的\"><a href=\"#String-为什么要设计成不可变的\" class=\"headerlink\" title=\"String 为什么要设计成不可变的\"></a>String 为什么要设计成不可变的</h4><h4 id=\"Object-类的-equals-和-hashCode-方法重写，为什么\"><a href=\"#Object-类的-equals-和-hashCode-方法重写，为什么\" class=\"headerlink\" title=\"Object 类的 equals 和 hashCode 方法重写，为什么\"></a>Object 类的 equals 和 hashCode 方法重写，为什么</h4>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h4 id=\"、equals、hashCode-的区别\"><a href=\"#、equals、hashCode-的区别\" class=\"headerlink\" title=\"==、equals、hashCode 的区别\"></a>==、equals、hashCode 的区别</h4><h4 id=\"int、char、long-各占多少字节数\"><a href=\"#int、char、long-各占多少字节数\" class=\"headerlink\" title=\"int、char、long 各占多少字节数\"></a>int、char、long 各占多少字节数</h4><h4 id=\"int-与-Integer-的区别\"><a href=\"#int-与-Integer-的区别\" class=\"headerlink\" title=\"int 与 Integer 的区别\"></a>int 与 Integer 的区别</h4><h4 id=\"谈谈对-Java-多态的理解\"><a href=\"#谈谈对-Java-多态的理解\" class=\"headerlink\" title=\"谈谈对 Java 多态的理解\"></a>谈谈对 Java 多态的理解</h4><h4 id=\"Spring、StringBuffer、StringBuilder-的区别\"><a href=\"#Spring、StringBuffer、StringBuilder-的区别\" class=\"headerlink\" title=\"Spring、StringBuffer、StringBuilder 的区别\"></a>Spring、StringBuffer、StringBuilder 的区别</h4><h4 id=\"什么是内部类？内部类的作用是什么\"><a href=\"#什么是内部类？内部类的作用是什么\" class=\"headerlink\" title=\"什么是内部类？内部类的作用是什么\"></a>什么是内部类？内部类的作用是什么</h4><h4 id=\"抽象类和接口的区别\"><a href=\"#抽象类和接口的区别\" class=\"headerlink\" title=\"抽象类和接口的区别\"></a>抽象类和接口的区别</h4><h4 id=\"抽象类的意义\"><a href=\"#抽象类的意义\" class=\"headerlink\" title=\"抽象类的意义\"></a>抽象类的意义</h4><h4 id=\"抽象类与接口的应用场景\"><a href=\"#抽象类与接口的应用场景\" class=\"headerlink\" title=\"抽象类与接口的应用场景\"></a>抽象类与接口的应用场景</h4><h4 id=\"抽象类是否可以没有方法和属性\"><a href=\"#抽象类是否可以没有方法和属性\" class=\"headerlink\" title=\"抽象类是否可以没有方法和属性\"></a>抽象类是否可以没有方法和属性</h4><h4 id=\"接口的意义\"><a href=\"#接口的意义\" class=\"headerlink\" title=\"接口的意义\"></a>接口的意义</h4><h4 id=\"泛型中-extends-和-super-的区别\"><a href=\"#泛型中-extends-和-super-的区别\" class=\"headerlink\" title=\"泛型中 extends 和 super 的区别\"></a>泛型中 extends 和 super 的区别</h4><h4 id=\"父类的静态方法能否被子类重写\"><a href=\"#父类的静态方法能否被子类重写\" class=\"headerlink\" title=\"父类的静态方法能否被子类重写\"></a>父类的静态方法能否被子类重写</h4><h4 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h4><h4 id=\"final、finally、finalize-的区别\"><a href=\"#final、finally、finalize-的区别\" class=\"headerlink\" title=\"final、finally、finalize 的区别\"></a>final、finally、finalize 的区别</h4><h4 id=\"序列化的方式\"><a href=\"#序列化的方式\" class=\"headerlink\" title=\"序列化的方式\"></a>序列化的方式</h4><h4 id=\"Serializable-和-Parcelable-的区别\"><a href=\"#Serializable-和-Parcelable-的区别\" class=\"headerlink\" title=\"Serializable 和 Parcelable 的区别\"></a>Serializable 和 Parcelable 的区别</h4><h4 id=\"静态属性和静态方法是否可以被继承？是否可以被重写？原因是什么\"><a href=\"#静态属性和静态方法是否可以被继承？是否可以被重写？原因是什么\" class=\"headerlink\" title=\"静态属性和静态方法是否可以被继承？是否可以被重写？原因是什么\"></a>静态属性和静态方法是否可以被继承？是否可以被重写？原因是什么</h4><h4 id=\"静态内部类的设计意图\"><a href=\"#静态内部类的设计意图\" class=\"headerlink\" title=\"静态内部类的设计意图\"></a>静态内部类的设计意图</h4><h4 id=\"成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及在项目中的应用\"><a href=\"#成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及在项目中的应用\" class=\"headerlink\" title=\"成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及在项目中的应用\"></a>成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及在项目中的应用</h4><h4 id=\"谈谈对-Kotlin-的理解\"><a href=\"#谈谈对-Kotlin-的理解\" class=\"headerlink\" title=\"谈谈对 Kotlin 的理解\"></a>谈谈对 Kotlin 的理解</h4><h4 id=\"闭包和局部内部类的区别\"><a href=\"#闭包和局部内部类的区别\" class=\"headerlink\" title=\"闭包和局部内部类的区别\"></a>闭包和局部内部类的区别</h4><h4 id=\"String-转换成-Integer-的方式以及原理\"><a href=\"#String-转换成-Integer-的方式以及原理\" class=\"headerlink\" title=\"String 转换成 Integer 的方式以及原理\"></a>String 转换成 Integer 的方式以及原理</h4><h2 id=\"高难度\"><a href=\"#高难度\" class=\"headerlink\" title=\"高难度\"></a>高难度</h2><h4 id=\"哪些情况下的对象会被垃圾回收机制处理掉\"><a href=\"#哪些情况下的对象会被垃圾回收机制处理掉\" class=\"headerlink\" title=\"哪些情况下的对象会被垃圾回收机制处理掉\"></a>哪些情况下的对象会被垃圾回收机制处理掉</h4><h4 id=\"讲一下常见的编码方式\"><a href=\"#讲一下常见的编码方式\" class=\"headerlink\" title=\"讲一下常见的编码方式\"></a>讲一下常见的编码方式</h4><h4 id=\"UTF-8-编码中的中文占几个字节？int-类型占几个字节\"><a href=\"#UTF-8-编码中的中文占几个字节？int-类型占几个字节\" class=\"headerlink\" title=\"UTF-8 编码中的中文占几个字节？int 类型占几个字节\"></a>UTF-8 编码中的中文占几个字节？int 类型占几个字节</h4><h4 id=\"静态代理和动态代理的区别，以及它们的使用场景\"><a href=\"#静态代理和动态代理的区别，以及它们的使用场景\" class=\"headerlink\" title=\"静态代理和动态代理的区别，以及它们的使用场景\"></a>静态代理和动态代理的区别，以及它们的使用场景</h4><h4 id=\"Java-的异常体系\"><a href=\"#Java-的异常体系\" class=\"headerlink\" title=\"Java 的异常体系\"></a>Java 的异常体系</h4><h4 id=\"谈谈你对解析和分派的认识\"><a href=\"#谈谈你对解析和分派的认识\" class=\"headerlink\" title=\"谈谈你对解析和分派的认识\"></a>谈谈你对解析和分派的认识</h4><h4 id=\"修改对象-A-和-equals-方法的签名，那么使用-HashMap-存放这个对象实例的时候，会调用哪个-equals-方法\"><a href=\"#修改对象-A-和-equals-方法的签名，那么使用-HashMap-存放这个对象实例的时候，会调用哪个-equals-方法\" class=\"headerlink\" title=\"修改对象 A 和 equals 方法的签名，那么使用 HashMap 存放这个对象实例的时候，会调用哪个 equals 方法\"></a>修改对象 A 和 equals 方法的签名，那么使用 HashMap 存放这个对象实例的时候，会调用哪个 equals 方法</h4><h4 id=\"Java-中实现多态的机制是什么\"><a href=\"#Java-中实现多态的机制是什么\" class=\"headerlink\" title=\"Java 中实现多态的机制是什么\"></a>Java 中实现多态的机制是什么</h4><h4 id=\"如何将一个-Java-对象序列化到文件里\"><a href=\"#如何将一个-Java-对象序列化到文件里\" class=\"headerlink\" title=\"如何将一个 Java 对象序列化到文件里\"></a>如何将一个 Java 对象序列化到文件里</h4><h4 id=\"说说你对-Java-反射的理解\"><a href=\"#说说你对-Java-反射的理解\" class=\"headerlink\" title=\"说说你对 Java 反射的理解\"></a>说说你对 Java 反射的理解</h4><h4 id=\"说说你对-Java-注解的理解\"><a href=\"#说说你对-Java-注解的理解\" class=\"headerlink\" title=\"说说你对 Java 注解的理解\"></a>说说你对 Java 注解的理解</h4><h4 id=\"说说你对依赖注入的理解\"><a href=\"#说说你对依赖注入的理解\" class=\"headerlink\" title=\"说说你对依赖注入的理解\"></a>说说你对依赖注入的理解</h4><h4 id=\"说一下泛型原理，并举例说明\"><a href=\"#说一下泛型原理，并举例说明\" class=\"headerlink\" title=\"说一下泛型原理，并举例说明\"></a>说一下泛型原理，并举例说明</h4><h4 id=\"说一下-Java-中的-String-的理解\"><a href=\"#说一下-Java-中的-String-的理解\" class=\"headerlink\" title=\"说一下 Java 中的 String 的理解\"></a>说一下 Java 中的 String 的理解</h4><h4 id=\"String-为什么要设计成不可变的\"><a href=\"#String-为什么要设计成不可变的\" class=\"headerlink\" title=\"String 为什么要设计成不可变的\"></a>String 为什么要设计成不可变的</h4><h4 id=\"Object-类的-equals-和-hashCode-方法重写，为什么\"><a href=\"#Object-类的-equals-和-hashCode-方法重写，为什么\" class=\"headerlink\" title=\"Object 类的 equals 和 hashCode 方法重写，为什么\"></a>Object 类的 equals 和 hashCode 方法重写，为什么</h4>"},{"title":"SSL 协议","date":"2019-07-03T16:00:00.000Z","_content":"\n安全套接字（Secure Socket Layer，SSL）协议是 Web 浏览器与 Web 服务器之间安全交换信息的协议，提供两个基本的安全服务：鉴别与保密。\n\nSSL 是 Netscape 于 1994 年开发的，后来成为了世界上最著名的 Web 安全机制，所有主要的浏览器都支持 SSL 协议。\n\n目前有三个版本：2、3、3.1，最常用的是第 3 版，是 1995 年发布的。\n\n## SSL 的三个特性\n1. 保密：在握手协议中定义了会话密钥后，所有的消息都是被加密的。\n1. 鉴别：可选的客户端认证，和强制的服务端认证。\n1. 完整性：传送的消息包括消息完整性检查（使用 MAC）。\n\n## SSL 的位置\nSSL 介于应用层和 TCP 层之间。应用层数据不再之间传递给传输层，而是传递给 SSL 层，SSL 层对从应用层收到的数据进行加密，并增加自己的 SSL 头。\n\n![SSL 的位置](001.webp)\n\n## SSL 的工作原理\n\n","source":"_posts/HTTPS 教程/SSL 协议.md","raw":"---\ntitle: SSL 协议\n\ncategories:\n- HTTPS 教程\n\ntag:\n- SSL\n- HTTPS\n\ndate: 2019-07-04\n---\n\n安全套接字（Secure Socket Layer，SSL）协议是 Web 浏览器与 Web 服务器之间安全交换信息的协议，提供两个基本的安全服务：鉴别与保密。\n\nSSL 是 Netscape 于 1994 年开发的，后来成为了世界上最著名的 Web 安全机制，所有主要的浏览器都支持 SSL 协议。\n\n目前有三个版本：2、3、3.1，最常用的是第 3 版，是 1995 年发布的。\n\n## SSL 的三个特性\n1. 保密：在握手协议中定义了会话密钥后，所有的消息都是被加密的。\n1. 鉴别：可选的客户端认证，和强制的服务端认证。\n1. 完整性：传送的消息包括消息完整性检查（使用 MAC）。\n\n## SSL 的位置\nSSL 介于应用层和 TCP 层之间。应用层数据不再之间传递给传输层，而是传递给 SSL 层，SSL 层对从应用层收到的数据进行加密，并增加自己的 SSL 头。\n\n![SSL 的位置](001.webp)\n\n## SSL 的工作原理\n\n","slug":"HTTPS 教程/SSL 协议","published":1,"updated":"2020-04-12T08:28:29.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m2q0006m33p70uat7pq","content":"<p>安全套接字（Secure Socket Layer，SSL）协议是 Web 浏览器与 Web 服务器之间安全交换信息的协议，提供两个基本的安全服务：鉴别与保密。</p>\n<p>SSL 是 Netscape 于 1994 年开发的，后来成为了世界上最著名的 Web 安全机制，所有主要的浏览器都支持 SSL 协议。</p>\n<p>目前有三个版本：2、3、3.1，最常用的是第 3 版，是 1995 年发布的。</p>\n<h2 id=\"SSL-的三个特性\"><a href=\"#SSL-的三个特性\" class=\"headerlink\" title=\"SSL 的三个特性\"></a>SSL 的三个特性</h2><ol>\n<li>保密：在握手协议中定义了会话密钥后，所有的消息都是被加密的。</li>\n<li>鉴别：可选的客户端认证，和强制的服务端认证。</li>\n<li>完整性：传送的消息包括消息完整性检查（使用 MAC）。</li>\n</ol>\n<h2 id=\"SSL-的位置\"><a href=\"#SSL-的位置\" class=\"headerlink\" title=\"SSL 的位置\"></a>SSL 的位置</h2><p>SSL 介于应用层和 TCP 层之间。应用层数据不再之间传递给传输层，而是传递给 SSL 层，SSL 层对从应用层收到的数据进行加密，并增加自己的 SSL 头。</p>\n<p><img src=\"001.webp\" alt=\"SSL 的位置\"></p>\n<h2 id=\"SSL-的工作原理\"><a href=\"#SSL-的工作原理\" class=\"headerlink\" title=\"SSL 的工作原理\"></a>SSL 的工作原理</h2>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>安全套接字（Secure Socket Layer，SSL）协议是 Web 浏览器与 Web 服务器之间安全交换信息的协议，提供两个基本的安全服务：鉴别与保密。</p>\n<p>SSL 是 Netscape 于 1994 年开发的，后来成为了世界上最著名的 Web 安全机制，所有主要的浏览器都支持 SSL 协议。</p>\n<p>目前有三个版本：2、3、3.1，最常用的是第 3 版，是 1995 年发布的。</p>\n<h2 id=\"SSL-的三个特性\"><a href=\"#SSL-的三个特性\" class=\"headerlink\" title=\"SSL 的三个特性\"></a>SSL 的三个特性</h2><ol>\n<li>保密：在握手协议中定义了会话密钥后，所有的消息都是被加密的。</li>\n<li>鉴别：可选的客户端认证，和强制的服务端认证。</li>\n<li>完整性：传送的消息包括消息完整性检查（使用 MAC）。</li>\n</ol>\n<h2 id=\"SSL-的位置\"><a href=\"#SSL-的位置\" class=\"headerlink\" title=\"SSL 的位置\"></a>SSL 的位置</h2><p>SSL 介于应用层和 TCP 层之间。应用层数据不再之间传递给传输层，而是传递给 SSL 层，SSL 层对从应用层收到的数据进行加密，并增加自己的 SSL 头。</p>\n<p><img src=\"001.webp\" alt=\"SSL 的位置\"></p>\n<h2 id=\"SSL-的工作原理\"><a href=\"#SSL-的工作原理\" class=\"headerlink\" title=\"SSL 的工作原理\"></a>SSL 的工作原理</h2>"},{"title":"Chapter 1.2 数据结构","date":"2020-04-27T16:00:12.000Z","_content":"\n#### 常用数据结构简介\n\n#### 并发集合了解哪些\n\n#### 列举 Java 的集合以及集合之间的继承关系\n\n#### 集合类以及集合框架\n\n#### 容器类介绍以及之间的区别\n\n#### List、Set、Map 的区别\n\n#### List 和 Map 的实现方式以及存储方式\n\n#### HashMap 的实现原理\n\n#### HashMap 的数据结构\n\n#### HashMap 原理理解\n\n#### HashMap 如何 put 数据\n\n#### 手写实现 HashMap\n\n#### ConcurrentHashMap 的实现原理\n\n#### ArrayMap 和 HashMap 的对比\n\n#### HashTable 实现原理\n\n####  和 HashSet 的区别\n\n#### HashMap 和 HashSet 怎么判断集合元素重复\n\n#### 集合 Set 实现 Hash 怎么防止碰撞\n\n#### ArrayList 和 LinkedList 的区别，以及应用场景\n\n#### 数组和链表的区别\n\n#### 二叉树的深度优先遍历和广度优先遍历\n\n#### 堆的结构\n\n#### 堆和树的区别\n\n#### 堆和栈在内存中的区别是什么\n可以从数据结构方面以及实际实现两个方面去回答\n\n#### 什么是深拷贝和浅拷贝\n\n#### 手写链表逆转代码\n\n#### 讲一下对数，B+数的理解\n\n#### 讲一下对图的理解\n\n#### 判断单链表成环与否\n\n#### 链表翻转\n即翻转一个单项链表\n\n#### 合并多个单有序链表","source":"_posts/Interview/Chapter 1.2 数据结构.md","raw":"---\ntitle: Chapter 1.2 数据结构\n\ncategories:\n- Interview\n\ndate: 2020-04-28 00:00:12\n---\n\n#### 常用数据结构简介\n\n#### 并发集合了解哪些\n\n#### 列举 Java 的集合以及集合之间的继承关系\n\n#### 集合类以及集合框架\n\n#### 容器类介绍以及之间的区别\n\n#### List、Set、Map 的区别\n\n#### List 和 Map 的实现方式以及存储方式\n\n#### HashMap 的实现原理\n\n#### HashMap 的数据结构\n\n#### HashMap 原理理解\n\n#### HashMap 如何 put 数据\n\n#### 手写实现 HashMap\n\n#### ConcurrentHashMap 的实现原理\n\n#### ArrayMap 和 HashMap 的对比\n\n#### HashTable 实现原理\n\n####  和 HashSet 的区别\n\n#### HashMap 和 HashSet 怎么判断集合元素重复\n\n#### 集合 Set 实现 Hash 怎么防止碰撞\n\n#### ArrayList 和 LinkedList 的区别，以及应用场景\n\n#### 数组和链表的区别\n\n#### 二叉树的深度优先遍历和广度优先遍历\n\n#### 堆的结构\n\n#### 堆和树的区别\n\n#### 堆和栈在内存中的区别是什么\n可以从数据结构方面以及实际实现两个方面去回答\n\n#### 什么是深拷贝和浅拷贝\n\n#### 手写链表逆转代码\n\n#### 讲一下对数，B+数的理解\n\n#### 讲一下对图的理解\n\n#### 判断单链表成环与否\n\n#### 链表翻转\n即翻转一个单项链表\n\n#### 合并多个单有序链表","slug":"Interview/Chapter 1.2 数据结构","published":1,"updated":"2020-05-01T07:42:35.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m2v0008m33pp1a1ockg","content":"<h4 id=\"常用数据结构简介\"><a href=\"#常用数据结构简介\" class=\"headerlink\" title=\"常用数据结构简介\"></a>常用数据结构简介</h4><h4 id=\"并发集合了解哪些\"><a href=\"#并发集合了解哪些\" class=\"headerlink\" title=\"并发集合了解哪些\"></a>并发集合了解哪些</h4><h4 id=\"列举-Java-的集合以及集合之间的继承关系\"><a href=\"#列举-Java-的集合以及集合之间的继承关系\" class=\"headerlink\" title=\"列举 Java 的集合以及集合之间的继承关系\"></a>列举 Java 的集合以及集合之间的继承关系</h4><h4 id=\"集合类以及集合框架\"><a href=\"#集合类以及集合框架\" class=\"headerlink\" title=\"集合类以及集合框架\"></a>集合类以及集合框架</h4><h4 id=\"容器类介绍以及之间的区别\"><a href=\"#容器类介绍以及之间的区别\" class=\"headerlink\" title=\"容器类介绍以及之间的区别\"></a>容器类介绍以及之间的区别</h4><h4 id=\"List、Set、Map-的区别\"><a href=\"#List、Set、Map-的区别\" class=\"headerlink\" title=\"List、Set、Map 的区别\"></a>List、Set、Map 的区别</h4><h4 id=\"List-和-Map-的实现方式以及存储方式\"><a href=\"#List-和-Map-的实现方式以及存储方式\" class=\"headerlink\" title=\"List 和 Map 的实现方式以及存储方式\"></a>List 和 Map 的实现方式以及存储方式</h4><h4 id=\"HashMap-的实现原理\"><a href=\"#HashMap-的实现原理\" class=\"headerlink\" title=\"HashMap 的实现原理\"></a>HashMap 的实现原理</h4><h4 id=\"HashMap-的数据结构\"><a href=\"#HashMap-的数据结构\" class=\"headerlink\" title=\"HashMap 的数据结构\"></a>HashMap 的数据结构</h4><h4 id=\"HashMap-原理理解\"><a href=\"#HashMap-原理理解\" class=\"headerlink\" title=\"HashMap 原理理解\"></a>HashMap 原理理解</h4><h4 id=\"HashMap-如何-put-数据\"><a href=\"#HashMap-如何-put-数据\" class=\"headerlink\" title=\"HashMap 如何 put 数据\"></a>HashMap 如何 put 数据</h4><h4 id=\"手写实现-HashMap\"><a href=\"#手写实现-HashMap\" class=\"headerlink\" title=\"手写实现 HashMap\"></a>手写实现 HashMap</h4><h4 id=\"ConcurrentHashMap-的实现原理\"><a href=\"#ConcurrentHashMap-的实现原理\" class=\"headerlink\" title=\"ConcurrentHashMap 的实现原理\"></a>ConcurrentHashMap 的实现原理</h4><h4 id=\"ArrayMap-和-HashMap-的对比\"><a href=\"#ArrayMap-和-HashMap-的对比\" class=\"headerlink\" title=\"ArrayMap 和 HashMap 的对比\"></a>ArrayMap 和 HashMap 的对比</h4><h4 id=\"HashTable-实现原理\"><a href=\"#HashTable-实现原理\" class=\"headerlink\" title=\"HashTable 实现原理\"></a>HashTable 实现原理</h4><h4 id=\"和-HashSet-的区别\"><a href=\"#和-HashSet-的区别\" class=\"headerlink\" title=\"和 HashSet 的区别\"></a>和 HashSet 的区别</h4><h4 id=\"HashMap-和-HashSet-怎么判断集合元素重复\"><a href=\"#HashMap-和-HashSet-怎么判断集合元素重复\" class=\"headerlink\" title=\"HashMap 和 HashSet 怎么判断集合元素重复\"></a>HashMap 和 HashSet 怎么判断集合元素重复</h4><h4 id=\"集合-Set-实现-Hash-怎么防止碰撞\"><a href=\"#集合-Set-实现-Hash-怎么防止碰撞\" class=\"headerlink\" title=\"集合 Set 实现 Hash 怎么防止碰撞\"></a>集合 Set 实现 Hash 怎么防止碰撞</h4><h4 id=\"ArrayList-和-LinkedList-的区别，以及应用场景\"><a href=\"#ArrayList-和-LinkedList-的区别，以及应用场景\" class=\"headerlink\" title=\"ArrayList 和 LinkedList 的区别，以及应用场景\"></a>ArrayList 和 LinkedList 的区别，以及应用场景</h4><h4 id=\"数组和链表的区别\"><a href=\"#数组和链表的区别\" class=\"headerlink\" title=\"数组和链表的区别\"></a>数组和链表的区别</h4><h4 id=\"二叉树的深度优先遍历和广度优先遍历\"><a href=\"#二叉树的深度优先遍历和广度优先遍历\" class=\"headerlink\" title=\"二叉树的深度优先遍历和广度优先遍历\"></a>二叉树的深度优先遍历和广度优先遍历</h4><h4 id=\"堆的结构\"><a href=\"#堆的结构\" class=\"headerlink\" title=\"堆的结构\"></a>堆的结构</h4><h4 id=\"堆和树的区别\"><a href=\"#堆和树的区别\" class=\"headerlink\" title=\"堆和树的区别\"></a>堆和树的区别</h4><h4 id=\"堆和栈在内存中的区别是什么\"><a href=\"#堆和栈在内存中的区别是什么\" class=\"headerlink\" title=\"堆和栈在内存中的区别是什么\"></a>堆和栈在内存中的区别是什么</h4><p>可以从数据结构方面以及实际实现两个方面去回答</p>\n<h4 id=\"什么是深拷贝和浅拷贝\"><a href=\"#什么是深拷贝和浅拷贝\" class=\"headerlink\" title=\"什么是深拷贝和浅拷贝\"></a>什么是深拷贝和浅拷贝</h4><h4 id=\"手写链表逆转代码\"><a href=\"#手写链表逆转代码\" class=\"headerlink\" title=\"手写链表逆转代码\"></a>手写链表逆转代码</h4><h4 id=\"讲一下对数，B-数的理解\"><a href=\"#讲一下对数，B-数的理解\" class=\"headerlink\" title=\"讲一下对数，B+数的理解\"></a>讲一下对数，B+数的理解</h4><h4 id=\"讲一下对图的理解\"><a href=\"#讲一下对图的理解\" class=\"headerlink\" title=\"讲一下对图的理解\"></a>讲一下对图的理解</h4><h4 id=\"判断单链表成环与否\"><a href=\"#判断单链表成环与否\" class=\"headerlink\" title=\"判断单链表成环与否\"></a>判断单链表成环与否</h4><h4 id=\"链表翻转\"><a href=\"#链表翻转\" class=\"headerlink\" title=\"链表翻转\"></a>链表翻转</h4><p>即翻转一个单项链表</p>\n<h4 id=\"合并多个单有序链表\"><a href=\"#合并多个单有序链表\" class=\"headerlink\" title=\"合并多个单有序链表\"></a>合并多个单有序链表</h4>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h4 id=\"常用数据结构简介\"><a href=\"#常用数据结构简介\" class=\"headerlink\" title=\"常用数据结构简介\"></a>常用数据结构简介</h4><h4 id=\"并发集合了解哪些\"><a href=\"#并发集合了解哪些\" class=\"headerlink\" title=\"并发集合了解哪些\"></a>并发集合了解哪些</h4><h4 id=\"列举-Java-的集合以及集合之间的继承关系\"><a href=\"#列举-Java-的集合以及集合之间的继承关系\" class=\"headerlink\" title=\"列举 Java 的集合以及集合之间的继承关系\"></a>列举 Java 的集合以及集合之间的继承关系</h4><h4 id=\"集合类以及集合框架\"><a href=\"#集合类以及集合框架\" class=\"headerlink\" title=\"集合类以及集合框架\"></a>集合类以及集合框架</h4><h4 id=\"容器类介绍以及之间的区别\"><a href=\"#容器类介绍以及之间的区别\" class=\"headerlink\" title=\"容器类介绍以及之间的区别\"></a>容器类介绍以及之间的区别</h4><h4 id=\"List、Set、Map-的区别\"><a href=\"#List、Set、Map-的区别\" class=\"headerlink\" title=\"List、Set、Map 的区别\"></a>List、Set、Map 的区别</h4><h4 id=\"List-和-Map-的实现方式以及存储方式\"><a href=\"#List-和-Map-的实现方式以及存储方式\" class=\"headerlink\" title=\"List 和 Map 的实现方式以及存储方式\"></a>List 和 Map 的实现方式以及存储方式</h4><h4 id=\"HashMap-的实现原理\"><a href=\"#HashMap-的实现原理\" class=\"headerlink\" title=\"HashMap 的实现原理\"></a>HashMap 的实现原理</h4><h4 id=\"HashMap-的数据结构\"><a href=\"#HashMap-的数据结构\" class=\"headerlink\" title=\"HashMap 的数据结构\"></a>HashMap 的数据结构</h4><h4 id=\"HashMap-原理理解\"><a href=\"#HashMap-原理理解\" class=\"headerlink\" title=\"HashMap 原理理解\"></a>HashMap 原理理解</h4><h4 id=\"HashMap-如何-put-数据\"><a href=\"#HashMap-如何-put-数据\" class=\"headerlink\" title=\"HashMap 如何 put 数据\"></a>HashMap 如何 put 数据</h4><h4 id=\"手写实现-HashMap\"><a href=\"#手写实现-HashMap\" class=\"headerlink\" title=\"手写实现 HashMap\"></a>手写实现 HashMap</h4><h4 id=\"ConcurrentHashMap-的实现原理\"><a href=\"#ConcurrentHashMap-的实现原理\" class=\"headerlink\" title=\"ConcurrentHashMap 的实现原理\"></a>ConcurrentHashMap 的实现原理</h4><h4 id=\"ArrayMap-和-HashMap-的对比\"><a href=\"#ArrayMap-和-HashMap-的对比\" class=\"headerlink\" title=\"ArrayMap 和 HashMap 的对比\"></a>ArrayMap 和 HashMap 的对比</h4><h4 id=\"HashTable-实现原理\"><a href=\"#HashTable-实现原理\" class=\"headerlink\" title=\"HashTable 实现原理\"></a>HashTable 实现原理</h4><h4 id=\"和-HashSet-的区别\"><a href=\"#和-HashSet-的区别\" class=\"headerlink\" title=\"和 HashSet 的区别\"></a>和 HashSet 的区别</h4><h4 id=\"HashMap-和-HashSet-怎么判断集合元素重复\"><a href=\"#HashMap-和-HashSet-怎么判断集合元素重复\" class=\"headerlink\" title=\"HashMap 和 HashSet 怎么判断集合元素重复\"></a>HashMap 和 HashSet 怎么判断集合元素重复</h4><h4 id=\"集合-Set-实现-Hash-怎么防止碰撞\"><a href=\"#集合-Set-实现-Hash-怎么防止碰撞\" class=\"headerlink\" title=\"集合 Set 实现 Hash 怎么防止碰撞\"></a>集合 Set 实现 Hash 怎么防止碰撞</h4><h4 id=\"ArrayList-和-LinkedList-的区别，以及应用场景\"><a href=\"#ArrayList-和-LinkedList-的区别，以及应用场景\" class=\"headerlink\" title=\"ArrayList 和 LinkedList 的区别，以及应用场景\"></a>ArrayList 和 LinkedList 的区别，以及应用场景</h4><h4 id=\"数组和链表的区别\"><a href=\"#数组和链表的区别\" class=\"headerlink\" title=\"数组和链表的区别\"></a>数组和链表的区别</h4><h4 id=\"二叉树的深度优先遍历和广度优先遍历\"><a href=\"#二叉树的深度优先遍历和广度优先遍历\" class=\"headerlink\" title=\"二叉树的深度优先遍历和广度优先遍历\"></a>二叉树的深度优先遍历和广度优先遍历</h4><h4 id=\"堆的结构\"><a href=\"#堆的结构\" class=\"headerlink\" title=\"堆的结构\"></a>堆的结构</h4><h4 id=\"堆和树的区别\"><a href=\"#堆和树的区别\" class=\"headerlink\" title=\"堆和树的区别\"></a>堆和树的区别</h4><h4 id=\"堆和栈在内存中的区别是什么\"><a href=\"#堆和栈在内存中的区别是什么\" class=\"headerlink\" title=\"堆和栈在内存中的区别是什么\"></a>堆和栈在内存中的区别是什么</h4><p>可以从数据结构方面以及实际实现两个方面去回答</p>\n<h4 id=\"什么是深拷贝和浅拷贝\"><a href=\"#什么是深拷贝和浅拷贝\" class=\"headerlink\" title=\"什么是深拷贝和浅拷贝\"></a>什么是深拷贝和浅拷贝</h4><h4 id=\"手写链表逆转代码\"><a href=\"#手写链表逆转代码\" class=\"headerlink\" title=\"手写链表逆转代码\"></a>手写链表逆转代码</h4><h4 id=\"讲一下对数，B-数的理解\"><a href=\"#讲一下对数，B-数的理解\" class=\"headerlink\" title=\"讲一下对数，B+数的理解\"></a>讲一下对数，B+数的理解</h4><h4 id=\"讲一下对图的理解\"><a href=\"#讲一下对图的理解\" class=\"headerlink\" title=\"讲一下对图的理解\"></a>讲一下对图的理解</h4><h4 id=\"判断单链表成环与否\"><a href=\"#判断单链表成环与否\" class=\"headerlink\" title=\"判断单链表成环与否\"></a>判断单链表成环与否</h4><h4 id=\"链表翻转\"><a href=\"#链表翻转\" class=\"headerlink\" title=\"链表翻转\"></a>链表翻转</h4><p>即翻转一个单项链表</p>\n<h4 id=\"合并多个单有序链表\"><a href=\"#合并多个单有序链表\" class=\"headerlink\" title=\"合并多个单有序链表\"></a>合并多个单有序链表</h4>"},{"_content":"1. SSL 安全协议\n1. 对称加密与非对称加密\n\n## 密码学的相关概念\n- 密码学：目的是通过将信息编码使其不可读，从而达到安全性。\n- 明文：发送人、接受人和任何访问消息的人都能理解的消息。\n- 密文：明文消息经过某种编码后，得到密文消息。\n- 加密：将明文消息变成密文消息。\n- 解密：将密文消息变成明文消息。\n- 算法：取一个输入文本，产生一个输出文本。\n- 加密算法：发送方进行加密的算法。\n- 解密算法：接收方进行解密的算法。\n- 对称密钥加密：加密与解密使用相同的密钥。\n- 非对称密钥加密：加密与解密使用不同的密钥。\n\n## DES 算法\n\n\n\n\n1. SSL 证书的公信力如何保证\n1. SSL 协议握手时 Nginx 的性能瓶颈在哪\n\n1. Nginx 申请免费证书\n\n2. ","source":"_posts/HTTPS 教程/导言.md","raw":"1. SSL 安全协议\n1. 对称加密与非对称加密\n\n## 密码学的相关概念\n- 密码学：目的是通过将信息编码使其不可读，从而达到安全性。\n- 明文：发送人、接受人和任何访问消息的人都能理解的消息。\n- 密文：明文消息经过某种编码后，得到密文消息。\n- 加密：将明文消息变成密文消息。\n- 解密：将密文消息变成明文消息。\n- 算法：取一个输入文本，产生一个输出文本。\n- 加密算法：发送方进行加密的算法。\n- 解密算法：接收方进行解密的算法。\n- 对称密钥加密：加密与解密使用相同的密钥。\n- 非对称密钥加密：加密与解密使用不同的密钥。\n\n## DES 算法\n\n\n\n\n1. SSL 证书的公信力如何保证\n1. SSL 协议握手时 Nginx 的性能瓶颈在哪\n\n1. Nginx 申请免费证书\n\n2. ","slug":"HTTPS 教程/导言","published":1,"date":"2020-04-12T08:28:29.197Z","updated":"2020-04-12T08:28:29.197Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m2z000am33pz44sh3fh","content":"<ol>\n<li>SSL 安全协议</li>\n<li>对称加密与非对称加密</li>\n</ol>\n<h2 id=\"密码学的相关概念\"><a href=\"#密码学的相关概念\" class=\"headerlink\" title=\"密码学的相关概念\"></a>密码学的相关概念</h2><ul>\n<li>密码学：目的是通过将信息编码使其不可读，从而达到安全性。</li>\n<li>明文：发送人、接受人和任何访问消息的人都能理解的消息。</li>\n<li>密文：明文消息经过某种编码后，得到密文消息。</li>\n<li>加密：将明文消息变成密文消息。</li>\n<li>解密：将密文消息变成明文消息。</li>\n<li>算法：取一个输入文本，产生一个输出文本。</li>\n<li>加密算法：发送方进行加密的算法。</li>\n<li>解密算法：接收方进行解密的算法。</li>\n<li>对称密钥加密：加密与解密使用相同的密钥。</li>\n<li>非对称密钥加密：加密与解密使用不同的密钥。</li>\n</ul>\n<h2 id=\"DES-算法\"><a href=\"#DES-算法\" class=\"headerlink\" title=\"DES 算法\"></a>DES 算法</h2><ol>\n<li>SSL 证书的公信力如何保证</li>\n<li><p>SSL 协议握手时 Nginx 的性能瓶颈在哪</p>\n</li>\n<li><p>Nginx 申请免费证书</p>\n</li>\n<li></li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<ol>\n<li>SSL 安全协议</li>\n<li>对称加密与非对称加密</li>\n</ol>\n<h2 id=\"密码学的相关概念\"><a href=\"#密码学的相关概念\" class=\"headerlink\" title=\"密码学的相关概念\"></a>密码学的相关概念</h2><ul>\n<li>密码学：目的是通过将信息编码使其不可读，从而达到安全性。</li>\n<li>明文：发送人、接受人和任何访问消息的人都能理解的消息。</li>\n<li>密文：明文消息经过某种编码后，得到密文消息。</li>\n<li>加密：将明文消息变成密文消息。</li>\n<li>解密：将密文消息变成明文消息。</li>\n<li>算法：取一个输入文本，产生一个输出文本。</li>\n<li>加密算法：发送方进行加密的算法。</li>\n<li>解密算法：接收方进行解密的算法。</li>\n<li>对称密钥加密：加密与解密使用相同的密钥。</li>\n<li>非对称密钥加密：加密与解密使用不同的密钥。</li>\n</ul>\n<h2 id=\"DES-算法\"><a href=\"#DES-算法\" class=\"headerlink\" title=\"DES 算法\"></a>DES 算法</h2><ol>\n<li>SSL 证书的公信力如何保证</li>\n<li><p>SSL 协议握手时 Nginx 的性能瓶颈在哪</p>\n</li>\n<li><p>Nginx 申请免费证书</p>\n</li>\n<li></li>\n</ol>\n"},{"title":"Chapter 1.3 线程","date":"2020-04-27T16:00:13.000Z","_content":"#### 开启线程的三种方式\n\n#### 线程和进程的区别\n\n#### 为什么要有线程而不是仅仅用进程\n\n#### run() 和 start() 方法的区别\n\n#### 如何控制某个方法允许并发访问线程的个数\n\n#### 在 Java 中 wait 和 seelp 方法的不同\n\n#### 谈谈 wait、notify 关键字的理解\n\n#### 什么导致线程阻塞\n\n#### 线程如何关闭\n\n#### 讲一下 Java 中的同步方法\n\n#### 数据一致性如何保证\n\n#### 如何保证线程安全\n\n#### 如何实现线程同步\n\n#### 两个进程同时要求读写，能不能实现？如何防止进程的同步\n\n#### Java 中对象的生命周期\n\n#### Synchronized 的用法\n\n#### Synchronized 的原理\n\n#### 谈谈对 Synchronized 关键字、类锁、方法锁、重入锁的理解\n\n#### static synchronized 方法的多线程访问和作用\n\n#### 同一个类里面两个 synchronized 方法，两个线程同时访问的问题\n\n#### volatile 的原理\n\n#### 谈谈 volatile 关键字的用法\n\n#### 谈谈 volatile 关键字的作用\n\n#### 谈谈 NIO 的理解\n\n#### synchronized 和 volatile 关键字的区别\n\n#### synchronized 和 lock 的区别\n\n#### ReentrantLock、synchronized 和 volatile 比较\n\n#### ReentrantLock 的内部实现\n\n#### lock 原理\n\n#### 死锁的四个必要条件\n\n#### 怎么避免死锁\n\n#### 对象锁的类锁是否会相互影响\n\n#### 什么是线程池，如何使用\n\n#### Java的并发、多线程、线程模型\n\n#### 谈谈对多线程的理解\n\n#### 多线程有什么要注意的问题\n\n#### 谈谈你对并发编程的理解并举例说明\n\n#### 谈谈你对多线程同步机制的理解\n\n#### 如何保证多线程读写文件的安全\n\n#### 多线程断点续传原理\n\n#### 断续续传的实现","source":"_posts/Interview/Chapter 1.3 线程.md","raw":"---\ntitle: Chapter 1.3 线程\n\ncategories:\n- Interview\n\ndate: 2020-04-28 00:00:13\n---\n#### 开启线程的三种方式\n\n#### 线程和进程的区别\n\n#### 为什么要有线程而不是仅仅用进程\n\n#### run() 和 start() 方法的区别\n\n#### 如何控制某个方法允许并发访问线程的个数\n\n#### 在 Java 中 wait 和 seelp 方法的不同\n\n#### 谈谈 wait、notify 关键字的理解\n\n#### 什么导致线程阻塞\n\n#### 线程如何关闭\n\n#### 讲一下 Java 中的同步方法\n\n#### 数据一致性如何保证\n\n#### 如何保证线程安全\n\n#### 如何实现线程同步\n\n#### 两个进程同时要求读写，能不能实现？如何防止进程的同步\n\n#### Java 中对象的生命周期\n\n#### Synchronized 的用法\n\n#### Synchronized 的原理\n\n#### 谈谈对 Synchronized 关键字、类锁、方法锁、重入锁的理解\n\n#### static synchronized 方法的多线程访问和作用\n\n#### 同一个类里面两个 synchronized 方法，两个线程同时访问的问题\n\n#### volatile 的原理\n\n#### 谈谈 volatile 关键字的用法\n\n#### 谈谈 volatile 关键字的作用\n\n#### 谈谈 NIO 的理解\n\n#### synchronized 和 volatile 关键字的区别\n\n#### synchronized 和 lock 的区别\n\n#### ReentrantLock、synchronized 和 volatile 比较\n\n#### ReentrantLock 的内部实现\n\n#### lock 原理\n\n#### 死锁的四个必要条件\n\n#### 怎么避免死锁\n\n#### 对象锁的类锁是否会相互影响\n\n#### 什么是线程池，如何使用\n\n#### Java的并发、多线程、线程模型\n\n#### 谈谈对多线程的理解\n\n#### 多线程有什么要注意的问题\n\n#### 谈谈你对并发编程的理解并举例说明\n\n#### 谈谈你对多线程同步机制的理解\n\n#### 如何保证多线程读写文件的安全\n\n#### 多线程断点续传原理\n\n#### 断续续传的实现","slug":"Interview/Chapter 1.3 线程","published":1,"updated":"2020-05-01T07:42:35.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m32000bm33pggzt9jt8","content":"<h4 id=\"开启线程的三种方式\"><a href=\"#开启线程的三种方式\" class=\"headerlink\" title=\"开启线程的三种方式\"></a>开启线程的三种方式</h4><h4 id=\"线程和进程的区别\"><a href=\"#线程和进程的区别\" class=\"headerlink\" title=\"线程和进程的区别\"></a>线程和进程的区别</h4><h4 id=\"为什么要有线程而不是仅仅用进程\"><a href=\"#为什么要有线程而不是仅仅用进程\" class=\"headerlink\" title=\"为什么要有线程而不是仅仅用进程\"></a>为什么要有线程而不是仅仅用进程</h4><h4 id=\"run-和-start-方法的区别\"><a href=\"#run-和-start-方法的区别\" class=\"headerlink\" title=\"run() 和 start() 方法的区别\"></a>run() 和 start() 方法的区别</h4><h4 id=\"如何控制某个方法允许并发访问线程的个数\"><a href=\"#如何控制某个方法允许并发访问线程的个数\" class=\"headerlink\" title=\"如何控制某个方法允许并发访问线程的个数\"></a>如何控制某个方法允许并发访问线程的个数</h4><h4 id=\"在-Java-中-wait-和-seelp-方法的不同\"><a href=\"#在-Java-中-wait-和-seelp-方法的不同\" class=\"headerlink\" title=\"在 Java 中 wait 和 seelp 方法的不同\"></a>在 Java 中 wait 和 seelp 方法的不同</h4><h4 id=\"谈谈-wait、notify-关键字的理解\"><a href=\"#谈谈-wait、notify-关键字的理解\" class=\"headerlink\" title=\"谈谈 wait、notify 关键字的理解\"></a>谈谈 wait、notify 关键字的理解</h4><h4 id=\"什么导致线程阻塞\"><a href=\"#什么导致线程阻塞\" class=\"headerlink\" title=\"什么导致线程阻塞\"></a>什么导致线程阻塞</h4><h4 id=\"线程如何关闭\"><a href=\"#线程如何关闭\" class=\"headerlink\" title=\"线程如何关闭\"></a>线程如何关闭</h4><h4 id=\"讲一下-Java-中的同步方法\"><a href=\"#讲一下-Java-中的同步方法\" class=\"headerlink\" title=\"讲一下 Java 中的同步方法\"></a>讲一下 Java 中的同步方法</h4><h4 id=\"数据一致性如何保证\"><a href=\"#数据一致性如何保证\" class=\"headerlink\" title=\"数据一致性如何保证\"></a>数据一致性如何保证</h4><h4 id=\"如何保证线程安全\"><a href=\"#如何保证线程安全\" class=\"headerlink\" title=\"如何保证线程安全\"></a>如何保证线程安全</h4><h4 id=\"如何实现线程同步\"><a href=\"#如何实现线程同步\" class=\"headerlink\" title=\"如何实现线程同步\"></a>如何实现线程同步</h4><h4 id=\"两个进程同时要求读写，能不能实现？如何防止进程的同步\"><a href=\"#两个进程同时要求读写，能不能实现？如何防止进程的同步\" class=\"headerlink\" title=\"两个进程同时要求读写，能不能实现？如何防止进程的同步\"></a>两个进程同时要求读写，能不能实现？如何防止进程的同步</h4><h4 id=\"Java-中对象的生命周期\"><a href=\"#Java-中对象的生命周期\" class=\"headerlink\" title=\"Java 中对象的生命周期\"></a>Java 中对象的生命周期</h4><h4 id=\"Synchronized-的用法\"><a href=\"#Synchronized-的用法\" class=\"headerlink\" title=\"Synchronized 的用法\"></a>Synchronized 的用法</h4><h4 id=\"Synchronized-的原理\"><a href=\"#Synchronized-的原理\" class=\"headerlink\" title=\"Synchronized 的原理\"></a>Synchronized 的原理</h4><h4 id=\"谈谈对-Synchronized-关键字、类锁、方法锁、重入锁的理解\"><a href=\"#谈谈对-Synchronized-关键字、类锁、方法锁、重入锁的理解\" class=\"headerlink\" title=\"谈谈对 Synchronized 关键字、类锁、方法锁、重入锁的理解\"></a>谈谈对 Synchronized 关键字、类锁、方法锁、重入锁的理解</h4><h4 id=\"static-synchronized-方法的多线程访问和作用\"><a href=\"#static-synchronized-方法的多线程访问和作用\" class=\"headerlink\" title=\"static synchronized 方法的多线程访问和作用\"></a>static synchronized 方法的多线程访问和作用</h4><h4 id=\"同一个类里面两个-synchronized-方法，两个线程同时访问的问题\"><a href=\"#同一个类里面两个-synchronized-方法，两个线程同时访问的问题\" class=\"headerlink\" title=\"同一个类里面两个 synchronized 方法，两个线程同时访问的问题\"></a>同一个类里面两个 synchronized 方法，两个线程同时访问的问题</h4><h4 id=\"volatile-的原理\"><a href=\"#volatile-的原理\" class=\"headerlink\" title=\"volatile 的原理\"></a>volatile 的原理</h4><h4 id=\"谈谈-volatile-关键字的用法\"><a href=\"#谈谈-volatile-关键字的用法\" class=\"headerlink\" title=\"谈谈 volatile 关键字的用法\"></a>谈谈 volatile 关键字的用法</h4><h4 id=\"谈谈-volatile-关键字的作用\"><a href=\"#谈谈-volatile-关键字的作用\" class=\"headerlink\" title=\"谈谈 volatile 关键字的作用\"></a>谈谈 volatile 关键字的作用</h4><h4 id=\"谈谈-NIO-的理解\"><a href=\"#谈谈-NIO-的理解\" class=\"headerlink\" title=\"谈谈 NIO 的理解\"></a>谈谈 NIO 的理解</h4><h4 id=\"synchronized-和-volatile-关键字的区别\"><a href=\"#synchronized-和-volatile-关键字的区别\" class=\"headerlink\" title=\"synchronized 和 volatile 关键字的区别\"></a>synchronized 和 volatile 关键字的区别</h4><h4 id=\"synchronized-和-lock-的区别\"><a href=\"#synchronized-和-lock-的区别\" class=\"headerlink\" title=\"synchronized 和 lock 的区别\"></a>synchronized 和 lock 的区别</h4><h4 id=\"ReentrantLock、synchronized-和-volatile-比较\"><a href=\"#ReentrantLock、synchronized-和-volatile-比较\" class=\"headerlink\" title=\"ReentrantLock、synchronized 和 volatile 比较\"></a>ReentrantLock、synchronized 和 volatile 比较</h4><h4 id=\"ReentrantLock-的内部实现\"><a href=\"#ReentrantLock-的内部实现\" class=\"headerlink\" title=\"ReentrantLock 的内部实现\"></a>ReentrantLock 的内部实现</h4><h4 id=\"lock-原理\"><a href=\"#lock-原理\" class=\"headerlink\" title=\"lock 原理\"></a>lock 原理</h4><h4 id=\"死锁的四个必要条件\"><a href=\"#死锁的四个必要条件\" class=\"headerlink\" title=\"死锁的四个必要条件\"></a>死锁的四个必要条件</h4><h4 id=\"怎么避免死锁\"><a href=\"#怎么避免死锁\" class=\"headerlink\" title=\"怎么避免死锁\"></a>怎么避免死锁</h4><h4 id=\"对象锁的类锁是否会相互影响\"><a href=\"#对象锁的类锁是否会相互影响\" class=\"headerlink\" title=\"对象锁的类锁是否会相互影响\"></a>对象锁的类锁是否会相互影响</h4><h4 id=\"什么是线程池，如何使用\"><a href=\"#什么是线程池，如何使用\" class=\"headerlink\" title=\"什么是线程池，如何使用\"></a>什么是线程池，如何使用</h4><h4 id=\"Java的并发、多线程、线程模型\"><a href=\"#Java的并发、多线程、线程模型\" class=\"headerlink\" title=\"Java的并发、多线程、线程模型\"></a>Java的并发、多线程、线程模型</h4><h4 id=\"谈谈对多线程的理解\"><a href=\"#谈谈对多线程的理解\" class=\"headerlink\" title=\"谈谈对多线程的理解\"></a>谈谈对多线程的理解</h4><h4 id=\"多线程有什么要注意的问题\"><a href=\"#多线程有什么要注意的问题\" class=\"headerlink\" title=\"多线程有什么要注意的问题\"></a>多线程有什么要注意的问题</h4><h4 id=\"谈谈你对并发编程的理解并举例说明\"><a href=\"#谈谈你对并发编程的理解并举例说明\" class=\"headerlink\" title=\"谈谈你对并发编程的理解并举例说明\"></a>谈谈你对并发编程的理解并举例说明</h4><h4 id=\"谈谈你对多线程同步机制的理解\"><a href=\"#谈谈你对多线程同步机制的理解\" class=\"headerlink\" title=\"谈谈你对多线程同步机制的理解\"></a>谈谈你对多线程同步机制的理解</h4><h4 id=\"如何保证多线程读写文件的安全\"><a href=\"#如何保证多线程读写文件的安全\" class=\"headerlink\" title=\"如何保证多线程读写文件的安全\"></a>如何保证多线程读写文件的安全</h4><h4 id=\"多线程断点续传原理\"><a href=\"#多线程断点续传原理\" class=\"headerlink\" title=\"多线程断点续传原理\"></a>多线程断点续传原理</h4><h4 id=\"断续续传的实现\"><a href=\"#断续续传的实现\" class=\"headerlink\" title=\"断续续传的实现\"></a>断续续传的实现</h4>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h4 id=\"开启线程的三种方式\"><a href=\"#开启线程的三种方式\" class=\"headerlink\" title=\"开启线程的三种方式\"></a>开启线程的三种方式</h4><h4 id=\"线程和进程的区别\"><a href=\"#线程和进程的区别\" class=\"headerlink\" title=\"线程和进程的区别\"></a>线程和进程的区别</h4><h4 id=\"为什么要有线程而不是仅仅用进程\"><a href=\"#为什么要有线程而不是仅仅用进程\" class=\"headerlink\" title=\"为什么要有线程而不是仅仅用进程\"></a>为什么要有线程而不是仅仅用进程</h4><h4 id=\"run-和-start-方法的区别\"><a href=\"#run-和-start-方法的区别\" class=\"headerlink\" title=\"run() 和 start() 方法的区别\"></a>run() 和 start() 方法的区别</h4><h4 id=\"如何控制某个方法允许并发访问线程的个数\"><a href=\"#如何控制某个方法允许并发访问线程的个数\" class=\"headerlink\" title=\"如何控制某个方法允许并发访问线程的个数\"></a>如何控制某个方法允许并发访问线程的个数</h4><h4 id=\"在-Java-中-wait-和-seelp-方法的不同\"><a href=\"#在-Java-中-wait-和-seelp-方法的不同\" class=\"headerlink\" title=\"在 Java 中 wait 和 seelp 方法的不同\"></a>在 Java 中 wait 和 seelp 方法的不同</h4><h4 id=\"谈谈-wait、notify-关键字的理解\"><a href=\"#谈谈-wait、notify-关键字的理解\" class=\"headerlink\" title=\"谈谈 wait、notify 关键字的理解\"></a>谈谈 wait、notify 关键字的理解</h4><h4 id=\"什么导致线程阻塞\"><a href=\"#什么导致线程阻塞\" class=\"headerlink\" title=\"什么导致线程阻塞\"></a>什么导致线程阻塞</h4><h4 id=\"线程如何关闭\"><a href=\"#线程如何关闭\" class=\"headerlink\" title=\"线程如何关闭\"></a>线程如何关闭</h4><h4 id=\"讲一下-Java-中的同步方法\"><a href=\"#讲一下-Java-中的同步方法\" class=\"headerlink\" title=\"讲一下 Java 中的同步方法\"></a>讲一下 Java 中的同步方法</h4><h4 id=\"数据一致性如何保证\"><a href=\"#数据一致性如何保证\" class=\"headerlink\" title=\"数据一致性如何保证\"></a>数据一致性如何保证</h4><h4 id=\"如何保证线程安全\"><a href=\"#如何保证线程安全\" class=\"headerlink\" title=\"如何保证线程安全\"></a>如何保证线程安全</h4><h4 id=\"如何实现线程同步\"><a href=\"#如何实现线程同步\" class=\"headerlink\" title=\"如何实现线程同步\"></a>如何实现线程同步</h4><h4 id=\"两个进程同时要求读写，能不能实现？如何防止进程的同步\"><a href=\"#两个进程同时要求读写，能不能实现？如何防止进程的同步\" class=\"headerlink\" title=\"两个进程同时要求读写，能不能实现？如何防止进程的同步\"></a>两个进程同时要求读写，能不能实现？如何防止进程的同步</h4><h4 id=\"Java-中对象的生命周期\"><a href=\"#Java-中对象的生命周期\" class=\"headerlink\" title=\"Java 中对象的生命周期\"></a>Java 中对象的生命周期</h4><h4 id=\"Synchronized-的用法\"><a href=\"#Synchronized-的用法\" class=\"headerlink\" title=\"Synchronized 的用法\"></a>Synchronized 的用法</h4><h4 id=\"Synchronized-的原理\"><a href=\"#Synchronized-的原理\" class=\"headerlink\" title=\"Synchronized 的原理\"></a>Synchronized 的原理</h4><h4 id=\"谈谈对-Synchronized-关键字、类锁、方法锁、重入锁的理解\"><a href=\"#谈谈对-Synchronized-关键字、类锁、方法锁、重入锁的理解\" class=\"headerlink\" title=\"谈谈对 Synchronized 关键字、类锁、方法锁、重入锁的理解\"></a>谈谈对 Synchronized 关键字、类锁、方法锁、重入锁的理解</h4><h4 id=\"static-synchronized-方法的多线程访问和作用\"><a href=\"#static-synchronized-方法的多线程访问和作用\" class=\"headerlink\" title=\"static synchronized 方法的多线程访问和作用\"></a>static synchronized 方法的多线程访问和作用</h4><h4 id=\"同一个类里面两个-synchronized-方法，两个线程同时访问的问题\"><a href=\"#同一个类里面两个-synchronized-方法，两个线程同时访问的问题\" class=\"headerlink\" title=\"同一个类里面两个 synchronized 方法，两个线程同时访问的问题\"></a>同一个类里面两个 synchronized 方法，两个线程同时访问的问题</h4><h4 id=\"volatile-的原理\"><a href=\"#volatile-的原理\" class=\"headerlink\" title=\"volatile 的原理\"></a>volatile 的原理</h4><h4 id=\"谈谈-volatile-关键字的用法\"><a href=\"#谈谈-volatile-关键字的用法\" class=\"headerlink\" title=\"谈谈 volatile 关键字的用法\"></a>谈谈 volatile 关键字的用法</h4><h4 id=\"谈谈-volatile-关键字的作用\"><a href=\"#谈谈-volatile-关键字的作用\" class=\"headerlink\" title=\"谈谈 volatile 关键字的作用\"></a>谈谈 volatile 关键字的作用</h4><h4 id=\"谈谈-NIO-的理解\"><a href=\"#谈谈-NIO-的理解\" class=\"headerlink\" title=\"谈谈 NIO 的理解\"></a>谈谈 NIO 的理解</h4><h4 id=\"synchronized-和-volatile-关键字的区别\"><a href=\"#synchronized-和-volatile-关键字的区别\" class=\"headerlink\" title=\"synchronized 和 volatile 关键字的区别\"></a>synchronized 和 volatile 关键字的区别</h4><h4 id=\"synchronized-和-lock-的区别\"><a href=\"#synchronized-和-lock-的区别\" class=\"headerlink\" title=\"synchronized 和 lock 的区别\"></a>synchronized 和 lock 的区别</h4><h4 id=\"ReentrantLock、synchronized-和-volatile-比较\"><a href=\"#ReentrantLock、synchronized-和-volatile-比较\" class=\"headerlink\" title=\"ReentrantLock、synchronized 和 volatile 比较\"></a>ReentrantLock、synchronized 和 volatile 比较</h4><h4 id=\"ReentrantLock-的内部实现\"><a href=\"#ReentrantLock-的内部实现\" class=\"headerlink\" title=\"ReentrantLock 的内部实现\"></a>ReentrantLock 的内部实现</h4><h4 id=\"lock-原理\"><a href=\"#lock-原理\" class=\"headerlink\" title=\"lock 原理\"></a>lock 原理</h4><h4 id=\"死锁的四个必要条件\"><a href=\"#死锁的四个必要条件\" class=\"headerlink\" title=\"死锁的四个必要条件\"></a>死锁的四个必要条件</h4><h4 id=\"怎么避免死锁\"><a href=\"#怎么避免死锁\" class=\"headerlink\" title=\"怎么避免死锁\"></a>怎么避免死锁</h4><h4 id=\"对象锁的类锁是否会相互影响\"><a href=\"#对象锁的类锁是否会相互影响\" class=\"headerlink\" title=\"对象锁的类锁是否会相互影响\"></a>对象锁的类锁是否会相互影响</h4><h4 id=\"什么是线程池，如何使用\"><a href=\"#什么是线程池，如何使用\" class=\"headerlink\" title=\"什么是线程池，如何使用\"></a>什么是线程池，如何使用</h4><h4 id=\"Java的并发、多线程、线程模型\"><a href=\"#Java的并发、多线程、线程模型\" class=\"headerlink\" title=\"Java的并发、多线程、线程模型\"></a>Java的并发、多线程、线程模型</h4><h4 id=\"谈谈对多线程的理解\"><a href=\"#谈谈对多线程的理解\" class=\"headerlink\" title=\"谈谈对多线程的理解\"></a>谈谈对多线程的理解</h4><h4 id=\"多线程有什么要注意的问题\"><a href=\"#多线程有什么要注意的问题\" class=\"headerlink\" title=\"多线程有什么要注意的问题\"></a>多线程有什么要注意的问题</h4><h4 id=\"谈谈你对并发编程的理解并举例说明\"><a href=\"#谈谈你对并发编程的理解并举例说明\" class=\"headerlink\" title=\"谈谈你对并发编程的理解并举例说明\"></a>谈谈你对并发编程的理解并举例说明</h4><h4 id=\"谈谈你对多线程同步机制的理解\"><a href=\"#谈谈你对多线程同步机制的理解\" class=\"headerlink\" title=\"谈谈你对多线程同步机制的理解\"></a>谈谈你对多线程同步机制的理解</h4><h4 id=\"如何保证多线程读写文件的安全\"><a href=\"#如何保证多线程读写文件的安全\" class=\"headerlink\" title=\"如何保证多线程读写文件的安全\"></a>如何保证多线程读写文件的安全</h4><h4 id=\"多线程断点续传原理\"><a href=\"#多线程断点续传原理\" class=\"headerlink\" title=\"多线程断点续传原理\"></a>多线程断点续传原理</h4><h4 id=\"断续续传的实现\"><a href=\"#断续续传的实现\" class=\"headerlink\" title=\"断续续传的实现\"></a>断续续传的实现</h4>"},{"title":"Chapter 2.1 虚拟机","date":"2020-04-27T16:00:21.000Z","_content":"\n#### JVM 性能调优都做了什么\n\n#### 讲一下 JVM、垃圾回收、内存划分\n\n#### 有实际的 JVM 性能优化经验？重点应该监控哪些指标，以及如何来调整参数\n\n#### JVM 有哪些回收算法，对应的收集器有哪些\n\n#### JVM G1 的内存模型讲一下，G1 和 GMS 收集器的区别？以及 G1 收集器对 GMS 的改进\n\n#### GMS 和 G1 了解么，GMS 解决了什么问题？说一下回收的过程\n\n#### GMS 回收停顿了几次，为什么要停顿两次\n\n#### Java 栈什么时候会发生内存溢出，Java 堆呢？\n说一种场景\n\n#### 你了解哪些收集器？GMS 和 G1，详细讲讲 G1 的优点           \n\n#### 你在项目中一般怎么调优 JVM 的呢\n\n#### 讲一下 GC 吧，什么时候进行 FULL GC 呢\n\n## void mian()\n\n## void main()\n\n## testing    nnnnnbbvjju\n\n## pbulic dkjgdskgjkfdjgkkkkkjqinhu\n\n## \n\npublic static void main(String[]) {\n    System.out.println(\"HelloWorld\");\n}\n\n## void ","source":"_posts/Interview/Chapter 2.1 虚拟机.md","raw":"---\ntitle: Chapter 2.1 虚拟机\n\ncategories:\n- Interview\n\ndate: 2020-04-28 00:00:21\n---\n\n#### JVM 性能调优都做了什么\n\n#### 讲一下 JVM、垃圾回收、内存划分\n\n#### 有实际的 JVM 性能优化经验？重点应该监控哪些指标，以及如何来调整参数\n\n#### JVM 有哪些回收算法，对应的收集器有哪些\n\n#### JVM G1 的内存模型讲一下，G1 和 GMS 收集器的区别？以及 G1 收集器对 GMS 的改进\n\n#### GMS 和 G1 了解么，GMS 解决了什么问题？说一下回收的过程\n\n#### GMS 回收停顿了几次，为什么要停顿两次\n\n#### Java 栈什么时候会发生内存溢出，Java 堆呢？\n说一种场景\n\n#### 你了解哪些收集器？GMS 和 G1，详细讲讲 G1 的优点           \n\n#### 你在项目中一般怎么调优 JVM 的呢\n\n#### 讲一下 GC 吧，什么时候进行 FULL GC 呢\n\n## void mian()\n\n## void main()\n\n## testing    nnnnnbbvjju\n\n## pbulic dkjgdskgjkfdjgkkkkkjqinhu\n\n## \n\npublic static void main(String[]) {\n    System.out.println(\"HelloWorld\");\n}\n\n## void ","slug":"Interview/Chapter 2.1 虚拟机","published":1,"updated":"2020-05-01T07:42:35.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m33000dm33py57txcll","content":"<h4 id=\"JVM-性能调优都做了什么\"><a href=\"#JVM-性能调优都做了什么\" class=\"headerlink\" title=\"JVM 性能调优都做了什么\"></a>JVM 性能调优都做了什么</h4><h4 id=\"讲一下-JVM、垃圾回收、内存划分\"><a href=\"#讲一下-JVM、垃圾回收、内存划分\" class=\"headerlink\" title=\"讲一下 JVM、垃圾回收、内存划分\"></a>讲一下 JVM、垃圾回收、内存划分</h4><h4 id=\"有实际的-JVM-性能优化经验？重点应该监控哪些指标，以及如何来调整参数\"><a href=\"#有实际的-JVM-性能优化经验？重点应该监控哪些指标，以及如何来调整参数\" class=\"headerlink\" title=\"有实际的 JVM 性能优化经验？重点应该监控哪些指标，以及如何来调整参数\"></a>有实际的 JVM 性能优化经验？重点应该监控哪些指标，以及如何来调整参数</h4><h4 id=\"JVM-有哪些回收算法，对应的收集器有哪些\"><a href=\"#JVM-有哪些回收算法，对应的收集器有哪些\" class=\"headerlink\" title=\"JVM 有哪些回收算法，对应的收集器有哪些\"></a>JVM 有哪些回收算法，对应的收集器有哪些</h4><h4 id=\"JVM-G1-的内存模型讲一下，G1-和-GMS-收集器的区别？以及-G1-收集器对-GMS-的改进\"><a href=\"#JVM-G1-的内存模型讲一下，G1-和-GMS-收集器的区别？以及-G1-收集器对-GMS-的改进\" class=\"headerlink\" title=\"JVM G1 的内存模型讲一下，G1 和 GMS 收集器的区别？以及 G1 收集器对 GMS 的改进\"></a>JVM G1 的内存模型讲一下，G1 和 GMS 收集器的区别？以及 G1 收集器对 GMS 的改进</h4><h4 id=\"GMS-和-G1-了解么，GMS-解决了什么问题？说一下回收的过程\"><a href=\"#GMS-和-G1-了解么，GMS-解决了什么问题？说一下回收的过程\" class=\"headerlink\" title=\"GMS 和 G1 了解么，GMS 解决了什么问题？说一下回收的过程\"></a>GMS 和 G1 了解么，GMS 解决了什么问题？说一下回收的过程</h4><h4 id=\"GMS-回收停顿了几次，为什么要停顿两次\"><a href=\"#GMS-回收停顿了几次，为什么要停顿两次\" class=\"headerlink\" title=\"GMS 回收停顿了几次，为什么要停顿两次\"></a>GMS 回收停顿了几次，为什么要停顿两次</h4><h4 id=\"Java-栈什么时候会发生内存溢出，Java-堆呢？\"><a href=\"#Java-栈什么时候会发生内存溢出，Java-堆呢？\" class=\"headerlink\" title=\"Java 栈什么时候会发生内存溢出，Java 堆呢？\"></a>Java 栈什么时候会发生内存溢出，Java 堆呢？</h4><p>说一种场景</p>\n<h4 id=\"你了解哪些收集器？GMS-和-G1，详细讲讲-G1-的优点\"><a href=\"#你了解哪些收集器？GMS-和-G1，详细讲讲-G1-的优点\" class=\"headerlink\" title=\"你了解哪些收集器？GMS 和 G1，详细讲讲 G1 的优点\"></a>你了解哪些收集器？GMS 和 G1，详细讲讲 G1 的优点</h4><h4 id=\"你在项目中一般怎么调优-JVM-的呢\"><a href=\"#你在项目中一般怎么调优-JVM-的呢\" class=\"headerlink\" title=\"你在项目中一般怎么调优 JVM 的呢\"></a>你在项目中一般怎么调优 JVM 的呢</h4><h4 id=\"讲一下-GC-吧，什么时候进行-FULL-GC-呢\"><a href=\"#讲一下-GC-吧，什么时候进行-FULL-GC-呢\" class=\"headerlink\" title=\"讲一下 GC 吧，什么时候进行 FULL GC 呢\"></a>讲一下 GC 吧，什么时候进行 FULL GC 呢</h4><h2 id=\"void-mian\"><a href=\"#void-mian\" class=\"headerlink\" title=\"void mian()\"></a>void mian()</h2><h2 id=\"void-main\"><a href=\"#void-main\" class=\"headerlink\" title=\"void main()\"></a>void main()</h2><h2 id=\"testing-nnnnnbbvjju\"><a href=\"#testing-nnnnnbbvjju\" class=\"headerlink\" title=\"testing    nnnnnbbvjju\"></a>testing    nnnnnbbvjju</h2><h2 id=\"pbulic-dkjgdskgjkfdjgkkkkkjqinhu\"><a href=\"#pbulic-dkjgdskgjkfdjgkkkkkjqinhu\" class=\"headerlink\" title=\"pbulic dkjgdskgjkfdjgkkkkkjqinhu\"></a>pbulic dkjgdskgjkfdjgkkkkkjqinhu</h2><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><p>public static void main(String[]) {<br>    System.out.println(“HelloWorld”);<br>}</p>\n<h2 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h2>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h4 id=\"JVM-性能调优都做了什么\"><a href=\"#JVM-性能调优都做了什么\" class=\"headerlink\" title=\"JVM 性能调优都做了什么\"></a>JVM 性能调优都做了什么</h4><h4 id=\"讲一下-JVM、垃圾回收、内存划分\"><a href=\"#讲一下-JVM、垃圾回收、内存划分\" class=\"headerlink\" title=\"讲一下 JVM、垃圾回收、内存划分\"></a>讲一下 JVM、垃圾回收、内存划分</h4><h4 id=\"有实际的-JVM-性能优化经验？重点应该监控哪些指标，以及如何来调整参数\"><a href=\"#有实际的-JVM-性能优化经验？重点应该监控哪些指标，以及如何来调整参数\" class=\"headerlink\" title=\"有实际的 JVM 性能优化经验？重点应该监控哪些指标，以及如何来调整参数\"></a>有实际的 JVM 性能优化经验？重点应该监控哪些指标，以及如何来调整参数</h4><h4 id=\"JVM-有哪些回收算法，对应的收集器有哪些\"><a href=\"#JVM-有哪些回收算法，对应的收集器有哪些\" class=\"headerlink\" title=\"JVM 有哪些回收算法，对应的收集器有哪些\"></a>JVM 有哪些回收算法，对应的收集器有哪些</h4><h4 id=\"JVM-G1-的内存模型讲一下，G1-和-GMS-收集器的区别？以及-G1-收集器对-GMS-的改进\"><a href=\"#JVM-G1-的内存模型讲一下，G1-和-GMS-收集器的区别？以及-G1-收集器对-GMS-的改进\" class=\"headerlink\" title=\"JVM G1 的内存模型讲一下，G1 和 GMS 收集器的区别？以及 G1 收集器对 GMS 的改进\"></a>JVM G1 的内存模型讲一下，G1 和 GMS 收集器的区别？以及 G1 收集器对 GMS 的改进</h4><h4 id=\"GMS-和-G1-了解么，GMS-解决了什么问题？说一下回收的过程\"><a href=\"#GMS-和-G1-了解么，GMS-解决了什么问题？说一下回收的过程\" class=\"headerlink\" title=\"GMS 和 G1 了解么，GMS 解决了什么问题？说一下回收的过程\"></a>GMS 和 G1 了解么，GMS 解决了什么问题？说一下回收的过程</h4><h4 id=\"GMS-回收停顿了几次，为什么要停顿两次\"><a href=\"#GMS-回收停顿了几次，为什么要停顿两次\" class=\"headerlink\" title=\"GMS 回收停顿了几次，为什么要停顿两次\"></a>GMS 回收停顿了几次，为什么要停顿两次</h4><h4 id=\"Java-栈什么时候会发生内存溢出，Java-堆呢？\"><a href=\"#Java-栈什么时候会发生内存溢出，Java-堆呢？\" class=\"headerlink\" title=\"Java 栈什么时候会发生内存溢出，Java 堆呢？\"></a>Java 栈什么时候会发生内存溢出，Java 堆呢？</h4><p>说一种场景</p>\n<h4 id=\"你了解哪些收集器？GMS-和-G1，详细讲讲-G1-的优点\"><a href=\"#你了解哪些收集器？GMS-和-G1，详细讲讲-G1-的优点\" class=\"headerlink\" title=\"你了解哪些收集器？GMS 和 G1，详细讲讲 G1 的优点\"></a>你了解哪些收集器？GMS 和 G1，详细讲讲 G1 的优点</h4><h4 id=\"你在项目中一般怎么调优-JVM-的呢\"><a href=\"#你在项目中一般怎么调优-JVM-的呢\" class=\"headerlink\" title=\"你在项目中一般怎么调优 JVM 的呢\"></a>你在项目中一般怎么调优 JVM 的呢</h4><h4 id=\"讲一下-GC-吧，什么时候进行-FULL-GC-呢\"><a href=\"#讲一下-GC-吧，什么时候进行-FULL-GC-呢\" class=\"headerlink\" title=\"讲一下 GC 吧，什么时候进行 FULL GC 呢\"></a>讲一下 GC 吧，什么时候进行 FULL GC 呢</h4><h2 id=\"void-mian\"><a href=\"#void-mian\" class=\"headerlink\" title=\"void mian()\"></a>void mian()</h2><h2 id=\"void-main\"><a href=\"#void-main\" class=\"headerlink\" title=\"void main()\"></a>void main()</h2><h2 id=\"testing-nnnnnbbvjju\"><a href=\"#testing-nnnnnbbvjju\" class=\"headerlink\" title=\"testing    nnnnnbbvjju\"></a>testing    nnnnnbbvjju</h2><h2 id=\"pbulic-dkjgdskgjkfdjgkkkkkjqinhu\"><a href=\"#pbulic-dkjgdskgjkfdjgkkkkkjqinhu\" class=\"headerlink\" title=\"pbulic dkjgdskgjkfdjgkkkkkjqinhu\"></a>pbulic dkjgdskgjkfdjgkkkkkjqinhu</h2><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><p>public static void main(String[]) {<br>    System.out.println(“HelloWorld”);<br>}</p>\n<h2 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h2>"},{"title":"新时间与日期 API","date":"2019-07-02T16:00:00.000Z","_content":"\nJava 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。\n\n## Date\n\n## Instant\nInstant 时间戳是以 Unix 元年（1970年1月1月 00:00:00）到某一时间之间的毫秒值。Instant 默认获取 UTC 时区。\n\n1. 创建 Instant\n```java\n// 获取当前时间的Instant \nInstant inst = Instant.now();\nSystem.out.prinlnt(inst1); // 2019-07-02T17:26:59.629Z\n\n// 获取指定时间戳的Instant\nInstant inst2 = Instant.ofEpochSecond(1023445);\nSystem.out.prinlnt(inst2); // 1970-01-01T02:46:40Z\n```\n\n1. 偏移时间\n```java\n// 向前偏移8个小时获取中国时间\nInstant inst = Instant.now();\nOffsetDateTime odt = ins1.atOffset(ZoneOffset.ofHours(8));\nSystem.out.println(odt); // 2019-07-03T01:24:37.642+08:00\n```\n\n1. 获取时间戳\n```java\n// 获取时间戳\nInstant inst = Instant.now();\nSystem.out.println(ins1.toEpochMilli());\n```","source":"_posts/Java 8 系列/新时间与日期 API.md","raw":"---\ntitle: 新时间与日期 API\n\ncategories:\n- Java 8 系列\n\ntag:\n- Java 8\n- 日期\n- 时间\n\ndate: 2019-07-03\n---\n\nJava 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。\n\n## Date\n\n## Instant\nInstant 时间戳是以 Unix 元年（1970年1月1月 00:00:00）到某一时间之间的毫秒值。Instant 默认获取 UTC 时区。\n\n1. 创建 Instant\n```java\n// 获取当前时间的Instant \nInstant inst = Instant.now();\nSystem.out.prinlnt(inst1); // 2019-07-02T17:26:59.629Z\n\n// 获取指定时间戳的Instant\nInstant inst2 = Instant.ofEpochSecond(1023445);\nSystem.out.prinlnt(inst2); // 1970-01-01T02:46:40Z\n```\n\n1. 偏移时间\n```java\n// 向前偏移8个小时获取中国时间\nInstant inst = Instant.now();\nOffsetDateTime odt = ins1.atOffset(ZoneOffset.ofHours(8));\nSystem.out.println(odt); // 2019-07-03T01:24:37.642+08:00\n```\n\n1. 获取时间戳\n```java\n// 获取时间戳\nInstant inst = Instant.now();\nSystem.out.println(ins1.toEpochMilli());\n```","slug":"Java 8 系列/新时间与日期 API","published":1,"updated":"2020-04-12T08:28:29.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m35000fm33pjhkum98i","content":"<p>Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。</p>\n<h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><h2 id=\"Instant\"><a href=\"#Instant\" class=\"headerlink\" title=\"Instant\"></a>Instant</h2><p>Instant 时间戳是以 Unix 元年（1970年1月1月 00:00:00）到某一时间之间的毫秒值。Instant 默认获取 UTC 时区。</p>\n<ol>\n<li><p>创建 Instant</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前时间的Instant </span></span><br><span class=\"line\">Instant inst = Instant.now();</span><br><span class=\"line\">System.out.prinlnt(inst1); <span class=\"comment\">// 2019-07-02T17:26:59.629Z</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取指定时间戳的Instant</span></span><br><span class=\"line\">Instant inst2 = Instant.ofEpochSecond(<span class=\"number\">1023445</span>);</span><br><span class=\"line\">System.out.prinlnt(inst2); <span class=\"comment\">// 1970-01-01T02:46:40Z</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>偏移时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向前偏移8个小时获取中国时间</span></span><br><span class=\"line\">Instant inst = Instant.now();</span><br><span class=\"line\">OffsetDateTime odt = ins1.atOffset(ZoneOffset.ofHours(<span class=\"number\">8</span>));</span><br><span class=\"line\">System.out.println(odt); <span class=\"comment\">// 2019-07-03T01:24:37.642+08:00</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取时间戳</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取时间戳</span></span><br><span class=\"line\">Instant inst = Instant.now();</span><br><span class=\"line\">System.out.println(ins1.toEpochMilli());</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。</p>\n<h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><h2 id=\"Instant\"><a href=\"#Instant\" class=\"headerlink\" title=\"Instant\"></a>Instant</h2><p>Instant 时间戳是以 Unix 元年（1970年1月1月 00:00:00）到某一时间之间的毫秒值。Instant 默认获取 UTC 时区。</p>\n<ol>\n<li><p>创建 Instant</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前时间的Instant </span></span><br><span class=\"line\">Instant inst = Instant.now();</span><br><span class=\"line\">System.out.prinlnt(inst1); <span class=\"comment\">// 2019-07-02T17:26:59.629Z</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取指定时间戳的Instant</span></span><br><span class=\"line\">Instant inst2 = Instant.ofEpochSecond(<span class=\"number\">1023445</span>);</span><br><span class=\"line\">System.out.prinlnt(inst2); <span class=\"comment\">// 1970-01-01T02:46:40Z</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>偏移时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向前偏移8个小时获取中国时间</span></span><br><span class=\"line\">Instant inst = Instant.now();</span><br><span class=\"line\">OffsetDateTime odt = ins1.atOffset(ZoneOffset.ofHours(<span class=\"number\">8</span>));</span><br><span class=\"line\">System.out.println(odt); <span class=\"comment\">// 2019-07-03T01:24:37.642+08:00</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取时间戳</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取时间戳</span></span><br><span class=\"line\">Instant inst = Instant.now();</span><br><span class=\"line\">System.out.println(ins1.toEpochMilli());</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Stream 示例","date":"2019-08-26T16:00:00.000Z","_content":"\nStream 常用示例\n\n1. 收集起始时间到结束时间之间所有的时间并以字符串集合方式返回\n```java\n/**\n * 收集起始时间到结束时间之间所有的时间并以字符串集合方式返回\n * @param  start 2018-10-11\n * @param  end   2018-10-15\n * @return 2018-10-11,2018-10-12,2018-10-13\n */\npublic static List<String> collectLocalDates(LocalDate start, LocalDate end){\n\t// 用起始时间作为流的源头，按照每次加一天的方式创建一个无限流\n\treturn Stream.iterate(start, localDate -> localDate.plusDays(1))\n\t     // 截断无限流，长度为起始时间和结束时间的差+1个\n\t     .limit(ChronoUnit.DAYS.between(start, end) + 1)\n\t     // 由于最后要的是字符串，所以map转换一下\n\t     .map(LocalDate::toString)\n\t     // 把流收集为List\n\t     .collect(Collectors.toList());\n}\n```\n\n1. List<Res> 数组，将 value 属性逗号拼接\n```java\nString str = List.stream().map(Res::getValue).collect(Collectors.joining(\",\"));\n```\n\n1. `String` 类型的 `List` 集合转大写\n```java\nList<String> alpha = Arrays.asList(\"a\", \"b\", \"c\", \"d\");\n\n// Before Java8\nList<String> alphaUpper = new ArrayList<>();\nfor (String s : alpha) {\n    alphaUpper.add(s.toUpperCase());\n}\nSystem.out.println(alpha); // [a, b, c, d]\nSystem.out.println(alphaUpper); // [A, B, C, D]\n\n// Java 8\nList<String> collect = alpha.stream().map(String::toUpperCase).collect(Collectors.toList());\nSystem.out.println(collect); // [A, B, C, D]\n\n// Extra, streams apply to any data type.\nList<Integer> num = Arrays.asList(1, 2, 3, 4, 5);\nList<Integer> collect1 = num.stream().map(n -> n * 2).collect(Collectors.toList());\nSystem.out.println(collect1); // [2, 4, 6, 8, 10]\n```\n\n1. `Object` 类型的 List 转 `String` 类型的 `List`\n```java\nList<Staff> staff = Arrays.asList(\n                new Staff(\"mkyong\", 30, new BigDecimal(10000)),\n                new Staff(\"jack\", 27, new BigDecimal(20000)),\n                new Staff(\"lawrence\", 33, new BigDecimal(30000)));\n// Before Java 8\nList<String> result = new ArrayList<>();\nfor (Staff x : staff) {\n    result.add(x.getName());\n}\nSystem.out.println(result); // [mkyong, jack, lawrence]\n\n// Java 8\nList<String> collect = staff.stream().map(x -> x.getName()).collect(Collectors.toList());\nSystem.out.println(collect); // [mkyong, jack, lawrence]\n\n```\n\n1. `Object` 类型的 List 转其他 `Object` 类型的 `List`\n```java\n// Before Java 8\nList<Staff> staff = Arrays.asList(\n        new Staff(\"mkyong\", 30, new BigDecimal(10000)),\n        new Staff(\"jack\", 27, new BigDecimal(20000)),\n        new Staff(\"lawrence\", 33, new BigDecimal(30000))\n);\nList<StaffPublic> result = new ArrayList<>();\nfor (Staff temp : staff) {    \n    StaffPublic obj = new StaffPublic();\n    obj.setName(temp.getName());\n    obj.setAge(temp.getAge());\n    if (\"mkyong\".equals(temp.getName())) {\n        obj.setExtra(\"this field is for mkyong only!\");\n    }\n    result.add(obj);\n}\nSystem.out.println(result);\n\n// Java 8\nList<StaffPublic> result = staff.stream().map(temp -> {\n    StaffPublic obj = new StaffPublic();\n    obj.setName(temp.getName());\n    obj.setAge(temp.getAge());\n    if (\"mkyong\".equals(temp.getName())) {\n        obj.setExtra(\"this field is for mkyong only!\");\n    }\n    return obj;\n}).collect(Collectors.toList());\n```\n","source":"_posts/Java 8 系列/Stream 示例.md","raw":"---\ntitle: Stream 示例\n\ncategories:\n- Java 8 系列\n\ntags:\n- Java 8\n\ndate: 2019-08-27\n---\n\nStream 常用示例\n\n1. 收集起始时间到结束时间之间所有的时间并以字符串集合方式返回\n```java\n/**\n * 收集起始时间到结束时间之间所有的时间并以字符串集合方式返回\n * @param  start 2018-10-11\n * @param  end   2018-10-15\n * @return 2018-10-11,2018-10-12,2018-10-13\n */\npublic static List<String> collectLocalDates(LocalDate start, LocalDate end){\n\t// 用起始时间作为流的源头，按照每次加一天的方式创建一个无限流\n\treturn Stream.iterate(start, localDate -> localDate.plusDays(1))\n\t     // 截断无限流，长度为起始时间和结束时间的差+1个\n\t     .limit(ChronoUnit.DAYS.between(start, end) + 1)\n\t     // 由于最后要的是字符串，所以map转换一下\n\t     .map(LocalDate::toString)\n\t     // 把流收集为List\n\t     .collect(Collectors.toList());\n}\n```\n\n1. List<Res> 数组，将 value 属性逗号拼接\n```java\nString str = List.stream().map(Res::getValue).collect(Collectors.joining(\",\"));\n```\n\n1. `String` 类型的 `List` 集合转大写\n```java\nList<String> alpha = Arrays.asList(\"a\", \"b\", \"c\", \"d\");\n\n// Before Java8\nList<String> alphaUpper = new ArrayList<>();\nfor (String s : alpha) {\n    alphaUpper.add(s.toUpperCase());\n}\nSystem.out.println(alpha); // [a, b, c, d]\nSystem.out.println(alphaUpper); // [A, B, C, D]\n\n// Java 8\nList<String> collect = alpha.stream().map(String::toUpperCase).collect(Collectors.toList());\nSystem.out.println(collect); // [A, B, C, D]\n\n// Extra, streams apply to any data type.\nList<Integer> num = Arrays.asList(1, 2, 3, 4, 5);\nList<Integer> collect1 = num.stream().map(n -> n * 2).collect(Collectors.toList());\nSystem.out.println(collect1); // [2, 4, 6, 8, 10]\n```\n\n1. `Object` 类型的 List 转 `String` 类型的 `List`\n```java\nList<Staff> staff = Arrays.asList(\n                new Staff(\"mkyong\", 30, new BigDecimal(10000)),\n                new Staff(\"jack\", 27, new BigDecimal(20000)),\n                new Staff(\"lawrence\", 33, new BigDecimal(30000)));\n// Before Java 8\nList<String> result = new ArrayList<>();\nfor (Staff x : staff) {\n    result.add(x.getName());\n}\nSystem.out.println(result); // [mkyong, jack, lawrence]\n\n// Java 8\nList<String> collect = staff.stream().map(x -> x.getName()).collect(Collectors.toList());\nSystem.out.println(collect); // [mkyong, jack, lawrence]\n\n```\n\n1. `Object` 类型的 List 转其他 `Object` 类型的 `List`\n```java\n// Before Java 8\nList<Staff> staff = Arrays.asList(\n        new Staff(\"mkyong\", 30, new BigDecimal(10000)),\n        new Staff(\"jack\", 27, new BigDecimal(20000)),\n        new Staff(\"lawrence\", 33, new BigDecimal(30000))\n);\nList<StaffPublic> result = new ArrayList<>();\nfor (Staff temp : staff) {    \n    StaffPublic obj = new StaffPublic();\n    obj.setName(temp.getName());\n    obj.setAge(temp.getAge());\n    if (\"mkyong\".equals(temp.getName())) {\n        obj.setExtra(\"this field is for mkyong only!\");\n    }\n    result.add(obj);\n}\nSystem.out.println(result);\n\n// Java 8\nList<StaffPublic> result = staff.stream().map(temp -> {\n    StaffPublic obj = new StaffPublic();\n    obj.setName(temp.getName());\n    obj.setAge(temp.getAge());\n    if (\"mkyong\".equals(temp.getName())) {\n        obj.setExtra(\"this field is for mkyong only!\");\n    }\n    return obj;\n}).collect(Collectors.toList());\n```\n","slug":"Java 8 系列/Stream 示例","published":1,"updated":"2020-04-12T08:28:29.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m38000im33p46i71n2t","content":"<p>Stream 常用示例</p>\n<ol>\n<li><p>收集起始时间到结束时间之间所有的时间并以字符串集合方式返回</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 收集起始时间到结束时间之间所有的时间并以字符串集合方式返回</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  start 2018-10-11</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  end   2018-10-15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 2018-10-11,2018-10-12,2018-10-13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">collectLocalDates</span><span class=\"params\">(LocalDate start, LocalDate end)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 用起始时间作为流的源头，按照每次加一天的方式创建一个无限流</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Stream.iterate(start, localDate -&gt; localDate.plusDays(<span class=\"number\">1</span>))</span><br><span class=\"line\">\t     <span class=\"comment\">// 截断无限流，长度为起始时间和结束时间的差+1个</span></span><br><span class=\"line\">\t     .limit(ChronoUnit.DAYS.between(start, end) + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t     <span class=\"comment\">// 由于最后要的是字符串，所以map转换一下</span></span><br><span class=\"line\">\t     .map(LocalDate::toString)</span><br><span class=\"line\">\t     <span class=\"comment\">// 把流收集为List</span></span><br><span class=\"line\">\t     .collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>List<Res> 数组，将 value 属性逗号拼接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = List.stream().map(Res::getValue).collect(Collectors.joining(<span class=\"string\">\",\"</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>String</code> 类型的 <code>List</code> 集合转大写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; alpha = Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Before Java8</span></span><br><span class=\"line\">List&lt;String&gt; alphaUpper = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String s : alpha) &#123;</span><br><span class=\"line\">    alphaUpper.add(s.toUpperCase());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(alpha); <span class=\"comment\">// [a, b, c, d]</span></span><br><span class=\"line\">System.out.println(alphaUpper); <span class=\"comment\">// [A, B, C, D]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Java 8</span></span><br><span class=\"line\">List&lt;String&gt; collect = alpha.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(collect); <span class=\"comment\">// [A, B, C, D]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Extra, streams apply to any data type.</span></span><br><span class=\"line\">List&lt;Integer&gt; num = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">List&lt;Integer&gt; collect1 = num.stream().map(n -&gt; n * <span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(collect1); <span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Object</code> 类型的 List 转 <code>String</code> 类型的 <code>List</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Staff&gt; staff = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"mkyong\"</span>, <span class=\"number\">30</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">10000</span>)),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"jack\"</span>, <span class=\"number\">27</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">20000</span>)),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"lawrence\"</span>, <span class=\"number\">33</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">30000</span>)));</span><br><span class=\"line\"><span class=\"comment\">// Before Java 8</span></span><br><span class=\"line\">List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Staff x : staff) &#123;</span><br><span class=\"line\">    result.add(x.getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// [mkyong, jack, lawrence]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Java 8</span></span><br><span class=\"line\">List&lt;String&gt; collect = staff.stream().map(x -&gt; x.getName()).collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(collect); <span class=\"comment\">// [mkyong, jack, lawrence]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Object</code> 类型的 List 转其他 <code>Object</code> 类型的 <code>List</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Before Java 8</span></span><br><span class=\"line\">List&lt;Staff&gt; staff = Arrays.asList(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"mkyong\"</span>, <span class=\"number\">30</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">10000</span>)),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"jack\"</span>, <span class=\"number\">27</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">20000</span>)),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"lawrence\"</span>, <span class=\"number\">33</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">30000</span>))</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;StaffPublic&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Staff temp : staff) &#123;    </span><br><span class=\"line\">    StaffPublic obj = <span class=\"keyword\">new</span> StaffPublic();</span><br><span class=\"line\">    obj.setName(temp.getName());</span><br><span class=\"line\">    obj.setAge(temp.getAge());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"mkyong\"</span>.equals(temp.getName())) &#123;</span><br><span class=\"line\">        obj.setExtra(<span class=\"string\">\"this field is for mkyong only!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result.add(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Java 8</span></span><br><span class=\"line\">List&lt;StaffPublic&gt; result = staff.stream().map(temp -&gt; &#123;</span><br><span class=\"line\">    StaffPublic obj = <span class=\"keyword\">new</span> StaffPublic();</span><br><span class=\"line\">    obj.setName(temp.getName());</span><br><span class=\"line\">    obj.setAge(temp.getAge());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"mkyong\"</span>.equals(temp.getName())) &#123;</span><br><span class=\"line\">        obj.setExtra(<span class=\"string\">\"this field is for mkyong only!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Stream 常用示例</p>\n<ol>\n<li><p>收集起始时间到结束时间之间所有的时间并以字符串集合方式返回</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 收集起始时间到结束时间之间所有的时间并以字符串集合方式返回</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  start 2018-10-11</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  end   2018-10-15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 2018-10-11,2018-10-12,2018-10-13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">collectLocalDates</span><span class=\"params\">(LocalDate start, LocalDate end)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 用起始时间作为流的源头，按照每次加一天的方式创建一个无限流</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Stream.iterate(start, localDate -&gt; localDate.plusDays(<span class=\"number\">1</span>))</span><br><span class=\"line\">\t     <span class=\"comment\">// 截断无限流，长度为起始时间和结束时间的差+1个</span></span><br><span class=\"line\">\t     .limit(ChronoUnit.DAYS.between(start, end) + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t     <span class=\"comment\">// 由于最后要的是字符串，所以map转换一下</span></span><br><span class=\"line\">\t     .map(LocalDate::toString)</span><br><span class=\"line\">\t     <span class=\"comment\">// 把流收集为List</span></span><br><span class=\"line\">\t     .collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>List<Res> 数组，将 value 属性逗号拼接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = List.stream().map(Res::getValue).collect(Collectors.joining(<span class=\"string\">\",\"</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>String</code> 类型的 <code>List</code> 集合转大写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; alpha = Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Before Java8</span></span><br><span class=\"line\">List&lt;String&gt; alphaUpper = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String s : alpha) &#123;</span><br><span class=\"line\">    alphaUpper.add(s.toUpperCase());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(alpha); <span class=\"comment\">// [a, b, c, d]</span></span><br><span class=\"line\">System.out.println(alphaUpper); <span class=\"comment\">// [A, B, C, D]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Java 8</span></span><br><span class=\"line\">List&lt;String&gt; collect = alpha.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(collect); <span class=\"comment\">// [A, B, C, D]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Extra, streams apply to any data type.</span></span><br><span class=\"line\">List&lt;Integer&gt; num = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">List&lt;Integer&gt; collect1 = num.stream().map(n -&gt; n * <span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(collect1); <span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Object</code> 类型的 List 转 <code>String</code> 类型的 <code>List</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Staff&gt; staff = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"mkyong\"</span>, <span class=\"number\">30</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">10000</span>)),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"jack\"</span>, <span class=\"number\">27</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">20000</span>)),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"lawrence\"</span>, <span class=\"number\">33</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">30000</span>)));</span><br><span class=\"line\"><span class=\"comment\">// Before Java 8</span></span><br><span class=\"line\">List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Staff x : staff) &#123;</span><br><span class=\"line\">    result.add(x.getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// [mkyong, jack, lawrence]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Java 8</span></span><br><span class=\"line\">List&lt;String&gt; collect = staff.stream().map(x -&gt; x.getName()).collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(collect); <span class=\"comment\">// [mkyong, jack, lawrence]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Object</code> 类型的 List 转其他 <code>Object</code> 类型的 <code>List</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Before Java 8</span></span><br><span class=\"line\">List&lt;Staff&gt; staff = Arrays.asList(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"mkyong\"</span>, <span class=\"number\">30</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">10000</span>)),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"jack\"</span>, <span class=\"number\">27</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">20000</span>)),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Staff(<span class=\"string\">\"lawrence\"</span>, <span class=\"number\">33</span>, <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">30000</span>))</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;StaffPublic&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Staff temp : staff) &#123;    </span><br><span class=\"line\">    StaffPublic obj = <span class=\"keyword\">new</span> StaffPublic();</span><br><span class=\"line\">    obj.setName(temp.getName());</span><br><span class=\"line\">    obj.setAge(temp.getAge());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"mkyong\"</span>.equals(temp.getName())) &#123;</span><br><span class=\"line\">        obj.setExtra(<span class=\"string\">\"this field is for mkyong only!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result.add(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Java 8</span></span><br><span class=\"line\">List&lt;StaffPublic&gt; result = staff.stream().map(temp -&gt; &#123;</span><br><span class=\"line\">    StaffPublic obj = <span class=\"keyword\">new</span> StaffPublic();</span><br><span class=\"line\">    obj.setName(temp.getName());</span><br><span class=\"line\">    obj.setAge(temp.getAge());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"mkyong\"</span>.equals(temp.getName())) &#123;</span><br><span class=\"line\">        obj.setExtra(<span class=\"string\">\"this field is for mkyong only!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Regular expressions, Part 1 > Pattern matching and the Pattern class","mathjax":true,"date":"2020-04-05T16:00:03.000Z","_content":"","source":"_posts/JavaWorld/Regular expressions Part 1 - Pattern matching and the Pattern class.md","raw":"---\ntitle: Regular expressions, Part 1 > Pattern matching and the Pattern class\ntag:\n- Data structures and algorithms in Java\ncategories:\n- JavaWorld\n\nmathjax: true\n\ndate: 2020-04-06 00:00:03\n---","slug":"JavaWorld/Regular expressions Part 1 - Pattern matching and the Pattern class","published":1,"updated":"2020-04-19T12:36:02.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m3a000lm33p5q4fiup3","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Singly-linked lists and their algorithms","mathjax":true,"date":"2020-04-05T16:00:05.000Z","_content":"Like arrays, which were introduced in Part 3 of this tutorial series, linked lists are a fundamental data structures category upon which more complex data structures can be based. Unlike a sequence of elements, however, a linked list is a sequence of nodes, where each node is linked to the privious and next node in the sequence. Recall that a node is an object created from a self-referential class, and a self-referential class has at least one field whose reference type is the class name. Nodes in a linked list are linked via a node reference. Here's an example:\n```java\nclass Employee\n{\n   private int empno;\n   private String name;\n   private double salary;\n   public Employee next;\n   // Other members.\n}\n```\n\nIn this example, Employee is a self-referential class because its next field has type Employee. This field is an example of a link field because it can store a reference to another object of its class -- in this case another Employee object.\n\nThis tutorial introduces the ins and outs of singly linked lists in Java programming. You'll learn operations for creating a singly linked list, inserting nodes into a singly liked list, delting nodes from a singly liked list, concatenating a singly linked list to another singly linked list, and inverting a singly linked list. We'll also explore algorithms most commonly used for sorting singly linked llists, and conclude with an example demonstrating the Insertion Sort algorithm.\n\n## What is a singly linked list?\nA singly linked list is a linked list of nodes where each node has a single link field. In this data structure, a reference variable contains a reference to the first (or top) node; each node (except for the last or bottom node) links to the next one; and the last node's link field contains the null reference to signify the list's end. Although the reference variable is commonly named top, you can choose any name you want.\n\nFigure 1 presents a singly linked list with three nodes.\n\n![Figure 1. A singly linked list where top references the A node, A connects to B, B connects to C, and C is the final node](001.jpg)\n\nBelow is pseudocode for a singly linked list.\n\n```\nDECLARE CLASS Node\n  DECLARE STRING name\n  DECLARE Node next\nEND DECLARE\nDECLARE Node top = NULL\n```\nNode is self-referential class with a name data field and a next link field. top is a reference variable of type Node that holds a reference to the first Node obejct in a singly linked lsit. Because the list doesn't yet exist, top's initial value is NULL.\n\n## Creating a singly linked list in Java\nYou create a singly linked list by attaching a single Node object. The following pseudocode creates a Node object, assigns its refernce to top, initializes its data filed, and assigns NULL to its link field:\n```\ntop = NEW Node\ntop.name = \"A\"\ntop.next = NULL\n```\n\nFigure 2 shows the initial singly linked list that emerges from this pseudocode.\n\n![Figure 2. The initial singly linked list consits of a single Node (A)](002.jpg)\n\nThis operation has a time complexity of $O(1)$ -- constant. Recall that $O(1)$ is pronounced \"Big of Oh of 1\". (See Part 1 for a reminder of how time and space complexity measurements) are used to evaluate data structures.\n\n## Inserting node into a singly linked list\nInserting a node into a singly linked list is somewhat more complicated than creaing a singly linked list becuase there are three cases to consider:\n- Insertion before the first node\n- Insertion after the also node\n- Insertion between two nodes\n\n### Insertion before the first node\nA new node is inserted before the first node by assgning the top node's reference to the new code's link field adn assigning the new node's reference to the top variable. This operation is demonstrated by the following pseudocode:\n```\nDECLARE Node temp\ntemp = NEW Node\ntemp.name = \"B\"\ntemp.next = top\ntop = temp\n```\n\nThe resulting two-Node list appears in Figure 3.\n\n![Figure 3. The expanded two-Node singly linked list palces Node B ahead of Node A](003.jpg)\n\nThe operation has a time-complexty of $O(1)$.\n\n### Insertion after the last node\nA new node is inserted after the last node by assigning null to the new node's link filed, traversing the singly linked list to find the last node, and assigning the new node's reference to the last node's link field, as the following pseudocode demonstrates:\n```\ntemp = NEW Node\ntemp.name = \"C\"\ntemp.next = NULL\nDECLARE Node temp2\ntemp2 = top \n// We assume top (and temp2) are not NULL \n// because of the previous pseudocode.\nWHILE temp2.next NE NULL\n   temp2 = temp2.next\nEND WHILE\n// temp2 now references the last node.\ntemp2.next = temp\n```\n\nFigure 4 reveals the list following the insertion of Node C after Node A.\n\n![Figure 4. Node C comes last in the expanded three-node singly linked list](004.jpg)\n\nThis operation has a time complexity of $O(n)$ -- linear. Its time complexity could be improved to $O(1)$ by maintaining a reference to the last node. In that case it wouldn't be necessary to search for the last node.\n\n### Insertion between two nodes\nInserting a node between two nodes is the most complex case. You insert a new node between two nodes by traversing the list to find the node that comes before the new node, assigning the reference in the found node's link field to the new node's link field, and assigning the new ndoe's reference to the found node's link field. The following pseudocode demonstrates these tasks:\n```\ntemp = NEW Node\ntemp.name = \"D\"\ntemp2 = top \n// We assume that the newly created Node inserts after Node \n// A and that Node A exists. In the real world, there is no \n// guarantee that any Node exists, so we would need to check \n// for temp2 containing NULL in both the WHILE loop's header \n// and after the WHILE loop completes.\nWHILE temp2.name NE \"A\"\n   temp2 = temp2.next\nEND WHILE\n// temp2 now references Node A.\ntemp.next = temp2.next\ntemp2.next = temp\n```\n\nFigure 5 presents the list following the insertion of Node D between Nodes A and C.\n\n![Figure 5. The ever-growing singly linked list places Node D between Nodes A and C](005.jpg)","source":"_posts/JavaWorld/Singly-linked lists and their algorithms.md","raw":"---\ntitle: Singly-linked lists and their algorithms\n\ntag:\n- Data structures and algorithms in Java\n\ncategories:\n- JavaWorld\n\nmathjax: true\n\ndate: 2020-04-06 00:00:05\n---\nLike arrays, which were introduced in Part 3 of this tutorial series, linked lists are a fundamental data structures category upon which more complex data structures can be based. Unlike a sequence of elements, however, a linked list is a sequence of nodes, where each node is linked to the privious and next node in the sequence. Recall that a node is an object created from a self-referential class, and a self-referential class has at least one field whose reference type is the class name. Nodes in a linked list are linked via a node reference. Here's an example:\n```java\nclass Employee\n{\n   private int empno;\n   private String name;\n   private double salary;\n   public Employee next;\n   // Other members.\n}\n```\n\nIn this example, Employee is a self-referential class because its next field has type Employee. This field is an example of a link field because it can store a reference to another object of its class -- in this case another Employee object.\n\nThis tutorial introduces the ins and outs of singly linked lists in Java programming. You'll learn operations for creating a singly linked list, inserting nodes into a singly liked list, delting nodes from a singly liked list, concatenating a singly linked list to another singly linked list, and inverting a singly linked list. We'll also explore algorithms most commonly used for sorting singly linked llists, and conclude with an example demonstrating the Insertion Sort algorithm.\n\n## What is a singly linked list?\nA singly linked list is a linked list of nodes where each node has a single link field. In this data structure, a reference variable contains a reference to the first (or top) node; each node (except for the last or bottom node) links to the next one; and the last node's link field contains the null reference to signify the list's end. Although the reference variable is commonly named top, you can choose any name you want.\n\nFigure 1 presents a singly linked list with three nodes.\n\n![Figure 1. A singly linked list where top references the A node, A connects to B, B connects to C, and C is the final node](001.jpg)\n\nBelow is pseudocode for a singly linked list.\n\n```\nDECLARE CLASS Node\n  DECLARE STRING name\n  DECLARE Node next\nEND DECLARE\nDECLARE Node top = NULL\n```\nNode is self-referential class with a name data field and a next link field. top is a reference variable of type Node that holds a reference to the first Node obejct in a singly linked lsit. Because the list doesn't yet exist, top's initial value is NULL.\n\n## Creating a singly linked list in Java\nYou create a singly linked list by attaching a single Node object. The following pseudocode creates a Node object, assigns its refernce to top, initializes its data filed, and assigns NULL to its link field:\n```\ntop = NEW Node\ntop.name = \"A\"\ntop.next = NULL\n```\n\nFigure 2 shows the initial singly linked list that emerges from this pseudocode.\n\n![Figure 2. The initial singly linked list consits of a single Node (A)](002.jpg)\n\nThis operation has a time complexity of $O(1)$ -- constant. Recall that $O(1)$ is pronounced \"Big of Oh of 1\". (See Part 1 for a reminder of how time and space complexity measurements) are used to evaluate data structures.\n\n## Inserting node into a singly linked list\nInserting a node into a singly linked list is somewhat more complicated than creaing a singly linked list becuase there are three cases to consider:\n- Insertion before the first node\n- Insertion after the also node\n- Insertion between two nodes\n\n### Insertion before the first node\nA new node is inserted before the first node by assgning the top node's reference to the new code's link field adn assigning the new node's reference to the top variable. This operation is demonstrated by the following pseudocode:\n```\nDECLARE Node temp\ntemp = NEW Node\ntemp.name = \"B\"\ntemp.next = top\ntop = temp\n```\n\nThe resulting two-Node list appears in Figure 3.\n\n![Figure 3. The expanded two-Node singly linked list palces Node B ahead of Node A](003.jpg)\n\nThe operation has a time-complexty of $O(1)$.\n\n### Insertion after the last node\nA new node is inserted after the last node by assigning null to the new node's link filed, traversing the singly linked list to find the last node, and assigning the new node's reference to the last node's link field, as the following pseudocode demonstrates:\n```\ntemp = NEW Node\ntemp.name = \"C\"\ntemp.next = NULL\nDECLARE Node temp2\ntemp2 = top \n// We assume top (and temp2) are not NULL \n// because of the previous pseudocode.\nWHILE temp2.next NE NULL\n   temp2 = temp2.next\nEND WHILE\n// temp2 now references the last node.\ntemp2.next = temp\n```\n\nFigure 4 reveals the list following the insertion of Node C after Node A.\n\n![Figure 4. Node C comes last in the expanded three-node singly linked list](004.jpg)\n\nThis operation has a time complexity of $O(n)$ -- linear. Its time complexity could be improved to $O(1)$ by maintaining a reference to the last node. In that case it wouldn't be necessary to search for the last node.\n\n### Insertion between two nodes\nInserting a node between two nodes is the most complex case. You insert a new node between two nodes by traversing the list to find the node that comes before the new node, assigning the reference in the found node's link field to the new node's link field, and assigning the new ndoe's reference to the found node's link field. The following pseudocode demonstrates these tasks:\n```\ntemp = NEW Node\ntemp.name = \"D\"\ntemp2 = top \n// We assume that the newly created Node inserts after Node \n// A and that Node A exists. In the real world, there is no \n// guarantee that any Node exists, so we would need to check \n// for temp2 containing NULL in both the WHILE loop's header \n// and after the WHILE loop completes.\nWHILE temp2.name NE \"A\"\n   temp2 = temp2.next\nEND WHILE\n// temp2 now references Node A.\ntemp.next = temp2.next\ntemp2.next = temp\n```\n\nFigure 5 presents the list following the insertion of Node D between Nodes A and C.\n\n![Figure 5. The ever-growing singly linked list places Node D between Nodes A and C](005.jpg)","slug":"JavaWorld/Singly-linked lists and their algorithms","published":1,"updated":"2020-04-19T06:40:26.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m3d000pm33p861z4e9t","content":"<p>Like arrays, which were introduced in Part 3 of this tutorial series, linked lists are a fundamental data structures category upon which more complex data structures can be based. Unlike a sequence of elements, however, a linked list is a sequence of nodes, where each node is linked to the privious and next node in the sequence. Recall that a node is an object created from a self-referential class, and a self-referential class has at least one field whose reference type is the class name. Nodes in a linked list are linked via a node reference. Here’s an example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> empno;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> salary;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> Employee next;</span><br><span class=\"line\">   <span class=\"comment\">// Other members.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In this example, Employee is a self-referential class because its next field has type Employee. This field is an example of a link field because it can store a reference to another object of its class — in this case another Employee object.</p>\n<p>This tutorial introduces the ins and outs of singly linked lists in Java programming. You’ll learn operations for creating a singly linked list, inserting nodes into a singly liked list, delting nodes from a singly liked list, concatenating a singly linked list to another singly linked list, and inverting a singly linked list. We’ll also explore algorithms most commonly used for sorting singly linked llists, and conclude with an example demonstrating the Insertion Sort algorithm.</p>\n<h2 id=\"What-is-a-singly-linked-list\"><a href=\"#What-is-a-singly-linked-list\" class=\"headerlink\" title=\"What is a singly linked list?\"></a>What is a singly linked list?</h2><p>A singly linked list is a linked list of nodes where each node has a single link field. In this data structure, a reference variable contains a reference to the first (or top) node; each node (except for the last or bottom node) links to the next one; and the last node’s link field contains the null reference to signify the list’s end. Although the reference variable is commonly named top, you can choose any name you want.</p>\n<p>Figure 1 presents a singly linked list with three nodes.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. A singly linked list where top references the A node, A connects to B, B connects to C, and C is the final node\"></p>\n<p>Below is pseudocode for a singly linked list.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE CLASS Node</span><br><span class=\"line\">  DECLARE STRING name</span><br><span class=\"line\">  DECLARE Node next</span><br><span class=\"line\">END DECLARE</span><br><span class=\"line\">DECLARE Node top = NULL</span><br></pre></td></tr></table></figure>\n<p>Node is self-referential class with a name data field and a next link field. top is a reference variable of type Node that holds a reference to the first Node obejct in a singly linked lsit. Because the list doesn’t yet exist, top’s initial value is NULL.</p>\n<h2 id=\"Creating-a-singly-linked-list-in-Java\"><a href=\"#Creating-a-singly-linked-list-in-Java\" class=\"headerlink\" title=\"Creating a singly linked list in Java\"></a>Creating a singly linked list in Java</h2><p>You create a singly linked list by attaching a single Node object. The following pseudocode creates a Node object, assigns its refernce to top, initializes its data filed, and assigns NULL to its link field:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top = NEW Node</span><br><span class=\"line\">top.name = &quot;A&quot;</span><br><span class=\"line\">top.next = NULL</span><br></pre></td></tr></table></figure></p>\n<p>Figure 2 shows the initial singly linked list that emerges from this pseudocode.</p>\n<p><img src=\"002.jpg\" alt=\"Figure 2. The initial singly linked list consits of a single Node (A)\"></p>\n<p>This operation has a time complexity of $O(1)$ — constant. Recall that $O(1)$ is pronounced “Big of Oh of 1”. (See Part 1 for a reminder of how time and space complexity measurements) are used to evaluate data structures.</p>\n<h2 id=\"Inserting-node-into-a-singly-linked-list\"><a href=\"#Inserting-node-into-a-singly-linked-list\" class=\"headerlink\" title=\"Inserting node into a singly linked list\"></a>Inserting node into a singly linked list</h2><p>Inserting a node into a singly linked list is somewhat more complicated than creaing a singly linked list becuase there are three cases to consider:</p>\n<ul>\n<li>Insertion before the first node</li>\n<li>Insertion after the also node</li>\n<li>Insertion between two nodes</li>\n</ul>\n<h3 id=\"Insertion-before-the-first-node\"><a href=\"#Insertion-before-the-first-node\" class=\"headerlink\" title=\"Insertion before the first node\"></a>Insertion before the first node</h3><p>A new node is inserted before the first node by assgning the top node’s reference to the new code’s link field adn assigning the new node’s reference to the top variable. This operation is demonstrated by the following pseudocode:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE Node temp</span><br><span class=\"line\">temp = NEW Node</span><br><span class=\"line\">temp.name = &quot;B&quot;</span><br><span class=\"line\">temp.next = top</span><br><span class=\"line\">top = temp</span><br></pre></td></tr></table></figure></p>\n<p>The resulting two-Node list appears in Figure 3.</p>\n<p><img src=\"003.jpg\" alt=\"Figure 3. The expanded two-Node singly linked list palces Node B ahead of Node A\"></p>\n<p>The operation has a time-complexty of $O(1)$.</p>\n<h3 id=\"Insertion-after-the-last-node\"><a href=\"#Insertion-after-the-last-node\" class=\"headerlink\" title=\"Insertion after the last node\"></a>Insertion after the last node</h3><p>A new node is inserted after the last node by assigning null to the new node’s link filed, traversing the singly linked list to find the last node, and assigning the new node’s reference to the last node’s link field, as the following pseudocode demonstrates:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = NEW Node</span><br><span class=\"line\">temp.name = &quot;C&quot;</span><br><span class=\"line\">temp.next = NULL</span><br><span class=\"line\">DECLARE Node temp2</span><br><span class=\"line\">temp2 = top </span><br><span class=\"line\">// We assume top (and temp2) are not NULL </span><br><span class=\"line\">// because of the previous pseudocode.</span><br><span class=\"line\">WHILE temp2.next NE NULL</span><br><span class=\"line\">   temp2 = temp2.next</span><br><span class=\"line\">END WHILE</span><br><span class=\"line\">// temp2 now references the last node.</span><br><span class=\"line\">temp2.next = temp</span><br></pre></td></tr></table></figure></p>\n<p>Figure 4 reveals the list following the insertion of Node C after Node A.</p>\n<p><img src=\"004.jpg\" alt=\"Figure 4. Node C comes last in the expanded three-node singly linked list\"></p>\n<p>This operation has a time complexity of $O(n)$ — linear. Its time complexity could be improved to $O(1)$ by maintaining a reference to the last node. In that case it wouldn’t be necessary to search for the last node.</p>\n<h3 id=\"Insertion-between-two-nodes\"><a href=\"#Insertion-between-two-nodes\" class=\"headerlink\" title=\"Insertion between two nodes\"></a>Insertion between two nodes</h3><p>Inserting a node between two nodes is the most complex case. You insert a new node between two nodes by traversing the list to find the node that comes before the new node, assigning the reference in the found node’s link field to the new node’s link field, and assigning the new ndoe’s reference to the found node’s link field. The following pseudocode demonstrates these tasks:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = NEW Node</span><br><span class=\"line\">temp.name = &quot;D&quot;</span><br><span class=\"line\">temp2 = top </span><br><span class=\"line\">// We assume that the newly created Node inserts after Node </span><br><span class=\"line\">// A and that Node A exists. In the real world, there is no </span><br><span class=\"line\">// guarantee that any Node exists, so we would need to check </span><br><span class=\"line\">// for temp2 containing NULL in both the WHILE loop&apos;s header </span><br><span class=\"line\">// and after the WHILE loop completes.</span><br><span class=\"line\">WHILE temp2.name NE &quot;A&quot;</span><br><span class=\"line\">   temp2 = temp2.next</span><br><span class=\"line\">END WHILE</span><br><span class=\"line\">// temp2 now references Node A.</span><br><span class=\"line\">temp.next = temp2.next</span><br><span class=\"line\">temp2.next = temp</span><br></pre></td></tr></table></figure></p>\n<p>Figure 5 presents the list following the insertion of Node D between Nodes A and C.</p>\n<p><img src=\"005.jpg\" alt=\"Figure 5. The ever-growing singly linked list places Node D between Nodes A and C\"></p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Like arrays, which were introduced in Part 3 of this tutorial series, linked lists are a fundamental data structures category upon which more complex data structures can be based. Unlike a sequence of elements, however, a linked list is a sequence of nodes, where each node is linked to the privious and next node in the sequence. Recall that a node is an object created from a self-referential class, and a self-referential class has at least one field whose reference type is the class name. Nodes in a linked list are linked via a node reference. Here’s an example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> empno;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> salary;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> Employee next;</span><br><span class=\"line\">   <span class=\"comment\">// Other members.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In this example, Employee is a self-referential class because its next field has type Employee. This field is an example of a link field because it can store a reference to another object of its class — in this case another Employee object.</p>\n<p>This tutorial introduces the ins and outs of singly linked lists in Java programming. You’ll learn operations for creating a singly linked list, inserting nodes into a singly liked list, delting nodes from a singly liked list, concatenating a singly linked list to another singly linked list, and inverting a singly linked list. We’ll also explore algorithms most commonly used for sorting singly linked llists, and conclude with an example demonstrating the Insertion Sort algorithm.</p>\n<h2 id=\"What-is-a-singly-linked-list\"><a href=\"#What-is-a-singly-linked-list\" class=\"headerlink\" title=\"What is a singly linked list?\"></a>What is a singly linked list?</h2><p>A singly linked list is a linked list of nodes where each node has a single link field. In this data structure, a reference variable contains a reference to the first (or top) node; each node (except for the last or bottom node) links to the next one; and the last node’s link field contains the null reference to signify the list’s end. Although the reference variable is commonly named top, you can choose any name you want.</p>\n<p>Figure 1 presents a singly linked list with three nodes.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. A singly linked list where top references the A node, A connects to B, B connects to C, and C is the final node\"></p>\n<p>Below is pseudocode for a singly linked list.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE CLASS Node</span><br><span class=\"line\">  DECLARE STRING name</span><br><span class=\"line\">  DECLARE Node next</span><br><span class=\"line\">END DECLARE</span><br><span class=\"line\">DECLARE Node top = NULL</span><br></pre></td></tr></table></figure>\n<p>Node is self-referential class with a name data field and a next link field. top is a reference variable of type Node that holds a reference to the first Node obejct in a singly linked lsit. Because the list doesn’t yet exist, top’s initial value is NULL.</p>\n<h2 id=\"Creating-a-singly-linked-list-in-Java\"><a href=\"#Creating-a-singly-linked-list-in-Java\" class=\"headerlink\" title=\"Creating a singly linked list in Java\"></a>Creating a singly linked list in Java</h2><p>You create a singly linked list by attaching a single Node object. The following pseudocode creates a Node object, assigns its refernce to top, initializes its data filed, and assigns NULL to its link field:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top = NEW Node</span><br><span class=\"line\">top.name = &quot;A&quot;</span><br><span class=\"line\">top.next = NULL</span><br></pre></td></tr></table></figure></p>\n<p>Figure 2 shows the initial singly linked list that emerges from this pseudocode.</p>\n<p><img src=\"002.jpg\" alt=\"Figure 2. The initial singly linked list consits of a single Node (A)\"></p>\n<p>This operation has a time complexity of $O(1)$ — constant. Recall that $O(1)$ is pronounced “Big of Oh of 1”. (See Part 1 for a reminder of how time and space complexity measurements) are used to evaluate data structures.</p>\n<h2 id=\"Inserting-node-into-a-singly-linked-list\"><a href=\"#Inserting-node-into-a-singly-linked-list\" class=\"headerlink\" title=\"Inserting node into a singly linked list\"></a>Inserting node into a singly linked list</h2><p>Inserting a node into a singly linked list is somewhat more complicated than creaing a singly linked list becuase there are three cases to consider:</p>\n<ul>\n<li>Insertion before the first node</li>\n<li>Insertion after the also node</li>\n<li>Insertion between two nodes</li>\n</ul>\n<h3 id=\"Insertion-before-the-first-node\"><a href=\"#Insertion-before-the-first-node\" class=\"headerlink\" title=\"Insertion before the first node\"></a>Insertion before the first node</h3><p>A new node is inserted before the first node by assgning the top node’s reference to the new code’s link field adn assigning the new node’s reference to the top variable. This operation is demonstrated by the following pseudocode:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE Node temp</span><br><span class=\"line\">temp = NEW Node</span><br><span class=\"line\">temp.name = &quot;B&quot;</span><br><span class=\"line\">temp.next = top</span><br><span class=\"line\">top = temp</span><br></pre></td></tr></table></figure></p>\n<p>The resulting two-Node list appears in Figure 3.</p>\n<p><img src=\"003.jpg\" alt=\"Figure 3. The expanded two-Node singly linked list palces Node B ahead of Node A\"></p>\n<p>The operation has a time-complexty of $O(1)$.</p>\n<h3 id=\"Insertion-after-the-last-node\"><a href=\"#Insertion-after-the-last-node\" class=\"headerlink\" title=\"Insertion after the last node\"></a>Insertion after the last node</h3><p>A new node is inserted after the last node by assigning null to the new node’s link filed, traversing the singly linked list to find the last node, and assigning the new node’s reference to the last node’s link field, as the following pseudocode demonstrates:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = NEW Node</span><br><span class=\"line\">temp.name = &quot;C&quot;</span><br><span class=\"line\">temp.next = NULL</span><br><span class=\"line\">DECLARE Node temp2</span><br><span class=\"line\">temp2 = top </span><br><span class=\"line\">// We assume top (and temp2) are not NULL </span><br><span class=\"line\">// because of the previous pseudocode.</span><br><span class=\"line\">WHILE temp2.next NE NULL</span><br><span class=\"line\">   temp2 = temp2.next</span><br><span class=\"line\">END WHILE</span><br><span class=\"line\">// temp2 now references the last node.</span><br><span class=\"line\">temp2.next = temp</span><br></pre></td></tr></table></figure></p>\n<p>Figure 4 reveals the list following the insertion of Node C after Node A.</p>\n<p><img src=\"004.jpg\" alt=\"Figure 4. Node C comes last in the expanded three-node singly linked list\"></p>\n<p>This operation has a time complexity of $O(n)$ — linear. Its time complexity could be improved to $O(1)$ by maintaining a reference to the last node. In that case it wouldn’t be necessary to search for the last node.</p>\n<h3 id=\"Insertion-between-two-nodes\"><a href=\"#Insertion-between-two-nodes\" class=\"headerlink\" title=\"Insertion between two nodes\"></a>Insertion between two nodes</h3><p>Inserting a node between two nodes is the most complex case. You insert a new node between two nodes by traversing the list to find the node that comes before the new node, assigning the reference in the found node’s link field to the new node’s link field, and assigning the new ndoe’s reference to the found node’s link field. The following pseudocode demonstrates these tasks:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = NEW Node</span><br><span class=\"line\">temp.name = &quot;D&quot;</span><br><span class=\"line\">temp2 = top </span><br><span class=\"line\">// We assume that the newly created Node inserts after Node </span><br><span class=\"line\">// A and that Node A exists. In the real world, there is no </span><br><span class=\"line\">// guarantee that any Node exists, so we would need to check </span><br><span class=\"line\">// for temp2 containing NULL in both the WHILE loop&apos;s header </span><br><span class=\"line\">// and after the WHILE loop completes.</span><br><span class=\"line\">WHILE temp2.name NE &quot;A&quot;</span><br><span class=\"line\">   temp2 = temp2.next</span><br><span class=\"line\">END WHILE</span><br><span class=\"line\">// temp2 now references Node A.</span><br><span class=\"line\">temp.next = temp2.next</span><br><span class=\"line\">temp2.next = temp</span><br></pre></td></tr></table></figure></p>\n<p>Figure 5 presents the list following the insertion of Node D between Nodes A and C.</p>\n<p><img src=\"005.jpg\" alt=\"Figure 5. The ever-growing singly linked list places Node D between Nodes A and C\"></p>\n"},{"title":"SSH原理与运用（二）：远程操作与端口转发","date":"2019-08-28T16:00:00.000Z","_content":"\nSSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。","source":"_posts/Linux 教程/SSH原理与运用（二）：远程操作与端口转发.md","raw":"---\ntitle: SSH原理与运用（二）：远程操作与端口转发\n\ntags:\n- SSH\n- LINUX\n\ncategories:\n- Linux 系列\n\ndate: 2019-08-29\n---\n\nSSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。","slug":"Linux 教程/SSH原理与运用（二）：远程操作与端口转发","published":1,"updated":"2020-04-12T08:28:29.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m3f000sm33porxvuvw3","content":"<p>SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。</p>\n"},{"title":"防火墙设置","date":"2019-06-29T16:00:00.000Z","_content":"\n## systemctl\n`systemctl` 是 CentOS 7 的服务管理工具中主要的工具，它融合之前 `service` 和 `chkconfig` 的功能于一体。\n\n```bash\n# 启动一个服务\nsystemctl start firewalld.service\n# 关闭一个服务\nsystemctl stop firewalld.service\n# 重启一个服务\nsystemctl restart firewalld.service\n# 显示一个服务的状态\nsystemctl status firewalld.service\n# 在开机时启用一个服务\nsystemctl enable firewalld.service\n# 在开机时禁用一个服务\nsystemctl disable firewalld.service\n# 查看服务是否开机启动\nsystemctl is-enabled firewalld.service\n# 查看已启动的服务列表\nsystemctl list-unit-files|grep enabled\n# 查看启动失败的服务列表\nsystemctl --failed\n```\n\n## firewall基本使用\n```bash\n# 启动\nsystemctl start firewalld\n# 关闭\nsystemctl stop firewalld\n# 查看状态\nsystemctl status firewalld \n# 开机启用\nsystemctl enable firewalld\n# 开机禁用\nsystemctl disable firewalld\n```\n\n## firewalld-cmd命令\n```bash\n# 查看版本\nfirewall-cmd --version\n# 查看帮助\nfirewall-cmd --help\n# 显示状态\nfirewall-cmd --state\n# 查看所有打开的端口\nfirewall-cmd --zone=public --list-ports\n# 更新防火墙规则\nfirewall-cmd --reload\n# 查看区域信息\nfirewall-cmd --get-active-zones\n# 查看指定接口所属区域\nfirewall-cmd --get-zone-of-interface=eth0\n# 拒绝所有包\nfirewall-cmd --panic-on\n# 取消拒绝状态\nfirewall-cmd --panic-off\n# 查看是否拒绝\nfirewall-cmd --query-panic\n\n# 查看某个端口是否开放\nfirewall-cmd --zone=public --query-port=80/tcp\n# 查看所有开启的端口\nfirewall-cmd --permanent --zone=public --list-ports\n# 开启一个端口（--permanent永久生效，没有此参数重启后失效）\nfirewall-cmd --zone=public --add-port=80/tcp --permanent \n# 关闭一个端口\nfirewall-cmd --zone= public --remove-port=80/tcp --permanent\n\n\n# 查看某个服务是否开放\nfirewall-cmd --zone=public --query-service=https\n# 查看所有开启的服务\nfirewall-cmd --permanent --zone=public --list-services\n# 开启一个服务（--permanent永久生效，没有此参数重启后失效）\nfirewall-cmd --zone=public --add-service=https --permanent\n# 关闭一个服务\nfirewall-cmd --zone=public --remove-service=https --permanent\n\n# 重新加载配置（修改后要重新加载配置才生效）\nfirewall-cmd --reload\n```","source":"_posts/Linux 教程/防火墙设置.md","raw":"---\ntitle: 防火墙设置\n\ncategories:\n- Linux 系列\n\ntag:\n- Linux\n- 防火墙\n\ndate: 2019-06-30\n---\n\n## systemctl\n`systemctl` 是 CentOS 7 的服务管理工具中主要的工具，它融合之前 `service` 和 `chkconfig` 的功能于一体。\n\n```bash\n# 启动一个服务\nsystemctl start firewalld.service\n# 关闭一个服务\nsystemctl stop firewalld.service\n# 重启一个服务\nsystemctl restart firewalld.service\n# 显示一个服务的状态\nsystemctl status firewalld.service\n# 在开机时启用一个服务\nsystemctl enable firewalld.service\n# 在开机时禁用一个服务\nsystemctl disable firewalld.service\n# 查看服务是否开机启动\nsystemctl is-enabled firewalld.service\n# 查看已启动的服务列表\nsystemctl list-unit-files|grep enabled\n# 查看启动失败的服务列表\nsystemctl --failed\n```\n\n## firewall基本使用\n```bash\n# 启动\nsystemctl start firewalld\n# 关闭\nsystemctl stop firewalld\n# 查看状态\nsystemctl status firewalld \n# 开机启用\nsystemctl enable firewalld\n# 开机禁用\nsystemctl disable firewalld\n```\n\n## firewalld-cmd命令\n```bash\n# 查看版本\nfirewall-cmd --version\n# 查看帮助\nfirewall-cmd --help\n# 显示状态\nfirewall-cmd --state\n# 查看所有打开的端口\nfirewall-cmd --zone=public --list-ports\n# 更新防火墙规则\nfirewall-cmd --reload\n# 查看区域信息\nfirewall-cmd --get-active-zones\n# 查看指定接口所属区域\nfirewall-cmd --get-zone-of-interface=eth0\n# 拒绝所有包\nfirewall-cmd --panic-on\n# 取消拒绝状态\nfirewall-cmd --panic-off\n# 查看是否拒绝\nfirewall-cmd --query-panic\n\n# 查看某个端口是否开放\nfirewall-cmd --zone=public --query-port=80/tcp\n# 查看所有开启的端口\nfirewall-cmd --permanent --zone=public --list-ports\n# 开启一个端口（--permanent永久生效，没有此参数重启后失效）\nfirewall-cmd --zone=public --add-port=80/tcp --permanent \n# 关闭一个端口\nfirewall-cmd --zone= public --remove-port=80/tcp --permanent\n\n\n# 查看某个服务是否开放\nfirewall-cmd --zone=public --query-service=https\n# 查看所有开启的服务\nfirewall-cmd --permanent --zone=public --list-services\n# 开启一个服务（--permanent永久生效，没有此参数重启后失效）\nfirewall-cmd --zone=public --add-service=https --permanent\n# 关闭一个服务\nfirewall-cmd --zone=public --remove-service=https --permanent\n\n# 重新加载配置（修改后要重新加载配置才生效）\nfirewall-cmd --reload\n```","slug":"Linux 教程/防火墙设置","published":1,"updated":"2020-04-12T08:28:29.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m3j000wm33pvlincmbm","content":"<h2 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h2><p><code>systemctl</code> 是 CentOS 7 的服务管理工具中主要的工具，它融合之前 <code>service</code> 和 <code>chkconfig</code> 的功能于一体。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动一个服务</span></span><br><span class=\"line\">systemctl start firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 关闭一个服务</span></span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 重启一个服务</span></span><br><span class=\"line\">systemctl restart firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 显示一个服务的状态</span></span><br><span class=\"line\">systemctl status firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 在开机时启用一个服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 在开机时禁用一个服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 查看服务是否开机启动</span></span><br><span class=\"line\">systemctl is-enabled firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 查看已启动的服务列表</span></span><br><span class=\"line\">systemctl list-unit-files|grep enabled</span><br><span class=\"line\"><span class=\"comment\"># 查看启动失败的服务列表</span></span><br><span class=\"line\">systemctl --failed</span><br></pre></td></tr></table></figure>\n<h2 id=\"firewall基本使用\"><a href=\"#firewall基本使用\" class=\"headerlink\" title=\"firewall基本使用\"></a>firewall基本使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"comment\"># 关闭</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">systemctl status firewalld </span><br><span class=\"line\"><span class=\"comment\"># 开机启用</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> firewalld</span><br><span class=\"line\"><span class=\"comment\"># 开机禁用</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure>\n<h2 id=\"firewalld-cmd命令\"><a href=\"#firewalld-cmd命令\" class=\"headerlink\" title=\"firewalld-cmd命令\"></a>firewalld-cmd命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">firewall-cmd --version</span><br><span class=\"line\"><span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">firewall-cmd --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 显示状态</span></span><br><span class=\"line\">firewall-cmd --state</span><br><span class=\"line\"><span class=\"comment\"># 查看所有打开的端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --list-ports</span><br><span class=\"line\"><span class=\"comment\"># 更新防火墙规则</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"comment\"># 查看区域信息</span></span><br><span class=\"line\">firewall-cmd --get-active-zones</span><br><span class=\"line\"><span class=\"comment\"># 查看指定接口所属区域</span></span><br><span class=\"line\">firewall-cmd --get-zone-of-interface=eth0</span><br><span class=\"line\"><span class=\"comment\"># 拒绝所有包</span></span><br><span class=\"line\">firewall-cmd --panic-on</span><br><span class=\"line\"><span class=\"comment\"># 取消拒绝状态</span></span><br><span class=\"line\">firewall-cmd --panic-off</span><br><span class=\"line\"><span class=\"comment\"># 查看是否拒绝</span></span><br><span class=\"line\">firewall-cmd --query-panic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个端口是否开放</span></span><br><span class=\"line\">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class=\"line\"><span class=\"comment\"># 查看所有开启的端口</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --list-ports</span><br><span class=\"line\"><span class=\"comment\"># 开启一个端口（--permanent永久生效，没有此参数重启后失效）</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent </span><br><span class=\"line\"><span class=\"comment\"># 关闭一个端口</span></span><br><span class=\"line\">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个服务是否开放</span></span><br><span class=\"line\">firewall-cmd --zone=public --query-service=https</span><br><span class=\"line\"><span class=\"comment\"># 查看所有开启的服务</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --list-services</span><br><span class=\"line\"><span class=\"comment\"># 开启一个服务（--permanent永久生效，没有此参数重启后失效）</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-service=https --permanent</span><br><span class=\"line\"><span class=\"comment\"># 关闭一个服务</span></span><br><span class=\"line\">firewall-cmd --zone=public --remove-service=https --permanent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置（修改后要重新加载配置才生效）</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h2><p><code>systemctl</code> 是 CentOS 7 的服务管理工具中主要的工具，它融合之前 <code>service</code> 和 <code>chkconfig</code> 的功能于一体。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动一个服务</span></span><br><span class=\"line\">systemctl start firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 关闭一个服务</span></span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 重启一个服务</span></span><br><span class=\"line\">systemctl restart firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 显示一个服务的状态</span></span><br><span class=\"line\">systemctl status firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 在开机时启用一个服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 在开机时禁用一个服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 查看服务是否开机启动</span></span><br><span class=\"line\">systemctl is-enabled firewalld.service</span><br><span class=\"line\"><span class=\"comment\"># 查看已启动的服务列表</span></span><br><span class=\"line\">systemctl list-unit-files|grep enabled</span><br><span class=\"line\"><span class=\"comment\"># 查看启动失败的服务列表</span></span><br><span class=\"line\">systemctl --failed</span><br></pre></td></tr></table></figure>\n<h2 id=\"firewall基本使用\"><a href=\"#firewall基本使用\" class=\"headerlink\" title=\"firewall基本使用\"></a>firewall基本使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"comment\"># 关闭</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">systemctl status firewalld </span><br><span class=\"line\"><span class=\"comment\"># 开机启用</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> firewalld</span><br><span class=\"line\"><span class=\"comment\"># 开机禁用</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure>\n<h2 id=\"firewalld-cmd命令\"><a href=\"#firewalld-cmd命令\" class=\"headerlink\" title=\"firewalld-cmd命令\"></a>firewalld-cmd命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">firewall-cmd --version</span><br><span class=\"line\"><span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">firewall-cmd --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 显示状态</span></span><br><span class=\"line\">firewall-cmd --state</span><br><span class=\"line\"><span class=\"comment\"># 查看所有打开的端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --list-ports</span><br><span class=\"line\"><span class=\"comment\"># 更新防火墙规则</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"comment\"># 查看区域信息</span></span><br><span class=\"line\">firewall-cmd --get-active-zones</span><br><span class=\"line\"><span class=\"comment\"># 查看指定接口所属区域</span></span><br><span class=\"line\">firewall-cmd --get-zone-of-interface=eth0</span><br><span class=\"line\"><span class=\"comment\"># 拒绝所有包</span></span><br><span class=\"line\">firewall-cmd --panic-on</span><br><span class=\"line\"><span class=\"comment\"># 取消拒绝状态</span></span><br><span class=\"line\">firewall-cmd --panic-off</span><br><span class=\"line\"><span class=\"comment\"># 查看是否拒绝</span></span><br><span class=\"line\">firewall-cmd --query-panic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个端口是否开放</span></span><br><span class=\"line\">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class=\"line\"><span class=\"comment\"># 查看所有开启的端口</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --list-ports</span><br><span class=\"line\"><span class=\"comment\"># 开启一个端口（--permanent永久生效，没有此参数重启后失效）</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent </span><br><span class=\"line\"><span class=\"comment\"># 关闭一个端口</span></span><br><span class=\"line\">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个服务是否开放</span></span><br><span class=\"line\">firewall-cmd --zone=public --query-service=https</span><br><span class=\"line\"><span class=\"comment\"># 查看所有开启的服务</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --list-services</span><br><span class=\"line\"><span class=\"comment\"># 开启一个服务（--permanent永久生效，没有此参数重启后失效）</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-service=https --permanent</span><br><span class=\"line\"><span class=\"comment\"># 关闭一个服务</span></span><br><span class=\"line\">firewall-cmd --zone=public --remove-service=https --permanent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置（修改后要重新加载配置才生效）</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>"},{"title":"3.2 cp方式","date":"2020-03-08T16:00:02.000Z","_content":"\n## 使用cp进行备份\n#### 向数据表施加读锁（只能读不能写）\n```bash\nmysql> flush tables with read lock;\n```\n\n#### 备份数据文件\n```bash\nzhangqinghua$ mkdir /backup                     # 创建文件夹存放备份数据库文件\nzhangqinghua$ cp -a /var/lib/mysql/* /backup    # 保留权限的拷贝源数据文件\n```\n\n#### 释放锁\n```bash\nmysql> unlock tables;\n```\n\n#### 模拟数据丢失并恢复\n```bash\n# 随便删除一条数据\nzhangqinghua$ systemctl stop mysqld             # 先停止MySQL服务\nzhangqinghua$ rm -rf /var/lib/mysql/*           # 清空数据，这一步可以不做\nzhangqinghua$ cp -a /backup/* /var/lib/mysql/   # 将备份的数据文件拷贝回去\nzhangqinghua$ systemctl start mysqld            # 重启MySQL服务\n# 可以看到，数据又回来了\n```\n\n## 使用mysqldump备份数据\nmysqldump是MySQL自带的逻辑备份工具。它的原理是，通过协议连接到MySQL数据库，将需要备份的数据查询出来转化成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句即可。\n\n```bash\nzhangqinghua$ mysql -uroot -p -e 'show master status'\nEnter password: \n+---------------+----------+--------------+------------------+-------------------+\n| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+---------------+----------+--------------+------------------+-------------------+\n| binlog.000002 |      584 |              |                  |                   |\n+---------------+----------+--------------+------------------+-------------------+\n```","source":"_posts/MySQL 教程/3.2 cp方式.md","raw":"---\ntitle: 3.2 cp方式\n\ncategories:\n- MySQL教程\n\ndate: 2020-03-09 00:00:02\n---\n\n## 使用cp进行备份\n#### 向数据表施加读锁（只能读不能写）\n```bash\nmysql> flush tables with read lock;\n```\n\n#### 备份数据文件\n```bash\nzhangqinghua$ mkdir /backup                     # 创建文件夹存放备份数据库文件\nzhangqinghua$ cp -a /var/lib/mysql/* /backup    # 保留权限的拷贝源数据文件\n```\n\n#### 释放锁\n```bash\nmysql> unlock tables;\n```\n\n#### 模拟数据丢失并恢复\n```bash\n# 随便删除一条数据\nzhangqinghua$ systemctl stop mysqld             # 先停止MySQL服务\nzhangqinghua$ rm -rf /var/lib/mysql/*           # 清空数据，这一步可以不做\nzhangqinghua$ cp -a /backup/* /var/lib/mysql/   # 将备份的数据文件拷贝回去\nzhangqinghua$ systemctl start mysqld            # 重启MySQL服务\n# 可以看到，数据又回来了\n```\n\n## 使用mysqldump备份数据\nmysqldump是MySQL自带的逻辑备份工具。它的原理是，通过协议连接到MySQL数据库，将需要备份的数据查询出来转化成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句即可。\n\n```bash\nzhangqinghua$ mysql -uroot -p -e 'show master status'\nEnter password: \n+---------------+----------+--------------+------------------+-------------------+\n| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+---------------+----------+--------------+------------------+-------------------+\n| binlog.000002 |      584 |              |                  |                   |\n+---------------+----------+--------------+------------------+-------------------+\n```","slug":"MySQL 教程/3.2 cp方式","published":1,"updated":"2020-04-12T08:28:29.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m3k000xm33pimg5p1jd","content":"<h2 id=\"使用cp进行备份\"><a href=\"#使用cp进行备份\" class=\"headerlink\" title=\"使用cp进行备份\"></a>使用cp进行备份</h2><h4 id=\"向数据表施加读锁（只能读不能写）\"><a href=\"#向数据表施加读锁（只能读不能写）\" class=\"headerlink\" title=\"向数据表施加读锁（只能读不能写）\"></a>向数据表施加读锁（只能读不能写）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; flush tables with <span class=\"built_in\">read</span> lock;</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份数据文件\"><a href=\"#备份数据文件\" class=\"headerlink\" title=\"备份数据文件\"></a>备份数据文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangqinghua$ mkdir /backup                     <span class=\"comment\"># 创建文件夹存放备份数据库文件</span></span><br><span class=\"line\">zhangqinghua$ cp -a /var/lib/mysql/* /backup    <span class=\"comment\"># 保留权限的拷贝源数据文件</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"释放锁\"><a href=\"#释放锁\" class=\"headerlink\" title=\"释放锁\"></a>释放锁</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; unlock tables;</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟数据丢失并恢复\"><a href=\"#模拟数据丢失并恢复\" class=\"headerlink\" title=\"模拟数据丢失并恢复\"></a>模拟数据丢失并恢复</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随便删除一条数据</span></span><br><span class=\"line\">zhangqinghua$ systemctl stop mysqld             <span class=\"comment\"># 先停止MySQL服务</span></span><br><span class=\"line\">zhangqinghua$ rm -rf /var/lib/mysql/*           <span class=\"comment\"># 清空数据，这一步可以不做</span></span><br><span class=\"line\">zhangqinghua$ cp -a /backup/* /var/lib/mysql/   <span class=\"comment\"># 将备份的数据文件拷贝回去</span></span><br><span class=\"line\">zhangqinghua$ systemctl start mysqld            <span class=\"comment\"># 重启MySQL服务</span></span><br><span class=\"line\"><span class=\"comment\"># 可以看到，数据又回来了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用mysqldump备份数据\"><a href=\"#使用mysqldump备份数据\" class=\"headerlink\" title=\"使用mysqldump备份数据\"></a>使用mysqldump备份数据</h2><p>mysqldump是MySQL自带的逻辑备份工具。它的原理是，通过协议连接到MySQL数据库，将需要备份的数据查询出来转化成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangqinghua$ mysql -uroot -p -e <span class=\"string\">'show master status'</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| binlog.000002 |      584 |              |                  |                   |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"使用cp进行备份\"><a href=\"#使用cp进行备份\" class=\"headerlink\" title=\"使用cp进行备份\"></a>使用cp进行备份</h2><h4 id=\"向数据表施加读锁（只能读不能写）\"><a href=\"#向数据表施加读锁（只能读不能写）\" class=\"headerlink\" title=\"向数据表施加读锁（只能读不能写）\"></a>向数据表施加读锁（只能读不能写）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; flush tables with <span class=\"built_in\">read</span> lock;</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份数据文件\"><a href=\"#备份数据文件\" class=\"headerlink\" title=\"备份数据文件\"></a>备份数据文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangqinghua$ mkdir /backup                     <span class=\"comment\"># 创建文件夹存放备份数据库文件</span></span><br><span class=\"line\">zhangqinghua$ cp -a /var/lib/mysql/* /backup    <span class=\"comment\"># 保留权限的拷贝源数据文件</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"释放锁\"><a href=\"#释放锁\" class=\"headerlink\" title=\"释放锁\"></a>释放锁</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; unlock tables;</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟数据丢失并恢复\"><a href=\"#模拟数据丢失并恢复\" class=\"headerlink\" title=\"模拟数据丢失并恢复\"></a>模拟数据丢失并恢复</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随便删除一条数据</span></span><br><span class=\"line\">zhangqinghua$ systemctl stop mysqld             <span class=\"comment\"># 先停止MySQL服务</span></span><br><span class=\"line\">zhangqinghua$ rm -rf /var/lib/mysql/*           <span class=\"comment\"># 清空数据，这一步可以不做</span></span><br><span class=\"line\">zhangqinghua$ cp -a /backup/* /var/lib/mysql/   <span class=\"comment\"># 将备份的数据文件拷贝回去</span></span><br><span class=\"line\">zhangqinghua$ systemctl start mysqld            <span class=\"comment\"># 重启MySQL服务</span></span><br><span class=\"line\"><span class=\"comment\"># 可以看到，数据又回来了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用mysqldump备份数据\"><a href=\"#使用mysqldump备份数据\" class=\"headerlink\" title=\"使用mysqldump备份数据\"></a>使用mysqldump备份数据</h2><p>mysqldump是MySQL自带的逻辑备份工具。它的原理是，通过协议连接到MySQL数据库，将需要备份的数据查询出来转化成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangqinghua$ mysql -uroot -p -e <span class=\"string\">'show master status'</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| binlog.000002 |      584 |              |                  |                   |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure>"},{"title":"1.1 MySQL的安装","date":"2020-03-07T16:00:00.000Z","_content":"\n#### 测试\n## 使用yum安装MySQL\n### 卸载旧的MySQL\n```bash\n[root@vultrguest ~]# yum list installed mysql*\nFailed to set locale, defaulting to C.UTF-8\nInstalled Packages\nmysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream\nmysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream\n[root@vultrguest ~]# yum remove mysql-common.x86_64\n...\n[root@vultrguest ~]# yum list installed mysql*\nFailed to set locale, defaulting to C.UTF-8\nError: No matching Packages to list\n```\n\n### 使用yum源安装 \n\n#### 下载rpm文件\n```bash\n[root@vultrguest ~]# sudo mkdir /home/downloads\n[root@vultrguest ~]# sudo cd  /home/downloads\n# 这里是MySQL 5.7的源文件\n[root@vultrguest ~]# sudo wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'\n# 这里是MySQL 8.0的源文件\n[root@vultrguest ~]# sudo wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\n```\n\n#### 添加源到仓库中\n```bash\n[root@vultrguest ~]# sudo rpm -ivh mysql80-community-release-el7-3.noarch.rpm\n[root@vultrguest ~]# sudo yum update\n```\n\n#### 安装MySQL\n```bash\n[root@vultrguest ~]# sudo yum install mysql-community-server\n...\n```\n\n#### 启动 MySQL 服务\n```bash\n[root@vultrguest ~]# sudo systemctl start mysqld\n...\n```\n\n#### 查看初始密码\n```bash\n[root@vultrguest ~]# sudo grep 'temporary password' /var/log/mysqld.log\n0sIbtR0(Wkge\n```\n\n#### 登录MySQL（使用初始密码）\n```bash\n[root@vultrguest ~]# mysql -uroot -p  # 输入查看到的密码\n...\n```\n\n### 使用yum库安装\n配置文件：/etc/my.cnf\n数据文件：/var/lib/mysql\n\n#### 搜索仓库是否有mysql-server\n```bash\n[root@vultrguest ~]# yum list | grep mysql\nFailed to set locale, defaulting to C.UTF-8\napr-util-mysql.x86_64                                1.6.1-6.el8                                       AppStream \ndovecot-mysql.x86_64                                 1:2.2.36-10.el8                                   AppStream \nfreeradius-mysql.x86_64                              3.0.17-6.module_el8.1.0+198+858eb655              AppStream \ngrafana-mysql.x86_64                                 6.2.2-2.el8                                       AppStream \nmysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-devel.x86_64                                   8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-errmsg.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-libs.x86_64                                    8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-server.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-test.x86_64                                    8.0.17-3.module_el8.0.0+181+899d6349              AppStream \npcp-pmda-mysql.x86_64                                4.3.2-2.el8                                       AppStream \nphp-mysqlnd.x86_64                                   7.2.11-2.module_el8.1.0+209+03b9a8ff              AppStream \npostfix-mysql.x86_64                                 2:3.3.1-9.el8                                     AppStream \nqt5-qtbase-mysql.i686                                5.11.1-7.el8                                      AppStream \nqt5-qtbase-mysql.x86_64                              5.11.1-7.el8                                      AppStream \nrsyslog-mysql.x86_64                                 8.37.0-13.el8                                     AppStream \nrubygem-mysql2.x86_64                                0.4.10-4.module_el8.1.0+214+9be47fd7              AppStream \nrubygem-mysql2-doc.noarch                            0.4.10-4.module_el8.1.0+214+9be47fd7              AppStream \n```\n\n#### 安装MySQL客户端\n```bash\n[root@vultrguest ~]# yum install -y mysql\n...\n```\n\n#### 安装MySQL服务端（没有指定版本默认8.0）\n```bash\n[root@vultrguest ~]# yum install -y mysql-server\n...\n```\n\n#### 启动MySQL服务\n```bash\n[root@vultrguest ~]# systemctl start mysqld\n[root@vultrguest ~]# systemctl status mysqld\n● mysqld.service - MySQL 8.0 database server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)\n   Active: active (running) since Sun 2020-03-08 17:58:00 UTC; 15s ago\n  Process: 6095 ExecStartPost=/usr/libexec/mysql-check-upgrade (code=exited, status=0/SUCCESS)\n  Process: 5968 ExecStartPre=/usr/libexec/mysql-prepare-db-dir mysqld.service (code=exited, status=0/SUCCESS)\n  Process: 5944 ExecStartPre=/usr/libexec/mysql-check-socket (code=exited, status=0/SUCCESS)\n Main PID: 6052 (mysqld)\n   Status: \"Server is operational\"\n    Tasks: 39 (limit: 5066)\n   Memory: 461.7M\n   CGroup: /system.slice/mysqld.service\n           └─6052 /usr/libexec/mysqld --basedir=/usr\n\nMar 08 17:57:53 vultrguest systemd[1]: Starting MySQL 8.0 database server...\nMar 08 17:57:53 vultrguest mysql-prepare-db-dir[5968]: Initializing MySQL database\nMar 08 17:58:00 vultrguest systemd[1]: Started MySQL 8.0 database server.\n```\n\n#### 登录MySQL（刚安装密码为空）\n```bash\n[root@vultrguest ~]# mysql -uroot -p\nEnter password:    \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.17 Source distribution\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> \n```\n\n## 修改用户密码\n#### MySQL 5.7修改用户密码\n```sql\n-- 调整MySQL密码验证规则\nset global validate_password_policy=0;\nset global validate_password_length=4;\nSET global sql_mode = '';\n-- 修改用户密码\nalter user 'root'@'localhost' identified by 'bg360123456';\n```\n\n#### MySQL 8.0修改用户密码\n```sql\n-- 调整MySQL密码验证规则\nset global validate_password.policy=0;\nset global validate_password.length=4;\n-- 修改用户密码\nalter user 'root'@'localhost' identified with mysql_native_password by '123456';\n```\n\n## 创建数据库和用户\n```sql\n-- 5.7和8.0均适用\ncreate database aonitask character set utf8mb4;\ncreate user 'username'@'host' identified by 'password';\ngrant all privileges on aonitask.* to 'aonitask'@'%' with grant option;\n```\n","source":"_posts/MySQL 教程/1.1 MySQL的安装.md","raw":"---\ntitle: 1.1 MySQL的安装\n\ncategories:\n- MySQL教程\n\ndate: 2020-03-08\n---\n\n#### 测试\n## 使用yum安装MySQL\n### 卸载旧的MySQL\n```bash\n[root@vultrguest ~]# yum list installed mysql*\nFailed to set locale, defaulting to C.UTF-8\nInstalled Packages\nmysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream\nmysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream\n[root@vultrguest ~]# yum remove mysql-common.x86_64\n...\n[root@vultrguest ~]# yum list installed mysql*\nFailed to set locale, defaulting to C.UTF-8\nError: No matching Packages to list\n```\n\n### 使用yum源安装 \n\n#### 下载rpm文件\n```bash\n[root@vultrguest ~]# sudo mkdir /home/downloads\n[root@vultrguest ~]# sudo cd  /home/downloads\n# 这里是MySQL 5.7的源文件\n[root@vultrguest ~]# sudo wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'\n# 这里是MySQL 8.0的源文件\n[root@vultrguest ~]# sudo wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\n```\n\n#### 添加源到仓库中\n```bash\n[root@vultrguest ~]# sudo rpm -ivh mysql80-community-release-el7-3.noarch.rpm\n[root@vultrguest ~]# sudo yum update\n```\n\n#### 安装MySQL\n```bash\n[root@vultrguest ~]# sudo yum install mysql-community-server\n...\n```\n\n#### 启动 MySQL 服务\n```bash\n[root@vultrguest ~]# sudo systemctl start mysqld\n...\n```\n\n#### 查看初始密码\n```bash\n[root@vultrguest ~]# sudo grep 'temporary password' /var/log/mysqld.log\n0sIbtR0(Wkge\n```\n\n#### 登录MySQL（使用初始密码）\n```bash\n[root@vultrguest ~]# mysql -uroot -p  # 输入查看到的密码\n...\n```\n\n### 使用yum库安装\n配置文件：/etc/my.cnf\n数据文件：/var/lib/mysql\n\n#### 搜索仓库是否有mysql-server\n```bash\n[root@vultrguest ~]# yum list | grep mysql\nFailed to set locale, defaulting to C.UTF-8\napr-util-mysql.x86_64                                1.6.1-6.el8                                       AppStream \ndovecot-mysql.x86_64                                 1:2.2.36-10.el8                                   AppStream \nfreeradius-mysql.x86_64                              3.0.17-6.module_el8.1.0+198+858eb655              AppStream \ngrafana-mysql.x86_64                                 6.2.2-2.el8                                       AppStream \nmysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-devel.x86_64                                   8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-errmsg.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-libs.x86_64                                    8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-server.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream \nmysql-test.x86_64                                    8.0.17-3.module_el8.0.0+181+899d6349              AppStream \npcp-pmda-mysql.x86_64                                4.3.2-2.el8                                       AppStream \nphp-mysqlnd.x86_64                                   7.2.11-2.module_el8.1.0+209+03b9a8ff              AppStream \npostfix-mysql.x86_64                                 2:3.3.1-9.el8                                     AppStream \nqt5-qtbase-mysql.i686                                5.11.1-7.el8                                      AppStream \nqt5-qtbase-mysql.x86_64                              5.11.1-7.el8                                      AppStream \nrsyslog-mysql.x86_64                                 8.37.0-13.el8                                     AppStream \nrubygem-mysql2.x86_64                                0.4.10-4.module_el8.1.0+214+9be47fd7              AppStream \nrubygem-mysql2-doc.noarch                            0.4.10-4.module_el8.1.0+214+9be47fd7              AppStream \n```\n\n#### 安装MySQL客户端\n```bash\n[root@vultrguest ~]# yum install -y mysql\n...\n```\n\n#### 安装MySQL服务端（没有指定版本默认8.0）\n```bash\n[root@vultrguest ~]# yum install -y mysql-server\n...\n```\n\n#### 启动MySQL服务\n```bash\n[root@vultrguest ~]# systemctl start mysqld\n[root@vultrguest ~]# systemctl status mysqld\n● mysqld.service - MySQL 8.0 database server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)\n   Active: active (running) since Sun 2020-03-08 17:58:00 UTC; 15s ago\n  Process: 6095 ExecStartPost=/usr/libexec/mysql-check-upgrade (code=exited, status=0/SUCCESS)\n  Process: 5968 ExecStartPre=/usr/libexec/mysql-prepare-db-dir mysqld.service (code=exited, status=0/SUCCESS)\n  Process: 5944 ExecStartPre=/usr/libexec/mysql-check-socket (code=exited, status=0/SUCCESS)\n Main PID: 6052 (mysqld)\n   Status: \"Server is operational\"\n    Tasks: 39 (limit: 5066)\n   Memory: 461.7M\n   CGroup: /system.slice/mysqld.service\n           └─6052 /usr/libexec/mysqld --basedir=/usr\n\nMar 08 17:57:53 vultrguest systemd[1]: Starting MySQL 8.0 database server...\nMar 08 17:57:53 vultrguest mysql-prepare-db-dir[5968]: Initializing MySQL database\nMar 08 17:58:00 vultrguest systemd[1]: Started MySQL 8.0 database server.\n```\n\n#### 登录MySQL（刚安装密码为空）\n```bash\n[root@vultrguest ~]# mysql -uroot -p\nEnter password:    \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.17 Source distribution\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> \n```\n\n## 修改用户密码\n#### MySQL 5.7修改用户密码\n```sql\n-- 调整MySQL密码验证规则\nset global validate_password_policy=0;\nset global validate_password_length=4;\nSET global sql_mode = '';\n-- 修改用户密码\nalter user 'root'@'localhost' identified by 'bg360123456';\n```\n\n#### MySQL 8.0修改用户密码\n```sql\n-- 调整MySQL密码验证规则\nset global validate_password.policy=0;\nset global validate_password.length=4;\n-- 修改用户密码\nalter user 'root'@'localhost' identified with mysql_native_password by '123456';\n```\n\n## 创建数据库和用户\n```sql\n-- 5.7和8.0均适用\ncreate database aonitask character set utf8mb4;\ncreate user 'username'@'host' identified by 'password';\ngrant all privileges on aonitask.* to 'aonitask'@'%' with grant option;\n```\n","slug":"MySQL 教程/1.1 MySQL的安装","published":1,"updated":"2020-04-12T08:28:29.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m3n0011m33ptdw7a7jq","content":"<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><h2 id=\"使用yum安装MySQL\"><a href=\"#使用yum安装MySQL\" class=\"headerlink\" title=\"使用yum安装MySQL\"></a>使用yum安装MySQL</h2><h3 id=\"卸载旧的MySQL\"><a href=\"#卸载旧的MySQL\" class=\"headerlink\" title=\"卸载旧的MySQL\"></a>卸载旧的MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum list installed mysql*</span></span><br><span class=\"line\">Failed to <span class=\"built_in\">set</span> locale, defaulting to C.UTF-8</span><br><span class=\"line\">Installed Packages</span><br><span class=\"line\">mysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream</span><br><span class=\"line\">mysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream</span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum remove mysql-common.x86_64</span></span><br><span class=\"line\">...</span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum list installed mysql*</span></span><br><span class=\"line\">Failed to <span class=\"built_in\">set</span> locale, defaulting to C.UTF-8</span><br><span class=\"line\">Error: No matching Packages to list</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用yum源安装\"><a href=\"#使用yum源安装\" class=\"headerlink\" title=\"使用yum源安装\"></a>使用yum源安装</h3><h4 id=\"下载rpm文件\"><a href=\"#下载rpm文件\" class=\"headerlink\" title=\"下载rpm文件\"></a>下载rpm文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo mkdir /home/downloads</span></span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo cd  /home/downloads</span></span><br><span class=\"line\"><span class=\"comment\"># 这里是MySQL 5.7的源文件</span></span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span></span><br><span class=\"line\"><span class=\"comment\"># 这里是MySQL 8.0的源文件</span></span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"添加源到仓库中\"><a href=\"#添加源到仓库中\" class=\"headerlink\" title=\"添加源到仓库中\"></a>添加源到仓库中</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span></span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo yum update</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo yum install mysql-community-server</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动-MySQL-服务\"><a href=\"#启动-MySQL-服务\" class=\"headerlink\" title=\"启动 MySQL 服务\"></a>启动 MySQL 服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo systemctl start mysqld</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看初始密码\"><a href=\"#查看初始密码\" class=\"headerlink\" title=\"查看初始密码\"></a>查看初始密码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo grep 'temporary password' /var/log/mysqld.log</span></span><br><span class=\"line\">0sIbtR0(Wkge</span><br></pre></td></tr></table></figure>\n<h4 id=\"登录MySQL（使用初始密码）\"><a href=\"#登录MySQL（使用初始密码）\" class=\"headerlink\" title=\"登录MySQL（使用初始密码）\"></a>登录MySQL（使用初始密码）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># mysql -uroot -p  # 输入查看到的密码</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用yum库安装\"><a href=\"#使用yum库安装\" class=\"headerlink\" title=\"使用yum库安装\"></a>使用yum库安装</h3><p>配置文件：/etc/my.cnf<br>数据文件：/var/lib/mysql</p>\n<h4 id=\"搜索仓库是否有mysql-server\"><a href=\"#搜索仓库是否有mysql-server\" class=\"headerlink\" title=\"搜索仓库是否有mysql-server\"></a>搜索仓库是否有mysql-server</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum list | grep mysql</span></span><br><span class=\"line\">Failed to <span class=\"built_in\">set</span> locale, defaulting to C.UTF-8</span><br><span class=\"line\">apr-util-mysql.x86_64                                1.6.1-6.el8                                       AppStream </span><br><span class=\"line\">dovecot-mysql.x86_64                                 1:2.2.36-10.el8                                   AppStream </span><br><span class=\"line\">freeradius-mysql.x86_64                              3.0.17-6.module_el8.1.0+198+858eb655              AppStream </span><br><span class=\"line\">grafana-mysql.x86_64                                 6.2.2-2.el8                                       AppStream </span><br><span class=\"line\">mysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-devel.x86_64                                   8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-errmsg.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-libs.x86_64                                    8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-server.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-test.x86_64                                    8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">pcp-pmda-mysql.x86_64                                4.3.2-2.el8                                       AppStream </span><br><span class=\"line\">php-mysqlnd.x86_64                                   7.2.11-2.module_el8.1.0+209+03b9a8ff              AppStream </span><br><span class=\"line\">postfix-mysql.x86_64                                 2:3.3.1-9.el8                                     AppStream </span><br><span class=\"line\">qt5-qtbase-mysql.i686                                5.11.1-7.el8                                      AppStream </span><br><span class=\"line\">qt5-qtbase-mysql.x86_64                              5.11.1-7.el8                                      AppStream </span><br><span class=\"line\">rsyslog-mysql.x86_64                                 8.37.0-13.el8                                     AppStream </span><br><span class=\"line\">rubygem-mysql2.x86_64                                0.4.10-4.module_el8.1.0+214+9be47fd7              AppStream </span><br><span class=\"line\">rubygem-mysql2-doc.noarch                            0.4.10-4.module_el8.1.0+214+9be47fd7              AppStream</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装MySQL客户端\"><a href=\"#安装MySQL客户端\" class=\"headerlink\" title=\"安装MySQL客户端\"></a>安装MySQL客户端</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum install -y mysql</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装MySQL服务端（没有指定版本默认8-0）\"><a href=\"#安装MySQL服务端（没有指定版本默认8-0）\" class=\"headerlink\" title=\"安装MySQL服务端（没有指定版本默认8.0）\"></a>安装MySQL服务端（没有指定版本默认8.0）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum install -y mysql-server</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动MySQL服务\"><a href=\"#启动MySQL服务\" class=\"headerlink\" title=\"启动MySQL服务\"></a>启动MySQL服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># systemctl start mysqld</span></span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># systemctl status mysqld</span></span><br><span class=\"line\">● mysqld.service - MySQL 8.0 database server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Sun 2020-03-08 17:58:00 UTC; 15s ago</span><br><span class=\"line\">  Process: 6095 ExecStartPost=/usr/libexec/mysql-check-upgrade (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 5968 ExecStartPre=/usr/libexec/mysql-prepare-db-dir mysqld.service (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 5944 ExecStartPre=/usr/libexec/mysql-check-socket (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 6052 (mysqld)</span><br><span class=\"line\">   Status: <span class=\"string\">\"Server is operational\"</span></span><br><span class=\"line\">    Tasks: 39 (<span class=\"built_in\">limit</span>: 5066)</span><br><span class=\"line\">   Memory: 461.7M</span><br><span class=\"line\">   CGroup: /system.slice/mysqld.service</span><br><span class=\"line\">           └─6052 /usr/libexec/mysqld --basedir=/usr</span><br><span class=\"line\"></span><br><span class=\"line\">Mar 08 17:57:53 vultrguest systemd[1]: Starting MySQL 8.0 database server...</span><br><span class=\"line\">Mar 08 17:57:53 vultrguest mysql-prepare-db-dir[5968]: Initializing MySQL database</span><br><span class=\"line\">Mar 08 17:58:00 vultrguest systemd[1]: Started MySQL 8.0 database server.</span><br></pre></td></tr></table></figure>\n<h4 id=\"登录MySQL（刚安装密码为空）\"><a href=\"#登录MySQL（刚安装密码为空）\" class=\"headerlink\" title=\"登录MySQL（刚安装密码为空）\"></a>登录MySQL（刚安装密码为空）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># mysql -uroot -p</span></span><br><span class=\"line\">Enter password:    </span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 8</span><br><span class=\"line\">Server version: 8.0.17 Source distribution</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">'help;'</span> or <span class=\"string\">'\\h'</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">'\\c'</span> to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改用户密码\"><a href=\"#修改用户密码\" class=\"headerlink\" title=\"修改用户密码\"></a>修改用户密码</h2><h4 id=\"MySQL-5-7修改用户密码\"><a href=\"#MySQL-5-7修改用户密码\" class=\"headerlink\" title=\"MySQL 5.7修改用户密码\"></a>MySQL 5.7修改用户密码</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 调整MySQL密码验证规则</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> validate_password_policy=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> validate_password_length=<span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">global</span> sql_mode = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 修改用户密码</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'bg360123456'</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"MySQL-8-0修改用户密码\"><a href=\"#MySQL-8-0修改用户密码\" class=\"headerlink\" title=\"MySQL 8.0修改用户密码\"></a>MySQL 8.0修改用户密码</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 调整MySQL密码验证规则</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> validate_password.policy=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> validate_password.length=<span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 修改用户密码</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">with</span> mysql_native_password <span class=\"keyword\">by</span> <span class=\"string\">'123456'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建数据库和用户\"><a href=\"#创建数据库和用户\" class=\"headerlink\" title=\"创建数据库和用户\"></a>创建数据库和用户</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 5.7和8.0均适用</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> aonitask <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8mb4;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'password'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> aonitask.* <span class=\"keyword\">to</span> <span class=\"string\">'aonitask'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">option</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><h2 id=\"使用yum安装MySQL\"><a href=\"#使用yum安装MySQL\" class=\"headerlink\" title=\"使用yum安装MySQL\"></a>使用yum安装MySQL</h2><h3 id=\"卸载旧的MySQL\"><a href=\"#卸载旧的MySQL\" class=\"headerlink\" title=\"卸载旧的MySQL\"></a>卸载旧的MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum list installed mysql*</span></span><br><span class=\"line\">Failed to <span class=\"built_in\">set</span> locale, defaulting to C.UTF-8</span><br><span class=\"line\">Installed Packages</span><br><span class=\"line\">mysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream</span><br><span class=\"line\">mysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream</span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum remove mysql-common.x86_64</span></span><br><span class=\"line\">...</span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum list installed mysql*</span></span><br><span class=\"line\">Failed to <span class=\"built_in\">set</span> locale, defaulting to C.UTF-8</span><br><span class=\"line\">Error: No matching Packages to list</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用yum源安装\"><a href=\"#使用yum源安装\" class=\"headerlink\" title=\"使用yum源安装\"></a>使用yum源安装</h3><h4 id=\"下载rpm文件\"><a href=\"#下载rpm文件\" class=\"headerlink\" title=\"下载rpm文件\"></a>下载rpm文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo mkdir /home/downloads</span></span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo cd  /home/downloads</span></span><br><span class=\"line\"><span class=\"comment\"># 这里是MySQL 5.7的源文件</span></span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span></span><br><span class=\"line\"><span class=\"comment\"># 这里是MySQL 8.0的源文件</span></span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"添加源到仓库中\"><a href=\"#添加源到仓库中\" class=\"headerlink\" title=\"添加源到仓库中\"></a>添加源到仓库中</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span></span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo yum update</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo yum install mysql-community-server</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动-MySQL-服务\"><a href=\"#启动-MySQL-服务\" class=\"headerlink\" title=\"启动 MySQL 服务\"></a>启动 MySQL 服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo systemctl start mysqld</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看初始密码\"><a href=\"#查看初始密码\" class=\"headerlink\" title=\"查看初始密码\"></a>查看初始密码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># sudo grep 'temporary password' /var/log/mysqld.log</span></span><br><span class=\"line\">0sIbtR0(Wkge</span><br></pre></td></tr></table></figure>\n<h4 id=\"登录MySQL（使用初始密码）\"><a href=\"#登录MySQL（使用初始密码）\" class=\"headerlink\" title=\"登录MySQL（使用初始密码）\"></a>登录MySQL（使用初始密码）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># mysql -uroot -p  # 输入查看到的密码</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用yum库安装\"><a href=\"#使用yum库安装\" class=\"headerlink\" title=\"使用yum库安装\"></a>使用yum库安装</h3><p>配置文件：/etc/my.cnf<br>数据文件：/var/lib/mysql</p>\n<h4 id=\"搜索仓库是否有mysql-server\"><a href=\"#搜索仓库是否有mysql-server\" class=\"headerlink\" title=\"搜索仓库是否有mysql-server\"></a>搜索仓库是否有mysql-server</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum list | grep mysql</span></span><br><span class=\"line\">Failed to <span class=\"built_in\">set</span> locale, defaulting to C.UTF-8</span><br><span class=\"line\">apr-util-mysql.x86_64                                1.6.1-6.el8                                       AppStream </span><br><span class=\"line\">dovecot-mysql.x86_64                                 1:2.2.36-10.el8                                   AppStream </span><br><span class=\"line\">freeradius-mysql.x86_64                              3.0.17-6.module_el8.1.0+198+858eb655              AppStream </span><br><span class=\"line\">grafana-mysql.x86_64                                 6.2.2-2.el8                                       AppStream </span><br><span class=\"line\">mysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-devel.x86_64                                   8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-errmsg.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-libs.x86_64                                    8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-server.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">mysql-test.x86_64                                    8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class=\"line\">pcp-pmda-mysql.x86_64                                4.3.2-2.el8                                       AppStream </span><br><span class=\"line\">php-mysqlnd.x86_64                                   7.2.11-2.module_el8.1.0+209+03b9a8ff              AppStream </span><br><span class=\"line\">postfix-mysql.x86_64                                 2:3.3.1-9.el8                                     AppStream </span><br><span class=\"line\">qt5-qtbase-mysql.i686                                5.11.1-7.el8                                      AppStream </span><br><span class=\"line\">qt5-qtbase-mysql.x86_64                              5.11.1-7.el8                                      AppStream </span><br><span class=\"line\">rsyslog-mysql.x86_64                                 8.37.0-13.el8                                     AppStream </span><br><span class=\"line\">rubygem-mysql2.x86_64                                0.4.10-4.module_el8.1.0+214+9be47fd7              AppStream </span><br><span class=\"line\">rubygem-mysql2-doc.noarch                            0.4.10-4.module_el8.1.0+214+9be47fd7              AppStream</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装MySQL客户端\"><a href=\"#安装MySQL客户端\" class=\"headerlink\" title=\"安装MySQL客户端\"></a>安装MySQL客户端</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum install -y mysql</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装MySQL服务端（没有指定版本默认8-0）\"><a href=\"#安装MySQL服务端（没有指定版本默认8-0）\" class=\"headerlink\" title=\"安装MySQL服务端（没有指定版本默认8.0）\"></a>安装MySQL服务端（没有指定版本默认8.0）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># yum install -y mysql-server</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动MySQL服务\"><a href=\"#启动MySQL服务\" class=\"headerlink\" title=\"启动MySQL服务\"></a>启动MySQL服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># systemctl start mysqld</span></span><br><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># systemctl status mysqld</span></span><br><span class=\"line\">● mysqld.service - MySQL 8.0 database server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Sun 2020-03-08 17:58:00 UTC; 15s ago</span><br><span class=\"line\">  Process: 6095 ExecStartPost=/usr/libexec/mysql-check-upgrade (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 5968 ExecStartPre=/usr/libexec/mysql-prepare-db-dir mysqld.service (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 5944 ExecStartPre=/usr/libexec/mysql-check-socket (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 6052 (mysqld)</span><br><span class=\"line\">   Status: <span class=\"string\">\"Server is operational\"</span></span><br><span class=\"line\">    Tasks: 39 (<span class=\"built_in\">limit</span>: 5066)</span><br><span class=\"line\">   Memory: 461.7M</span><br><span class=\"line\">   CGroup: /system.slice/mysqld.service</span><br><span class=\"line\">           └─6052 /usr/libexec/mysqld --basedir=/usr</span><br><span class=\"line\"></span><br><span class=\"line\">Mar 08 17:57:53 vultrguest systemd[1]: Starting MySQL 8.0 database server...</span><br><span class=\"line\">Mar 08 17:57:53 vultrguest mysql-prepare-db-dir[5968]: Initializing MySQL database</span><br><span class=\"line\">Mar 08 17:58:00 vultrguest systemd[1]: Started MySQL 8.0 database server.</span><br></pre></td></tr></table></figure>\n<h4 id=\"登录MySQL（刚安装密码为空）\"><a href=\"#登录MySQL（刚安装密码为空）\" class=\"headerlink\" title=\"登录MySQL（刚安装密码为空）\"></a>登录MySQL（刚安装密码为空）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># mysql -uroot -p</span></span><br><span class=\"line\">Enter password:    </span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 8</span><br><span class=\"line\">Server version: 8.0.17 Source distribution</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">'help;'</span> or <span class=\"string\">'\\h'</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">'\\c'</span> to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改用户密码\"><a href=\"#修改用户密码\" class=\"headerlink\" title=\"修改用户密码\"></a>修改用户密码</h2><h4 id=\"MySQL-5-7修改用户密码\"><a href=\"#MySQL-5-7修改用户密码\" class=\"headerlink\" title=\"MySQL 5.7修改用户密码\"></a>MySQL 5.7修改用户密码</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 调整MySQL密码验证规则</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> validate_password_policy=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> validate_password_length=<span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">global</span> sql_mode = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 修改用户密码</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'bg360123456'</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"MySQL-8-0修改用户密码\"><a href=\"#MySQL-8-0修改用户密码\" class=\"headerlink\" title=\"MySQL 8.0修改用户密码\"></a>MySQL 8.0修改用户密码</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 调整MySQL密码验证规则</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> validate_password.policy=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> validate_password.length=<span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 修改用户密码</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">with</span> mysql_native_password <span class=\"keyword\">by</span> <span class=\"string\">'123456'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建数据库和用户\"><a href=\"#创建数据库和用户\" class=\"headerlink\" title=\"创建数据库和用户\"></a>创建数据库和用户</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 5.7和8.0均适用</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> aonitask <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8mb4;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'password'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> aonitask.* <span class=\"keyword\">to</span> <span class=\"string\">'aonitask'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">option</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"3.1 数据备份与恢复","date":"2020-03-08T16:00:01.000Z","_content":"\n\n#### 测试\n\n## 全量备份与增量备份\n### 全量备份\n全量数据就是数据库中所有的数据，全量备份就是把数据库中所有的数据进行备份。\n```bash\n# 备份一个库\nmysqldump \nmysqldump -uroot -poldbody -S /data/33-6/mysql.sock -F -B oldbody|gzip > /server/backup/mysqlbak_$(data +%F).sql.gz\n\n# 备份所有库\nmysqldump -uroot -poldbody -S /data/33-6/mysql.sock -F -B -A|gzip > /server/backup/mysqlbak_$(data +%F).sql.gz\n```\n\n### 增量备份\n增量数据就是从上次全量备份之后，更新的新数据。对于MySQL来说，binlog日志就是MySQL的增量数据。\n\n#### 按天备份情况\n优点：\n1. 恢复时间短\n1. 维护成本低\n\n缺点：\n1. 占用空间多\n1. 占用资源多，经常锁表操作\n\n|周一全量备份|周一增量数据|周一全量备份|周二增量数据|...|\n|:--|\n|000000001.sql.gz|mysql-bin.000036|000000002.sql.gz|mysql-bin.000056|\n||mysql-bin.000037||mysql-bin.000057|\n||mysql-bin.000038||mysql-bin.000058|\n||mysql-bin.000039||mysql-bin.000059|\n\n\n\n\n#### 按周备份情况\n优点：\n1. 占用空间小\n1. 占用资源少，无需经常锁表，用户体验会好点\n\n缺点：\n1. 维护成本大，恢复麻烦\n\n|周六全量备份|周一增量备份|周二增量备份|周三增量备份|...|\n|:--|\n|000000001.sql.gz|mysql-bin.000037|mysql-bin.000037|mysql-bin.000037||\n\n#### 全量和增量的频率是怎么做的呢？\n1. 中小公司，全量一般是每天一次，业务流量低谷执行全备，执行前要锁表\n1. 单台数据库，如何增量。用rsync（配合定时任务频率大点，或者inotify，主从复制）把所有binlog备份到远程服务器，尽量做主从复制\n1. 大公司周备，每周六00点一次全量，下周日-下周六00点前都是增量\n1. 一主多从，会有一个从库做备份，延迟同步\n\n#### mysql的mysqldump备份什么时候能派上用场？ \n1. 迁移或者升级数据库时\n1. 增加从库的时候\n1. 因为硬件或特殊异常情况，主库或者从库挂机，主从可以相互切换，无需备份\n1. 人为的DDL，DML语句，主从库没办法了，所有库都会执行。此时需要备份\n1. 跨机房灾备，需要备份拷贝走\n\n增量备份例子：\n```bash\nrsync -avz /data/3306/mysql-bin.000* rsync_backup@10.0.0.18::backup --password-file=/etc/rsync.password\n```\n\n#### 什么情况下需要增量恢复？\n我们在生产工作中一般常用一主多从的数据库架构，常见的备份方案是在某一不对外服务的从库上开启binlog，然后实施定时全备份和实时增量备份\n\n#### 什么是增量恢复\n利用二进制日志和全备进行的恢复国产，被称为增量恢复\n\n#### 主或从库宕机（硬件损坏）是否需要增量恢复？\n不要增量恢复，主库宕机，只需要把其中一个同步最快的从库（master.info，或5.5半同步机制）切换为主库即可。从库宕机，直接不用就好了（一般会配LVS负载均衡）， 或者正常修复。\n\n#### 人为操作数据库SQL破坏主库是否需要增量恢复？\n在数据库主库内部命令行误操作，会导致所有的数据库（包括从库）数据丢失，例如：在主库里执行了drop database test;这样的删除语句，这是所有的从库也会执行这个drop database test;语句，从而导致所有的数据库的test库丢死后。这样的场景是需要增量恢复的。\n\n#### 只有一个主库是否需要增量恢复？\n如果公司里只有一个主库的情况，首先应该做定时全量备份（每天一次）及增量备份（每个1-10分钟对binlog日志做切割然后备份到其它的服务器上，或者本地其它的硬盘里）或者些到网络文件系统（备份服务器）里。\n\n如果不允许数据丢失，最好的办法就是做从库，通过drbd（基于磁盘块的）同步。\n\n正常情况：\n1. 主从同步：除了分担读写分离压力外，还可以防止物理设置损坏数据丢失的恢复\n1. 从库备份：在从库进行全量和增量方式的备份，可以防止人为对主库的误操作导致数据丢失，确保备份的从库实时和主库是同步状态的\n\n> 小结\n> 一般由人为（或程序）逻辑的方式在数据库执行的SQL语句等误操作，需要增量恢复，因为此时，所有的从库也执行了误操作语句。\n\n## MySQL增量恢复必备条件\n### 开启log-bin日志功能\nMySQL数据库开启log-bin参数记录binlog日志功能如下：\n```bash\ngrep log-bin /data/3306/my.cnf\nlog-bin=/data/3306/mysql-bin\n```\n\n提示：主库和备份的从库都要开启binlog记录功能\n\n> 小结\n> 存在一份全备份加上全备之后的时刻到问题时刻的所有增量binlog文件备份\n\n","source":"_posts/MySQL 教程/3.1 数据备份与恢复.md","raw":"---\ntitle: 3.1 数据备份与恢复\n\ncategories:\n- MySQL教程\n\ndate: 2020-03-09 00:00:01\n---\n\n\n#### 测试\n\n## 全量备份与增量备份\n### 全量备份\n全量数据就是数据库中所有的数据，全量备份就是把数据库中所有的数据进行备份。\n```bash\n# 备份一个库\nmysqldump \nmysqldump -uroot -poldbody -S /data/33-6/mysql.sock -F -B oldbody|gzip > /server/backup/mysqlbak_$(data +%F).sql.gz\n\n# 备份所有库\nmysqldump -uroot -poldbody -S /data/33-6/mysql.sock -F -B -A|gzip > /server/backup/mysqlbak_$(data +%F).sql.gz\n```\n\n### 增量备份\n增量数据就是从上次全量备份之后，更新的新数据。对于MySQL来说，binlog日志就是MySQL的增量数据。\n\n#### 按天备份情况\n优点：\n1. 恢复时间短\n1. 维护成本低\n\n缺点：\n1. 占用空间多\n1. 占用资源多，经常锁表操作\n\n|周一全量备份|周一增量数据|周一全量备份|周二增量数据|...|\n|:--|\n|000000001.sql.gz|mysql-bin.000036|000000002.sql.gz|mysql-bin.000056|\n||mysql-bin.000037||mysql-bin.000057|\n||mysql-bin.000038||mysql-bin.000058|\n||mysql-bin.000039||mysql-bin.000059|\n\n\n\n\n#### 按周备份情况\n优点：\n1. 占用空间小\n1. 占用资源少，无需经常锁表，用户体验会好点\n\n缺点：\n1. 维护成本大，恢复麻烦\n\n|周六全量备份|周一增量备份|周二增量备份|周三增量备份|...|\n|:--|\n|000000001.sql.gz|mysql-bin.000037|mysql-bin.000037|mysql-bin.000037||\n\n#### 全量和增量的频率是怎么做的呢？\n1. 中小公司，全量一般是每天一次，业务流量低谷执行全备，执行前要锁表\n1. 单台数据库，如何增量。用rsync（配合定时任务频率大点，或者inotify，主从复制）把所有binlog备份到远程服务器，尽量做主从复制\n1. 大公司周备，每周六00点一次全量，下周日-下周六00点前都是增量\n1. 一主多从，会有一个从库做备份，延迟同步\n\n#### mysql的mysqldump备份什么时候能派上用场？ \n1. 迁移或者升级数据库时\n1. 增加从库的时候\n1. 因为硬件或特殊异常情况，主库或者从库挂机，主从可以相互切换，无需备份\n1. 人为的DDL，DML语句，主从库没办法了，所有库都会执行。此时需要备份\n1. 跨机房灾备，需要备份拷贝走\n\n增量备份例子：\n```bash\nrsync -avz /data/3306/mysql-bin.000* rsync_backup@10.0.0.18::backup --password-file=/etc/rsync.password\n```\n\n#### 什么情况下需要增量恢复？\n我们在生产工作中一般常用一主多从的数据库架构，常见的备份方案是在某一不对外服务的从库上开启binlog，然后实施定时全备份和实时增量备份\n\n#### 什么是增量恢复\n利用二进制日志和全备进行的恢复国产，被称为增量恢复\n\n#### 主或从库宕机（硬件损坏）是否需要增量恢复？\n不要增量恢复，主库宕机，只需要把其中一个同步最快的从库（master.info，或5.5半同步机制）切换为主库即可。从库宕机，直接不用就好了（一般会配LVS负载均衡）， 或者正常修复。\n\n#### 人为操作数据库SQL破坏主库是否需要增量恢复？\n在数据库主库内部命令行误操作，会导致所有的数据库（包括从库）数据丢失，例如：在主库里执行了drop database test;这样的删除语句，这是所有的从库也会执行这个drop database test;语句，从而导致所有的数据库的test库丢死后。这样的场景是需要增量恢复的。\n\n#### 只有一个主库是否需要增量恢复？\n如果公司里只有一个主库的情况，首先应该做定时全量备份（每天一次）及增量备份（每个1-10分钟对binlog日志做切割然后备份到其它的服务器上，或者本地其它的硬盘里）或者些到网络文件系统（备份服务器）里。\n\n如果不允许数据丢失，最好的办法就是做从库，通过drbd（基于磁盘块的）同步。\n\n正常情况：\n1. 主从同步：除了分担读写分离压力外，还可以防止物理设置损坏数据丢失的恢复\n1. 从库备份：在从库进行全量和增量方式的备份，可以防止人为对主库的误操作导致数据丢失，确保备份的从库实时和主库是同步状态的\n\n> 小结\n> 一般由人为（或程序）逻辑的方式在数据库执行的SQL语句等误操作，需要增量恢复，因为此时，所有的从库也执行了误操作语句。\n\n## MySQL增量恢复必备条件\n### 开启log-bin日志功能\nMySQL数据库开启log-bin参数记录binlog日志功能如下：\n```bash\ngrep log-bin /data/3306/my.cnf\nlog-bin=/data/3306/mysql-bin\n```\n\n提示：主库和备份的从库都要开启binlog记录功能\n\n> 小结\n> 存在一份全备份加上全备之后的时刻到问题时刻的所有增量binlog文件备份\n\n","slug":"MySQL 教程/3.1 数据备份与恢复","published":1,"updated":"2020-04-12T08:28:29.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m3s0012m33pd4b8zhk7","content":"<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><h2 id=\"全量备份与增量备份\"><a href=\"#全量备份与增量备份\" class=\"headerlink\" title=\"全量备份与增量备份\"></a>全量备份与增量备份</h2><h3 id=\"全量备份\"><a href=\"#全量备份\" class=\"headerlink\" title=\"全量备份\"></a>全量备份</h3><p>全量数据就是数据库中所有的数据，全量备份就是把数据库中所有的数据进行备份。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份一个库</span></span><br><span class=\"line\">mysqldump </span><br><span class=\"line\">mysqldump -uroot -poldbody -S /data/33-6/mysql.sock -F -B oldbody|gzip &gt; /server/backup/mysqlbak_$(data +%F).sql.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份所有库</span></span><br><span class=\"line\">mysqldump -uroot -poldbody -S /data/33-6/mysql.sock -F -B -A|gzip &gt; /server/backup/mysqlbak_$(data +%F).sql.gz</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"增量备份\"><a href=\"#增量备份\" class=\"headerlink\" title=\"增量备份\"></a>增量备份</h3><p>增量数据就是从上次全量备份之后，更新的新数据。对于MySQL来说，binlog日志就是MySQL的增量数据。</p>\n<h4 id=\"按天备份情况\"><a href=\"#按天备份情况\" class=\"headerlink\" title=\"按天备份情况\"></a>按天备份情况</h4><p>优点：</p>\n<ol>\n<li>恢复时间短</li>\n<li>维护成本低</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>占用空间多</li>\n<li>占用资源多，经常锁表操作</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">周一全量备份</th>\n<th>周一增量数据</th>\n<th>周一全量备份</th>\n<th>周二增量数据</th>\n<th>…</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">000000001.sql.gz</td>\n<td>mysql-bin.000036</td>\n<td>000000002.sql.gz</td>\n<td>mysql-bin.000056</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>mysql-bin.000037</td>\n<td></td>\n<td>mysql-bin.000057</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>mysql-bin.000038</td>\n<td></td>\n<td>mysql-bin.000058</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>mysql-bin.000039</td>\n<td></td>\n<td>mysql-bin.000059</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"按周备份情况\"><a href=\"#按周备份情况\" class=\"headerlink\" title=\"按周备份情况\"></a>按周备份情况</h4><p>优点：</p>\n<ol>\n<li>占用空间小</li>\n<li>占用资源少，无需经常锁表，用户体验会好点</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>维护成本大，恢复麻烦</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">周六全量备份</th>\n<th>周一增量备份</th>\n<th>周二增量备份</th>\n<th>周三增量备份</th>\n<th>…</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">000000001.sql.gz</td>\n<td>mysql-bin.000037</td>\n<td>mysql-bin.000037</td>\n<td>mysql-bin.000037</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"全量和增量的频率是怎么做的呢？\"><a href=\"#全量和增量的频率是怎么做的呢？\" class=\"headerlink\" title=\"全量和增量的频率是怎么做的呢？\"></a>全量和增量的频率是怎么做的呢？</h4><ol>\n<li>中小公司，全量一般是每天一次，业务流量低谷执行全备，执行前要锁表</li>\n<li>单台数据库，如何增量。用rsync（配合定时任务频率大点，或者inotify，主从复制）把所有binlog备份到远程服务器，尽量做主从复制</li>\n<li>大公司周备，每周六00点一次全量，下周日-下周六00点前都是增量</li>\n<li>一主多从，会有一个从库做备份，延迟同步</li>\n</ol>\n<h4 id=\"mysql的mysqldump备份什么时候能派上用场？\"><a href=\"#mysql的mysqldump备份什么时候能派上用场？\" class=\"headerlink\" title=\"mysql的mysqldump备份什么时候能派上用场？\"></a>mysql的mysqldump备份什么时候能派上用场？</h4><ol>\n<li>迁移或者升级数据库时</li>\n<li>增加从库的时候</li>\n<li>因为硬件或特殊异常情况，主库或者从库挂机，主从可以相互切换，无需备份</li>\n<li>人为的DDL，DML语句，主从库没办法了，所有库都会执行。此时需要备份</li>\n<li>跨机房灾备，需要备份拷贝走</li>\n</ol>\n<p>增量备份例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -avz /data/3306/mysql-bin.000* rsync_backup@10.0.0.18::backup --password-file=/etc/rsync.password</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"什么情况下需要增量恢复？\"><a href=\"#什么情况下需要增量恢复？\" class=\"headerlink\" title=\"什么情况下需要增量恢复？\"></a>什么情况下需要增量恢复？</h4><p>我们在生产工作中一般常用一主多从的数据库架构，常见的备份方案是在某一不对外服务的从库上开启binlog，然后实施定时全备份和实时增量备份</p>\n<h4 id=\"什么是增量恢复\"><a href=\"#什么是增量恢复\" class=\"headerlink\" title=\"什么是增量恢复\"></a>什么是增量恢复</h4><p>利用二进制日志和全备进行的恢复国产，被称为增量恢复</p>\n<h4 id=\"主或从库宕机（硬件损坏）是否需要增量恢复？\"><a href=\"#主或从库宕机（硬件损坏）是否需要增量恢复？\" class=\"headerlink\" title=\"主或从库宕机（硬件损坏）是否需要增量恢复？\"></a>主或从库宕机（硬件损坏）是否需要增量恢复？</h4><p>不要增量恢复，主库宕机，只需要把其中一个同步最快的从库（master.info，或5.5半同步机制）切换为主库即可。从库宕机，直接不用就好了（一般会配LVS负载均衡）， 或者正常修复。</p>\n<h4 id=\"人为操作数据库SQL破坏主库是否需要增量恢复？\"><a href=\"#人为操作数据库SQL破坏主库是否需要增量恢复？\" class=\"headerlink\" title=\"人为操作数据库SQL破坏主库是否需要增量恢复？\"></a>人为操作数据库SQL破坏主库是否需要增量恢复？</h4><p>在数据库主库内部命令行误操作，会导致所有的数据库（包括从库）数据丢失，例如：在主库里执行了drop database test;这样的删除语句，这是所有的从库也会执行这个drop database test;语句，从而导致所有的数据库的test库丢死后。这样的场景是需要增量恢复的。</p>\n<h4 id=\"只有一个主库是否需要增量恢复？\"><a href=\"#只有一个主库是否需要增量恢复？\" class=\"headerlink\" title=\"只有一个主库是否需要增量恢复？\"></a>只有一个主库是否需要增量恢复？</h4><p>如果公司里只有一个主库的情况，首先应该做定时全量备份（每天一次）及增量备份（每个1-10分钟对binlog日志做切割然后备份到其它的服务器上，或者本地其它的硬盘里）或者些到网络文件系统（备份服务器）里。</p>\n<p>如果不允许数据丢失，最好的办法就是做从库，通过drbd（基于磁盘块的）同步。</p>\n<p>正常情况：</p>\n<ol>\n<li>主从同步：除了分担读写分离压力外，还可以防止物理设置损坏数据丢失的恢复</li>\n<li>从库备份：在从库进行全量和增量方式的备份，可以防止人为对主库的误操作导致数据丢失，确保备份的从库实时和主库是同步状态的</li>\n</ol>\n<blockquote>\n<p>小结<br>一般由人为（或程序）逻辑的方式在数据库执行的SQL语句等误操作，需要增量恢复，因为此时，所有的从库也执行了误操作语句。</p>\n</blockquote>\n<h2 id=\"MySQL增量恢复必备条件\"><a href=\"#MySQL增量恢复必备条件\" class=\"headerlink\" title=\"MySQL增量恢复必备条件\"></a>MySQL增量恢复必备条件</h2><h3 id=\"开启log-bin日志功能\"><a href=\"#开启log-bin日志功能\" class=\"headerlink\" title=\"开启log-bin日志功能\"></a>开启log-bin日志功能</h3><p>MySQL数据库开启log-bin参数记录binlog日志功能如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"built_in\">log</span>-bin /data/3306/my.cnf</span><br><span class=\"line\"><span class=\"built_in\">log</span>-bin=/data/3306/mysql-bin</span><br></pre></td></tr></table></figure></p>\n<p>提示：主库和备份的从库都要开启binlog记录功能</p>\n<blockquote>\n<p>小结<br>存在一份全备份加上全备之后的时刻到问题时刻的所有增量binlog文件备份</p>\n</blockquote>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><h2 id=\"全量备份与增量备份\"><a href=\"#全量备份与增量备份\" class=\"headerlink\" title=\"全量备份与增量备份\"></a>全量备份与增量备份</h2><h3 id=\"全量备份\"><a href=\"#全量备份\" class=\"headerlink\" title=\"全量备份\"></a>全量备份</h3><p>全量数据就是数据库中所有的数据，全量备份就是把数据库中所有的数据进行备份。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份一个库</span></span><br><span class=\"line\">mysqldump </span><br><span class=\"line\">mysqldump -uroot -poldbody -S /data/33-6/mysql.sock -F -B oldbody|gzip &gt; /server/backup/mysqlbak_$(data +%F).sql.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份所有库</span></span><br><span class=\"line\">mysqldump -uroot -poldbody -S /data/33-6/mysql.sock -F -B -A|gzip &gt; /server/backup/mysqlbak_$(data +%F).sql.gz</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"增量备份\"><a href=\"#增量备份\" class=\"headerlink\" title=\"增量备份\"></a>增量备份</h3><p>增量数据就是从上次全量备份之后，更新的新数据。对于MySQL来说，binlog日志就是MySQL的增量数据。</p>\n<h4 id=\"按天备份情况\"><a href=\"#按天备份情况\" class=\"headerlink\" title=\"按天备份情况\"></a>按天备份情况</h4><p>优点：</p>\n<ol>\n<li>恢复时间短</li>\n<li>维护成本低</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>占用空间多</li>\n<li>占用资源多，经常锁表操作</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">周一全量备份</th>\n<th>周一增量数据</th>\n<th>周一全量备份</th>\n<th>周二增量数据</th>\n<th>…</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">000000001.sql.gz</td>\n<td>mysql-bin.000036</td>\n<td>000000002.sql.gz</td>\n<td>mysql-bin.000056</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>mysql-bin.000037</td>\n<td></td>\n<td>mysql-bin.000057</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>mysql-bin.000038</td>\n<td></td>\n<td>mysql-bin.000058</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>mysql-bin.000039</td>\n<td></td>\n<td>mysql-bin.000059</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"按周备份情况\"><a href=\"#按周备份情况\" class=\"headerlink\" title=\"按周备份情况\"></a>按周备份情况</h4><p>优点：</p>\n<ol>\n<li>占用空间小</li>\n<li>占用资源少，无需经常锁表，用户体验会好点</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>维护成本大，恢复麻烦</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">周六全量备份</th>\n<th>周一增量备份</th>\n<th>周二增量备份</th>\n<th>周三增量备份</th>\n<th>…</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">000000001.sql.gz</td>\n<td>mysql-bin.000037</td>\n<td>mysql-bin.000037</td>\n<td>mysql-bin.000037</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"全量和增量的频率是怎么做的呢？\"><a href=\"#全量和增量的频率是怎么做的呢？\" class=\"headerlink\" title=\"全量和增量的频率是怎么做的呢？\"></a>全量和增量的频率是怎么做的呢？</h4><ol>\n<li>中小公司，全量一般是每天一次，业务流量低谷执行全备，执行前要锁表</li>\n<li>单台数据库，如何增量。用rsync（配合定时任务频率大点，或者inotify，主从复制）把所有binlog备份到远程服务器，尽量做主从复制</li>\n<li>大公司周备，每周六00点一次全量，下周日-下周六00点前都是增量</li>\n<li>一主多从，会有一个从库做备份，延迟同步</li>\n</ol>\n<h4 id=\"mysql的mysqldump备份什么时候能派上用场？\"><a href=\"#mysql的mysqldump备份什么时候能派上用场？\" class=\"headerlink\" title=\"mysql的mysqldump备份什么时候能派上用场？\"></a>mysql的mysqldump备份什么时候能派上用场？</h4><ol>\n<li>迁移或者升级数据库时</li>\n<li>增加从库的时候</li>\n<li>因为硬件或特殊异常情况，主库或者从库挂机，主从可以相互切换，无需备份</li>\n<li>人为的DDL，DML语句，主从库没办法了，所有库都会执行。此时需要备份</li>\n<li>跨机房灾备，需要备份拷贝走</li>\n</ol>\n<p>增量备份例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -avz /data/3306/mysql-bin.000* rsync_backup@10.0.0.18::backup --password-file=/etc/rsync.password</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"什么情况下需要增量恢复？\"><a href=\"#什么情况下需要增量恢复？\" class=\"headerlink\" title=\"什么情况下需要增量恢复？\"></a>什么情况下需要增量恢复？</h4><p>我们在生产工作中一般常用一主多从的数据库架构，常见的备份方案是在某一不对外服务的从库上开启binlog，然后实施定时全备份和实时增量备份</p>\n<h4 id=\"什么是增量恢复\"><a href=\"#什么是增量恢复\" class=\"headerlink\" title=\"什么是增量恢复\"></a>什么是增量恢复</h4><p>利用二进制日志和全备进行的恢复国产，被称为增量恢复</p>\n<h4 id=\"主或从库宕机（硬件损坏）是否需要增量恢复？\"><a href=\"#主或从库宕机（硬件损坏）是否需要增量恢复？\" class=\"headerlink\" title=\"主或从库宕机（硬件损坏）是否需要增量恢复？\"></a>主或从库宕机（硬件损坏）是否需要增量恢复？</h4><p>不要增量恢复，主库宕机，只需要把其中一个同步最快的从库（master.info，或5.5半同步机制）切换为主库即可。从库宕机，直接不用就好了（一般会配LVS负载均衡）， 或者正常修复。</p>\n<h4 id=\"人为操作数据库SQL破坏主库是否需要增量恢复？\"><a href=\"#人为操作数据库SQL破坏主库是否需要增量恢复？\" class=\"headerlink\" title=\"人为操作数据库SQL破坏主库是否需要增量恢复？\"></a>人为操作数据库SQL破坏主库是否需要增量恢复？</h4><p>在数据库主库内部命令行误操作，会导致所有的数据库（包括从库）数据丢失，例如：在主库里执行了drop database test;这样的删除语句，这是所有的从库也会执行这个drop database test;语句，从而导致所有的数据库的test库丢死后。这样的场景是需要增量恢复的。</p>\n<h4 id=\"只有一个主库是否需要增量恢复？\"><a href=\"#只有一个主库是否需要增量恢复？\" class=\"headerlink\" title=\"只有一个主库是否需要增量恢复？\"></a>只有一个主库是否需要增量恢复？</h4><p>如果公司里只有一个主库的情况，首先应该做定时全量备份（每天一次）及增量备份（每个1-10分钟对binlog日志做切割然后备份到其它的服务器上，或者本地其它的硬盘里）或者些到网络文件系统（备份服务器）里。</p>\n<p>如果不允许数据丢失，最好的办法就是做从库，通过drbd（基于磁盘块的）同步。</p>\n<p>正常情况：</p>\n<ol>\n<li>主从同步：除了分担读写分离压力外，还可以防止物理设置损坏数据丢失的恢复</li>\n<li>从库备份：在从库进行全量和增量方式的备份，可以防止人为对主库的误操作导致数据丢失，确保备份的从库实时和主库是同步状态的</li>\n</ol>\n<blockquote>\n<p>小结<br>一般由人为（或程序）逻辑的方式在数据库执行的SQL语句等误操作，需要增量恢复，因为此时，所有的从库也执行了误操作语句。</p>\n</blockquote>\n<h2 id=\"MySQL增量恢复必备条件\"><a href=\"#MySQL增量恢复必备条件\" class=\"headerlink\" title=\"MySQL增量恢复必备条件\"></a>MySQL增量恢复必备条件</h2><h3 id=\"开启log-bin日志功能\"><a href=\"#开启log-bin日志功能\" class=\"headerlink\" title=\"开启log-bin日志功能\"></a>开启log-bin日志功能</h3><p>MySQL数据库开启log-bin参数记录binlog日志功能如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"built_in\">log</span>-bin /data/3306/my.cnf</span><br><span class=\"line\"><span class=\"built_in\">log</span>-bin=/data/3306/mysql-bin</span><br></pre></td></tr></table></figure></p>\n<p>提示：主库和备份的从库都要开启binlog记录功能</p>\n<blockquote>\n<p>小结<br>存在一份全备份加上全备之后的时刻到问题时刻的所有增量binlog文件备份</p>\n</blockquote>\n"},{"title":"Chapter 1.1 什么决定了电商双11大促的成败","date":"2020-04-27T16:00:11.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 1.1 什么决定了电商双11大促的成败.md","raw":"---\ntitle: Chapter 1.1 什么决定了电商双11大促的成败\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:11\n---","slug":"MySQL 性能调优/Chapter 1.1 什么决定了电商双11大促的成败","published":1,"updated":"2020-05-01T07:42:35.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m3v0016m33piy8mz2vh","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"3.6 总结","date":"2020-03-08T16:00:06.000Z","_content":"\n|备份方法|备份速度|恢复速度|便捷性|功能|一般用于|\n|:--|\n|cp|快|快|一般、灵活性低|很弱|少量数据|\n|mysqldump|慢|慢|一般、可无视存储引擎的差异|一般|中小型数据量的备份|\n|lvm2快照|快|快|一般、支持几乎热备、速度快|一般|中小型数据量的备份|\n|xtrabackup|较快|较快|实现innodb热备、对存储引擎有要求|强大|较大规模的备份|","source":"_posts/MySQL 教程/3.6 总结.md","raw":"---\ntitle: 3.6 总结\n\ncategories:\n- MySQL教程\n\ndate: 2020-03-09 00:00:06\n---\n\n|备份方法|备份速度|恢复速度|便捷性|功能|一般用于|\n|:--|\n|cp|快|快|一般、灵活性低|很弱|少量数据|\n|mysqldump|慢|慢|一般、可无视存储引擎的差异|一般|中小型数据量的备份|\n|lvm2快照|快|快|一般、支持几乎热备、速度快|一般|中小型数据量的备份|\n|xtrabackup|较快|较快|实现innodb热备、对存储引擎有要求|强大|较大规模的备份|","slug":"MySQL 教程/3.6 总结","published":1,"updated":"2020-04-12T08:28:29.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m3y0018m33p2lhg85o6","content":"<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">备份方法</th>\n<th>备份速度</th>\n<th>恢复速度</th>\n<th>便捷性</th>\n<th>功能</th>\n<th>一般用于</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cp</td>\n<td>快</td>\n<td>快</td>\n<td>一般、灵活性低</td>\n<td>很弱</td>\n<td>少量数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mysqldump</td>\n<td>慢</td>\n<td>慢</td>\n<td>一般、可无视存储引擎的差异</td>\n<td>一般</td>\n<td>中小型数据量的备份</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lvm2快照</td>\n<td>快</td>\n<td>快</td>\n<td>一般、支持几乎热备、速度快</td>\n<td>一般</td>\n<td>中小型数据量的备份</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">xtrabackup</td>\n<td>较快</td>\n<td>较快</td>\n<td>实现innodb热备、对存储引擎有要求</td>\n<td>强大</td>\n<td>较大规模的备份</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">备份方法</th>\n<th>备份速度</th>\n<th>恢复速度</th>\n<th>便捷性</th>\n<th>功能</th>\n<th>一般用于</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cp</td>\n<td>快</td>\n<td>快</td>\n<td>一般、灵活性低</td>\n<td>很弱</td>\n<td>少量数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mysqldump</td>\n<td>慢</td>\n<td>慢</td>\n<td>一般、可无视存储引擎的差异</td>\n<td>一般</td>\n<td>中小型数据量的备份</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lvm2快照</td>\n<td>快</td>\n<td>快</td>\n<td>一般、支持几乎热备、速度快</td>\n<td>一般</td>\n<td>中小型数据量的备份</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">xtrabackup</td>\n<td>较快</td>\n<td>较快</td>\n<td>实现innodb热备、对存储引擎有要求</td>\n<td>强大</td>\n<td>较大规模的备份</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"title":"Chapter 1.2 在双11大促中的数据库服务器","date":"2020-04-27T16:00:12.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 1.2 在双11大促中的数据库服务器.md","raw":"---\ntitle: Chapter 1.2 在双11大促中的数据库服务器\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:12\n---","slug":"MySQL 性能调优/Chapter 1.2 在双11大促中的数据库服务器","published":1,"updated":"2020-05-01T07:42:35.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m40001dm33pyq95cvl5","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 1.3 在大促中什么影响了数据库性能","date":"2020-04-27T16:00:13.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 1.3 在大促中什么影响了数据库性能.md","raw":"---\ntitle: Chapter 1.3 在大促中什么影响了数据库性能\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:13\n---","slug":"MySQL 性能调优/Chapter 1.3 在大促中什么影响了数据库性能","published":1,"updated":"2020-05-01T07:42:35.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m42001fm33ppwosq8wp","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 1.5 大事物带来的问题","date":"2020-04-27T16:00:15.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 1.5 大事物带来的问题.md","raw":"---\ntitle: Chapter 1.5 大事物带来的问题\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:15\n---","slug":"MySQL 性能调优/Chapter 1.5 大事物带来的问题","published":1,"updated":"2020-05-01T07:42:35.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m44001jm33pcdgxr5km","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 1.4 大表带来的问题","date":"2020-04-27T16:00:14.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 1.4 大表带来的问题.md","raw":"---\ntitle: Chapter 1.4 大表带来的问题\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:14\n---","slug":"MySQL 性能调优/Chapter 1.4 大表带来的问题","published":1,"updated":"2020-05-01T07:42:35.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m47001mm33pdptdlmt5","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 2.1 影响性能的几个方面","date":"2020-04-27T16:00:21.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 2.1 影响性能的几个方面.md","raw":"---\ntitle: Chapter 2.1 影响性能的几个方面\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:21\n---","slug":"MySQL 性能调优/Chapter 2.1 影响性能的几个方面","published":1,"updated":"2020-05-01T07:42:35.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m49001om33pgsh40zy0","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 2.2 CPU 资源和可用内存大小","date":"2020-04-27T16:00:22.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 2.2 CPU 资源和可用内存大小.md","raw":"---\ntitle: Chapter 2.2 CPU 资源和可用内存大小\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:22\n---","slug":"MySQL 性能调优/Chapter 2.2 CPU 资源和可用内存大小","published":1,"updated":"2020-05-01T07:42:35.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4b001sm33pdwgaonxt","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 2.4 使用 RAID 增加传统机器硬盘的性能","date":"2020-04-27T16:00:24.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 2.4 使用 RAID 增加传统机器硬盘的性能.md","raw":"---\ntitle: Chapter 2.4 使用 RAID 增加传统机器硬盘的性能\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:24\n---","slug":"MySQL 性能调优/Chapter 2.4 使用 RAID 增加传统机器硬盘的性能","published":1,"updated":"2020-05-01T07:42:35.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4c001tm33pkp6wbg34","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 2.5 使用固态存储 SSD 或 PCIe 卡","date":"2020-04-27T16:00:25.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 2.5 使用固态存储 SSD 或 PCIe 卡.md","raw":"---\ntitle: Chapter 2.5 使用固态存储 SSD 或 PCIe 卡\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:25\n---","slug":"MySQL 性能调优/Chapter 2.5 使用固态存储 SSD 或 PCIe 卡","published":1,"updated":"2020-05-01T07:42:35.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4f001xm33p1o6g2q5j","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 2.6 使用网络存储 SAN 和 NAS","date":"2020-04-27T16:00:26.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 2.6 使用网络存储 SAN 和 NAS.md","raw":"---\ntitle: Chapter 2.6 使用网络存储 SAN 和 NAS\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:26\n---","slug":"MySQL 性能调优/Chapter 2.6 使用网络存储 SAN 和 NAS","published":1,"updated":"2020-05-01T07:42:35.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4g001ym33pgcgrrhko","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 2.3 磁盘的配置和选择","date":"2020-04-27T16:00:23.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 2.3 磁盘的配置和选择.md","raw":"---\ntitle: Chapter 2.3 磁盘的配置和选择\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:23\n---","slug":"MySQL 性能调优/Chapter 2.3 磁盘的配置和选择","published":1,"updated":"2020-05-01T07:42:35.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4j0022m33pj92no83h","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 2.7 总结","date":"2020-04-27T16:00:27.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 2.7 总结.md","raw":"---\ntitle: Chapter 2.7 总结\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:27\n---","slug":"MySQL 性能调优/Chapter 2.7 总结","published":1,"updated":"2020-05-01T07:42:35.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4l0024m33pju8aylap","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 3.1 操作系统对性能的影响","date":"2020-04-27T16:00:31.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 3.1 操作系统对性能的影响.md","raw":"---\ntitle: Chapter 3.1 操作系统对性能的影响\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:31\n---","slug":"MySQL 性能调优/Chapter 3.1 操作系统对性能的影响","published":1,"updated":"2020-05-01T07:42:35.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4n0029m33p1exzprii","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 3.2 CentOS 系统参数优化","date":"2020-04-27T16:00:32.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 3.2 CentOS 系统参数优化.md","raw":"---\ntitle: Chapter 3.2 CentOS 系统参数优化\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:32\n---","slug":"MySQL 性能调优/Chapter 3.2 CentOS 系统参数优化","published":1,"updated":"2020-05-01T07:42:35.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4o002am33pk6svv153","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 3.3 文件系统对性能的影响","date":"2020-04-27T16:00:33.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 3.3 文件系统对性能的影响.md","raw":"---\ntitle: Chapter 3.3 文件系统对性能的影响\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:33\n---","slug":"MySQL 性能调优/Chapter 3.3 文件系统对性能的影响","published":1,"updated":"2020-05-01T07:42:35.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4r002dm33po52voq3e","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 3.4 MySQL 体系结构","date":"2020-04-27T16:00:34.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 3.4 MySQL 体系结构.md","raw":"---\ntitle: Chapter 3.4 MySQL 体系结构\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:34\n---","slug":"MySQL 性能调优/Chapter 3.4 MySQL 体系结构","published":1,"updated":"2020-05-01T07:42:35.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4t002fm33pt6i5iw3r","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 4.1 MySQL 常用存储引擎之 MyISAM","date":"2020-04-27T16:00:41.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 4.1 MySQL 常用存储引擎之 MyISAM.md","raw":"---\ntitle: Chapter 4.1 MySQL 常用存储引擎之 MyISAM\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:41\n---","slug":"MySQL 性能调优/Chapter 4.1 MySQL 常用存储引擎之 MyISAM","published":1,"updated":"2020-05-01T07:42:35.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4v002jm33p4y7lhxcj","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 4.2 MySQL 常用存储引擎之 Innodb","date":"2020-04-27T16:00:42.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 4.2 MySQL 常用存储引擎之 Innodb.md","raw":"---\ntitle: Chapter 4.2 MySQL 常用存储引擎之 Innodb\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:42\n---","slug":"MySQL 性能调优/Chapter 4.2 MySQL 常用存储引擎之 Innodb","published":1,"updated":"2020-05-01T07:42:35.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4x002lm33p9r9mlco9","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 4.3 Innodb 存储引擎的特性一","date":"2020-04-27T16:00:43.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 4.3 Innodb 存储引擎的特性一.md","raw":"---\ntitle: Chapter 4.3 Innodb 存储引擎的特性一\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:43\n---","slug":"MySQL 性能调优/Chapter 4.3 Innodb 存储引擎的特性一","published":1,"updated":"2020-05-01T07:42:35.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m4z002om33ps4f0h61k","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 4.4 Innodb 存储引擎的特性二","date":"2020-04-27T16:00:44.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 4.4 Innodb 存储引擎的特性二.md","raw":"---\ntitle: Chapter 4.4 Innodb 存储引擎的特性二\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:44\n---","slug":"MySQL 性能调优/Chapter 4.4 Innodb 存储引擎的特性二","published":1,"updated":"2020-05-01T07:42:35.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m51002qm33p0i1183qr","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 4.5 MySQL 常用存储引擎之 CSV","date":"2020-04-27T16:00:45.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 4.5 MySQL 常用存储引擎之 CSV.md","raw":"---\ntitle: Chapter 4.5 MySQL 常用存储引擎之 CSV\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:45\n---","slug":"MySQL 性能调优/Chapter 4.5 MySQL 常用存储引擎之 CSV","published":1,"updated":"2020-05-01T07:42:35.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m53002tm33p5adfx5ar","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 4.6 MySQL 常用存储引擎之 Archive","date":"2020-04-27T16:00:46.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 4.6 MySQL 常用存储引擎之 Archive.md","raw":"---\ntitle: Chapter 4.6 MySQL 常用存储引擎之 Archive\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:46\n---","slug":"MySQL 性能调优/Chapter 4.6 MySQL 常用存储引擎之 Archive","published":1,"updated":"2020-05-01T07:42:35.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m55002vm33pdukv3t8n","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 4.7 MySQL 常用存储引擎之 Memory","date":"2020-04-27T16:00:47.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 4.7 MySQL 常用存储引擎之 Memory.md","raw":"---\ntitle: Chapter 4.7 MySQL 常用存储引擎之 Memory\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:47\n---","slug":"MySQL 性能调优/Chapter 4.7 MySQL 常用存储引擎之 Memory","published":1,"updated":"2020-05-01T07:42:35.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m57002ym33p2xl0gh6q","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 4.8 MySQL 常用存储引擎之 Federated","date":"2020-04-27T16:00:48.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 4.8 MySQL 常用存储引擎之 Federated.md","raw":"---\ntitle: Chapter 4.8 MySQL 常用存储引擎之 Federated\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:48\n---","slug":"MySQL 性能调优/Chapter 4.8 MySQL 常用存储引擎之 Federated","published":1,"updated":"2020-05-01T07:42:35.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m580030m33pfbdu903s","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 4.9 如何选择存储引擎","date":"2020-04-27T16:00:49.000Z","_content":"","source":"_posts/MySQL 性能调优/Chapter 4.9 如何选择存储引擎.md","raw":"---\ntitle: Chapter 4.9 如何选择存储引擎\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:49\n---","slug":"MySQL 性能调优/Chapter 4.9 如何选择存储引擎","published":1,"updated":"2020-05-01T07:42:35.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5b0033m33p2k1bbskc","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"Chapter 6.1 什么是基准测试","date":"2020-04-27T16:01:01.000Z","_content":"基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。例如，对计算机CPU进行浮点运算、数据访问的带宽和延迟等指标的基准测试，可以使用户清楚地了解每一款CPU的运算性能及作业吞吐能力是否满足应用程序的要求。\n\n## 基准测试和压力测试的区别\n在软件测试中，压力测试（Stress Test），也称为强度测试、负载测试。压力测试是模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。它和基准测试不同在于：\n1. 基准测试较为简单、直接，用于评估服务器的处理能力。压力测试则通常是对真实的业务数据进行测试，获取真实系统所能承受的压力\n1. 基准测试不关心业务逻辑，所使用的查询和业务的真实性可以和业务环境没关系。压力测试则需要针对不同主题，所使用的数据和查询也是真实用到的\n\n## 基准测试的目的\n1. 建立 MySQL 服务器的性能基准线\n1. 模拟比当前系统更高的负载，以找出系统的扩展瓶颈，增加数据库并发，观察 QPS、TPS 变化，确定并发量与性能最优的关系\n1. 测试不同的硬件、软件和操作系统的配置\n1. 证明新的硬件设备是否配置正确","source":"_posts/MySQL 性能调优/Chapter 6.1 什么是基准测试.md","raw":"---\ntitle: Chapter 6.1 什么是基准测试\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:61\n---\n基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。例如，对计算机CPU进行浮点运算、数据访问的带宽和延迟等指标的基准测试，可以使用户清楚地了解每一款CPU的运算性能及作业吞吐能力是否满足应用程序的要求。\n\n## 基准测试和压力测试的区别\n在软件测试中，压力测试（Stress Test），也称为强度测试、负载测试。压力测试是模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。它和基准测试不同在于：\n1. 基准测试较为简单、直接，用于评估服务器的处理能力。压力测试则通常是对真实的业务数据进行测试，获取真实系统所能承受的压力\n1. 基准测试不关心业务逻辑，所使用的查询和业务的真实性可以和业务环境没关系。压力测试则需要针对不同主题，所使用的数据和查询也是真实用到的\n\n## 基准测试的目的\n1. 建立 MySQL 服务器的性能基准线\n1. 模拟比当前系统更高的负载，以找出系统的扩展瓶颈，增加数据库并发，观察 QPS、TPS 变化，确定并发量与性能最优的关系\n1. 测试不同的硬件、软件和操作系统的配置\n1. 证明新的硬件设备是否配置正确","slug":"MySQL 性能调优/Chapter 6.1 什么是基准测试","published":1,"updated":"2020-05-01T07:42:35.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5d0035m33pv7vuxd3e","content":"<p>基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。例如，对计算机CPU进行浮点运算、数据访问的带宽和延迟等指标的基准测试，可以使用户清楚地了解每一款CPU的运算性能及作业吞吐能力是否满足应用程序的要求。</p>\n<h2 id=\"基准测试和压力测试的区别\"><a href=\"#基准测试和压力测试的区别\" class=\"headerlink\" title=\"基准测试和压力测试的区别\"></a>基准测试和压力测试的区别</h2><p>在软件测试中，压力测试（Stress Test），也称为强度测试、负载测试。压力测试是模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。它和基准测试不同在于：</p>\n<ol>\n<li>基准测试较为简单、直接，用于评估服务器的处理能力。压力测试则通常是对真实的业务数据进行测试，获取真实系统所能承受的压力</li>\n<li>基准测试不关心业务逻辑，所使用的查询和业务的真实性可以和业务环境没关系。压力测试则需要针对不同主题，所使用的数据和查询也是真实用到的</li>\n</ol>\n<h2 id=\"基准测试的目的\"><a href=\"#基准测试的目的\" class=\"headerlink\" title=\"基准测试的目的\"></a>基准测试的目的</h2><ol>\n<li>建立 MySQL 服务器的性能基准线</li>\n<li>模拟比当前系统更高的负载，以找出系统的扩展瓶颈，增加数据库并发，观察 QPS、TPS 变化，确定并发量与性能最优的关系</li>\n<li>测试不同的硬件、软件和操作系统的配置</li>\n<li>证明新的硬件设备是否配置正确</li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。例如，对计算机CPU进行浮点运算、数据访问的带宽和延迟等指标的基准测试，可以使用户清楚地了解每一款CPU的运算性能及作业吞吐能力是否满足应用程序的要求。</p>\n<h2 id=\"基准测试和压力测试的区别\"><a href=\"#基准测试和压力测试的区别\" class=\"headerlink\" title=\"基准测试和压力测试的区别\"></a>基准测试和压力测试的区别</h2><p>在软件测试中，压力测试（Stress Test），也称为强度测试、负载测试。压力测试是模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。它和基准测试不同在于：</p>\n<ol>\n<li>基准测试较为简单、直接，用于评估服务器的处理能力。压力测试则通常是对真实的业务数据进行测试，获取真实系统所能承受的压力</li>\n<li>基准测试不关心业务逻辑，所使用的查询和业务的真实性可以和业务环境没关系。压力测试则需要针对不同主题，所使用的数据和查询也是真实用到的</li>\n</ol>\n<h2 id=\"基准测试的目的\"><a href=\"#基准测试的目的\" class=\"headerlink\" title=\"基准测试的目的\"></a>基准测试的目的</h2><ol>\n<li>建立 MySQL 服务器的性能基准线</li>\n<li>模拟比当前系统更高的负载，以找出系统的扩展瓶颈，增加数据库并发，观察 QPS、TPS 变化，确定并发量与性能最优的关系</li>\n<li>测试不同的硬件、软件和操作系统的配置</li>\n<li>证明新的硬件设备是否配置正确</li>\n</ol>\n"},{"title":"Chapter 6.2 如何进行基准测试","date":"2020-04-27T16:01:02.000Z","_content":"基准测试有两种主要的策略：一是针对整个系统的整体测试，另外是单独测试（如单独对 MySQL 进行基准测试）。这两种策略被称为集成式（full-stack）和单组件试（single-component）基准测试。\n\n## 针对整个系统进行基准测试\n对整个系统进行基准测试，即从系统入口进行测试，如网站 Web 前端，手机 APP 前端等。它能够测试整个系统的性能，包括 WEB 服务器缓存、数据库等，能反映出系统中各个组件接口间的性能问题，体现真实性能情况。缺点就是测试设计复杂，消耗时间长。\n\n## 单独对 MySQL 进行基准测试\n单独对 MySQL 进行基准测试和整体测试相反，测试设计简单，所需耗费时间短，但是无法全面了解整个系统的性能基线。\n\n## 基准测试的常见指标\n开始基准测试甚至是设计基准测试之前，需要先明确测试的目标。测试决定选择什么样的测试工具和技术，以获取精确而有意义的测试结果。可以将测试目标细化为一些列问题，比如“增加缓存是否能够带来性能提升？“。\n\n有时候需要用不同的方法测试不同的指标，比如针对延迟（latency）和吞吐量（throughput）就需要采用不同的测试方法。\n\n基准测试通常有以下这几种测试指标：\n1. TPS：单位时间内所处理的事务数\n1. QPS：单位时间内所处理的查询数\n1. 并发量：同时处理的查询请求数\n1. 响应时间：平均响应时间、最小响应时间、最大响应时间、各时间所占百分比\n\n## 基准测试的步骤\n1. 设计和规划基准测试\n    在开始实施基准测试之前要规划基准测试。选择合适的测试方案。设计专用的基准测试是很复杂的，往往需要一个迭代的过程。首先需要获取生产数据集的快照，并且该快照很容易还原，以便进行后续的测试。这里数据选择上也需要注意，要选择一个有代表性的时间段，最好选取的时间段数据可以覆盖整个系统的活动状态。\n1. 基准测试应该运行多长时间\n    基准测试应该运行足够长的时间，这里足够长的时间指的是，让测试一直运行到确认系统已经稳定为止。详细解释参照《MySQL高性能》。\n1. 准备基准测试及数据收集脚本\n    一般需要收集CPU使用率、IO、网络流量、状态与计数器信息等。\n    ```bash\n    # 下面是一个简单的收集MySQL测试数据的shell脚本\n    INTERVAL=5  #运行间隔，每隔多少时间收集一下状态信息\n    PREFIX=/home/imooc/benchmarks/$INTERVAL-sec-status#定义了状态信息的存储位置\n    RUNFILE=/home/imooc/benchmarks/running#指定了运行标识，如果存在标识，证明脚本在运行，想停止脚本，就删除标识文件的方式来停止脚本\n    echo \"1\">$RUNFILE #标识文件\n    MYSQL=/usr/local/mysql/bin/mysql #mysql命令所在的位置\n    $MYSQL -e \"show global variables\" >>mysql-variables#记录了进行测试的当前mysql的一些设置信息\n    while test -e $RUNFILE; #循环体开始\n    do\n        file=$(date +%F_%I) #定义了脚本运行时间\n        sleep=$(date +%s.$N | awk '{print 5 - ($1 % 5)}') #每隔多久运行一次脚本\n        sleep $sleep\n        ts=\"$(date +\"TS %s.$N $F %T\")\" \n        loadavg=\"$(uptime)\" #系统的负载情况\n        echo \"$ts $loadavg\" >> $PREFIX-${file}-status #记录到文件中\n        $MYSQL -e \"show global status\" >> $PREFIX-${file}-status & #mysql的全局的状态信息\n        echo \"$ts $loadavg\" >> $PREFIX-${file}-innodbstatus  #记录在文件里\n        $MYSQL -e \"show engine innodb status\" >> $PREFIX-${file}-innodbstatus &        #收集innodb的状态信息\n        echo \"$ts $loadavg\" >> $PREFIX-${file}-processlist\n        $MYSQL -e \"show full processlist\\G\" >> $PREFIX-${file}-processlist &        #收集mysql线程的情况\n        echo $ts\n    done    \n    echo Exiting because $RUNFILE does not exists\n    ```\n    在执行基准测试时，要尽可能多的收集被测试系统的信息。这里可以通过一些自动化脚本进行收集系统状态的性能指标，如CPU使用率、磁盘I/O、网络流量统计、SHOW GLOBAL STATUS计数器等。\n1. 运行记基准测试\n1. 保存及分析基准测试结果\n    最好以图形的方法来展示测试结果。\n    ```bash\n    # 下面是保存分析结果的脚本示例\n    #!/bin/bash\n    awk '\n        BEGIN {\n            printf \"#ts date time load QPS\";\n            fmt=\" %.2f\";\n        }\n        /^TS/ {\n            ts=substr($2,1,index($2,\".\")-1);\n            load=NF-2;\n            diff=ts-prev_ts;\n            printf \"\\n%s %s %s %s %s\",ts,$3,$4,substr($load,1,length($load)-1);\n            prev_ts=ts;\n        }\n        /Queries/{\n            print fmt,($2-Queries)/diff;\n            Queries=$2\n        }\n        ' \"$@\"\n    ```\n\n## 基准测试中容易忽略的问题\n1. 使用生产环境数据时只使用了部分数据\n    如果要使用产环境数据测试推荐使用全部生产环境数据，因为人为的选择一部分数据测试则一数据量不足，二不能很好的反映数据发布，测试的结果也是不准确的。\n1. 在多用户场景中，只做单用户的测试\n    在Web应用中通常存在多用户高并发的场景，因此基准测试一定要考虑到多线程的场景，推荐使用多线程并发测试。因为MySQL在多线程的性能表现可能和单线程完成不一样。\n1. 反复执行同一查询\n    同一查询可能会命中缓存，不能真实反映查询性能。","source":"_posts/MySQL 性能调优/Chapter 6.2 如何进行基准测试.md","raw":"---\ntitle: Chapter 6.2 如何进行基准测试\n\ncategories:\n- MySQL 性能调优\n\ndate: 2020-04-28 00:00:62\n---\n基准测试有两种主要的策略：一是针对整个系统的整体测试，另外是单独测试（如单独对 MySQL 进行基准测试）。这两种策略被称为集成式（full-stack）和单组件试（single-component）基准测试。\n\n## 针对整个系统进行基准测试\n对整个系统进行基准测试，即从系统入口进行测试，如网站 Web 前端，手机 APP 前端等。它能够测试整个系统的性能，包括 WEB 服务器缓存、数据库等，能反映出系统中各个组件接口间的性能问题，体现真实性能情况。缺点就是测试设计复杂，消耗时间长。\n\n## 单独对 MySQL 进行基准测试\n单独对 MySQL 进行基准测试和整体测试相反，测试设计简单，所需耗费时间短，但是无法全面了解整个系统的性能基线。\n\n## 基准测试的常见指标\n开始基准测试甚至是设计基准测试之前，需要先明确测试的目标。测试决定选择什么样的测试工具和技术，以获取精确而有意义的测试结果。可以将测试目标细化为一些列问题，比如“增加缓存是否能够带来性能提升？“。\n\n有时候需要用不同的方法测试不同的指标，比如针对延迟（latency）和吞吐量（throughput）就需要采用不同的测试方法。\n\n基准测试通常有以下这几种测试指标：\n1. TPS：单位时间内所处理的事务数\n1. QPS：单位时间内所处理的查询数\n1. 并发量：同时处理的查询请求数\n1. 响应时间：平均响应时间、最小响应时间、最大响应时间、各时间所占百分比\n\n## 基准测试的步骤\n1. 设计和规划基准测试\n    在开始实施基准测试之前要规划基准测试。选择合适的测试方案。设计专用的基准测试是很复杂的，往往需要一个迭代的过程。首先需要获取生产数据集的快照，并且该快照很容易还原，以便进行后续的测试。这里数据选择上也需要注意，要选择一个有代表性的时间段，最好选取的时间段数据可以覆盖整个系统的活动状态。\n1. 基准测试应该运行多长时间\n    基准测试应该运行足够长的时间，这里足够长的时间指的是，让测试一直运行到确认系统已经稳定为止。详细解释参照《MySQL高性能》。\n1. 准备基准测试及数据收集脚本\n    一般需要收集CPU使用率、IO、网络流量、状态与计数器信息等。\n    ```bash\n    # 下面是一个简单的收集MySQL测试数据的shell脚本\n    INTERVAL=5  #运行间隔，每隔多少时间收集一下状态信息\n    PREFIX=/home/imooc/benchmarks/$INTERVAL-sec-status#定义了状态信息的存储位置\n    RUNFILE=/home/imooc/benchmarks/running#指定了运行标识，如果存在标识，证明脚本在运行，想停止脚本，就删除标识文件的方式来停止脚本\n    echo \"1\">$RUNFILE #标识文件\n    MYSQL=/usr/local/mysql/bin/mysql #mysql命令所在的位置\n    $MYSQL -e \"show global variables\" >>mysql-variables#记录了进行测试的当前mysql的一些设置信息\n    while test -e $RUNFILE; #循环体开始\n    do\n        file=$(date +%F_%I) #定义了脚本运行时间\n        sleep=$(date +%s.$N | awk '{print 5 - ($1 % 5)}') #每隔多久运行一次脚本\n        sleep $sleep\n        ts=\"$(date +\"TS %s.$N $F %T\")\" \n        loadavg=\"$(uptime)\" #系统的负载情况\n        echo \"$ts $loadavg\" >> $PREFIX-${file}-status #记录到文件中\n        $MYSQL -e \"show global status\" >> $PREFIX-${file}-status & #mysql的全局的状态信息\n        echo \"$ts $loadavg\" >> $PREFIX-${file}-innodbstatus  #记录在文件里\n        $MYSQL -e \"show engine innodb status\" >> $PREFIX-${file}-innodbstatus &        #收集innodb的状态信息\n        echo \"$ts $loadavg\" >> $PREFIX-${file}-processlist\n        $MYSQL -e \"show full processlist\\G\" >> $PREFIX-${file}-processlist &        #收集mysql线程的情况\n        echo $ts\n    done    \n    echo Exiting because $RUNFILE does not exists\n    ```\n    在执行基准测试时，要尽可能多的收集被测试系统的信息。这里可以通过一些自动化脚本进行收集系统状态的性能指标，如CPU使用率、磁盘I/O、网络流量统计、SHOW GLOBAL STATUS计数器等。\n1. 运行记基准测试\n1. 保存及分析基准测试结果\n    最好以图形的方法来展示测试结果。\n    ```bash\n    # 下面是保存分析结果的脚本示例\n    #!/bin/bash\n    awk '\n        BEGIN {\n            printf \"#ts date time load QPS\";\n            fmt=\" %.2f\";\n        }\n        /^TS/ {\n            ts=substr($2,1,index($2,\".\")-1);\n            load=NF-2;\n            diff=ts-prev_ts;\n            printf \"\\n%s %s %s %s %s\",ts,$3,$4,substr($load,1,length($load)-1);\n            prev_ts=ts;\n        }\n        /Queries/{\n            print fmt,($2-Queries)/diff;\n            Queries=$2\n        }\n        ' \"$@\"\n    ```\n\n## 基准测试中容易忽略的问题\n1. 使用生产环境数据时只使用了部分数据\n    如果要使用产环境数据测试推荐使用全部生产环境数据，因为人为的选择一部分数据测试则一数据量不足，二不能很好的反映数据发布，测试的结果也是不准确的。\n1. 在多用户场景中，只做单用户的测试\n    在Web应用中通常存在多用户高并发的场景，因此基准测试一定要考虑到多线程的场景，推荐使用多线程并发测试。因为MySQL在多线程的性能表现可能和单线程完成不一样。\n1. 反复执行同一查询\n    同一查询可能会命中缓存，不能真实反映查询性能。","slug":"MySQL 性能调优/Chapter 6.2 如何进行基准测试","published":1,"updated":"2020-05-01T07:42:35.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5f0038m33p31tqlm6l","content":"<p>基准测试有两种主要的策略：一是针对整个系统的整体测试，另外是单独测试（如单独对 MySQL 进行基准测试）。这两种策略被称为集成式（full-stack）和单组件试（single-component）基准测试。</p>\n<h2 id=\"针对整个系统进行基准测试\"><a href=\"#针对整个系统进行基准测试\" class=\"headerlink\" title=\"针对整个系统进行基准测试\"></a>针对整个系统进行基准测试</h2><p>对整个系统进行基准测试，即从系统入口进行测试，如网站 Web 前端，手机 APP 前端等。它能够测试整个系统的性能，包括 WEB 服务器缓存、数据库等，能反映出系统中各个组件接口间的性能问题，体现真实性能情况。缺点就是测试设计复杂，消耗时间长。</p>\n<h2 id=\"单独对-MySQL-进行基准测试\"><a href=\"#单独对-MySQL-进行基准测试\" class=\"headerlink\" title=\"单独对 MySQL 进行基准测试\"></a>单独对 MySQL 进行基准测试</h2><p>单独对 MySQL 进行基准测试和整体测试相反，测试设计简单，所需耗费时间短，但是无法全面了解整个系统的性能基线。</p>\n<h2 id=\"基准测试的常见指标\"><a href=\"#基准测试的常见指标\" class=\"headerlink\" title=\"基准测试的常见指标\"></a>基准测试的常见指标</h2><p>开始基准测试甚至是设计基准测试之前，需要先明确测试的目标。测试决定选择什么样的测试工具和技术，以获取精确而有意义的测试结果。可以将测试目标细化为一些列问题，比如“增加缓存是否能够带来性能提升？“。</p>\n<p>有时候需要用不同的方法测试不同的指标，比如针对延迟（latency）和吞吐量（throughput）就需要采用不同的测试方法。</p>\n<p>基准测试通常有以下这几种测试指标：</p>\n<ol>\n<li>TPS：单位时间内所处理的事务数</li>\n<li>QPS：单位时间内所处理的查询数</li>\n<li>并发量：同时处理的查询请求数</li>\n<li>响应时间：平均响应时间、最小响应时间、最大响应时间、各时间所占百分比</li>\n</ol>\n<h2 id=\"基准测试的步骤\"><a href=\"#基准测试的步骤\" class=\"headerlink\" title=\"基准测试的步骤\"></a>基准测试的步骤</h2><ol>\n<li>设计和规划基准测试<br> 在开始实施基准测试之前要规划基准测试。选择合适的测试方案。设计专用的基准测试是很复杂的，往往需要一个迭代的过程。首先需要获取生产数据集的快照，并且该快照很容易还原，以便进行后续的测试。这里数据选择上也需要注意，要选择一个有代表性的时间段，最好选取的时间段数据可以覆盖整个系统的活动状态。</li>\n<li>基准测试应该运行多长时间<br> 基准测试应该运行足够长的时间，这里足够长的时间指的是，让测试一直运行到确认系统已经稳定为止。详细解释参照《MySQL高性能》。</li>\n<li><p>准备基准测试及数据收集脚本<br> 一般需要收集CPU使用率、IO、网络流量、状态与计数器信息等。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下面是一个简单的收集MySQL测试数据的shell脚本</span></span><br><span class=\"line\">INTERVAL=5  <span class=\"comment\">#运行间隔，每隔多少时间收集一下状态信息</span></span><br><span class=\"line\">PREFIX=/home/imooc/benchmarks/<span class=\"variable\">$INTERVAL</span>-sec-status<span class=\"comment\">#定义了状态信息的存储位置</span></span><br><span class=\"line\">RUNFILE=/home/imooc/benchmarks/running<span class=\"comment\">#指定了运行标识，如果存在标识，证明脚本在运行，想停止脚本，就删除标识文件的方式来停止脚本</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1\"</span>&gt;<span class=\"variable\">$RUNFILE</span> <span class=\"comment\">#标识文件</span></span><br><span class=\"line\">MYSQL=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql <span class=\"comment\">#mysql命令所在的位置</span></span><br><span class=\"line\"><span class=\"variable\">$MYSQL</span> -e <span class=\"string\">\"show global variables\"</span> &gt;&gt;mysql-variables<span class=\"comment\">#记录了进行测试的当前mysql的一些设置信息</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">test</span> -e <span class=\"variable\">$RUNFILE</span>; <span class=\"comment\">#循环体开始</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    file=$(date +%F_%I) <span class=\"comment\">#定义了脚本运行时间</span></span><br><span class=\"line\">    sleep=$(date +%s.<span class=\"variable\">$N</span> | awk <span class=\"string\">'&#123;print 5 - ($1 % 5)&#125;'</span>) <span class=\"comment\">#每隔多久运行一次脚本</span></span><br><span class=\"line\">    sleep <span class=\"variable\">$sleep</span></span><br><span class=\"line\">    ts=<span class=\"string\">\"<span class=\"variable\">$(date +\"TS %s.$N $F %T\")</span>\"</span> </span><br><span class=\"line\">    loadavg=<span class=\"string\">\"<span class=\"variable\">$(uptime)</span>\"</span> <span class=\"comment\">#系统的负载情况</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$ts</span> <span class=\"variable\">$loadavg</span>\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-status <span class=\"comment\">#记录到文件中</span></span><br><span class=\"line\">    <span class=\"variable\">$MYSQL</span> -e <span class=\"string\">\"show global status\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-status &amp; <span class=\"comment\">#mysql的全局的状态信息</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$ts</span> <span class=\"variable\">$loadavg</span>\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-innodbstatus  <span class=\"comment\">#记录在文件里</span></span><br><span class=\"line\">    <span class=\"variable\">$MYSQL</span> -e <span class=\"string\">\"show engine innodb status\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-innodbstatus &amp;        <span class=\"comment\">#收集innodb的状态信息</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$ts</span> <span class=\"variable\">$loadavg</span>\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-processlist</span><br><span class=\"line\">    <span class=\"variable\">$MYSQL</span> -e <span class=\"string\">\"show full processlist\\G\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-processlist &amp;        <span class=\"comment\">#收集mysql线程的情况</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$ts</span></span><br><span class=\"line\"><span class=\"keyword\">done</span>    </span><br><span class=\"line\"><span class=\"built_in\">echo</span> Exiting because <span class=\"variable\">$RUNFILE</span> does not exists</span><br></pre></td></tr></table></figure>\n<p> 在执行基准测试时，要尽可能多的收集被测试系统的信息。这里可以通过一些自动化脚本进行收集系统状态的性能指标，如CPU使用率、磁盘I/O、网络流量统计、SHOW GLOBAL STATUS计数器等。</p>\n</li>\n<li>运行记基准测试</li>\n<li>保存及分析基准测试结果<br> 最好以图形的方法来展示测试结果。 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下面是保存分析结果的脚本示例</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">awk <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    BEGIN &#123;</span></span><br><span class=\"line\"><span class=\"string\">        printf \"#ts date time load QPS\";</span></span><br><span class=\"line\"><span class=\"string\">        fmt=\" %.2f\";</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    /^TS/ &#123;</span></span><br><span class=\"line\"><span class=\"string\">        ts=substr($2,1,index($2,\".\")-1);</span></span><br><span class=\"line\"><span class=\"string\">        load=NF-2;</span></span><br><span class=\"line\"><span class=\"string\">        diff=ts-prev_ts;</span></span><br><span class=\"line\"><span class=\"string\">        printf \"\\n%s %s %s %s %s\",ts,$3,$4,substr($load,1,length($load)-1);</span></span><br><span class=\"line\"><span class=\"string\">        prev_ts=ts;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    /Queries/&#123;</span></span><br><span class=\"line\"><span class=\"string\">        print fmt,($2-Queries)/diff;</span></span><br><span class=\"line\"><span class=\"string\">        Queries=$2</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    '</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"基准测试中容易忽略的问题\"><a href=\"#基准测试中容易忽略的问题\" class=\"headerlink\" title=\"基准测试中容易忽略的问题\"></a>基准测试中容易忽略的问题</h2><ol>\n<li>使用生产环境数据时只使用了部分数据<br> 如果要使用产环境数据测试推荐使用全部生产环境数据，因为人为的选择一部分数据测试则一数据量不足，二不能很好的反映数据发布，测试的结果也是不准确的。</li>\n<li>在多用户场景中，只做单用户的测试<br> 在Web应用中通常存在多用户高并发的场景，因此基准测试一定要考虑到多线程的场景，推荐使用多线程并发测试。因为MySQL在多线程的性能表现可能和单线程完成不一样。</li>\n<li>反复执行同一查询<br> 同一查询可能会命中缓存，不能真实反映查询性能。</li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>基准测试有两种主要的策略：一是针对整个系统的整体测试，另外是单独测试（如单独对 MySQL 进行基准测试）。这两种策略被称为集成式（full-stack）和单组件试（single-component）基准测试。</p>\n<h2 id=\"针对整个系统进行基准测试\"><a href=\"#针对整个系统进行基准测试\" class=\"headerlink\" title=\"针对整个系统进行基准测试\"></a>针对整个系统进行基准测试</h2><p>对整个系统进行基准测试，即从系统入口进行测试，如网站 Web 前端，手机 APP 前端等。它能够测试整个系统的性能，包括 WEB 服务器缓存、数据库等，能反映出系统中各个组件接口间的性能问题，体现真实性能情况。缺点就是测试设计复杂，消耗时间长。</p>\n<h2 id=\"单独对-MySQL-进行基准测试\"><a href=\"#单独对-MySQL-进行基准测试\" class=\"headerlink\" title=\"单独对 MySQL 进行基准测试\"></a>单独对 MySQL 进行基准测试</h2><p>单独对 MySQL 进行基准测试和整体测试相反，测试设计简单，所需耗费时间短，但是无法全面了解整个系统的性能基线。</p>\n<h2 id=\"基准测试的常见指标\"><a href=\"#基准测试的常见指标\" class=\"headerlink\" title=\"基准测试的常见指标\"></a>基准测试的常见指标</h2><p>开始基准测试甚至是设计基准测试之前，需要先明确测试的目标。测试决定选择什么样的测试工具和技术，以获取精确而有意义的测试结果。可以将测试目标细化为一些列问题，比如“增加缓存是否能够带来性能提升？“。</p>\n<p>有时候需要用不同的方法测试不同的指标，比如针对延迟（latency）和吞吐量（throughput）就需要采用不同的测试方法。</p>\n<p>基准测试通常有以下这几种测试指标：</p>\n<ol>\n<li>TPS：单位时间内所处理的事务数</li>\n<li>QPS：单位时间内所处理的查询数</li>\n<li>并发量：同时处理的查询请求数</li>\n<li>响应时间：平均响应时间、最小响应时间、最大响应时间、各时间所占百分比</li>\n</ol>\n<h2 id=\"基准测试的步骤\"><a href=\"#基准测试的步骤\" class=\"headerlink\" title=\"基准测试的步骤\"></a>基准测试的步骤</h2><ol>\n<li>设计和规划基准测试<br> 在开始实施基准测试之前要规划基准测试。选择合适的测试方案。设计专用的基准测试是很复杂的，往往需要一个迭代的过程。首先需要获取生产数据集的快照，并且该快照很容易还原，以便进行后续的测试。这里数据选择上也需要注意，要选择一个有代表性的时间段，最好选取的时间段数据可以覆盖整个系统的活动状态。</li>\n<li>基准测试应该运行多长时间<br> 基准测试应该运行足够长的时间，这里足够长的时间指的是，让测试一直运行到确认系统已经稳定为止。详细解释参照《MySQL高性能》。</li>\n<li><p>准备基准测试及数据收集脚本<br> 一般需要收集CPU使用率、IO、网络流量、状态与计数器信息等。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下面是一个简单的收集MySQL测试数据的shell脚本</span></span><br><span class=\"line\">INTERVAL=5  <span class=\"comment\">#运行间隔，每隔多少时间收集一下状态信息</span></span><br><span class=\"line\">PREFIX=/home/imooc/benchmarks/<span class=\"variable\">$INTERVAL</span>-sec-status<span class=\"comment\">#定义了状态信息的存储位置</span></span><br><span class=\"line\">RUNFILE=/home/imooc/benchmarks/running<span class=\"comment\">#指定了运行标识，如果存在标识，证明脚本在运行，想停止脚本，就删除标识文件的方式来停止脚本</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1\"</span>&gt;<span class=\"variable\">$RUNFILE</span> <span class=\"comment\">#标识文件</span></span><br><span class=\"line\">MYSQL=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql <span class=\"comment\">#mysql命令所在的位置</span></span><br><span class=\"line\"><span class=\"variable\">$MYSQL</span> -e <span class=\"string\">\"show global variables\"</span> &gt;&gt;mysql-variables<span class=\"comment\">#记录了进行测试的当前mysql的一些设置信息</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">test</span> -e <span class=\"variable\">$RUNFILE</span>; <span class=\"comment\">#循环体开始</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    file=$(date +%F_%I) <span class=\"comment\">#定义了脚本运行时间</span></span><br><span class=\"line\">    sleep=$(date +%s.<span class=\"variable\">$N</span> | awk <span class=\"string\">'&#123;print 5 - ($1 % 5)&#125;'</span>) <span class=\"comment\">#每隔多久运行一次脚本</span></span><br><span class=\"line\">    sleep <span class=\"variable\">$sleep</span></span><br><span class=\"line\">    ts=<span class=\"string\">\"<span class=\"variable\">$(date +\"TS %s.$N $F %T\")</span>\"</span> </span><br><span class=\"line\">    loadavg=<span class=\"string\">\"<span class=\"variable\">$(uptime)</span>\"</span> <span class=\"comment\">#系统的负载情况</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$ts</span> <span class=\"variable\">$loadavg</span>\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-status <span class=\"comment\">#记录到文件中</span></span><br><span class=\"line\">    <span class=\"variable\">$MYSQL</span> -e <span class=\"string\">\"show global status\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-status &amp; <span class=\"comment\">#mysql的全局的状态信息</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$ts</span> <span class=\"variable\">$loadavg</span>\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-innodbstatus  <span class=\"comment\">#记录在文件里</span></span><br><span class=\"line\">    <span class=\"variable\">$MYSQL</span> -e <span class=\"string\">\"show engine innodb status\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-innodbstatus &amp;        <span class=\"comment\">#收集innodb的状态信息</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$ts</span> <span class=\"variable\">$loadavg</span>\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-processlist</span><br><span class=\"line\">    <span class=\"variable\">$MYSQL</span> -e <span class=\"string\">\"show full processlist\\G\"</span> &gt;&gt; <span class=\"variable\">$PREFIX</span>-<span class=\"variable\">$&#123;file&#125;</span>-processlist &amp;        <span class=\"comment\">#收集mysql线程的情况</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$ts</span></span><br><span class=\"line\"><span class=\"keyword\">done</span>    </span><br><span class=\"line\"><span class=\"built_in\">echo</span> Exiting because <span class=\"variable\">$RUNFILE</span> does not exists</span><br></pre></td></tr></table></figure>\n<p> 在执行基准测试时，要尽可能多的收集被测试系统的信息。这里可以通过一些自动化脚本进行收集系统状态的性能指标，如CPU使用率、磁盘I/O、网络流量统计、SHOW GLOBAL STATUS计数器等。</p>\n</li>\n<li>运行记基准测试</li>\n<li>保存及分析基准测试结果<br> 最好以图形的方法来展示测试结果。 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下面是保存分析结果的脚本示例</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">awk <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    BEGIN &#123;</span></span><br><span class=\"line\"><span class=\"string\">        printf \"#ts date time load QPS\";</span></span><br><span class=\"line\"><span class=\"string\">        fmt=\" %.2f\";</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    /^TS/ &#123;</span></span><br><span class=\"line\"><span class=\"string\">        ts=substr($2,1,index($2,\".\")-1);</span></span><br><span class=\"line\"><span class=\"string\">        load=NF-2;</span></span><br><span class=\"line\"><span class=\"string\">        diff=ts-prev_ts;</span></span><br><span class=\"line\"><span class=\"string\">        printf \"\\n%s %s %s %s %s\",ts,$3,$4,substr($load,1,length($load)-1);</span></span><br><span class=\"line\"><span class=\"string\">        prev_ts=ts;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    /Queries/&#123;</span></span><br><span class=\"line\"><span class=\"string\">        print fmt,($2-Queries)/diff;</span></span><br><span class=\"line\"><span class=\"string\">        Queries=$2</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    '</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"基准测试中容易忽略的问题\"><a href=\"#基准测试中容易忽略的问题\" class=\"headerlink\" title=\"基准测试中容易忽略的问题\"></a>基准测试中容易忽略的问题</h2><ol>\n<li>使用生产环境数据时只使用了部分数据<br> 如果要使用产环境数据测试推荐使用全部生产环境数据，因为人为的选择一部分数据测试则一数据量不足，二不能很好的反映数据发布，测试的结果也是不准确的。</li>\n<li>在多用户场景中，只做单用户的测试<br> 在Web应用中通常存在多用户高并发的场景，因此基准测试一定要考虑到多线程的场景，推荐使用多线程并发测试。因为MySQL在多线程的性能表现可能和单线程完成不一样。</li>\n<li>反复执行同一查询<br> 同一查询可能会命中缓存，不能真实反映查询性能。</li>\n</ol>\n"},{"title":"1. 什么是 Nginx","date":"2019-08-26T16:00:00.000Z","_content":"\n什么是 Nginx\n高性能 Web 服务器。\n市场占有图解。\n\n\nnginx 版本。\n\n阿里巴巴Tengine。\nOpenResty。\n\n商业版：\n\n\n\n\n\n安装Nginx\n1. 下载Nginx\n2. 目录介绍\n3. configuration\n4. \n\nMainline version\nStable version","source":"_posts/Nginx 教程/1. 什么是 Nginx.md","raw":"---\ntitle: 1. 什么是 Nginx\ntags:\n- Nginx\ncategories:\n- Nginx 教程\n\ndate: 2019-08-27\n---\n\n什么是 Nginx\n高性能 Web 服务器。\n市场占有图解。\n\n\nnginx 版本。\n\n阿里巴巴Tengine。\nOpenResty。\n\n商业版：\n\n\n\n\n\n安装Nginx\n1. 下载Nginx\n2. 目录介绍\n3. configuration\n4. \n\nMainline version\nStable version","slug":"Nginx 教程/1. 什么是 Nginx","published":1,"updated":"2020-04-12T08:28:29.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5h003am33pcfb9hvaf","content":"<p>什么是 Nginx<br>高性能 Web 服务器。<br>市场占有图解。</p>\n<p>nginx 版本。</p>\n<p>阿里巴巴Tengine。<br>OpenResty。</p>\n<p>商业版：</p>\n<p>安装Nginx</p>\n<ol>\n<li>下载Nginx</li>\n<li>目录介绍</li>\n<li>configuration</li>\n<li></li>\n</ol>\n<p>Mainline version<br>Stable version</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>什么是 Nginx<br>高性能 Web 服务器。<br>市场占有图解。</p>\n<p>nginx 版本。</p>\n<p>阿里巴巴Tengine。<br>OpenResty。</p>\n<p>商业版：</p>\n<p>安装Nginx</p>\n<ol>\n<li>下载Nginx</li>\n<li>目录介绍</li>\n<li>configuration</li>\n<li></li>\n</ol>\n<p>Mainline version<br>Stable version</p>\n"},{"title":"Nginx 目录介绍","date":"2019-07-03T16:00:00.000Z","_content":"\n这里分别介绍了 Nginx 的源码目录和安装目录。\n\n## 安装目录\n![Nginx 目录](001.png)\n\n`auto` 目录有 4 个子目录：`cc`、`lib`、`os`、`types`。`cc` 目录用于编译，`os` 目录用于对所在操作系统判定。其它所有文件都是为了辅助`confiration` 脚本执行的时候去判定我们 Nginx 支持哪些模块、当前操作系统的哪些特性可以供给 Nginx 使用。\n\n![auto 目录](002.png)\n\n\n`CHANNGES` 文件就是 Nginx 每个版本中提供了哪些特性，有哪些bugfix。\n\n因为作者是一个俄罗斯人，所有它也有一个俄语版的 `CHANNGES.ru`。\n\n![CHANGES 文件](003.png)\n\n`conf` 目录里面存储私人文件。因为在我们安装 Nginx 后，为了方便运维去配置，会把 `conf` 目录里面的私人文件拷贝到安装目录。\n\n`configure` 脚本用来生成中间文件，是执行编译前的一个必备工作。\n\n`contrib` 目录提供了 2 个脚本和vim 工具。\n\n比如，我们在没有使用 vim 工具打开 nginx 配置文件，会发现 Nginx 语法没有在 vim 中高亮显示。\n\n![Nginx 配置文件无高亮语法](004.png)\n\n这时候我们把 vim 工具拷贝到我们自己的工作目录中，再查看配置文件，会发现已经有了 Nginx 语法高亮显示了。\n\n```bash\ncp -r contrib/vim/* ~/.vim/\n```\n\n![Nginx 配置文件高亮语法](005.png)\n\n`html` 目录提供了 2 个标准的 html 文件，一个是发现 `500` 错误的时候可以重定向到这个文件，另外一个是默认的 nginx 欢迎界面。\n\n![html 目录](006.png)\n\n`man` 目录里面是 Linux 对 Nginx 的帮助文件，打开之后我们可以看到最基本的 Nginx 帮助和配置。\n\n```bash\ncd man/\nman ./nginx.8\n```\n\n![man 帮助文件](007.png)\n\n`src` 目录存放 Nginx 的源代码。\n\n![src 目录](008.png)\n\n## 安装目录介绍\n\n![安装目录](021.png)\n\n`conf` 目录存在着从源码目录拷贝而来的 Nginx 配置文件。\n\n![conf 目录](022.png)\n\n`sbin` 字目录存放着 Nginx 的二进制文件。\n\n![sbin 目录](023.png)\n\n## configure 详解 ","source":"_posts/Nginx 教程/2. Nginx 目录介绍.md","raw":"---\ntitle: Nginx 目录介绍\n\ncategories:\n- Nginx 教程\n\ntag:\n- Nginx\n\ndate: 2019-07-04\n---\n\n这里分别介绍了 Nginx 的源码目录和安装目录。\n\n## 安装目录\n![Nginx 目录](001.png)\n\n`auto` 目录有 4 个子目录：`cc`、`lib`、`os`、`types`。`cc` 目录用于编译，`os` 目录用于对所在操作系统判定。其它所有文件都是为了辅助`confiration` 脚本执行的时候去判定我们 Nginx 支持哪些模块、当前操作系统的哪些特性可以供给 Nginx 使用。\n\n![auto 目录](002.png)\n\n\n`CHANNGES` 文件就是 Nginx 每个版本中提供了哪些特性，有哪些bugfix。\n\n因为作者是一个俄罗斯人，所有它也有一个俄语版的 `CHANNGES.ru`。\n\n![CHANGES 文件](003.png)\n\n`conf` 目录里面存储私人文件。因为在我们安装 Nginx 后，为了方便运维去配置，会把 `conf` 目录里面的私人文件拷贝到安装目录。\n\n`configure` 脚本用来生成中间文件，是执行编译前的一个必备工作。\n\n`contrib` 目录提供了 2 个脚本和vim 工具。\n\n比如，我们在没有使用 vim 工具打开 nginx 配置文件，会发现 Nginx 语法没有在 vim 中高亮显示。\n\n![Nginx 配置文件无高亮语法](004.png)\n\n这时候我们把 vim 工具拷贝到我们自己的工作目录中，再查看配置文件，会发现已经有了 Nginx 语法高亮显示了。\n\n```bash\ncp -r contrib/vim/* ~/.vim/\n```\n\n![Nginx 配置文件高亮语法](005.png)\n\n`html` 目录提供了 2 个标准的 html 文件，一个是发现 `500` 错误的时候可以重定向到这个文件，另外一个是默认的 nginx 欢迎界面。\n\n![html 目录](006.png)\n\n`man` 目录里面是 Linux 对 Nginx 的帮助文件，打开之后我们可以看到最基本的 Nginx 帮助和配置。\n\n```bash\ncd man/\nman ./nginx.8\n```\n\n![man 帮助文件](007.png)\n\n`src` 目录存放 Nginx 的源代码。\n\n![src 目录](008.png)\n\n## 安装目录介绍\n\n![安装目录](021.png)\n\n`conf` 目录存在着从源码目录拷贝而来的 Nginx 配置文件。\n\n![conf 目录](022.png)\n\n`sbin` 字目录存放着 Nginx 的二进制文件。\n\n![sbin 目录](023.png)\n\n## configure 详解 ","slug":"Nginx 教程/2. Nginx 目录介绍","published":1,"updated":"2020-04-12T08:28:29.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5k003dm33p3htboff7","content":"<p>这里分别介绍了 Nginx 的源码目录和安装目录。</p>\n<h2 id=\"安装目录\"><a href=\"#安装目录\" class=\"headerlink\" title=\"安装目录\"></a>安装目录</h2><p><img src=\"001.png\" alt=\"Nginx 目录\"></p>\n<p><code>auto</code> 目录有 4 个子目录：<code>cc</code>、<code>lib</code>、<code>os</code>、<code>types</code>。<code>cc</code> 目录用于编译，<code>os</code> 目录用于对所在操作系统判定。其它所有文件都是为了辅助<code>confiration</code> 脚本执行的时候去判定我们 Nginx 支持哪些模块、当前操作系统的哪些特性可以供给 Nginx 使用。</p>\n<p><img src=\"002.png\" alt=\"auto 目录\"></p>\n<p><code>CHANNGES</code> 文件就是 Nginx 每个版本中提供了哪些特性，有哪些bugfix。</p>\n<p>因为作者是一个俄罗斯人，所有它也有一个俄语版的 <code>CHANNGES.ru</code>。</p>\n<p><img src=\"003.png\" alt=\"CHANGES 文件\"></p>\n<p><code>conf</code> 目录里面存储私人文件。因为在我们安装 Nginx 后，为了方便运维去配置，会把 <code>conf</code> 目录里面的私人文件拷贝到安装目录。</p>\n<p><code>configure</code> 脚本用来生成中间文件，是执行编译前的一个必备工作。</p>\n<p><code>contrib</code> 目录提供了 2 个脚本和vim 工具。</p>\n<p>比如，我们在没有使用 vim 工具打开 nginx 配置文件，会发现 Nginx 语法没有在 vim 中高亮显示。</p>\n<p><img src=\"004.png\" alt=\"Nginx 配置文件无高亮语法\"></p>\n<p>这时候我们把 vim 工具拷贝到我们自己的工作目录中，再查看配置文件，会发现已经有了 Nginx 语法高亮显示了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r contrib/vim/* ~/.vim/</span><br></pre></td></tr></table></figure>\n<p><img src=\"005.png\" alt=\"Nginx 配置文件高亮语法\"></p>\n<p><code>html</code> 目录提供了 2 个标准的 html 文件，一个是发现 <code>500</code> 错误的时候可以重定向到这个文件，另外一个是默认的 nginx 欢迎界面。</p>\n<p><img src=\"006.png\" alt=\"html 目录\"></p>\n<p><code>man</code> 目录里面是 Linux 对 Nginx 的帮助文件，打开之后我们可以看到最基本的 Nginx 帮助和配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> man/</span><br><span class=\"line\">man ./nginx.8</span><br></pre></td></tr></table></figure>\n<p><img src=\"007.png\" alt=\"man 帮助文件\"></p>\n<p><code>src</code> 目录存放 Nginx 的源代码。</p>\n<p><img src=\"008.png\" alt=\"src 目录\"></p>\n<h2 id=\"安装目录介绍\"><a href=\"#安装目录介绍\" class=\"headerlink\" title=\"安装目录介绍\"></a>安装目录介绍</h2><p><img src=\"021.png\" alt=\"安装目录\"></p>\n<p><code>conf</code> 目录存在着从源码目录拷贝而来的 Nginx 配置文件。</p>\n<p><img src=\"022.png\" alt=\"conf 目录\"></p>\n<p><code>sbin</code> 字目录存放着 Nginx 的二进制文件。</p>\n<p><img src=\"023.png\" alt=\"sbin 目录\"></p>\n<h2 id=\"configure-详解\"><a href=\"#configure-详解\" class=\"headerlink\" title=\"configure 详解\"></a>configure 详解</h2>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>这里分别介绍了 Nginx 的源码目录和安装目录。</p>\n<h2 id=\"安装目录\"><a href=\"#安装目录\" class=\"headerlink\" title=\"安装目录\"></a>安装目录</h2><p><img src=\"001.png\" alt=\"Nginx 目录\"></p>\n<p><code>auto</code> 目录有 4 个子目录：<code>cc</code>、<code>lib</code>、<code>os</code>、<code>types</code>。<code>cc</code> 目录用于编译，<code>os</code> 目录用于对所在操作系统判定。其它所有文件都是为了辅助<code>confiration</code> 脚本执行的时候去判定我们 Nginx 支持哪些模块、当前操作系统的哪些特性可以供给 Nginx 使用。</p>\n<p><img src=\"002.png\" alt=\"auto 目录\"></p>\n<p><code>CHANNGES</code> 文件就是 Nginx 每个版本中提供了哪些特性，有哪些bugfix。</p>\n<p>因为作者是一个俄罗斯人，所有它也有一个俄语版的 <code>CHANNGES.ru</code>。</p>\n<p><img src=\"003.png\" alt=\"CHANGES 文件\"></p>\n<p><code>conf</code> 目录里面存储私人文件。因为在我们安装 Nginx 后，为了方便运维去配置，会把 <code>conf</code> 目录里面的私人文件拷贝到安装目录。</p>\n<p><code>configure</code> 脚本用来生成中间文件，是执行编译前的一个必备工作。</p>\n<p><code>contrib</code> 目录提供了 2 个脚本和vim 工具。</p>\n<p>比如，我们在没有使用 vim 工具打开 nginx 配置文件，会发现 Nginx 语法没有在 vim 中高亮显示。</p>\n<p><img src=\"004.png\" alt=\"Nginx 配置文件无高亮语法\"></p>\n<p>这时候我们把 vim 工具拷贝到我们自己的工作目录中，再查看配置文件，会发现已经有了 Nginx 语法高亮显示了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r contrib/vim/* ~/.vim/</span><br></pre></td></tr></table></figure>\n<p><img src=\"005.png\" alt=\"Nginx 配置文件高亮语法\"></p>\n<p><code>html</code> 目录提供了 2 个标准的 html 文件，一个是发现 <code>500</code> 错误的时候可以重定向到这个文件，另外一个是默认的 nginx 欢迎界面。</p>\n<p><img src=\"006.png\" alt=\"html 目录\"></p>\n<p><code>man</code> 目录里面是 Linux 对 Nginx 的帮助文件，打开之后我们可以看到最基本的 Nginx 帮助和配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> man/</span><br><span class=\"line\">man ./nginx.8</span><br></pre></td></tr></table></figure>\n<p><img src=\"007.png\" alt=\"man 帮助文件\"></p>\n<p><code>src</code> 目录存放 Nginx 的源代码。</p>\n<p><img src=\"008.png\" alt=\"src 目录\"></p>\n<h2 id=\"安装目录介绍\"><a href=\"#安装目录介绍\" class=\"headerlink\" title=\"安装目录介绍\"></a>安装目录介绍</h2><p><img src=\"021.png\" alt=\"安装目录\"></p>\n<p><code>conf</code> 目录存在着从源码目录拷贝而来的 Nginx 配置文件。</p>\n<p><img src=\"022.png\" alt=\"conf 目录\"></p>\n<p><code>sbin</code> 字目录存放着 Nginx 的二进制文件。</p>\n<p><img src=\"023.png\" alt=\"sbin 目录\"></p>\n<h2 id=\"configure-详解\"><a href=\"#configure-详解\" class=\"headerlink\" title=\"configure 详解\"></a>configure 详解</h2>"},{"title":"安装 Nginx","date":"2019-06-29T16:00:00.000Z","_content":"\n## 源码安装\n1. 下载源码\n```shell\nsudo mkdir /home/downloads\nsudo cd /home/downloads\nsudo wget http://nginx.org/download/nginx-1.8.0.tar.gz\n```\n2. 解压\n```shell\nsudo tar -zxvf nginx-1.8.0.tar.gz\ncd nginx-1.8.0  \n```\n3. 编译安装\n```shell\n# 安装pcre库\nsudo yum install -y pcre pcre-devel\n# 安装zlib库\nsudo yum install -y zlib zlib-devel\n# 安装gcc g++（可选）\nsudo yum install gcc\nsudo yum install gcc-c++\n# 安装SSL modules require the OpenSSL library\nyum -y install openssl openssl-devel\n# 安装nginx\nsudo ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\nsudo make\nsudo make install\n```\n4. 测试\n```shell\n# 检测配置文件\nsudo /usr/local/nginx/sbin/nginx -t\n# 启动\nsudo /usr/local/nginx/sbin/nginx\n# 停止\nsudo /usr/local/nginx/sbin/nginx –s stop\n```\n5. 设置 systemctl 服务\n    在系统服务目录里创建 nginx.service 文件\n```shell\nsudo vi /lib/systemd/system/nginx.service\n```\n\n    nginx.service 内容如下：\n```shell\n[Unit]                                              # 服务的说明\nDescription=nginx                                   # 描述服务\nAfter=network.target                                # 描述服务类别\n  \n[Service]                                           # 服务运行参数的设置，注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\nType=forking                                        # 是后台运行的形式\nExecStart=/usr/local/nginx/sbin/nginx               # 为服务的具体运行命令\nExecReload=/usr/local/nginx/sbin/nginx -s reload    # 为重启命令\nExecStop=/usr/local/nginx/sbin/nginx -s quit        # 为停止命令\nPrivateTmp=true                                     # 表示给服务分配独立的临时空间\n  \n[Install]                                           # 运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3\nWantedBy=multi-user.target  \n```\n\n    常用操作：\n```shell\n# 设置开机启动\nsystemctl enable nginx.service\n# 停止开机自启动\nsystemctl disable nginx.service\n# 查看服务当前状态\nsystemctl status nginx.service\n# 启动 nginx 服务\nsystemctl start nginx.service　\n# 停止 nginx 服务\nsystemctl stop nginx.service　\n# 重新启动服务\nsystemctl restart nginx.service　\n# 查看所有已启动的服务\nsystemctl list-units --type=service\n```\n\n## 测试\n\n## 测试2","source":"_posts/Nginx 教程/3. 安装 Nginx.md","raw":"---\ntitle: 安装 Nginx\n\ncategories:\n- Nginx 教程\n\ndate: 2019-06-30\n---\n\n## 源码安装\n1. 下载源码\n```shell\nsudo mkdir /home/downloads\nsudo cd /home/downloads\nsudo wget http://nginx.org/download/nginx-1.8.0.tar.gz\n```\n2. 解压\n```shell\nsudo tar -zxvf nginx-1.8.0.tar.gz\ncd nginx-1.8.0  \n```\n3. 编译安装\n```shell\n# 安装pcre库\nsudo yum install -y pcre pcre-devel\n# 安装zlib库\nsudo yum install -y zlib zlib-devel\n# 安装gcc g++（可选）\nsudo yum install gcc\nsudo yum install gcc-c++\n# 安装SSL modules require the OpenSSL library\nyum -y install openssl openssl-devel\n# 安装nginx\nsudo ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\nsudo make\nsudo make install\n```\n4. 测试\n```shell\n# 检测配置文件\nsudo /usr/local/nginx/sbin/nginx -t\n# 启动\nsudo /usr/local/nginx/sbin/nginx\n# 停止\nsudo /usr/local/nginx/sbin/nginx –s stop\n```\n5. 设置 systemctl 服务\n    在系统服务目录里创建 nginx.service 文件\n```shell\nsudo vi /lib/systemd/system/nginx.service\n```\n\n    nginx.service 内容如下：\n```shell\n[Unit]                                              # 服务的说明\nDescription=nginx                                   # 描述服务\nAfter=network.target                                # 描述服务类别\n  \n[Service]                                           # 服务运行参数的设置，注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\nType=forking                                        # 是后台运行的形式\nExecStart=/usr/local/nginx/sbin/nginx               # 为服务的具体运行命令\nExecReload=/usr/local/nginx/sbin/nginx -s reload    # 为重启命令\nExecStop=/usr/local/nginx/sbin/nginx -s quit        # 为停止命令\nPrivateTmp=true                                     # 表示给服务分配独立的临时空间\n  \n[Install]                                           # 运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3\nWantedBy=multi-user.target  \n```\n\n    常用操作：\n```shell\n# 设置开机启动\nsystemctl enable nginx.service\n# 停止开机自启动\nsystemctl disable nginx.service\n# 查看服务当前状态\nsystemctl status nginx.service\n# 启动 nginx 服务\nsystemctl start nginx.service　\n# 停止 nginx 服务\nsystemctl stop nginx.service　\n# 重新启动服务\nsystemctl restart nginx.service　\n# 查看所有已启动的服务\nsystemctl list-units --type=service\n```\n\n## 测试\n\n## 测试2","slug":"Nginx 教程/3. 安装 Nginx","published":1,"updated":"2020-05-01T07:42:35.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5m003gm33pfhpd5xi3","content":"<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><ol>\n<li><p>下载源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /home/downloads</span><br><span class=\"line\">sudo cd /home/downloads</span><br><span class=\"line\">sudo wget http://nginx.org/download/nginx-1.8.0.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf nginx-1.8.0.tar.gz</span><br><span class=\"line\">cd nginx-1.8.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装pcre库</span></span><br><span class=\"line\">sudo yum install -y pcre pcre-devel</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装zlib库</span></span><br><span class=\"line\">sudo yum install -y zlib zlib-devel</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装gcc g++（可选）</span></span><br><span class=\"line\">sudo yum install gcc</span><br><span class=\"line\">sudo yum install gcc-c++</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装SSL modules require the OpenSSL library</span></span><br><span class=\"line\">yum -y install openssl openssl-devel</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装nginx</span></span><br><span class=\"line\">sudo ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检测配置文件</span></span><br><span class=\"line\">sudo /usr/local/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">sudo /usr/local/nginx/sbin/nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止</span></span><br><span class=\"line\">sudo /usr/local/nginx/sbin/nginx –s stop</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置 systemctl 服务<br> 在系统服务目录里创建 nginx.service 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>\n<p> nginx.service 内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]                                              # 服务的说明</span><br><span class=\"line\">Description=nginx                                   # 描述服务</span><br><span class=\"line\">After=network.target                                # 描述服务类别</span><br><span class=\"line\">  </span><br><span class=\"line\">[Service]                                           # 服务运行参数的设置，注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</span><br><span class=\"line\">Type=forking                                        # 是后台运行的形式</span><br><span class=\"line\">ExecStart=/usr/local/nginx/sbin/nginx               # 为服务的具体运行命令</span><br><span class=\"line\">ExecReload=/usr/local/nginx/sbin/nginx -s reload    # 为重启命令</span><br><span class=\"line\">ExecStop=/usr/local/nginx/sbin/nginx -s quit        # 为停止命令</span><br><span class=\"line\">PrivateTmp=true                                     # 表示给服务分配独立的临时空间</span><br><span class=\"line\">  </span><br><span class=\"line\">[Install]                                           # 运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p> 常用操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置开机启动</span></span><br><span class=\"line\">systemctl enable nginx.service</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止开机自启动</span></span><br><span class=\"line\">systemctl disable nginx.service</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看服务当前状态</span></span><br><span class=\"line\">systemctl status nginx.service</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动 nginx 服务</span></span><br><span class=\"line\">systemctl start nginx.service　</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止 nginx 服务</span></span><br><span class=\"line\">systemctl stop nginx.service　</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重新启动服务</span></span><br><span class=\"line\">systemctl restart nginx.service　</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看所有已启动的服务</span></span><br><span class=\"line\">systemctl list-units --type=service</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h2 id=\"测试2\"><a href=\"#测试2\" class=\"headerlink\" title=\"测试2\"></a>测试2</h2>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><ol>\n<li><p>下载源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /home/downloads</span><br><span class=\"line\">sudo cd /home/downloads</span><br><span class=\"line\">sudo wget http://nginx.org/download/nginx-1.8.0.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf nginx-1.8.0.tar.gz</span><br><span class=\"line\">cd nginx-1.8.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装pcre库</span></span><br><span class=\"line\">sudo yum install -y pcre pcre-devel</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装zlib库</span></span><br><span class=\"line\">sudo yum install -y zlib zlib-devel</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装gcc g++（可选）</span></span><br><span class=\"line\">sudo yum install gcc</span><br><span class=\"line\">sudo yum install gcc-c++</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装SSL modules require the OpenSSL library</span></span><br><span class=\"line\">yum -y install openssl openssl-devel</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装nginx</span></span><br><span class=\"line\">sudo ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检测配置文件</span></span><br><span class=\"line\">sudo /usr/local/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">sudo /usr/local/nginx/sbin/nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止</span></span><br><span class=\"line\">sudo /usr/local/nginx/sbin/nginx –s stop</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置 systemctl 服务<br> 在系统服务目录里创建 nginx.service 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>\n<p> nginx.service 内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]                                              # 服务的说明</span><br><span class=\"line\">Description=nginx                                   # 描述服务</span><br><span class=\"line\">After=network.target                                # 描述服务类别</span><br><span class=\"line\">  </span><br><span class=\"line\">[Service]                                           # 服务运行参数的设置，注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</span><br><span class=\"line\">Type=forking                                        # 是后台运行的形式</span><br><span class=\"line\">ExecStart=/usr/local/nginx/sbin/nginx               # 为服务的具体运行命令</span><br><span class=\"line\">ExecReload=/usr/local/nginx/sbin/nginx -s reload    # 为重启命令</span><br><span class=\"line\">ExecStop=/usr/local/nginx/sbin/nginx -s quit        # 为停止命令</span><br><span class=\"line\">PrivateTmp=true                                     # 表示给服务分配独立的临时空间</span><br><span class=\"line\">  </span><br><span class=\"line\">[Install]                                           # 运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p> 常用操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置开机启动</span></span><br><span class=\"line\">systemctl enable nginx.service</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止开机自启动</span></span><br><span class=\"line\">systemctl disable nginx.service</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看服务当前状态</span></span><br><span class=\"line\">systemctl status nginx.service</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动 nginx 服务</span></span><br><span class=\"line\">systemctl start nginx.service　</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止 nginx 服务</span></span><br><span class=\"line\">systemctl stop nginx.service　</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重新启动服务</span></span><br><span class=\"line\">systemctl restart nginx.service　</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看所有已启动的服务</span></span><br><span class=\"line\">systemctl list-units --type=service</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h2 id=\"测试2\"><a href=\"#测试2\" class=\"headerlink\" title=\"测试2\"></a>测试2</h2>"},{"title":"Nginx 日志","date":"2019-07-18T16:00:00.000Z","_content":"\nNginx的日志分为`access log`和`error log`。其中`access log`记录了哪些用户，哪些页面以及用户浏览器、ip和其它的访问信息。`error log`则记录了服务器的错误信息。\n\n## log_format 定义日志格式\n语法：  log_format name [escape=default|json] string ...;\n默认值：log_format combined \"...\";\n作用域：http\n\nNginx的日志格式是可以自定义的。下面在`nginx/conf/nginx.conf`配置文件中定义了日志的打印格式`main`。\n```text\nlog_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                '$request_time $request_length '\n                '$status $body_bytes_sent \"$http_referer\" '\n                '\"$http_user_agent\"';\n```\n- `remoteaddr`\n    表示客户端IP地址。\n- `remote_user`\n    表示客户端用户名称。\n- `request`\n    表示请求的URL和HTTP协议。\n- `status`\n    表示请求状态。\n- `bodybytessent`\n    表示发送给客户端的字节数，不包括响应头的大小；该变量与Apache模块`modlogconfig`里的`bytes_sent`发送给客户端的总字节数相同。\n- `connection`\n    表示连接的序列号。\n- `connection_requests`\n    表示当前通过一个连接获得的请求数量。\n- `msec`\n    表示日志写入的时间。单位为秒，精度是毫秒。\n- `pipe`\n    表示请求是否通过HTTP流水线（pipelined）发送。通过HTTP流水线发送则`pipe`值为`p`，否则为`.`。\n- `httpreferer`\n    表示从哪个页面链接访问过来的。\n- `\"http_user_agent\"`\n    表示客户端浏览器相关信息，前后必须加上双引号。\n- `requestlength`\n    表示请求的长度。包括请求行，请求头和请求正文。\n- `request_time`\n    表示请求处理时间，单位为秒，精度为毫秒。从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。\n- `[$time_local]`\n    表示通用日志格式下的本地时间，前后必须加上中括号。\n\n## 日志示例\n```text\n10.1.1.1 - - [22/Aug/2014:16:48:14 +0800] \"POST /ajax/MbpRequest.do HTTP/1.1\" 200 367 \"-\" \"Dalvik/1.6.0 (Linux; U; Android 4.1.1; ARMM7K Build/JRO03H)\" \"119.189.56.175\" 127.0.0.1:8090 0.022 0.022 \n10.1.1.1 - - [22/Aug/2014:16:48:19 +0800] \"POST /ajax/MbpRequest.do HTTP/1.1\" 200 616 \"-\" \"Dalvik/1.6.0 (Linux; U; Android 4.0.4; GT-I9103 Build/IMM76D)\" \"36.250.89.22\" 127.0.0.1:8090 0.036 0.036 \n```\n从上面我们可以看出几部分信息：\n1. 客户端（用户）IP地址。如：上例中的`10.1.1.1` (内网负载均衡地址)。\n2. 访问时间。如：上例中的`[22/Aug/2014:16:48:19 +0800]`。\n3. 访问端口。如：上例中的`127.0.0.1:8080`。\n4. 响应时间。如：上例中的`0.022`。\n5. 请求时间。如：上例中的`0.022`。\n6. 用户地理位置代码（国家代码）。\n7. 请求的url地址（目标url地址）的host。如：上例中的`/....`。\n8. 请求方式（GET或者POST等）。如：上例中的`GET`。\n9. 请求url地址（去除host部分）。如：上例中的`/html/test.html`。\n10. 请求状态（状态码，`200`表示成功，`404`表示页面不存在，`301`表示永久重定向等）。\n11. 请求页面大小，默认为B（byte）。如：上例中的`2426`。\n12. 来源页面，即从哪个页面转到本页，专业名称叫做referer。如：上例中的`http://a.com`。\n13. 用户浏览器语言。如：上例中的`es-ES,es;q=0.8`。\n14. 用户浏览器其他信息，浏览器版本、浏览器类型等。如：上例中的`Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.97 Safari/537.11`。","source":"_posts/Nginx 教程/4. Nginx 日志.md","raw":"---\ntitle : Nginx 日志\n\ncategories:\n- Nginx 教程\n\ntag:\n- Nginx\n\ndate: 2019-07-19\n---\n\nNginx的日志分为`access log`和`error log`。其中`access log`记录了哪些用户，哪些页面以及用户浏览器、ip和其它的访问信息。`error log`则记录了服务器的错误信息。\n\n## log_format 定义日志格式\n语法：  log_format name [escape=default|json] string ...;\n默认值：log_format combined \"...\";\n作用域：http\n\nNginx的日志格式是可以自定义的。下面在`nginx/conf/nginx.conf`配置文件中定义了日志的打印格式`main`。\n```text\nlog_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                '$request_time $request_length '\n                '$status $body_bytes_sent \"$http_referer\" '\n                '\"$http_user_agent\"';\n```\n- `remoteaddr`\n    表示客户端IP地址。\n- `remote_user`\n    表示客户端用户名称。\n- `request`\n    表示请求的URL和HTTP协议。\n- `status`\n    表示请求状态。\n- `bodybytessent`\n    表示发送给客户端的字节数，不包括响应头的大小；该变量与Apache模块`modlogconfig`里的`bytes_sent`发送给客户端的总字节数相同。\n- `connection`\n    表示连接的序列号。\n- `connection_requests`\n    表示当前通过一个连接获得的请求数量。\n- `msec`\n    表示日志写入的时间。单位为秒，精度是毫秒。\n- `pipe`\n    表示请求是否通过HTTP流水线（pipelined）发送。通过HTTP流水线发送则`pipe`值为`p`，否则为`.`。\n- `httpreferer`\n    表示从哪个页面链接访问过来的。\n- `\"http_user_agent\"`\n    表示客户端浏览器相关信息，前后必须加上双引号。\n- `requestlength`\n    表示请求的长度。包括请求行，请求头和请求正文。\n- `request_time`\n    表示请求处理时间，单位为秒，精度为毫秒。从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。\n- `[$time_local]`\n    表示通用日志格式下的本地时间，前后必须加上中括号。\n\n## 日志示例\n```text\n10.1.1.1 - - [22/Aug/2014:16:48:14 +0800] \"POST /ajax/MbpRequest.do HTTP/1.1\" 200 367 \"-\" \"Dalvik/1.6.0 (Linux; U; Android 4.1.1; ARMM7K Build/JRO03H)\" \"119.189.56.175\" 127.0.0.1:8090 0.022 0.022 \n10.1.1.1 - - [22/Aug/2014:16:48:19 +0800] \"POST /ajax/MbpRequest.do HTTP/1.1\" 200 616 \"-\" \"Dalvik/1.6.0 (Linux; U; Android 4.0.4; GT-I9103 Build/IMM76D)\" \"36.250.89.22\" 127.0.0.1:8090 0.036 0.036 \n```\n从上面我们可以看出几部分信息：\n1. 客户端（用户）IP地址。如：上例中的`10.1.1.1` (内网负载均衡地址)。\n2. 访问时间。如：上例中的`[22/Aug/2014:16:48:19 +0800]`。\n3. 访问端口。如：上例中的`127.0.0.1:8080`。\n4. 响应时间。如：上例中的`0.022`。\n5. 请求时间。如：上例中的`0.022`。\n6. 用户地理位置代码（国家代码）。\n7. 请求的url地址（目标url地址）的host。如：上例中的`/....`。\n8. 请求方式（GET或者POST等）。如：上例中的`GET`。\n9. 请求url地址（去除host部分）。如：上例中的`/html/test.html`。\n10. 请求状态（状态码，`200`表示成功，`404`表示页面不存在，`301`表示永久重定向等）。\n11. 请求页面大小，默认为B（byte）。如：上例中的`2426`。\n12. 来源页面，即从哪个页面转到本页，专业名称叫做referer。如：上例中的`http://a.com`。\n13. 用户浏览器语言。如：上例中的`es-ES,es;q=0.8`。\n14. 用户浏览器其他信息，浏览器版本、浏览器类型等。如：上例中的`Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.97 Safari/537.11`。","slug":"Nginx 教程/4. Nginx 日志","published":1,"updated":"2020-04-12T08:28:29.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5p003jm33p5n3qbbus","content":"<p>Nginx的日志分为<code>access log</code>和<code>error log</code>。其中<code>access log</code>记录了哪些用户，哪些页面以及用户浏览器、ip和其它的访问信息。<code>error log</code>则记录了服务器的错误信息。</p>\n<h2 id=\"log-format-定义日志格式\"><a href=\"#log-format-定义日志格式\" class=\"headerlink\" title=\"log_format 定义日志格式\"></a>log_format 定义日志格式</h2><p>语法：  log_format name [escape=default|json] string …;<br>默认值：log_format combined “…”;<br>作用域：http</p>\n<p>Nginx的日志格式是可以自定义的。下面在<code>nginx/conf/nginx.conf</code>配置文件中定义了日志的打印格式<code>main</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                &apos;$request_time $request_length &apos;</span><br><span class=\"line\">                &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                &apos;&quot;$http_user_agent&quot;&apos;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>remoteaddr</code><br>  表示客户端IP地址。</li>\n<li><code>remote_user</code><br>  表示客户端用户名称。</li>\n<li><code>request</code><br>  表示请求的URL和HTTP协议。</li>\n<li><code>status</code><br>  表示请求状态。</li>\n<li><code>bodybytessent</code><br>  表示发送给客户端的字节数，不包括响应头的大小；该变量与Apache模块<code>modlogconfig</code>里的<code>bytes_sent</code>发送给客户端的总字节数相同。</li>\n<li><code>connection</code><br>  表示连接的序列号。</li>\n<li><code>connection_requests</code><br>  表示当前通过一个连接获得的请求数量。</li>\n<li><code>msec</code><br>  表示日志写入的时间。单位为秒，精度是毫秒。</li>\n<li><code>pipe</code><br>  表示请求是否通过HTTP流水线（pipelined）发送。通过HTTP流水线发送则<code>pipe</code>值为<code>p</code>，否则为<code>.</code>。</li>\n<li><code>httpreferer</code><br>  表示从哪个页面链接访问过来的。</li>\n<li><code>&quot;http_user_agent&quot;</code><br>  表示客户端浏览器相关信息，前后必须加上双引号。</li>\n<li><code>requestlength</code><br>  表示请求的长度。包括请求行，请求头和请求正文。</li>\n<li><code>request_time</code><br>  表示请求处理时间，单位为秒，精度为毫秒。从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</li>\n<li><code>[$time_local]</code><br>  表示通用日志格式下的本地时间，前后必须加上中括号。</li>\n</ul>\n<h2 id=\"日志示例\"><a href=\"#日志示例\" class=\"headerlink\" title=\"日志示例\"></a>日志示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.1.1.1 - - [22/Aug/2014:16:48:14 +0800] &quot;POST /ajax/MbpRequest.do HTTP/1.1&quot; 200 367 &quot;-&quot; &quot;Dalvik/1.6.0 (Linux; U; Android 4.1.1; ARMM7K Build/JRO03H)&quot; &quot;119.189.56.175&quot; 127.0.0.1:8090 0.022 0.022 </span><br><span class=\"line\">10.1.1.1 - - [22/Aug/2014:16:48:19 +0800] &quot;POST /ajax/MbpRequest.do HTTP/1.1&quot; 200 616 &quot;-&quot; &quot;Dalvik/1.6.0 (Linux; U; Android 4.0.4; GT-I9103 Build/IMM76D)&quot; &quot;36.250.89.22&quot; 127.0.0.1:8090 0.036 0.036</span><br></pre></td></tr></table></figure>\n<p>从上面我们可以看出几部分信息：</p>\n<ol>\n<li>客户端（用户）IP地址。如：上例中的<code>10.1.1.1</code> (内网负载均衡地址)。</li>\n<li>访问时间。如：上例中的<code>[22/Aug/2014:16:48:19 +0800]</code>。</li>\n<li>访问端口。如：上例中的<code>127.0.0.1:8080</code>。</li>\n<li>响应时间。如：上例中的<code>0.022</code>。</li>\n<li>请求时间。如：上例中的<code>0.022</code>。</li>\n<li>用户地理位置代码（国家代码）。</li>\n<li>请求的url地址（目标url地址）的host。如：上例中的<code>/....</code>。</li>\n<li>请求方式（GET或者POST等）。如：上例中的<code>GET</code>。</li>\n<li>请求url地址（去除host部分）。如：上例中的<code>/html/test.html</code>。</li>\n<li>请求状态（状态码，<code>200</code>表示成功，<code>404</code>表示页面不存在，<code>301</code>表示永久重定向等）。</li>\n<li>请求页面大小，默认为B（byte）。如：上例中的<code>2426</code>。</li>\n<li>来源页面，即从哪个页面转到本页，专业名称叫做referer。如：上例中的<code>http://a.com</code>。</li>\n<li>用户浏览器语言。如：上例中的<code>es-ES,es;q=0.8</code>。</li>\n<li>用户浏览器其他信息，浏览器版本、浏览器类型等。如：上例中的<code>Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.97 Safari/537.11</code>。</li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Nginx的日志分为<code>access log</code>和<code>error log</code>。其中<code>access log</code>记录了哪些用户，哪些页面以及用户浏览器、ip和其它的访问信息。<code>error log</code>则记录了服务器的错误信息。</p>\n<h2 id=\"log-format-定义日志格式\"><a href=\"#log-format-定义日志格式\" class=\"headerlink\" title=\"log_format 定义日志格式\"></a>log_format 定义日志格式</h2><p>语法：  log_format name [escape=default|json] string …;<br>默认值：log_format combined “…”;<br>作用域：http</p>\n<p>Nginx的日志格式是可以自定义的。下面在<code>nginx/conf/nginx.conf</code>配置文件中定义了日志的打印格式<code>main</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                &apos;$request_time $request_length &apos;</span><br><span class=\"line\">                &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                &apos;&quot;$http_user_agent&quot;&apos;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>remoteaddr</code><br>  表示客户端IP地址。</li>\n<li><code>remote_user</code><br>  表示客户端用户名称。</li>\n<li><code>request</code><br>  表示请求的URL和HTTP协议。</li>\n<li><code>status</code><br>  表示请求状态。</li>\n<li><code>bodybytessent</code><br>  表示发送给客户端的字节数，不包括响应头的大小；该变量与Apache模块<code>modlogconfig</code>里的<code>bytes_sent</code>发送给客户端的总字节数相同。</li>\n<li><code>connection</code><br>  表示连接的序列号。</li>\n<li><code>connection_requests</code><br>  表示当前通过一个连接获得的请求数量。</li>\n<li><code>msec</code><br>  表示日志写入的时间。单位为秒，精度是毫秒。</li>\n<li><code>pipe</code><br>  表示请求是否通过HTTP流水线（pipelined）发送。通过HTTP流水线发送则<code>pipe</code>值为<code>p</code>，否则为<code>.</code>。</li>\n<li><code>httpreferer</code><br>  表示从哪个页面链接访问过来的。</li>\n<li><code>&quot;http_user_agent&quot;</code><br>  表示客户端浏览器相关信息，前后必须加上双引号。</li>\n<li><code>requestlength</code><br>  表示请求的长度。包括请求行，请求头和请求正文。</li>\n<li><code>request_time</code><br>  表示请求处理时间，单位为秒，精度为毫秒。从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</li>\n<li><code>[$time_local]</code><br>  表示通用日志格式下的本地时间，前后必须加上中括号。</li>\n</ul>\n<h2 id=\"日志示例\"><a href=\"#日志示例\" class=\"headerlink\" title=\"日志示例\"></a>日志示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.1.1.1 - - [22/Aug/2014:16:48:14 +0800] &quot;POST /ajax/MbpRequest.do HTTP/1.1&quot; 200 367 &quot;-&quot; &quot;Dalvik/1.6.0 (Linux; U; Android 4.1.1; ARMM7K Build/JRO03H)&quot; &quot;119.189.56.175&quot; 127.0.0.1:8090 0.022 0.022 </span><br><span class=\"line\">10.1.1.1 - - [22/Aug/2014:16:48:19 +0800] &quot;POST /ajax/MbpRequest.do HTTP/1.1&quot; 200 616 &quot;-&quot; &quot;Dalvik/1.6.0 (Linux; U; Android 4.0.4; GT-I9103 Build/IMM76D)&quot; &quot;36.250.89.22&quot; 127.0.0.1:8090 0.036 0.036</span><br></pre></td></tr></table></figure>\n<p>从上面我们可以看出几部分信息：</p>\n<ol>\n<li>客户端（用户）IP地址。如：上例中的<code>10.1.1.1</code> (内网负载均衡地址)。</li>\n<li>访问时间。如：上例中的<code>[22/Aug/2014:16:48:19 +0800]</code>。</li>\n<li>访问端口。如：上例中的<code>127.0.0.1:8080</code>。</li>\n<li>响应时间。如：上例中的<code>0.022</code>。</li>\n<li>请求时间。如：上例中的<code>0.022</code>。</li>\n<li>用户地理位置代码（国家代码）。</li>\n<li>请求的url地址（目标url地址）的host。如：上例中的<code>/....</code>。</li>\n<li>请求方式（GET或者POST等）。如：上例中的<code>GET</code>。</li>\n<li>请求url地址（去除host部分）。如：上例中的<code>/html/test.html</code>。</li>\n<li>请求状态（状态码，<code>200</code>表示成功，<code>404</code>表示页面不存在，<code>301</code>表示永久重定向等）。</li>\n<li>请求页面大小，默认为B（byte）。如：上例中的<code>2426</code>。</li>\n<li>来源页面，即从哪个页面转到本页，专业名称叫做referer。如：上例中的<code>http://a.com</code>。</li>\n<li>用户浏览器语言。如：上例中的<code>es-ES,es;q=0.8</code>。</li>\n<li>用户浏览器其他信息，浏览器版本、浏览器类型等。如：上例中的<code>Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.97 Safari/537.11</code>。</li>\n</ol>\n"},{"title":"安装 Redis","date":"2019-07-13T16:00:00.000Z","_content":"\n## redis 安装\n1. 下载最新版 Redis-5.0.5 源码\n```shell\nsudo mkdir -p /home/downloads\nsudo cd /home/downloads\nsudo wget http://download.redis.io/releases/redis-5.0.5.tar.gz\n```\n1. 解压缩\n```shell\nsudo tar -zxvf redis-5.0.5.tar.gz\n```\n1. 编译\n```shell\nsudo cd redis-5.0.5\nsudo make MALLOC=libc\n```\n1. 修改 redis.conf 配置文件\n```shell\nvim redis.conf\n\n# 1. 取消绑定本地 IP\n# bind 127.0.0.1\n\n# 2. 取消保护模式\nprotected-mode no\n\n# 3. 启用守护进程\ndaemonize yes\n\n# 4. 设置密码\nrequirepass 123456\n```\n1. 启动 Redis\n```shell\nsudo src/redis-server redis.conf \n```\n1. 检测是否运行成功\n```shell\nsudo yum install net-tools\nsudo netstat -ntlp\n\n# Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \n# tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      5346/src/redis-serv \n# tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2750/sshd           \n# tcp6       0      0 :::6379                 :::*                    LISTEN      5346/src/redis-serv \n# tcp6       0      0 :::22                   :::*                    LISTEN      2750/sshd  \n```\n\n## 主从同步配置\n现有 Redis1（202.182.108.206），Redis2（202.182.118.220），如果","source":"_posts/Redis 教程/安装 Redis.md","raw":"---\ntitle: 安装 Redis\n\ncategories:\n- Redis 教程\n\ntags:\n- redis\n\ndate: 2019-07-14\n---\n\n## redis 安装\n1. 下载最新版 Redis-5.0.5 源码\n```shell\nsudo mkdir -p /home/downloads\nsudo cd /home/downloads\nsudo wget http://download.redis.io/releases/redis-5.0.5.tar.gz\n```\n1. 解压缩\n```shell\nsudo tar -zxvf redis-5.0.5.tar.gz\n```\n1. 编译\n```shell\nsudo cd redis-5.0.5\nsudo make MALLOC=libc\n```\n1. 修改 redis.conf 配置文件\n```shell\nvim redis.conf\n\n# 1. 取消绑定本地 IP\n# bind 127.0.0.1\n\n# 2. 取消保护模式\nprotected-mode no\n\n# 3. 启用守护进程\ndaemonize yes\n\n# 4. 设置密码\nrequirepass 123456\n```\n1. 启动 Redis\n```shell\nsudo src/redis-server redis.conf \n```\n1. 检测是否运行成功\n```shell\nsudo yum install net-tools\nsudo netstat -ntlp\n\n# Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \n# tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      5346/src/redis-serv \n# tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2750/sshd           \n# tcp6       0      0 :::6379                 :::*                    LISTEN      5346/src/redis-serv \n# tcp6       0      0 :::22                   :::*                    LISTEN      2750/sshd  \n```\n\n## 主从同步配置\n现有 Redis1（202.182.108.206），Redis2（202.182.118.220），如果","slug":"Redis 教程/安装 Redis","published":1,"updated":"2020-04-12T08:28:29.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5q003lm33ptflwrf5p","content":"<h2 id=\"redis-安装\"><a href=\"#redis-安装\" class=\"headerlink\" title=\"redis 安装\"></a>redis 安装</h2><ol>\n<li><p>下载最新版 Redis-5.0.5 源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /home/downloads</span><br><span class=\"line\">sudo cd /home/downloads</span><br><span class=\"line\">sudo wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压缩</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cd redis-5.0.5</span><br><span class=\"line\">sudo make MALLOC=libc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 redis.conf 配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1. 取消绑定本地 IP</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">bind</span> 127.0.0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2. 取消保护模式</span></span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3. 启用守护进程</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 4. 设置密码</span></span><br><span class=\"line\">requirepass 123456</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动 Redis</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo src/redis-server redis.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检测是否运行成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install net-tools</span><br><span class=\"line\">sudo netstat -ntlp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      5346/src/redis-serv </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2750/sshd           </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcp6       0      0 :::6379                 :::*                    LISTEN      5346/src/redis-serv </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcp6       0      0 :::22                   :::*                    LISTEN      2750/sshd</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"主从同步配置\"><a href=\"#主从同步配置\" class=\"headerlink\" title=\"主从同步配置\"></a>主从同步配置</h2><p>现有 Redis1（202.182.108.206），Redis2（202.182.118.220），如果</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"redis-安装\"><a href=\"#redis-安装\" class=\"headerlink\" title=\"redis 安装\"></a>redis 安装</h2><ol>\n<li><p>下载最新版 Redis-5.0.5 源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /home/downloads</span><br><span class=\"line\">sudo cd /home/downloads</span><br><span class=\"line\">sudo wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压缩</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cd redis-5.0.5</span><br><span class=\"line\">sudo make MALLOC=libc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 redis.conf 配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1. 取消绑定本地 IP</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">bind</span> 127.0.0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2. 取消保护模式</span></span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3. 启用守护进程</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 4. 设置密码</span></span><br><span class=\"line\">requirepass 123456</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动 Redis</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo src/redis-server redis.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检测是否运行成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install net-tools</span><br><span class=\"line\">sudo netstat -ntlp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      5346/src/redis-serv </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2750/sshd           </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcp6       0      0 :::6379                 :::*                    LISTEN      5346/src/redis-serv </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcp6       0      0 :::22                   :::*                    LISTEN      2750/sshd</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"主从同步配置\"><a href=\"#主从同步配置\" class=\"headerlink\" title=\"主从同步配置\"></a>主从同步配置</h2><p>现有 Redis1（202.182.108.206），Redis2（202.182.118.220），如果</p>\n"},{"title":"Building REST services with Spring","date":"2020-04-28T16:00:00.000Z","_content":"REST has quickly become the de-facto (事实上) standard for building web services on the web because they're easy to build and easy to consume (消费).\n\nThere're much larger discussion to be had about how REST fits in the world of microservices, but for this tutorial - let's just look at building RESTful services.\n\nWhy REST? REST embraces (拥抱) the precepts (方案) of the web, including its architecture (架构), benefits (优势), and everything else.  This is no surpise given its author, Roy Fielding, was involved (参与) in probably a dozen specs which govern (统治) how the web operates.\n\nWhat benefits? The web and its core protocol, HTTP, provide a stack of features:\n- Stiable (合适的) action (GET, POST, PUT, DELETE, ...)\n- Caching\n- Redirection and forwarding\n- Security (encryption 加密 and authentication)\n\nThere are all critical factors (要害因素) on building resilient (有适应力的) services. But that is not all. The web is built out of lots of tiny specs, hence (因此) it's been able to evolve easily, without getting bogged down in \"standards wars\".\n\nDevelopers are able to draw upon (凭借) 3rd party toolkits that implement these diverse (不同的) sepcs and instantly (立刻) have both client and server technology at their fingertips (指尖).\n\nSo  building on top of HTTP, REST APIs provide the means to build flexible APIs that can:\n- Support backward compatibility (兼容)\n- Evolvable (可展开的) APIs\n- Scaleable services\n- Securable services\n- A spectrum (系列) of stateless (无状态) to stateful (有状态) servcie\n\nWhat's important to realize is that REST, however ubiquitous (似乎无所不在的), is not a standard, per se (本质上), but an approach, a style, a set of constraints (约束) on your architecture that can help you build web-scale systems. In this tutorial we will use the Spring protfolio (作品集) to build a RESTful service while leveraging (对…施加影响) the stackless features of REST.\n\n## Getting Started\nAs we work through this tutorial, we'll use Spring Boot. Go to Spring Initializr and select the follow:\n- Web\n- JPA\n- H2\n- Lombok\n\nThen choose \"Generate Project\". A `.zip` will downloaded. Unzip it. Inside you'll find a simple, Maven-based project including a `pom.xml` build file (NOTE: You can use Gradle. The example in this tutorial will be Maven based.)\n\nSpring Boot can work with any IDE. You can use Eclipse, IntelliJ IDEA, Netbeans, etc. The Spring Tool suite is an open-source, Eclipse-based IDE distribution (发行) that provides a superset of the Java EE distribution of Eclipse. It includes features that making working with Spring application even easier. It is, by no means, required. But consider it if you want that extra oomph (特质) for your keystrokes (按键). Here's a ","source":"_posts/Spring Tutorial/Building REST services with Spring.md","raw":"---\ntitle: Building REST services with Spring\n\ncategories:\n- Spring Tutorial\n\ndate: 2020-04-29\n---\nREST has quickly become the de-facto (事实上) standard for building web services on the web because they're easy to build and easy to consume (消费).\n\nThere're much larger discussion to be had about how REST fits in the world of microservices, but for this tutorial - let's just look at building RESTful services.\n\nWhy REST? REST embraces (拥抱) the precepts (方案) of the web, including its architecture (架构), benefits (优势), and everything else.  This is no surpise given its author, Roy Fielding, was involved (参与) in probably a dozen specs which govern (统治) how the web operates.\n\nWhat benefits? The web and its core protocol, HTTP, provide a stack of features:\n- Stiable (合适的) action (GET, POST, PUT, DELETE, ...)\n- Caching\n- Redirection and forwarding\n- Security (encryption 加密 and authentication)\n\nThere are all critical factors (要害因素) on building resilient (有适应力的) services. But that is not all. The web is built out of lots of tiny specs, hence (因此) it's been able to evolve easily, without getting bogged down in \"standards wars\".\n\nDevelopers are able to draw upon (凭借) 3rd party toolkits that implement these diverse (不同的) sepcs and instantly (立刻) have both client and server technology at their fingertips (指尖).\n\nSo  building on top of HTTP, REST APIs provide the means to build flexible APIs that can:\n- Support backward compatibility (兼容)\n- Evolvable (可展开的) APIs\n- Scaleable services\n- Securable services\n- A spectrum (系列) of stateless (无状态) to stateful (有状态) servcie\n\nWhat's important to realize is that REST, however ubiquitous (似乎无所不在的), is not a standard, per se (本质上), but an approach, a style, a set of constraints (约束) on your architecture that can help you build web-scale systems. In this tutorial we will use the Spring protfolio (作品集) to build a RESTful service while leveraging (对…施加影响) the stackless features of REST.\n\n## Getting Started\nAs we work through this tutorial, we'll use Spring Boot. Go to Spring Initializr and select the follow:\n- Web\n- JPA\n- H2\n- Lombok\n\nThen choose \"Generate Project\". A `.zip` will downloaded. Unzip it. Inside you'll find a simple, Maven-based project including a `pom.xml` build file (NOTE: You can use Gradle. The example in this tutorial will be Maven based.)\n\nSpring Boot can work with any IDE. You can use Eclipse, IntelliJ IDEA, Netbeans, etc. The Spring Tool suite is an open-source, Eclipse-based IDE distribution (发行) that provides a superset of the Java EE distribution of Eclipse. It includes features that making working with Spring application even easier. It is, by no means, required. But consider it if you want that extra oomph (特质) for your keystrokes (按键). Here's a ","slug":"Spring Tutorial/Building REST services with Spring","published":1,"updated":"2020-05-01T07:42:35.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5t003qm33puzuoifb9","content":"<p>REST has quickly become the de-facto (事实上) standard for building web services on the web because they’re easy to build and easy to consume (消费).</p>\n<p>There’re much larger discussion to be had about how REST fits in the world of microservices, but for this tutorial - let’s just look at building RESTful services.</p>\n<p>Why REST? REST embraces (拥抱) the precepts (方案) of the web, including its architecture (架构), benefits (优势), and everything else.  This is no surpise given its author, Roy Fielding, was involved (参与) in probably a dozen specs which govern (统治) how the web operates.</p>\n<p>What benefits? The web and its core protocol, HTTP, provide a stack of features:</p>\n<ul>\n<li>Stiable (合适的) action (GET, POST, PUT, DELETE, …)</li>\n<li>Caching</li>\n<li>Redirection and forwarding</li>\n<li>Security (encryption 加密 and authentication)</li>\n</ul>\n<p>There are all critical factors (要害因素) on building resilient (有适应力的) services. But that is not all. The web is built out of lots of tiny specs, hence (因此) it’s been able to evolve easily, without getting bogged down in “standards wars”.</p>\n<p>Developers are able to draw upon (凭借) 3rd party toolkits that implement these diverse (不同的) sepcs and instantly (立刻) have both client and server technology at their fingertips (指尖).</p>\n<p>So  building on top of HTTP, REST APIs provide the means to build flexible APIs that can:</p>\n<ul>\n<li>Support backward compatibility (兼容)</li>\n<li>Evolvable (可展开的) APIs</li>\n<li>Scaleable services</li>\n<li>Securable services</li>\n<li>A spectrum (系列) of stateless (无状态) to stateful (有状态) servcie</li>\n</ul>\n<p>What’s important to realize is that REST, however ubiquitous (似乎无所不在的), is not a standard, per se (本质上), but an approach, a style, a set of constraints (约束) on your architecture that can help you build web-scale systems. In this tutorial we will use the Spring protfolio (作品集) to build a RESTful service while leveraging (对…施加影响) the stackless features of REST.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>As we work through this tutorial, we’ll use Spring Boot. Go to Spring Initializr and select the follow:</p>\n<ul>\n<li>Web</li>\n<li>JPA</li>\n<li>H2</li>\n<li>Lombok</li>\n</ul>\n<p>Then choose “Generate Project”. A <code>.zip</code> will downloaded. Unzip it. Inside you’ll find a simple, Maven-based project including a <code>pom.xml</code> build file (NOTE: You can use Gradle. The example in this tutorial will be Maven based.)</p>\n<p>Spring Boot can work with any IDE. You can use Eclipse, IntelliJ IDEA, Netbeans, etc. The Spring Tool suite is an open-source, Eclipse-based IDE distribution (发行) that provides a superset of the Java EE distribution of Eclipse. It includes features that making working with Spring application even easier. It is, by no means, required. But consider it if you want that extra oomph (特质) for your keystrokes (按键). Here’s a </p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>REST has quickly become the de-facto (事实上) standard for building web services on the web because they’re easy to build and easy to consume (消费).</p>\n<p>There’re much larger discussion to be had about how REST fits in the world of microservices, but for this tutorial - let’s just look at building RESTful services.</p>\n<p>Why REST? REST embraces (拥抱) the precepts (方案) of the web, including its architecture (架构), benefits (优势), and everything else.  This is no surpise given its author, Roy Fielding, was involved (参与) in probably a dozen specs which govern (统治) how the web operates.</p>\n<p>What benefits? The web and its core protocol, HTTP, provide a stack of features:</p>\n<ul>\n<li>Stiable (合适的) action (GET, POST, PUT, DELETE, …)</li>\n<li>Caching</li>\n<li>Redirection and forwarding</li>\n<li>Security (encryption 加密 and authentication)</li>\n</ul>\n<p>There are all critical factors (要害因素) on building resilient (有适应力的) services. But that is not all. The web is built out of lots of tiny specs, hence (因此) it’s been able to evolve easily, without getting bogged down in “standards wars”.</p>\n<p>Developers are able to draw upon (凭借) 3rd party toolkits that implement these diverse (不同的) sepcs and instantly (立刻) have both client and server technology at their fingertips (指尖).</p>\n<p>So  building on top of HTTP, REST APIs provide the means to build flexible APIs that can:</p>\n<ul>\n<li>Support backward compatibility (兼容)</li>\n<li>Evolvable (可展开的) APIs</li>\n<li>Scaleable services</li>\n<li>Securable services</li>\n<li>A spectrum (系列) of stateless (无状态) to stateful (有状态) servcie</li>\n</ul>\n<p>What’s important to realize is that REST, however ubiquitous (似乎无所不在的), is not a standard, per se (本质上), but an approach, a style, a set of constraints (约束) on your architecture that can help you build web-scale systems. In this tutorial we will use the Spring protfolio (作品集) to build a RESTful service while leveraging (对…施加影响) the stackless features of REST.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>As we work through this tutorial, we’ll use Spring Boot. Go to Spring Initializr and select the follow:</p>\n<ul>\n<li>Web</li>\n<li>JPA</li>\n<li>H2</li>\n<li>Lombok</li>\n</ul>\n<p>Then choose “Generate Project”. A <code>.zip</code> will downloaded. Unzip it. Inside you’ll find a simple, Maven-based project including a <code>pom.xml</code> build file (NOTE: You can use Gradle. The example in this tutorial will be Maven based.)</p>\n<p>Spring Boot can work with any IDE. You can use Eclipse, IntelliJ IDEA, Netbeans, etc. The Spring Tool suite is an open-source, Eclipse-based IDE distribution (发行) that provides a superset of the Java EE distribution of Eclipse. It includes features that making working with Spring application even easier. It is, by no means, required. But consider it if you want that extra oomph (特质) for your keystrokes (按键). Here’s a </p>\n"},{"title":"用户登录系统","date":"2020-02-06T16:00:00.000Z","_content":"\n## 单点登录\n简单来说，单点登录（SSO）就是在多个系统中，用户只需一次登录，各个系统即可感知该用户已经登录。\n\n```mermaid\ngraph LR\n    subgraph 订单功能\n        订单系统一 \n        订单系统二\n    end\n\n    subgraph 登录功能\n        登录系统一 \n        登录系统二\n    end\n\n    subgraph 物流功能\n        物流系统一 \n        物流系统二\n    end\n\n    用户 --> 登录系统一\n\n    登录系统一 --> 物流系统一\n\n```","source":"_posts/业务汇总/用户登录系统.md","raw":"---\ntitle: 用户登录系统\n\ncategories:\n- 业务汇总\n\ntags:\n- 用户登录\n\ndate: 2020-02-07\n---\n\n## 单点登录\n简单来说，单点登录（SSO）就是在多个系统中，用户只需一次登录，各个系统即可感知该用户已经登录。\n\n```mermaid\ngraph LR\n    subgraph 订单功能\n        订单系统一 \n        订单系统二\n    end\n\n    subgraph 登录功能\n        登录系统一 \n        登录系统二\n    end\n\n    subgraph 物流功能\n        物流系统一 \n        物流系统二\n    end\n\n    用户 --> 登录系统一\n\n    登录系统一 --> 物流系统一\n\n```","slug":"业务汇总/用户登录系统","published":1,"updated":"2020-04-12T08:28:29.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5w003tm33pg8t6octm","content":"<h2 id=\"单点登录\"><a href=\"#单点登录\" class=\"headerlink\" title=\"单点登录\"></a>单点登录</h2><p>简单来说，单点登录（SSO）就是在多个系统中，用户只需一次登录，各个系统即可感知该用户已经登录。</p>\n<pre class=\"mermaid\">graph LR\n    subgraph 订单功能\n        订单系统一 \n        订单系统二\n    end\n\n    subgraph 登录功能\n        登录系统一 \n        登录系统二\n    end\n\n    subgraph 物流功能\n        物流系统一 \n        物流系统二\n    end\n\n    用户 --> 登录系统一\n\n    登录系统一 --> 物流系统一</pre>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"单点登录\"><a href=\"#单点登录\" class=\"headerlink\" title=\"单点登录\"></a>单点登录</h2><p>简单来说，单点登录（SSO）就是在多个系统中，用户只需一次登录，各个系统即可感知该用户已经登录。</p>\n<pre class=\"mermaid\">graph LR\n    subgraph 订单功能\n        订单系统一 \n        订单系统二\n    end\n\n    subgraph 登录功能\n        登录系统一 \n        登录系统二\n    end\n\n    subgraph 物流功能\n        物流系统一 \n        物流系统二\n    end\n\n    用户 --> 登录系统一\n\n    登录系统一 --> 物流系统一</pre>"},{"title":"2020年度计划","date":"2020-02-22T16:00:00.000Z","_content":"✔ ✘\n\n|类目 -> 次数|1|2|3|4|5|6|7|8|9|\n|:--|\n|**2020-02**|\n|拼读|✔|✘|✘|✘|✘|✘|✘|✘|✘|\n|线程|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JVM|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JavaWorld|✔|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-03**|\n|拼读|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|高并|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JVM|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|反射机制|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|课程|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-04**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-05**|\n|拼读|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|高并|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JVM|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-06**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-07**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-08**|\n|拼读|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|高并|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JVM|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-09**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-10**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-11**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-12**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|","source":"_posts/其它/2020年度计划.md","raw":"---\ntitle: 2020年度计划\n\ncategories:\n- 其它\n\ndate: 2020-02-23\n---\n✔ ✘\n\n|类目 -> 次数|1|2|3|4|5|6|7|8|9|\n|:--|\n|**2020-02**|\n|拼读|✔|✘|✘|✘|✘|✘|✘|✘|✘|\n|线程|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JVM|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JavaWorld|✔|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-03**|\n|拼读|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|高并|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JVM|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|反射机制|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|课程|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-04**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-05**|\n|拼读|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|高并|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JVM|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-06**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-07**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-08**|\n|拼读|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|高并|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JVM|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-09**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-10**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-11**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|\n|**2020-12**|\n|JavaWorld|✘|✘|✘|✘|✘|✘|✘|✘|✘|","slug":"其它/2020年度计划","published":1,"updated":"2020-04-12T08:28:29.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m5z003ym33pw9aafu6z","content":"<p>✔ ✘</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类目 -&gt; 次数</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>2020-02</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拼读</td>\n<td>✔</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">线程</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JVM</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✔</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-03</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拼读</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">高并</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JVM</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">反射机制</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">课程</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-04</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-05</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拼读</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">高并</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JVM</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-06</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-07</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-08</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拼读</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">高并</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JVM</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-09</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-10</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-11</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-12</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>✔ ✘</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类目 -&gt; 次数</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>2020-02</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拼读</td>\n<td>✔</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">线程</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JVM</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✔</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-03</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拼读</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">高并</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JVM</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">反射机制</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">课程</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-04</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-05</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拼读</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">高并</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JVM</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-06</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-07</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-08</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拼读</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">高并</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JVM</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-09</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-10</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-11</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2020-12</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaWorld</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n<td>✘</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"title":"Git常用操作","date":"2020-02-28T16:00:00.000Z","_content":"\n## 分支操作\n#### 查看本地分支\n```shell\nzhangqinghua$ git branch\n* 3.3.1\n  master\n\n```\n\n#### 查看本地和远程分支\n```\nzhangqinghua$ git branch -a\n* 3.3.1\n  master\n  remotes/origin/3.0\n  remotes/origin/3.1\n\n```\n\n#### 从当前分支创建出一个新分支\n```shell\nzhangqinghua$ git checkout -b 3.3.1\nSwitched to a new branch '3.3.1'\n\n```\n\n#### 切换本地分支\n```shell\nzhangqinghua$ git checkout 3.0\nM       .DS_Store\nSwitched to branch '3.0'\n```\n\n#### 切换本地分支，如果不存在，则从当前分支创建\n```\nzhangqinghua$ git checkout -b 3.0\nM       .DS_Store\nSwitched to branch '3.0'\n```\n\n#### 切换远程分支\n```shell\nzhangqinghua$ git checkout -b 3.1.2 origin/3.1.2\n```\n\n#### 删除本地分支\n```shell\nzhangqinghua$ git branch -d 3.0\nDeleted branch 3.0 (was a8d45e7).\n```\n\n\n#### 删除本地分支（未合并）\n```shell\nzhangqinghua$ git branch -d 3.1\nerror: The branch '3.1' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D 3.1'.\n```\n\n#### 强制删除分支\n```shell\nzhangqinghua$ git branch -D 3.0\nDeleted branch 3.0 (was a8d45e7).\n```\n\n#### 删除远程分支\n```shell\nzhangqinghua$ git push origin :3.1\nTo code.aliyun.com:icebartech-java-core/icebartech-core.git\n - [deleted]         3.1\n```\n\n## 回滚操作","source":"_posts/其它/Git常用操作.md","raw":"---\ntitle: Git常用操作\n\ncategories:\n- 其它\n\ndate: 2020-02-29\n---\n\n## 分支操作\n#### 查看本地分支\n```shell\nzhangqinghua$ git branch\n* 3.3.1\n  master\n\n```\n\n#### 查看本地和远程分支\n```\nzhangqinghua$ git branch -a\n* 3.3.1\n  master\n  remotes/origin/3.0\n  remotes/origin/3.1\n\n```\n\n#### 从当前分支创建出一个新分支\n```shell\nzhangqinghua$ git checkout -b 3.3.1\nSwitched to a new branch '3.3.1'\n\n```\n\n#### 切换本地分支\n```shell\nzhangqinghua$ git checkout 3.0\nM       .DS_Store\nSwitched to branch '3.0'\n```\n\n#### 切换本地分支，如果不存在，则从当前分支创建\n```\nzhangqinghua$ git checkout -b 3.0\nM       .DS_Store\nSwitched to branch '3.0'\n```\n\n#### 切换远程分支\n```shell\nzhangqinghua$ git checkout -b 3.1.2 origin/3.1.2\n```\n\n#### 删除本地分支\n```shell\nzhangqinghua$ git branch -d 3.0\nDeleted branch 3.0 (was a8d45e7).\n```\n\n\n#### 删除本地分支（未合并）\n```shell\nzhangqinghua$ git branch -d 3.1\nerror: The branch '3.1' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D 3.1'.\n```\n\n#### 强制删除分支\n```shell\nzhangqinghua$ git branch -D 3.0\nDeleted branch 3.0 (was a8d45e7).\n```\n\n#### 删除远程分支\n```shell\nzhangqinghua$ git push origin :3.1\nTo code.aliyun.com:icebartech-java-core/icebartech-core.git\n - [deleted]         3.1\n```\n\n## 回滚操作","slug":"其它/Git常用操作","published":1,"updated":"2020-04-12T08:28:29.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m600040m33pjwnvg88l","content":"<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><h4 id=\"查看本地分支\"><a href=\"#查看本地分支\" class=\"headerlink\" title=\"查看本地分支\"></a>查看本地分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git branch</span></span><br><span class=\"line\">* 3.3.1</span><br><span class=\"line\">  master</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看本地和远程分支\"><a href=\"#查看本地和远程分支\" class=\"headerlink\" title=\"查看本地和远程分支\"></a>查看本地和远程分支</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangqinghua$ git branch -a</span><br><span class=\"line\">* 3.3.1</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/3.0</span><br><span class=\"line\">  remotes/origin/3.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"从当前分支创建出一个新分支\"><a href=\"#从当前分支创建出一个新分支\" class=\"headerlink\" title=\"从当前分支创建出一个新分支\"></a>从当前分支创建出一个新分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git checkout -b 3.3.1</span></span><br><span class=\"line\">Switched to a new branch '3.3.1'</span><br></pre></td></tr></table></figure>\n<h4 id=\"切换本地分支\"><a href=\"#切换本地分支\" class=\"headerlink\" title=\"切换本地分支\"></a>切换本地分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git checkout 3.0</span></span><br><span class=\"line\">M       .DS_Store</span><br><span class=\"line\">Switched to branch '3.0'</span><br></pre></td></tr></table></figure>\n<h4 id=\"切换本地分支，如果不存在，则从当前分支创建\"><a href=\"#切换本地分支，如果不存在，则从当前分支创建\" class=\"headerlink\" title=\"切换本地分支，如果不存在，则从当前分支创建\"></a>切换本地分支，如果不存在，则从当前分支创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangqinghua$ git checkout -b 3.0</span><br><span class=\"line\">M       .DS_Store</span><br><span class=\"line\">Switched to branch &apos;3.0&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"切换远程分支\"><a href=\"#切换远程分支\" class=\"headerlink\" title=\"切换远程分支\"></a>切换远程分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git checkout -b 3.1.2 origin/3.1.2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git branch -d 3.0</span></span><br><span class=\"line\">Deleted branch 3.0 (was a8d45e7).</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除本地分支（未合并）\"><a href=\"#删除本地分支（未合并）\" class=\"headerlink\" title=\"删除本地分支（未合并）\"></a>删除本地分支（未合并）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git branch -d 3.1</span></span><br><span class=\"line\">error: The branch '3.1' is not fully merged.</span><br><span class=\"line\">If you are sure you want to delete it, run 'git branch -D 3.1'.</span><br></pre></td></tr></table></figure>\n<h4 id=\"强制删除分支\"><a href=\"#强制删除分支\" class=\"headerlink\" title=\"强制删除分支\"></a>强制删除分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git branch -D 3.0</span></span><br><span class=\"line\">Deleted branch 3.0 (was a8d45e7).</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git push origin :3.1</span></span><br><span class=\"line\">To code.aliyun.com:icebartech-java-core/icebartech-core.git</span><br><span class=\"line\"> - [deleted]         3.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"回滚操作\"><a href=\"#回滚操作\" class=\"headerlink\" title=\"回滚操作\"></a>回滚操作</h2>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><h4 id=\"查看本地分支\"><a href=\"#查看本地分支\" class=\"headerlink\" title=\"查看本地分支\"></a>查看本地分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git branch</span></span><br><span class=\"line\">* 3.3.1</span><br><span class=\"line\">  master</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看本地和远程分支\"><a href=\"#查看本地和远程分支\" class=\"headerlink\" title=\"查看本地和远程分支\"></a>查看本地和远程分支</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangqinghua$ git branch -a</span><br><span class=\"line\">* 3.3.1</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/3.0</span><br><span class=\"line\">  remotes/origin/3.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"从当前分支创建出一个新分支\"><a href=\"#从当前分支创建出一个新分支\" class=\"headerlink\" title=\"从当前分支创建出一个新分支\"></a>从当前分支创建出一个新分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git checkout -b 3.3.1</span></span><br><span class=\"line\">Switched to a new branch '3.3.1'</span><br></pre></td></tr></table></figure>\n<h4 id=\"切换本地分支\"><a href=\"#切换本地分支\" class=\"headerlink\" title=\"切换本地分支\"></a>切换本地分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git checkout 3.0</span></span><br><span class=\"line\">M       .DS_Store</span><br><span class=\"line\">Switched to branch '3.0'</span><br></pre></td></tr></table></figure>\n<h4 id=\"切换本地分支，如果不存在，则从当前分支创建\"><a href=\"#切换本地分支，如果不存在，则从当前分支创建\" class=\"headerlink\" title=\"切换本地分支，如果不存在，则从当前分支创建\"></a>切换本地分支，如果不存在，则从当前分支创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangqinghua$ git checkout -b 3.0</span><br><span class=\"line\">M       .DS_Store</span><br><span class=\"line\">Switched to branch &apos;3.0&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"切换远程分支\"><a href=\"#切换远程分支\" class=\"headerlink\" title=\"切换远程分支\"></a>切换远程分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git checkout -b 3.1.2 origin/3.1.2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git branch -d 3.0</span></span><br><span class=\"line\">Deleted branch 3.0 (was a8d45e7).</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除本地分支（未合并）\"><a href=\"#删除本地分支（未合并）\" class=\"headerlink\" title=\"删除本地分支（未合并）\"></a>删除本地分支（未合并）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git branch -d 3.1</span></span><br><span class=\"line\">error: The branch '3.1' is not fully merged.</span><br><span class=\"line\">If you are sure you want to delete it, run 'git branch -D 3.1'.</span><br></pre></td></tr></table></figure>\n<h4 id=\"强制删除分支\"><a href=\"#强制删除分支\" class=\"headerlink\" title=\"强制删除分支\"></a>强制删除分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git branch -D 3.0</span></span><br><span class=\"line\">Deleted branch 3.0 (was a8d45e7).</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">zhangqinghua$</span><span class=\"bash\"> git push origin :3.1</span></span><br><span class=\"line\">To code.aliyun.com:icebartech-java-core/icebartech-core.git</span><br><span class=\"line\"> - [deleted]         3.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"回滚操作\"><a href=\"#回滚操作\" class=\"headerlink\" title=\"回滚操作\"></a>回滚操作</h2>"},{"title":"IDEA常用技巧","date":"2020-03-03T16:00:00.000Z","_content":"\n#### 测试\n## \n#### 取消idea默认打开工程\npath : Appearance & Behavior > System Settings\nvalue: Reopen last project on startupaa\n\n#### 关闭参数提示\npath : Editor > General > Apperance \nvalue: Show parameter name hint\npath : Editor > General > code completion (2019.3)\nvalue: Show parameter name hint\npath : Inlay Hints > Java > Parameter hints (2019.3)\nvalue: Show parameter hints for\n\n#### 切换快捷键\npath : keymap\nvalue: \n\n#### 自动下载源码\npath : Build, Execution, Deployment > Build Tools > Maven > Importing \nvalue: Automatically download\n\t\n#### 默认不折叠一行\npath : Editor > General > Code Folding \nvalue: One-line methods\n\t\n\t\n## 格式化\n#### 等号对齐、参数对齐\npath : Ediotr > Java\nvalue: Warpping and Braces > Align when multiline\n\t\n#### 单行注释与代码对齐\npath : Editor > Code Style > Java \nvalue: Code Generation > Comment Code > enable add a space at comment start\n\n#### Cannot resolve symbol\nIDEA 无法识别同一个 package 里的其他类，将其显示为红色，但是 compile 没有问题。鼠标放上去后显示 “Cannot resolve symbol XXX”，重启 IDEA ，重新 sync gradle，Clean build 都没有用。\n\n多半是因为 IDEA 之前发生了错误，某些 setting 出了问题。解决方法如下：\n\n点击菜单中的 “File” -> “Invalidate Caches / Restart”，然后点击对话框中的 “Invalidate and Restart”，清空 cache 并且重启。语法就会正确的高亮了。","source":"_posts/其它/IDEA常用技巧.md","raw":"---\ntitle: IDEA常用技巧\n\ncategories:\n- 其它\n\ndate: 2020-03-4\n---\n\n#### 测试\n## \n#### 取消idea默认打开工程\npath : Appearance & Behavior > System Settings\nvalue: Reopen last project on startupaa\n\n#### 关闭参数提示\npath : Editor > General > Apperance \nvalue: Show parameter name hint\npath : Editor > General > code completion (2019.3)\nvalue: Show parameter name hint\npath : Inlay Hints > Java > Parameter hints (2019.3)\nvalue: Show parameter hints for\n\n#### 切换快捷键\npath : keymap\nvalue: \n\n#### 自动下载源码\npath : Build, Execution, Deployment > Build Tools > Maven > Importing \nvalue: Automatically download\n\t\n#### 默认不折叠一行\npath : Editor > General > Code Folding \nvalue: One-line methods\n\t\n\t\n## 格式化\n#### 等号对齐、参数对齐\npath : Ediotr > Java\nvalue: Warpping and Braces > Align when multiline\n\t\n#### 单行注释与代码对齐\npath : Editor > Code Style > Java \nvalue: Code Generation > Comment Code > enable add a space at comment start\n\n#### Cannot resolve symbol\nIDEA 无法识别同一个 package 里的其他类，将其显示为红色，但是 compile 没有问题。鼠标放上去后显示 “Cannot resolve symbol XXX”，重启 IDEA ，重新 sync gradle，Clean build 都没有用。\n\n多半是因为 IDEA 之前发生了错误，某些 setting 出了问题。解决方法如下：\n\n点击菜单中的 “File” -> “Invalidate Caches / Restart”，然后点击对话框中的 “Invalidate and Restart”，清空 cache 并且重启。语法就会正确的高亮了。","slug":"其它/IDEA常用技巧","published":1,"updated":"2020-04-12T08:28:29.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m620044m33pvc5iquc2","content":"<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><h4 id=\"取消idea默认打开工程\"><a href=\"#取消idea默认打开工程\" class=\"headerlink\" title=\"取消idea默认打开工程\"></a>取消idea默认打开工程</h4><p>path : Appearance &amp; Behavior &gt; System Settings<br>value: Reopen last project on startupaa</p>\n<h4 id=\"关闭参数提示\"><a href=\"#关闭参数提示\" class=\"headerlink\" title=\"关闭参数提示\"></a>关闭参数提示</h4><p>path : Editor &gt; General &gt; Apperance<br>value: Show parameter name hint<br>path : Editor &gt; General &gt; code completion (2019.3)<br>value: Show parameter name hint<br>path : Inlay Hints &gt; Java &gt; Parameter hints (2019.3)<br>value: Show parameter hints for</p>\n<h4 id=\"切换快捷键\"><a href=\"#切换快捷键\" class=\"headerlink\" title=\"切换快捷键\"></a>切换快捷键</h4><p>path : keymap<br>value: </p>\n<h4 id=\"自动下载源码\"><a href=\"#自动下载源码\" class=\"headerlink\" title=\"自动下载源码\"></a>自动下载源码</h4><p>path : Build, Execution, Deployment &gt; Build Tools &gt; Maven &gt; Importing<br>value: Automatically download</p>\n<h4 id=\"默认不折叠一行\"><a href=\"#默认不折叠一行\" class=\"headerlink\" title=\"默认不折叠一行\"></a>默认不折叠一行</h4><p>path : Editor &gt; General &gt; Code Folding<br>value: One-line methods</p>\n<h2 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h2><h4 id=\"等号对齐、参数对齐\"><a href=\"#等号对齐、参数对齐\" class=\"headerlink\" title=\"等号对齐、参数对齐\"></a>等号对齐、参数对齐</h4><p>path : Ediotr &gt; Java<br>value: Warpping and Braces &gt; Align when multiline</p>\n<h4 id=\"单行注释与代码对齐\"><a href=\"#单行注释与代码对齐\" class=\"headerlink\" title=\"单行注释与代码对齐\"></a>单行注释与代码对齐</h4><p>path : Editor &gt; Code Style &gt; Java<br>value: Code Generation &gt; Comment Code &gt; enable add a space at comment start</p>\n<h4 id=\"Cannot-resolve-symbol\"><a href=\"#Cannot-resolve-symbol\" class=\"headerlink\" title=\"Cannot resolve symbol\"></a>Cannot resolve symbol</h4><p>IDEA 无法识别同一个 package 里的其他类，将其显示为红色，但是 compile 没有问题。鼠标放上去后显示 “Cannot resolve symbol XXX”，重启 IDEA ，重新 sync gradle，Clean build 都没有用。</p>\n<p>多半是因为 IDEA 之前发生了错误，某些 setting 出了问题。解决方法如下：</p>\n<p>点击菜单中的 “File” -&gt; “Invalidate Caches / Restart”，然后点击对话框中的 “Invalidate and Restart”，清空 cache 并且重启。语法就会正确的高亮了。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><h4 id=\"取消idea默认打开工程\"><a href=\"#取消idea默认打开工程\" class=\"headerlink\" title=\"取消idea默认打开工程\"></a>取消idea默认打开工程</h4><p>path : Appearance &amp; Behavior &gt; System Settings<br>value: Reopen last project on startupaa</p>\n<h4 id=\"关闭参数提示\"><a href=\"#关闭参数提示\" class=\"headerlink\" title=\"关闭参数提示\"></a>关闭参数提示</h4><p>path : Editor &gt; General &gt; Apperance<br>value: Show parameter name hint<br>path : Editor &gt; General &gt; code completion (2019.3)<br>value: Show parameter name hint<br>path : Inlay Hints &gt; Java &gt; Parameter hints (2019.3)<br>value: Show parameter hints for</p>\n<h4 id=\"切换快捷键\"><a href=\"#切换快捷键\" class=\"headerlink\" title=\"切换快捷键\"></a>切换快捷键</h4><p>path : keymap<br>value: </p>\n<h4 id=\"自动下载源码\"><a href=\"#自动下载源码\" class=\"headerlink\" title=\"自动下载源码\"></a>自动下载源码</h4><p>path : Build, Execution, Deployment &gt; Build Tools &gt; Maven &gt; Importing<br>value: Automatically download</p>\n<h4 id=\"默认不折叠一行\"><a href=\"#默认不折叠一行\" class=\"headerlink\" title=\"默认不折叠一行\"></a>默认不折叠一行</h4><p>path : Editor &gt; General &gt; Code Folding<br>value: One-line methods</p>\n<h2 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h2><h4 id=\"等号对齐、参数对齐\"><a href=\"#等号对齐、参数对齐\" class=\"headerlink\" title=\"等号对齐、参数对齐\"></a>等号对齐、参数对齐</h4><p>path : Ediotr &gt; Java<br>value: Warpping and Braces &gt; Align when multiline</p>\n<h4 id=\"单行注释与代码对齐\"><a href=\"#单行注释与代码对齐\" class=\"headerlink\" title=\"单行注释与代码对齐\"></a>单行注释与代码对齐</h4><p>path : Editor &gt; Code Style &gt; Java<br>value: Code Generation &gt; Comment Code &gt; enable add a space at comment start</p>\n<h4 id=\"Cannot-resolve-symbol\"><a href=\"#Cannot-resolve-symbol\" class=\"headerlink\" title=\"Cannot resolve symbol\"></a>Cannot resolve symbol</h4><p>IDEA 无法识别同一个 package 里的其他类，将其显示为红色，但是 compile 没有问题。鼠标放上去后显示 “Cannot resolve symbol XXX”，重启 IDEA ，重新 sync gradle，Clean build 都没有用。</p>\n<p>多半是因为 IDEA 之前发生了错误，某些 setting 出了问题。解决方法如下：</p>\n<p>点击菜单中的 “File” -&gt; “Invalidate Caches / Restart”，然后点击对话框中的 “Invalidate and Restart”，清空 cache 并且重启。语法就会正确的高亮了。</p>\n"},{"title":"Icebartech 常用配置","date":"2019-08-26T16:00:00.000Z","_content":"\n测试\n\n## 云效配置\n1. Java 配置\n```bash\n/data/deploy/Java/icebartech-cloudnote/package.tgz\n\nset -e;\nif [ -f \"/data/deploy/Java/icebartech-cloudnote/deploy.sh\" ]; then /data/deploy/Java/icebartech-cloudnote/deploy.sh stop; fi;\nmkdir -p /data/deploy/Java/icebartech-cloudnote;\ntar xf /data/deploy/Java/icebartech-cloudnote/package.tgz -o -C /data/deploy/Java/icebartech-cloudnote;\nchmod +x  /data/deploy/Java/icebartech-cloudnote/deploy.sh;\n/data/deploy/Java/icebartech-cloudnote/deploy.sh start\n```\n\n1. Web 打包配置\n```bash\n/data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz\n\nset -e;\nmkdir -p /data/deploy/Web/icebartech-home/icebartech-home-sys/dist;\ntar xf /data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz -o -C /data/deploy/Web/icebartech-home/icebartech-home-sys/dist;\n```\n\n1. Web 源码配置\n```bash\n/data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz\n\nset -e;\nmkdir -p /data/deploy/Web/icebartech-home/icebartech-home-sys;\ntar xf /data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz -o -C /data/deploy/Web/icebartech-home/icebartech-home-sys;\n```\n\n## 项目数据\n\n1. 阿里云服务器\n    120.76.156.141\n    root CQypEz5W\n    ftp ice REtaCf\n    redis Yah6lkNoHm1VtoeZChyzinevnPtkrUa6\n    Mysql root 3fBsKHwVuwo1gspj\n\n    120.76.100.114\n    root CzjdqsaW\n    redis ZUravFit3fxQJ0VlzwxW8UEmEmK3LfVE\n    Mysql root o7dP6ftMSOqKKsRP\n\n    120.76.98.47\n    root VsrmIb1s\n    redis z0fMIYf3KbGxm2bAml8Acqe71JeIehC8\n    Mysql root BgQ0EJktyVNdAqWG\n\n    120.76.102.155\n    root kwAPYE6o\n    redis XKKojoTM2hC4jHEqQDVRvvXUX6BthPLY\n    Mysql root BgQ0EJktyVNdAqWG\n    jenkins admin 9TlbyqHS\n\n    120.77.246.50\n    root Bo9rDeUA\n\n1. 手机膜\n    深圳服务器\n    香港服务器\n\n1. 爱美丽\n\n1. 名博\n    https://mingbo.mib2019.com/api/swagger-ui.html\n    https://mingbo.mib2019.com/sys\n\n1. 奥尼\n    服务器1 ssh -22 root@218.17.171.114 aoni.com \n    服务器2 ssh -23 root@218.17.171.114 aoni.com ","source":"_posts/其它/Icebartech 配置.md","raw":"---\ntitle: Icebartech 常用配置\ntags:\n- Icebartech\n\ncategories:\n- 其它\n\ndate: 2019-08-27\n---\n\n测试\n\n## 云效配置\n1. Java 配置\n```bash\n/data/deploy/Java/icebartech-cloudnote/package.tgz\n\nset -e;\nif [ -f \"/data/deploy/Java/icebartech-cloudnote/deploy.sh\" ]; then /data/deploy/Java/icebartech-cloudnote/deploy.sh stop; fi;\nmkdir -p /data/deploy/Java/icebartech-cloudnote;\ntar xf /data/deploy/Java/icebartech-cloudnote/package.tgz -o -C /data/deploy/Java/icebartech-cloudnote;\nchmod +x  /data/deploy/Java/icebartech-cloudnote/deploy.sh;\n/data/deploy/Java/icebartech-cloudnote/deploy.sh start\n```\n\n1. Web 打包配置\n```bash\n/data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz\n\nset -e;\nmkdir -p /data/deploy/Web/icebartech-home/icebartech-home-sys/dist;\ntar xf /data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz -o -C /data/deploy/Web/icebartech-home/icebartech-home-sys/dist;\n```\n\n1. Web 源码配置\n```bash\n/data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz\n\nset -e;\nmkdir -p /data/deploy/Web/icebartech-home/icebartech-home-sys;\ntar xf /data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz -o -C /data/deploy/Web/icebartech-home/icebartech-home-sys;\n```\n\n## 项目数据\n\n1. 阿里云服务器\n    120.76.156.141\n    root CQypEz5W\n    ftp ice REtaCf\n    redis Yah6lkNoHm1VtoeZChyzinevnPtkrUa6\n    Mysql root 3fBsKHwVuwo1gspj\n\n    120.76.100.114\n    root CzjdqsaW\n    redis ZUravFit3fxQJ0VlzwxW8UEmEmK3LfVE\n    Mysql root o7dP6ftMSOqKKsRP\n\n    120.76.98.47\n    root VsrmIb1s\n    redis z0fMIYf3KbGxm2bAml8Acqe71JeIehC8\n    Mysql root BgQ0EJktyVNdAqWG\n\n    120.76.102.155\n    root kwAPYE6o\n    redis XKKojoTM2hC4jHEqQDVRvvXUX6BthPLY\n    Mysql root BgQ0EJktyVNdAqWG\n    jenkins admin 9TlbyqHS\n\n    120.77.246.50\n    root Bo9rDeUA\n\n1. 手机膜\n    深圳服务器\n    香港服务器\n\n1. 爱美丽\n\n1. 名博\n    https://mingbo.mib2019.com/api/swagger-ui.html\n    https://mingbo.mib2019.com/sys\n\n1. 奥尼\n    服务器1 ssh -22 root@218.17.171.114 aoni.com \n    服务器2 ssh -23 root@218.17.171.114 aoni.com ","slug":"其它/Icebartech 配置","published":1,"updated":"2020-04-12T08:28:29.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m640047m33p8mp4gioz","content":"<p>测试</p>\n<h2 id=\"云效配置\"><a href=\"#云效配置\" class=\"headerlink\" title=\"云效配置\"></a>云效配置</h2><ol>\n<li><p>Java 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/deploy/Java/icebartech-cloudnote/package.tgz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e;</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"/data/deploy/Java/icebartech-cloudnote/deploy.sh\"</span> ]; <span class=\"keyword\">then</span> /data/deploy/Java/icebartech-cloudnote/deploy.sh stop; <span class=\"keyword\">fi</span>;</span><br><span class=\"line\">mkdir -p /data/deploy/Java/icebartech-cloudnote;</span><br><span class=\"line\">tar xf /data/deploy/Java/icebartech-cloudnote/package.tgz -o -C /data/deploy/Java/icebartech-cloudnote;</span><br><span class=\"line\">chmod +x  /data/deploy/Java/icebartech-cloudnote/deploy.sh;</span><br><span class=\"line\">/data/deploy/Java/icebartech-cloudnote/deploy.sh start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Web 打包配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e;</span><br><span class=\"line\">mkdir -p /data/deploy/Web/icebartech-home/icebartech-home-sys/dist;</span><br><span class=\"line\">tar xf /data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz -o -C /data/deploy/Web/icebartech-home/icebartech-home-sys/dist;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Web 源码配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e;</span><br><span class=\"line\">mkdir -p /data/deploy/Web/icebartech-home/icebartech-home-sys;</span><br><span class=\"line\">tar xf /data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz -o -C /data/deploy/Web/icebartech-home/icebartech-home-sys;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"项目数据\"><a href=\"#项目数据\" class=\"headerlink\" title=\"项目数据\"></a>项目数据</h2><ol>\n<li><p>阿里云服务器<br> 120.76.156.141<br> root CQypEz5W<br> ftp ice REtaCf<br> redis Yah6lkNoHm1VtoeZChyzinevnPtkrUa6<br> Mysql root 3fBsKHwVuwo1gspj</p>\n<p> 120.76.100.114<br> root CzjdqsaW<br> redis ZUravFit3fxQJ0VlzwxW8UEmEmK3LfVE<br> Mysql root o7dP6ftMSOqKKsRP</p>\n<p> 120.76.98.47<br> root VsrmIb1s<br> redis z0fMIYf3KbGxm2bAml8Acqe71JeIehC8<br> Mysql root BgQ0EJktyVNdAqWG</p>\n<p> 120.76.102.155<br> root kwAPYE6o<br> redis XKKojoTM2hC4jHEqQDVRvvXUX6BthPLY<br> Mysql root BgQ0EJktyVNdAqWG<br> jenkins admin 9TlbyqHS</p>\n<p> 120.77.246.50<br> root Bo9rDeUA</p>\n</li>\n<li><p>手机膜<br> 深圳服务器<br> 香港服务器</p>\n</li>\n<li><p>爱美丽</p>\n</li>\n<li><p>名博<br> <a href=\"https://mingbo.mib2019.com/api/swagger-ui.html\">https://mingbo.mib2019.com/api/swagger-ui.html</a><br> <a href=\"https://mingbo.mib2019.com/sys\">https://mingbo.mib2019.com/sys</a></p>\n</li>\n<li><p>奥尼<br> 服务器1 ssh -22 root@218.17.171.114 aoni.com<br> 服务器2 ssh -23 root@218.17.171.114 aoni.com </p>\n</li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>测试</p>\n<h2 id=\"云效配置\"><a href=\"#云效配置\" class=\"headerlink\" title=\"云效配置\"></a>云效配置</h2><ol>\n<li><p>Java 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/deploy/Java/icebartech-cloudnote/package.tgz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e;</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"/data/deploy/Java/icebartech-cloudnote/deploy.sh\"</span> ]; <span class=\"keyword\">then</span> /data/deploy/Java/icebartech-cloudnote/deploy.sh stop; <span class=\"keyword\">fi</span>;</span><br><span class=\"line\">mkdir -p /data/deploy/Java/icebartech-cloudnote;</span><br><span class=\"line\">tar xf /data/deploy/Java/icebartech-cloudnote/package.tgz -o -C /data/deploy/Java/icebartech-cloudnote;</span><br><span class=\"line\">chmod +x  /data/deploy/Java/icebartech-cloudnote/deploy.sh;</span><br><span class=\"line\">/data/deploy/Java/icebartech-cloudnote/deploy.sh start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Web 打包配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e;</span><br><span class=\"line\">mkdir -p /data/deploy/Web/icebartech-home/icebartech-home-sys/dist;</span><br><span class=\"line\">tar xf /data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz -o -C /data/deploy/Web/icebartech-home/icebartech-home-sys/dist;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Web 源码配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e;</span><br><span class=\"line\">mkdir -p /data/deploy/Web/icebartech-home/icebartech-home-sys;</span><br><span class=\"line\">tar xf /data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz -o -C /data/deploy/Web/icebartech-home/icebartech-home-sys;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"项目数据\"><a href=\"#项目数据\" class=\"headerlink\" title=\"项目数据\"></a>项目数据</h2><ol>\n<li><p>阿里云服务器<br> 120.76.156.141<br> root CQypEz5W<br> ftp ice REtaCf<br> redis Yah6lkNoHm1VtoeZChyzinevnPtkrUa6<br> Mysql root 3fBsKHwVuwo1gspj</p>\n<p> 120.76.100.114<br> root CzjdqsaW<br> redis ZUravFit3fxQJ0VlzwxW8UEmEmK3LfVE<br> Mysql root o7dP6ftMSOqKKsRP</p>\n<p> 120.76.98.47<br> root VsrmIb1s<br> redis z0fMIYf3KbGxm2bAml8Acqe71JeIehC8<br> Mysql root BgQ0EJktyVNdAqWG</p>\n<p> 120.76.102.155<br> root kwAPYE6o<br> redis XKKojoTM2hC4jHEqQDVRvvXUX6BthPLY<br> Mysql root BgQ0EJktyVNdAqWG<br> jenkins admin 9TlbyqHS</p>\n<p> 120.77.246.50<br> root Bo9rDeUA</p>\n</li>\n<li><p>手机膜<br> 深圳服务器<br> 香港服务器</p>\n</li>\n<li><p>爱美丽</p>\n</li>\n<li><p>名博<br> <a href=\"https://mingbo.mib2019.com/api/swagger-ui.html\">https://mingbo.mib2019.com/api/swagger-ui.html</a><br> <a href=\"https://mingbo.mib2019.com/sys\">https://mingbo.mib2019.com/sys</a></p>\n</li>\n<li><p>奥尼<br> 服务器1 ssh -22 root@218.17.171.114 aoni.com<br> 服务器2 ssh -23 root@218.17.171.114 aoni.com </p>\n</li>\n</ol>\n"},{"title":"科学上网","date":"2020-02-14T16:00:00.000Z","_content":"\n## Github\n直接修改hosts文件。\n\n```\n# Github\n192.30.253.113 github.com\n151.101.184.133 assets-cdn.github.com\n185.199.108.153 documentcloud.github.com\n192.30.253.118 gist.github.com\n185.199.108.153 help.github.com\n192.30.253.120 nodeload.github.com\n151.101.184.133 raw.github.com\n18.204.240.114 status.github.com\n192.30.253.166 training.github.com\n192.30.253.112 www.github.com\n151.101.185.194 github.global.ssl.fastly.net\n151.101.184.133 avatars0.githubusercontent.com\n151.101.184.133 avatars1.githubusercontent.com\n```","source":"_posts/其它/科学上网.md","raw":"---\ntitle: 科学上网\n\ncategories:\n- 其它\ntags:\n- 科学上网\n\ndate: 2020-02-15\n---\n\n## Github\n直接修改hosts文件。\n\n```\n# Github\n192.30.253.113 github.com\n151.101.184.133 assets-cdn.github.com\n185.199.108.153 documentcloud.github.com\n192.30.253.118 gist.github.com\n185.199.108.153 help.github.com\n192.30.253.120 nodeload.github.com\n151.101.184.133 raw.github.com\n18.204.240.114 status.github.com\n192.30.253.166 training.github.com\n192.30.253.112 www.github.com\n151.101.185.194 github.global.ssl.fastly.net\n151.101.184.133 avatars0.githubusercontent.com\n151.101.184.133 avatars1.githubusercontent.com\n```","slug":"其它/科学上网","published":1,"updated":"2020-04-12T08:28:29.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m6a004am33pav4uftmp","content":"<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><p>直接修改hosts文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Github</span><br><span class=\"line\">192.30.253.113 github.com</span><br><span class=\"line\">151.101.184.133 assets-cdn.github.com</span><br><span class=\"line\">185.199.108.153 documentcloud.github.com</span><br><span class=\"line\">192.30.253.118 gist.github.com</span><br><span class=\"line\">185.199.108.153 help.github.com</span><br><span class=\"line\">192.30.253.120 nodeload.github.com</span><br><span class=\"line\">151.101.184.133 raw.github.com</span><br><span class=\"line\">18.204.240.114 status.github.com</span><br><span class=\"line\">192.30.253.166 training.github.com</span><br><span class=\"line\">192.30.253.112 www.github.com</span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br><span class=\"line\">151.101.184.133 avatars0.githubusercontent.com</span><br><span class=\"line\">151.101.184.133 avatars1.githubusercontent.com</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><p>直接修改hosts文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Github</span><br><span class=\"line\">192.30.253.113 github.com</span><br><span class=\"line\">151.101.184.133 assets-cdn.github.com</span><br><span class=\"line\">185.199.108.153 documentcloud.github.com</span><br><span class=\"line\">192.30.253.118 gist.github.com</span><br><span class=\"line\">185.199.108.153 help.github.com</span><br><span class=\"line\">192.30.253.120 nodeload.github.com</span><br><span class=\"line\">151.101.184.133 raw.github.com</span><br><span class=\"line\">18.204.240.114 status.github.com</span><br><span class=\"line\">192.30.253.166 training.github.com</span><br><span class=\"line\">192.30.253.112 www.github.com</span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br><span class=\"line\">151.101.184.133 avatars0.githubusercontent.com</span><br><span class=\"line\">151.101.184.133 avatars1.githubusercontent.com</span><br></pre></td></tr></table></figure>"},{"title":"思维导图","date":"2020-02-10T16:00:00.000Z","_content":"思维导图是我在研究深度学习后才明白它原理的，因为思维导图和人工智能的深度学习原理一样。如果我学其他专业的话，恐怕我一辈子都不知道原理。所以非机器学习专业的人很少有能解释思维导图的原理，为何有效，何时无效。\n\n## 思维导图的作用\n先来看看思维导图最牛的作用是什么。\n\n> 学习上：思维导图可以让你用更少的例子学会知识\n\n再直白点说：你只做过几道题，但可通过思维导图来学会别人用题海战术才能学会的知识，是学得快；用了题海战术更厉害，是学得好。\n\n> 应用上：思维导图可以让你用更少的知识解决问题\n\n再直白点说：用思维导图就可以解决你从来没遇到过的复杂问题。\n\n关键在于：更少更快。\n\n## 思维导图的原理\n可关键的问题是：为什么？是仪式产生的魔法？到底是怎么做到上面两点的？原理是什么？下面是用人工智能理论借鉴而来的原理解释为什么思维导图能做到这些。\n\n### 什么是学习\n\n\n## 促进学习的关键是什么？\n\n```mermaid\ngraph LR\n    建模欲望 --- 好奇的作用\n    好奇的作用 --- 搜集例子\n    好奇的作用 --- 建立模型\n\n    建模欲望 --- 好奇的对象\n    好奇的对象 --- 例子\n    例子 --- 输入\n    例子 --- 输出\n    好奇的对象 --- 知识\n    知识 --- 分类\n    知识 --- 回归\n\n    建模欲望 --- 好奇的应用\n    好奇的应用 --- 演讲\n    演讲 --- 寓言故事\n    演讲 --- 故事引入\n    好奇的应用 --- 标题\n    标题 --- 例子残缺\n    标题 --- 知识白送\n    好奇的应用 --- 学习\n    学习 --- 自我相关\n    学习 --- 自我提问\n    好奇的应用 --- 广告\n    广告 --- 知识包装\n    广告 --- 特例说服\n\n    建模欲望 --- 好奇的敌人\n    好奇的敌人 --- 权威知识\n    好奇的敌人 --- 固执心理\n```\n\n事实上，好奇心和食欲、性欲一样，是人类的基本欲望。和好奇心相关的大脑区域就是负责奖励机制的伏膈核，也正是对成瘾行为起重要作用的区域。因为我们不得不依赖自己的模型而存活，所以一定会想尽办法的去建立模型（学习），而好奇心便是演化出来促进学习的奖励机制，每个人生下来就是一部终身好奇的学习机器。\n\n我们不是不喜欢学习，而是不喜欢不符合大脑特点的记忆。当我们对食物饥饿时，大脑会产生进食欲，会无法抑制的想要进食。学习和进食一样，当我们对知识饥饿时，大脑会产生求知欲，也会无法抑制的想要学习。\n\n> 若善用好奇心，将会对学习起到非常显著的作用\n\n## 万能学习法！\n大家一定想过有没有一个万能学习法？有。\n\n而且还是被证明了定理：叫做无免费午餐定理（别名叫做：没有万能学习法）\n\n显式知识的思维导图也好，隐式知识的端到端学习也好，都有它适用的场合，切勿认为思维导图是万能的，它就不适合隐式知识的学习。\n\n任何一个声称自己是万能学习法的，无一例外都是骗子。网上有很多的学习方法，但很少有提及某个学习方法不适合什么任务。","source":"_posts/其它/思维导图.md","raw":"---\ntitle: 思维导图\n\ncategories:\n- 其它\n\ntags:\n- 自然拼读法\n\ndate: 2020-02-11\n---\n思维导图是我在研究深度学习后才明白它原理的，因为思维导图和人工智能的深度学习原理一样。如果我学其他专业的话，恐怕我一辈子都不知道原理。所以非机器学习专业的人很少有能解释思维导图的原理，为何有效，何时无效。\n\n## 思维导图的作用\n先来看看思维导图最牛的作用是什么。\n\n> 学习上：思维导图可以让你用更少的例子学会知识\n\n再直白点说：你只做过几道题，但可通过思维导图来学会别人用题海战术才能学会的知识，是学得快；用了题海战术更厉害，是学得好。\n\n> 应用上：思维导图可以让你用更少的知识解决问题\n\n再直白点说：用思维导图就可以解决你从来没遇到过的复杂问题。\n\n关键在于：更少更快。\n\n## 思维导图的原理\n可关键的问题是：为什么？是仪式产生的魔法？到底是怎么做到上面两点的？原理是什么？下面是用人工智能理论借鉴而来的原理解释为什么思维导图能做到这些。\n\n### 什么是学习\n\n\n## 促进学习的关键是什么？\n\n```mermaid\ngraph LR\n    建模欲望 --- 好奇的作用\n    好奇的作用 --- 搜集例子\n    好奇的作用 --- 建立模型\n\n    建模欲望 --- 好奇的对象\n    好奇的对象 --- 例子\n    例子 --- 输入\n    例子 --- 输出\n    好奇的对象 --- 知识\n    知识 --- 分类\n    知识 --- 回归\n\n    建模欲望 --- 好奇的应用\n    好奇的应用 --- 演讲\n    演讲 --- 寓言故事\n    演讲 --- 故事引入\n    好奇的应用 --- 标题\n    标题 --- 例子残缺\n    标题 --- 知识白送\n    好奇的应用 --- 学习\n    学习 --- 自我相关\n    学习 --- 自我提问\n    好奇的应用 --- 广告\n    广告 --- 知识包装\n    广告 --- 特例说服\n\n    建模欲望 --- 好奇的敌人\n    好奇的敌人 --- 权威知识\n    好奇的敌人 --- 固执心理\n```\n\n事实上，好奇心和食欲、性欲一样，是人类的基本欲望。和好奇心相关的大脑区域就是负责奖励机制的伏膈核，也正是对成瘾行为起重要作用的区域。因为我们不得不依赖自己的模型而存活，所以一定会想尽办法的去建立模型（学习），而好奇心便是演化出来促进学习的奖励机制，每个人生下来就是一部终身好奇的学习机器。\n\n我们不是不喜欢学习，而是不喜欢不符合大脑特点的记忆。当我们对食物饥饿时，大脑会产生进食欲，会无法抑制的想要进食。学习和进食一样，当我们对知识饥饿时，大脑会产生求知欲，也会无法抑制的想要学习。\n\n> 若善用好奇心，将会对学习起到非常显著的作用\n\n## 万能学习法！\n大家一定想过有没有一个万能学习法？有。\n\n而且还是被证明了定理：叫做无免费午餐定理（别名叫做：没有万能学习法）\n\n显式知识的思维导图也好，隐式知识的端到端学习也好，都有它适用的场合，切勿认为思维导图是万能的，它就不适合隐式知识的学习。\n\n任何一个声称自己是万能学习法的，无一例外都是骗子。网上有很多的学习方法，但很少有提及某个学习方法不适合什么任务。","slug":"其它/思维导图","published":1,"updated":"2020-04-12T08:28:29.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m6b004em33p4bizf23n","content":"<p>思维导图是我在研究深度学习后才明白它原理的，因为思维导图和人工智能的深度学习原理一样。如果我学其他专业的话，恐怕我一辈子都不知道原理。所以非机器学习专业的人很少有能解释思维导图的原理，为何有效，何时无效。</p>\n<h2 id=\"思维导图的作用\"><a href=\"#思维导图的作用\" class=\"headerlink\" title=\"思维导图的作用\"></a>思维导图的作用</h2><p>先来看看思维导图最牛的作用是什么。</p>\n<blockquote>\n<p>学习上：思维导图可以让你用更少的例子学会知识</p>\n</blockquote>\n<p>再直白点说：你只做过几道题，但可通过思维导图来学会别人用题海战术才能学会的知识，是学得快；用了题海战术更厉害，是学得好。</p>\n<blockquote>\n<p>应用上：思维导图可以让你用更少的知识解决问题</p>\n</blockquote>\n<p>再直白点说：用思维导图就可以解决你从来没遇到过的复杂问题。</p>\n<p>关键在于：更少更快。</p>\n<h2 id=\"思维导图的原理\"><a href=\"#思维导图的原理\" class=\"headerlink\" title=\"思维导图的原理\"></a>思维导图的原理</h2><p>可关键的问题是：为什么？是仪式产生的魔法？到底是怎么做到上面两点的？原理是什么？下面是用人工智能理论借鉴而来的原理解释为什么思维导图能做到这些。</p>\n<h3 id=\"什么是学习\"><a href=\"#什么是学习\" class=\"headerlink\" title=\"什么是学习\"></a>什么是学习</h3><h2 id=\"促进学习的关键是什么？\"><a href=\"#促进学习的关键是什么？\" class=\"headerlink\" title=\"促进学习的关键是什么？\"></a>促进学习的关键是什么？</h2><pre class=\"mermaid\">graph LR\n    建模欲望 --- 好奇的作用\n    好奇的作用 --- 搜集例子\n    好奇的作用 --- 建立模型\n\n    建模欲望 --- 好奇的对象\n    好奇的对象 --- 例子\n    例子 --- 输入\n    例子 --- 输出\n    好奇的对象 --- 知识\n    知识 --- 分类\n    知识 --- 回归\n\n    建模欲望 --- 好奇的应用\n    好奇的应用 --- 演讲\n    演讲 --- 寓言故事\n    演讲 --- 故事引入\n    好奇的应用 --- 标题\n    标题 --- 例子残缺\n    标题 --- 知识白送\n    好奇的应用 --- 学习\n    学习 --- 自我相关\n    学习 --- 自我提问\n    好奇的应用 --- 广告\n    广告 --- 知识包装\n    广告 --- 特例说服\n\n    建模欲望 --- 好奇的敌人\n    好奇的敌人 --- 权威知识\n    好奇的敌人 --- 固执心理</pre>\n\n<p>事实上，好奇心和食欲、性欲一样，是人类的基本欲望。和好奇心相关的大脑区域就是负责奖励机制的伏膈核，也正是对成瘾行为起重要作用的区域。因为我们不得不依赖自己的模型而存活，所以一定会想尽办法的去建立模型（学习），而好奇心便是演化出来促进学习的奖励机制，每个人生下来就是一部终身好奇的学习机器。</p>\n<p>我们不是不喜欢学习，而是不喜欢不符合大脑特点的记忆。当我们对食物饥饿时，大脑会产生进食欲，会无法抑制的想要进食。学习和进食一样，当我们对知识饥饿时，大脑会产生求知欲，也会无法抑制的想要学习。</p>\n<blockquote>\n<p>若善用好奇心，将会对学习起到非常显著的作用</p>\n</blockquote>\n<h2 id=\"万能学习法！\"><a href=\"#万能学习法！\" class=\"headerlink\" title=\"万能学习法！\"></a>万能学习法！</h2><p>大家一定想过有没有一个万能学习法？有。</p>\n<p>而且还是被证明了定理：叫做无免费午餐定理（别名叫做：没有万能学习法）</p>\n<p>显式知识的思维导图也好，隐式知识的端到端学习也好，都有它适用的场合，切勿认为思维导图是万能的，它就不适合隐式知识的学习。</p>\n<p>任何一个声称自己是万能学习法的，无一例外都是骗子。网上有很多的学习方法，但很少有提及某个学习方法不适合什么任务。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>思维导图是我在研究深度学习后才明白它原理的，因为思维导图和人工智能的深度学习原理一样。如果我学其他专业的话，恐怕我一辈子都不知道原理。所以非机器学习专业的人很少有能解释思维导图的原理，为何有效，何时无效。</p>\n<h2 id=\"思维导图的作用\"><a href=\"#思维导图的作用\" class=\"headerlink\" title=\"思维导图的作用\"></a>思维导图的作用</h2><p>先来看看思维导图最牛的作用是什么。</p>\n<blockquote>\n<p>学习上：思维导图可以让你用更少的例子学会知识</p>\n</blockquote>\n<p>再直白点说：你只做过几道题，但可通过思维导图来学会别人用题海战术才能学会的知识，是学得快；用了题海战术更厉害，是学得好。</p>\n<blockquote>\n<p>应用上：思维导图可以让你用更少的知识解决问题</p>\n</blockquote>\n<p>再直白点说：用思维导图就可以解决你从来没遇到过的复杂问题。</p>\n<p>关键在于：更少更快。</p>\n<h2 id=\"思维导图的原理\"><a href=\"#思维导图的原理\" class=\"headerlink\" title=\"思维导图的原理\"></a>思维导图的原理</h2><p>可关键的问题是：为什么？是仪式产生的魔法？到底是怎么做到上面两点的？原理是什么？下面是用人工智能理论借鉴而来的原理解释为什么思维导图能做到这些。</p>\n<h3 id=\"什么是学习\"><a href=\"#什么是学习\" class=\"headerlink\" title=\"什么是学习\"></a>什么是学习</h3><h2 id=\"促进学习的关键是什么？\"><a href=\"#促进学习的关键是什么？\" class=\"headerlink\" title=\"促进学习的关键是什么？\"></a>促进学习的关键是什么？</h2><pre class=\"mermaid\">graph LR\n    建模欲望 --- 好奇的作用\n    好奇的作用 --- 搜集例子\n    好奇的作用 --- 建立模型\n\n    建模欲望 --- 好奇的对象\n    好奇的对象 --- 例子\n    例子 --- 输入\n    例子 --- 输出\n    好奇的对象 --- 知识\n    知识 --- 分类\n    知识 --- 回归\n\n    建模欲望 --- 好奇的应用\n    好奇的应用 --- 演讲\n    演讲 --- 寓言故事\n    演讲 --- 故事引入\n    好奇的应用 --- 标题\n    标题 --- 例子残缺\n    标题 --- 知识白送\n    好奇的应用 --- 学习\n    学习 --- 自我相关\n    学习 --- 自我提问\n    好奇的应用 --- 广告\n    广告 --- 知识包装\n    广告 --- 特例说服\n\n    建模欲望 --- 好奇的敌人\n    好奇的敌人 --- 权威知识\n    好奇的敌人 --- 固执心理</pre>\n\n<p>事实上，好奇心和食欲、性欲一样，是人类的基本欲望。和好奇心相关的大脑区域就是负责奖励机制的伏膈核，也正是对成瘾行为起重要作用的区域。因为我们不得不依赖自己的模型而存活，所以一定会想尽办法的去建立模型（学习），而好奇心便是演化出来促进学习的奖励机制，每个人生下来就是一部终身好奇的学习机器。</p>\n<p>我们不是不喜欢学习，而是不喜欢不符合大脑特点的记忆。当我们对食物饥饿时，大脑会产生进食欲，会无法抑制的想要进食。学习和进食一样，当我们对知识饥饿时，大脑会产生求知欲，也会无法抑制的想要学习。</p>\n<blockquote>\n<p>若善用好奇心，将会对学习起到非常显著的作用</p>\n</blockquote>\n<h2 id=\"万能学习法！\"><a href=\"#万能学习法！\" class=\"headerlink\" title=\"万能学习法！\"></a>万能学习法！</h2><p>大家一定想过有没有一个万能学习法？有。</p>\n<p>而且还是被证明了定理：叫做无免费午餐定理（别名叫做：没有万能学习法）</p>\n<p>显式知识的思维导图也好，隐式知识的端到端学习也好，都有它适用的场合，切勿认为思维导图是万能的，它就不适合隐式知识的学习。</p>\n<p>任何一个声称自己是万能学习法的，无一例外都是骗子。网上有很多的学习方法，但很少有提及某个学习方法不适合什么任务。</p>\n"},{"title":"自然拼读法","date":"2020-02-04T16:00:00.000Z","_content":"\nsdfsdg\n\n|||\n\n## 辅音字母\n|字母|音标|例子|备注|\n|:--|:--|:--|\n|切头法|||去掉单词读音前面部分，保留后面部分|\n|f|ef|fa af fax|夫 悄悄话 不用声带 上面牙齿咬住下面嘴唇|\n|l|el|la al lab|呃 可用le代替 舌头顶上面牙齿|\n|m|em|ma am man|en，闭嘴，用鼻子发音|\n|n|en|na an man|en，舌头顶上面牙齿，鼻子发音|\n|s|es|sa as sad|s|\n|x|eks|xa ax fax|ks|\n|去尾法|||去掉单词读取后面部分，保留前面部分|\n|b||ba ab lab||\n|d||da ad sad pad||\n|p||pa ap pad zap||\n|t||ta at vat|he|\n|v||va av vat|wu 上面牙齿咬住下面嘴唇|\n|z||za az zap|子|\n|j||ja aj jam|者|\n|k||ka ak yak|可|\n|对比法|||汉语拼音|\n|g||ga ag|阁 快读|\n|h||ha hat|he 不用声带|\n|r||ra rat|e呃 舌头顶上面牙齿|\n|w||wa wag|we 合嘴然后张开|\n|y||ya yak|ye 惹|\n|其它||||\n|c||ca ac cat|k 渴|\n|q||qua quack|总是搭配qu 阔|\n\n## 元音\n元音一共5个：**a**、**e**、**i(结尾y)**、**o**、**u**。\n\n|发音|a|e|i(结尾y)|o|u|\n|:--|:--|:--|:--|:--|:--|\n|短音|**a**t|**e**gg|**i**f|**o**ff|**u**p|\n|长音（本音）|n**a**me|s**ee**|h**i**de|g**o**|c**u**te|\n|**发音规律**|-|-|-|-|-|\n|短音（单元在头腰）|c**a**t p**a**d|**e**gg p**e**t|**i**t **i**t s**i**t|h**o**t p**o**t|**u**p h**u**g|\n|长音（元辅e，元本音，e闭嘴）|c**a**k**e** n**a**m**e** g**a**t**e** t**a**p**e**|**e**v**e** p**e**t**e** th**e**s**e** th**e**m**e**|h**i**d**e** r**i**d**e** f**i**v**e** d**i**v**e** l**i**k**e** b**i**k**e** b**i**t**e** k**i**t**e**|c**o**k**e** j**o**k**e** h**o**m**e** b**o**n**e**|c**u**t**e** c**u**b**e** m**u**t**e** t**u**b**e**|\n|长音（2个元音，前本后闭）|w**ai**t r**ai**n|s**ea** s**ee** r**ea**d b**ee**|l**ie** p**ie**|b**oa**t t**oe** r**oa**d d**oe**|c**ue** d**ue**|\n|长音（单元结尾）||m**e** w**e** h**e** sh**e**|h**i** cr**y** sh**y** fl**y**|n**o** g**o**||\n\n## 辅元组合\n**ca**ke\n**co**ke\n**cu**p\n**cl**ock\n\n## 辅音字母Y\n### 词首[j]->re\n**y**es\n**y**ou\n\n### 单元y结尾[ai]\nm**y** fl**y**\n\n### 非重读音[i]->if\ncand**y**\nsorr**y**\n\n## 辅音组合新音\n|组合|发音|例子|\n|:--|:--|:--|\n|**R**组合|--|--|\n|dr|[dr] 者|**dr**ive d**ri**ve? d**ru**id?|\n|tr|[tr] che|**tr**y **tr**ain **tr**anslate|\n|**S**组合|--|--|\n|sp|[sp] be|**sp**oon **sp**ot **sp**ring|\n|st|[st] sS|**st**and **st**ack **st**eam|\n|**H**组合|--|--|\n|ch|[tʃ] qu|pea**ch**|\n|sh|[ʃ] xu|**sh**eep **sh**ell|\n|ph|[f]|**ph**one|\n|wh|[w]|**wh**ere **wh**at|\n|th|[ð] zhi|**th**is **th**at **th**eme **th**ink|\n|**G**组合|--|--|\n|ng|[ɔŋ] en|so**ng** si**ng**|\n|ge|[dʒ] qu|ca**ge**|\n|gh|[f]|lau**gh** rou**gh**|\n|igh|[aɪ] 哑音|r**igh**t|\n|eigh|[eɪ] 哑音|e**igh**t|\n|ought|[ɔːt] 哑音|b**ought**|\n|aught|[ɔːt] 哑音|c**aught**|\n\n## 辅音组合哑音\n只出现在首尾？\n\n|组合|发音|例子|\n|:--|:--|:--|\n|mb|m [m]|la**mb**|\n|ck|k [k]|kno**ck**|\n|kn|n [n]|**kn**ock|\n|wr|r [r]|**wr**ite||\n|tch|ch [tʃ] qu|wa**tch**|\n|dge|ge [dʒ] qu|bri**dge**|\n\n\n## ????\ndeclared\n**de** **clare** **d**? 长音 短音？\n\ntor -> che iterator\n\npollute ? u 短音\n\nmethod tho(sou)\n\nthumb (θʌm) θ -> s","source":"_posts/其它/自然拼读法.md","raw":"---\ntitle: 自然拼读法\n\ncategories:\n- 其它\n\ntags:\n- 自然拼读法\n\ndate: 2020-02-05\n---\n\nsdfsdg\n\n|||\n\n## 辅音字母\n|字母|音标|例子|备注|\n|:--|:--|:--|\n|切头法|||去掉单词读音前面部分，保留后面部分|\n|f|ef|fa af fax|夫 悄悄话 不用声带 上面牙齿咬住下面嘴唇|\n|l|el|la al lab|呃 可用le代替 舌头顶上面牙齿|\n|m|em|ma am man|en，闭嘴，用鼻子发音|\n|n|en|na an man|en，舌头顶上面牙齿，鼻子发音|\n|s|es|sa as sad|s|\n|x|eks|xa ax fax|ks|\n|去尾法|||去掉单词读取后面部分，保留前面部分|\n|b||ba ab lab||\n|d||da ad sad pad||\n|p||pa ap pad zap||\n|t||ta at vat|he|\n|v||va av vat|wu 上面牙齿咬住下面嘴唇|\n|z||za az zap|子|\n|j||ja aj jam|者|\n|k||ka ak yak|可|\n|对比法|||汉语拼音|\n|g||ga ag|阁 快读|\n|h||ha hat|he 不用声带|\n|r||ra rat|e呃 舌头顶上面牙齿|\n|w||wa wag|we 合嘴然后张开|\n|y||ya yak|ye 惹|\n|其它||||\n|c||ca ac cat|k 渴|\n|q||qua quack|总是搭配qu 阔|\n\n## 元音\n元音一共5个：**a**、**e**、**i(结尾y)**、**o**、**u**。\n\n|发音|a|e|i(结尾y)|o|u|\n|:--|:--|:--|:--|:--|:--|\n|短音|**a**t|**e**gg|**i**f|**o**ff|**u**p|\n|长音（本音）|n**a**me|s**ee**|h**i**de|g**o**|c**u**te|\n|**发音规律**|-|-|-|-|-|\n|短音（单元在头腰）|c**a**t p**a**d|**e**gg p**e**t|**i**t **i**t s**i**t|h**o**t p**o**t|**u**p h**u**g|\n|长音（元辅e，元本音，e闭嘴）|c**a**k**e** n**a**m**e** g**a**t**e** t**a**p**e**|**e**v**e** p**e**t**e** th**e**s**e** th**e**m**e**|h**i**d**e** r**i**d**e** f**i**v**e** d**i**v**e** l**i**k**e** b**i**k**e** b**i**t**e** k**i**t**e**|c**o**k**e** j**o**k**e** h**o**m**e** b**o**n**e**|c**u**t**e** c**u**b**e** m**u**t**e** t**u**b**e**|\n|长音（2个元音，前本后闭）|w**ai**t r**ai**n|s**ea** s**ee** r**ea**d b**ee**|l**ie** p**ie**|b**oa**t t**oe** r**oa**d d**oe**|c**ue** d**ue**|\n|长音（单元结尾）||m**e** w**e** h**e** sh**e**|h**i** cr**y** sh**y** fl**y**|n**o** g**o**||\n\n## 辅元组合\n**ca**ke\n**co**ke\n**cu**p\n**cl**ock\n\n## 辅音字母Y\n### 词首[j]->re\n**y**es\n**y**ou\n\n### 单元y结尾[ai]\nm**y** fl**y**\n\n### 非重读音[i]->if\ncand**y**\nsorr**y**\n\n## 辅音组合新音\n|组合|发音|例子|\n|:--|:--|:--|\n|**R**组合|--|--|\n|dr|[dr] 者|**dr**ive d**ri**ve? d**ru**id?|\n|tr|[tr] che|**tr**y **tr**ain **tr**anslate|\n|**S**组合|--|--|\n|sp|[sp] be|**sp**oon **sp**ot **sp**ring|\n|st|[st] sS|**st**and **st**ack **st**eam|\n|**H**组合|--|--|\n|ch|[tʃ] qu|pea**ch**|\n|sh|[ʃ] xu|**sh**eep **sh**ell|\n|ph|[f]|**ph**one|\n|wh|[w]|**wh**ere **wh**at|\n|th|[ð] zhi|**th**is **th**at **th**eme **th**ink|\n|**G**组合|--|--|\n|ng|[ɔŋ] en|so**ng** si**ng**|\n|ge|[dʒ] qu|ca**ge**|\n|gh|[f]|lau**gh** rou**gh**|\n|igh|[aɪ] 哑音|r**igh**t|\n|eigh|[eɪ] 哑音|e**igh**t|\n|ought|[ɔːt] 哑音|b**ought**|\n|aught|[ɔːt] 哑音|c**aught**|\n\n## 辅音组合哑音\n只出现在首尾？\n\n|组合|发音|例子|\n|:--|:--|:--|\n|mb|m [m]|la**mb**|\n|ck|k [k]|kno**ck**|\n|kn|n [n]|**kn**ock|\n|wr|r [r]|**wr**ite||\n|tch|ch [tʃ] qu|wa**tch**|\n|dge|ge [dʒ] qu|bri**dge**|\n\n\n## ????\ndeclared\n**de** **clare** **d**? 长音 短音？\n\ntor -> che iterator\n\npollute ? u 短音\n\nmethod tho(sou)\n\nthumb (θʌm) θ -> s","slug":"其它/自然拼读法","published":1,"updated":"2020-04-12T08:31:04.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m6d004hm33p0wrsezsx","content":"<p>sdfsdg</p>\n<p>|||</p>\n<h2 id=\"辅音字母\"><a href=\"#辅音字母\" class=\"headerlink\" title=\"辅音字母\"></a>辅音字母</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字母</th>\n<th style=\"text-align:left\">音标</th>\n<th style=\"text-align:left\">例子</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">切头法</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td>去掉单词读音前面部分，保留后面部分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">f</td>\n<td style=\"text-align:left\">ef</td>\n<td style=\"text-align:left\">fa af fax</td>\n<td>夫 悄悄话 不用声带 上面牙齿咬住下面嘴唇</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">l</td>\n<td style=\"text-align:left\">el</td>\n<td style=\"text-align:left\">la al lab</td>\n<td>呃 可用le代替 舌头顶上面牙齿</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m</td>\n<td style=\"text-align:left\">em</td>\n<td style=\"text-align:left\">ma am man</td>\n<td>en，闭嘴，用鼻子发音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">en</td>\n<td style=\"text-align:left\">na an man</td>\n<td>en，舌头顶上面牙齿，鼻子发音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:left\">es</td>\n<td style=\"text-align:left\">sa as sad</td>\n<td>s</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\">eks</td>\n<td style=\"text-align:left\">xa ax fax</td>\n<td>ks</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">去尾法</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td>去掉单词读取后面部分，保留前面部分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">b</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ba ab lab</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">da ad sad pad</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">pa ap pad zap</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">t</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ta at vat</td>\n<td>he</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">v</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">va av vat</td>\n<td>wu 上面牙齿咬住下面嘴唇</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">z</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">za az zap</td>\n<td>子</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">j</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ja aj jam</td>\n<td>者</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">k</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ka ak yak</td>\n<td>可</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">对比法</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td>汉语拼音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ga ag</td>\n<td>阁 快读</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">h</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ha hat</td>\n<td>he 不用声带</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ra rat</td>\n<td>e呃 舌头顶上面牙齿</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">wa wag</td>\n<td>we 合嘴然后张开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">y</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ya yak</td>\n<td>ye 惹</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">其它</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">c</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ca ac cat</td>\n<td>k 渴</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">q</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">qua quack</td>\n<td>总是搭配qu 阔</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"元音\"><a href=\"#元音\" class=\"headerlink\" title=\"元音\"></a>元音</h2><p>元音一共5个：<strong>a</strong>、<strong>e</strong>、<strong>i(结尾y)</strong>、<strong>o</strong>、<strong>u</strong>。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">发音</th>\n<th style=\"text-align:left\">a</th>\n<th style=\"text-align:left\">e</th>\n<th style=\"text-align:left\">i(结尾y)</th>\n<th style=\"text-align:left\">o</th>\n<th style=\"text-align:left\">u</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">短音</td>\n<td style=\"text-align:left\"><strong>a</strong>t</td>\n<td style=\"text-align:left\"><strong>e</strong>gg</td>\n<td style=\"text-align:left\"><strong>i</strong>f</td>\n<td style=\"text-align:left\"><strong>o</strong>ff</td>\n<td style=\"text-align:left\"><strong>u</strong>p</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">长音（本音）</td>\n<td style=\"text-align:left\">n<strong>a</strong>me</td>\n<td style=\"text-align:left\">s<strong>ee</strong></td>\n<td style=\"text-align:left\">h<strong>i</strong>de</td>\n<td style=\"text-align:left\">g<strong>o</strong></td>\n<td style=\"text-align:left\">c<strong>u</strong>te</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>发音规律</strong></td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">短音（单元在头腰）</td>\n<td style=\"text-align:left\">c<strong>a</strong>t p<strong>a</strong>d</td>\n<td style=\"text-align:left\"><strong>e</strong>gg p<strong>e</strong>t</td>\n<td style=\"text-align:left\"><strong>i</strong>t <strong>i</strong>t s<strong>i</strong>t</td>\n<td style=\"text-align:left\">h<strong>o</strong>t p<strong>o</strong>t</td>\n<td style=\"text-align:left\"><strong>u</strong>p h<strong>u</strong>g</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">长音（元辅e，元本音，e闭嘴）</td>\n<td style=\"text-align:left\">c<strong>a</strong>k<strong>e</strong> n<strong>a</strong>m<strong>e</strong> g<strong>a</strong>t<strong>e</strong> t<strong>a</strong>p<strong>e</strong></td>\n<td style=\"text-align:left\"><strong>e</strong>v<strong>e</strong> p<strong>e</strong>t<strong>e</strong> th<strong>e</strong>s<strong>e</strong> th<strong>e</strong>m<strong>e</strong></td>\n<td style=\"text-align:left\">h<strong>i</strong>d<strong>e</strong> r<strong>i</strong>d<strong>e</strong> f<strong>i</strong>v<strong>e</strong> d<strong>i</strong>v<strong>e</strong> l<strong>i</strong>k<strong>e</strong> b<strong>i</strong>k<strong>e</strong> b<strong>i</strong>t<strong>e</strong> k<strong>i</strong>t<strong>e</strong></td>\n<td style=\"text-align:left\">c<strong>o</strong>k<strong>e</strong> j<strong>o</strong>k<strong>e</strong> h<strong>o</strong>m<strong>e</strong> b<strong>o</strong>n<strong>e</strong></td>\n<td style=\"text-align:left\">c<strong>u</strong>t<strong>e</strong> c<strong>u</strong>b<strong>e</strong> m<strong>u</strong>t<strong>e</strong> t<strong>u</strong>b<strong>e</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">长音（2个元音，前本后闭）</td>\n<td style=\"text-align:left\">w<strong>ai</strong>t r<strong>ai</strong>n</td>\n<td style=\"text-align:left\">s<strong>ea</strong> s<strong>ee</strong> r<strong>ea</strong>d b<strong>ee</strong></td>\n<td style=\"text-align:left\">l<strong>ie</strong> p<strong>ie</strong></td>\n<td style=\"text-align:left\">b<strong>oa</strong>t t<strong>oe</strong> r<strong>oa</strong>d d<strong>oe</strong></td>\n<td style=\"text-align:left\">c<strong>ue</strong> d<strong>ue</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">长音（单元结尾）</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">m<strong>e</strong> w<strong>e</strong> h<strong>e</strong> sh<strong>e</strong></td>\n<td style=\"text-align:left\">h<strong>i</strong> cr<strong>y</strong> sh<strong>y</strong> fl<strong>y</strong></td>\n<td style=\"text-align:left\">n<strong>o</strong> g<strong>o</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"辅元组合\"><a href=\"#辅元组合\" class=\"headerlink\" title=\"辅元组合\"></a>辅元组合</h2><p><strong>ca</strong>ke<br><strong>co</strong>ke<br><strong>cu</strong>p<br><strong>cl</strong>ock</p>\n<h2 id=\"辅音字母Y\"><a href=\"#辅音字母Y\" class=\"headerlink\" title=\"辅音字母Y\"></a>辅音字母Y</h2><h3 id=\"词首-j-gt-re\"><a href=\"#词首-j-gt-re\" class=\"headerlink\" title=\"词首[j]-&gt;re\"></a>词首[j]-&gt;re</h3><p><strong>y</strong>es<br><strong>y</strong>ou</p>\n<h3 id=\"单元y结尾-ai\"><a href=\"#单元y结尾-ai\" class=\"headerlink\" title=\"单元y结尾[ai]\"></a>单元y结尾[ai]</h3><p>m<strong>y</strong> fl<strong>y</strong></p>\n<h3 id=\"非重读音-i-gt-if\"><a href=\"#非重读音-i-gt-if\" class=\"headerlink\" title=\"非重读音[i]-&gt;if\"></a>非重读音[i]-&gt;if</h3><p>cand<strong>y</strong><br>sorr<strong>y</strong></p>\n<h2 id=\"辅音组合新音\"><a href=\"#辅音组合新音\" class=\"headerlink\" title=\"辅音组合新音\"></a>辅音组合新音</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">组合</th>\n<th style=\"text-align:left\">发音</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>R</strong>组合</td>\n<td style=\"text-align:left\">—</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dr</td>\n<td style=\"text-align:left\">[dr] 者</td>\n<td style=\"text-align:left\"><strong>dr</strong>ive d<strong>ri</strong>ve? d<strong>ru</strong>id?</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tr</td>\n<td style=\"text-align:left\">[tr] che</td>\n<td style=\"text-align:left\"><strong>tr</strong>y <strong>tr</strong>ain <strong>tr</strong>anslate</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>S</strong>组合</td>\n<td style=\"text-align:left\">—</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sp</td>\n<td style=\"text-align:left\">[sp] be</td>\n<td style=\"text-align:left\"><strong>sp</strong>oon <strong>sp</strong>ot <strong>sp</strong>ring</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">st</td>\n<td style=\"text-align:left\">[st] sS</td>\n<td style=\"text-align:left\"><strong>st</strong>and <strong>st</strong>ack <strong>st</strong>eam</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>H</strong>组合</td>\n<td style=\"text-align:left\">—</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ch</td>\n<td style=\"text-align:left\">[tʃ] qu</td>\n<td style=\"text-align:left\">pea<strong>ch</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh</td>\n<td style=\"text-align:left\">[ʃ] xu</td>\n<td style=\"text-align:left\"><strong>sh</strong>eep <strong>sh</strong>ell</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ph</td>\n<td style=\"text-align:left\">[f]</td>\n<td style=\"text-align:left\"><strong>ph</strong>one</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wh</td>\n<td style=\"text-align:left\">[w]</td>\n<td style=\"text-align:left\"><strong>wh</strong>ere <strong>wh</strong>at</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">th</td>\n<td style=\"text-align:left\">[ð] zhi</td>\n<td style=\"text-align:left\"><strong>th</strong>is <strong>th</strong>at <strong>th</strong>eme <strong>th</strong>ink</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>G</strong>组合</td>\n<td style=\"text-align:left\">—</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ng</td>\n<td style=\"text-align:left\">[ɔŋ] en</td>\n<td style=\"text-align:left\">so<strong>ng</strong> si<strong>ng</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ge</td>\n<td style=\"text-align:left\">[dʒ] qu</td>\n<td style=\"text-align:left\">ca<strong>ge</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gh</td>\n<td style=\"text-align:left\">[f]</td>\n<td style=\"text-align:left\">lau<strong>gh</strong> rou<strong>gh</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">igh</td>\n<td style=\"text-align:left\">[aɪ] 哑音</td>\n<td style=\"text-align:left\">r<strong>igh</strong>t</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">eigh</td>\n<td style=\"text-align:left\">[eɪ] 哑音</td>\n<td style=\"text-align:left\">e<strong>igh</strong>t</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ought</td>\n<td style=\"text-align:left\">[ɔːt] 哑音</td>\n<td style=\"text-align:left\">b<strong>ought</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aught</td>\n<td style=\"text-align:left\">[ɔːt] 哑音</td>\n<td style=\"text-align:left\">c<strong>aught</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"辅音组合哑音\"><a href=\"#辅音组合哑音\" class=\"headerlink\" title=\"辅音组合哑音\"></a>辅音组合哑音</h2><p>只出现在首尾？</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">组合</th>\n<th style=\"text-align:left\">发音</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">mb</td>\n<td style=\"text-align:left\">m [m]</td>\n<td style=\"text-align:left\">la<strong>mb</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ck</td>\n<td style=\"text-align:left\">k [k]</td>\n<td style=\"text-align:left\">kno<strong>ck</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">kn</td>\n<td style=\"text-align:left\">n [n]</td>\n<td style=\"text-align:left\"><strong>kn</strong>ock</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wr</td>\n<td style=\"text-align:left\">r [r]</td>\n<td style=\"text-align:left\"><strong>wr</strong>ite</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tch</td>\n<td style=\"text-align:left\">ch [tʃ] qu</td>\n<td style=\"text-align:left\">wa<strong>tch</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dge</td>\n<td style=\"text-align:left\">ge [dʒ] qu</td>\n<td style=\"text-align:left\">bri<strong>dge</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"????\"></a>????</h2><p>declared<br><strong>de</strong> <strong>clare</strong> <strong>d</strong>? 长音 短音？</p>\n<p>tor -&gt; che iterator</p>\n<p>pollute ? u 短音</p>\n<p>method tho(sou)</p>\n<p>thumb (θʌm) θ -&gt; s</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>sdfsdg</p>\n<p>|||</p>\n<h2 id=\"辅音字母\"><a href=\"#辅音字母\" class=\"headerlink\" title=\"辅音字母\"></a>辅音字母</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字母</th>\n<th style=\"text-align:left\">音标</th>\n<th style=\"text-align:left\">例子</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">切头法</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td>去掉单词读音前面部分，保留后面部分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">f</td>\n<td style=\"text-align:left\">ef</td>\n<td style=\"text-align:left\">fa af fax</td>\n<td>夫 悄悄话 不用声带 上面牙齿咬住下面嘴唇</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">l</td>\n<td style=\"text-align:left\">el</td>\n<td style=\"text-align:left\">la al lab</td>\n<td>呃 可用le代替 舌头顶上面牙齿</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m</td>\n<td style=\"text-align:left\">em</td>\n<td style=\"text-align:left\">ma am man</td>\n<td>en，闭嘴，用鼻子发音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">en</td>\n<td style=\"text-align:left\">na an man</td>\n<td>en，舌头顶上面牙齿，鼻子发音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:left\">es</td>\n<td style=\"text-align:left\">sa as sad</td>\n<td>s</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\">eks</td>\n<td style=\"text-align:left\">xa ax fax</td>\n<td>ks</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">去尾法</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td>去掉单词读取后面部分，保留前面部分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">b</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ba ab lab</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">da ad sad pad</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">pa ap pad zap</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">t</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ta at vat</td>\n<td>he</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">v</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">va av vat</td>\n<td>wu 上面牙齿咬住下面嘴唇</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">z</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">za az zap</td>\n<td>子</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">j</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ja aj jam</td>\n<td>者</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">k</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ka ak yak</td>\n<td>可</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">对比法</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td>汉语拼音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ga ag</td>\n<td>阁 快读</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">h</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ha hat</td>\n<td>he 不用声带</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ra rat</td>\n<td>e呃 舌头顶上面牙齿</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">wa wag</td>\n<td>we 合嘴然后张开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">y</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ya yak</td>\n<td>ye 惹</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">其它</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">c</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">ca ac cat</td>\n<td>k 渴</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">q</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">qua quack</td>\n<td>总是搭配qu 阔</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"元音\"><a href=\"#元音\" class=\"headerlink\" title=\"元音\"></a>元音</h2><p>元音一共5个：<strong>a</strong>、<strong>e</strong>、<strong>i(结尾y)</strong>、<strong>o</strong>、<strong>u</strong>。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">发音</th>\n<th style=\"text-align:left\">a</th>\n<th style=\"text-align:left\">e</th>\n<th style=\"text-align:left\">i(结尾y)</th>\n<th style=\"text-align:left\">o</th>\n<th style=\"text-align:left\">u</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">短音</td>\n<td style=\"text-align:left\"><strong>a</strong>t</td>\n<td style=\"text-align:left\"><strong>e</strong>gg</td>\n<td style=\"text-align:left\"><strong>i</strong>f</td>\n<td style=\"text-align:left\"><strong>o</strong>ff</td>\n<td style=\"text-align:left\"><strong>u</strong>p</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">长音（本音）</td>\n<td style=\"text-align:left\">n<strong>a</strong>me</td>\n<td style=\"text-align:left\">s<strong>ee</strong></td>\n<td style=\"text-align:left\">h<strong>i</strong>de</td>\n<td style=\"text-align:left\">g<strong>o</strong></td>\n<td style=\"text-align:left\">c<strong>u</strong>te</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>发音规律</strong></td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">短音（单元在头腰）</td>\n<td style=\"text-align:left\">c<strong>a</strong>t p<strong>a</strong>d</td>\n<td style=\"text-align:left\"><strong>e</strong>gg p<strong>e</strong>t</td>\n<td style=\"text-align:left\"><strong>i</strong>t <strong>i</strong>t s<strong>i</strong>t</td>\n<td style=\"text-align:left\">h<strong>o</strong>t p<strong>o</strong>t</td>\n<td style=\"text-align:left\"><strong>u</strong>p h<strong>u</strong>g</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">长音（元辅e，元本音，e闭嘴）</td>\n<td style=\"text-align:left\">c<strong>a</strong>k<strong>e</strong> n<strong>a</strong>m<strong>e</strong> g<strong>a</strong>t<strong>e</strong> t<strong>a</strong>p<strong>e</strong></td>\n<td style=\"text-align:left\"><strong>e</strong>v<strong>e</strong> p<strong>e</strong>t<strong>e</strong> th<strong>e</strong>s<strong>e</strong> th<strong>e</strong>m<strong>e</strong></td>\n<td style=\"text-align:left\">h<strong>i</strong>d<strong>e</strong> r<strong>i</strong>d<strong>e</strong> f<strong>i</strong>v<strong>e</strong> d<strong>i</strong>v<strong>e</strong> l<strong>i</strong>k<strong>e</strong> b<strong>i</strong>k<strong>e</strong> b<strong>i</strong>t<strong>e</strong> k<strong>i</strong>t<strong>e</strong></td>\n<td style=\"text-align:left\">c<strong>o</strong>k<strong>e</strong> j<strong>o</strong>k<strong>e</strong> h<strong>o</strong>m<strong>e</strong> b<strong>o</strong>n<strong>e</strong></td>\n<td style=\"text-align:left\">c<strong>u</strong>t<strong>e</strong> c<strong>u</strong>b<strong>e</strong> m<strong>u</strong>t<strong>e</strong> t<strong>u</strong>b<strong>e</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">长音（2个元音，前本后闭）</td>\n<td style=\"text-align:left\">w<strong>ai</strong>t r<strong>ai</strong>n</td>\n<td style=\"text-align:left\">s<strong>ea</strong> s<strong>ee</strong> r<strong>ea</strong>d b<strong>ee</strong></td>\n<td style=\"text-align:left\">l<strong>ie</strong> p<strong>ie</strong></td>\n<td style=\"text-align:left\">b<strong>oa</strong>t t<strong>oe</strong> r<strong>oa</strong>d d<strong>oe</strong></td>\n<td style=\"text-align:left\">c<strong>ue</strong> d<strong>ue</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">长音（单元结尾）</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">m<strong>e</strong> w<strong>e</strong> h<strong>e</strong> sh<strong>e</strong></td>\n<td style=\"text-align:left\">h<strong>i</strong> cr<strong>y</strong> sh<strong>y</strong> fl<strong>y</strong></td>\n<td style=\"text-align:left\">n<strong>o</strong> g<strong>o</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"辅元组合\"><a href=\"#辅元组合\" class=\"headerlink\" title=\"辅元组合\"></a>辅元组合</h2><p><strong>ca</strong>ke<br><strong>co</strong>ke<br><strong>cu</strong>p<br><strong>cl</strong>ock</p>\n<h2 id=\"辅音字母Y\"><a href=\"#辅音字母Y\" class=\"headerlink\" title=\"辅音字母Y\"></a>辅音字母Y</h2><h3 id=\"词首-j-gt-re\"><a href=\"#词首-j-gt-re\" class=\"headerlink\" title=\"词首[j]-&gt;re\"></a>词首[j]-&gt;re</h3><p><strong>y</strong>es<br><strong>y</strong>ou</p>\n<h3 id=\"单元y结尾-ai\"><a href=\"#单元y结尾-ai\" class=\"headerlink\" title=\"单元y结尾[ai]\"></a>单元y结尾[ai]</h3><p>m<strong>y</strong> fl<strong>y</strong></p>\n<h3 id=\"非重读音-i-gt-if\"><a href=\"#非重读音-i-gt-if\" class=\"headerlink\" title=\"非重读音[i]-&gt;if\"></a>非重读音[i]-&gt;if</h3><p>cand<strong>y</strong><br>sorr<strong>y</strong></p>\n<h2 id=\"辅音组合新音\"><a href=\"#辅音组合新音\" class=\"headerlink\" title=\"辅音组合新音\"></a>辅音组合新音</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">组合</th>\n<th style=\"text-align:left\">发音</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>R</strong>组合</td>\n<td style=\"text-align:left\">—</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dr</td>\n<td style=\"text-align:left\">[dr] 者</td>\n<td style=\"text-align:left\"><strong>dr</strong>ive d<strong>ri</strong>ve? d<strong>ru</strong>id?</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tr</td>\n<td style=\"text-align:left\">[tr] che</td>\n<td style=\"text-align:left\"><strong>tr</strong>y <strong>tr</strong>ain <strong>tr</strong>anslate</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>S</strong>组合</td>\n<td style=\"text-align:left\">—</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sp</td>\n<td style=\"text-align:left\">[sp] be</td>\n<td style=\"text-align:left\"><strong>sp</strong>oon <strong>sp</strong>ot <strong>sp</strong>ring</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">st</td>\n<td style=\"text-align:left\">[st] sS</td>\n<td style=\"text-align:left\"><strong>st</strong>and <strong>st</strong>ack <strong>st</strong>eam</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>H</strong>组合</td>\n<td style=\"text-align:left\">—</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ch</td>\n<td style=\"text-align:left\">[tʃ] qu</td>\n<td style=\"text-align:left\">pea<strong>ch</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh</td>\n<td style=\"text-align:left\">[ʃ] xu</td>\n<td style=\"text-align:left\"><strong>sh</strong>eep <strong>sh</strong>ell</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ph</td>\n<td style=\"text-align:left\">[f]</td>\n<td style=\"text-align:left\"><strong>ph</strong>one</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wh</td>\n<td style=\"text-align:left\">[w]</td>\n<td style=\"text-align:left\"><strong>wh</strong>ere <strong>wh</strong>at</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">th</td>\n<td style=\"text-align:left\">[ð] zhi</td>\n<td style=\"text-align:left\"><strong>th</strong>is <strong>th</strong>at <strong>th</strong>eme <strong>th</strong>ink</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>G</strong>组合</td>\n<td style=\"text-align:left\">—</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ng</td>\n<td style=\"text-align:left\">[ɔŋ] en</td>\n<td style=\"text-align:left\">so<strong>ng</strong> si<strong>ng</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ge</td>\n<td style=\"text-align:left\">[dʒ] qu</td>\n<td style=\"text-align:left\">ca<strong>ge</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gh</td>\n<td style=\"text-align:left\">[f]</td>\n<td style=\"text-align:left\">lau<strong>gh</strong> rou<strong>gh</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">igh</td>\n<td style=\"text-align:left\">[aɪ] 哑音</td>\n<td style=\"text-align:left\">r<strong>igh</strong>t</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">eigh</td>\n<td style=\"text-align:left\">[eɪ] 哑音</td>\n<td style=\"text-align:left\">e<strong>igh</strong>t</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ought</td>\n<td style=\"text-align:left\">[ɔːt] 哑音</td>\n<td style=\"text-align:left\">b<strong>ought</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aught</td>\n<td style=\"text-align:left\">[ɔːt] 哑音</td>\n<td style=\"text-align:left\">c<strong>aught</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"辅音组合哑音\"><a href=\"#辅音组合哑音\" class=\"headerlink\" title=\"辅音组合哑音\"></a>辅音组合哑音</h2><p>只出现在首尾？</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">组合</th>\n<th style=\"text-align:left\">发音</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">mb</td>\n<td style=\"text-align:left\">m [m]</td>\n<td style=\"text-align:left\">la<strong>mb</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ck</td>\n<td style=\"text-align:left\">k [k]</td>\n<td style=\"text-align:left\">kno<strong>ck</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">kn</td>\n<td style=\"text-align:left\">n [n]</td>\n<td style=\"text-align:left\"><strong>kn</strong>ock</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wr</td>\n<td style=\"text-align:left\">r [r]</td>\n<td style=\"text-align:left\"><strong>wr</strong>ite</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tch</td>\n<td style=\"text-align:left\">ch [tʃ] qu</td>\n<td style=\"text-align:left\">wa<strong>tch</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dge</td>\n<td style=\"text-align:left\">ge [dʒ] qu</td>\n<td style=\"text-align:left\">bri<strong>dge</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"????\"></a>????</h2><p>declared<br><strong>de</strong> <strong>clare</strong> <strong>d</strong>? 长音 短音？</p>\n<p>tor -&gt; che iterator</p>\n<p>pollute ? u 短音</p>\n<p>method tho(sou)</p>\n<p>thumb (θʌm) θ -&gt; s</p>\n"},{"title":"黑苹果使用指南","date":"2019-09-01T16:00:00.000Z","_content":"\n这里是常用的黑苹果指南。\n\n\n## 长按按键不能连续输入\n写代码时，会遇到连续输入同一个字符的情况，此时希望按住一个按键就能够连续输入，例如想要输入“*************\"，按住键就可以连续输入；但是实际情况是想要输入几个就要按几次，很麻烦；并且如果长按的话会出现下图的情况：\n\n![](001.webp)\n\n解决方法: \n\n1. 打开终端输入\n    ```bash\n    defaults write NSGlobalDomain ApplePressAndHoldEnabled -boolean false\n    ```\n\n    或者\n    ```bash\n    defaults write -g ApplePressAndHoldEnabled -bool false\n    ```\n\n1. 重启电脑\n\n> 备注：如果想要关闭只需要将上述命令行中的false改为true，重启电脑即可。\n\n## 开启F1-F12功能键\n使用Mac系统的人都知道，Mac系统默认是没有开启F1-F12的使用的，平时我们使用的系统都可以使用键盘上的功能键，下面我们就可看看，如何设置才能使用Mac键盘上的功能键。\n\n1. 首先在系统桌面的左上角点击苹果图标，找到“系统偏好设置”，点击打开“系统偏好设置”面板，如图所示。\n    ![](002.jpg)\n\n1. 在打开的“系统偏好设置”面板里的“硬件”里找到“键盘”，点击它。\n    ![](003.jpg)\n\n1. 在打开的“键盘”面板里找到“键盘”，这里有“键盘”和“键盘快捷键”两项，如图所示。\n    ![](004.jpg)\n\n1. 在“键盘”选项里找到“将F1、F2”等键用作标准功能键，把它前面的勾选上，如图所示。\n    ![](005.jpg)\n\n## 使用Karabiner映射Window键盘\n[Karabiner](https://link.jianshu.com/?t=https://github.com/wwwjfy/Karabiner-Elements/releases)是一款Mac平台修改键位映射的软件，有任何需要更改键位默认行为的需求都可以尝试用Karabiner做相应的映射，开源且免费。\n\n![](006.png)\n\n## 显示隐藏文件\n显示隐藏文件：\n```bash\ndefaults write com.apple.Finder AppleShowAllFiles YES;KillAll Finder\n```\n\n不显示隐藏文件：\n```bash\ndefaults write com.apple.Finder AppleShowAllFiles NO;KillAll Finder\n```\n\n## Homebrew\nHomebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。由于众所周知的原因，Homebrew在国内使用受到诸多限制，以下为改进方法（2020-04-07 测试成功）。\n\n### 安装（2020-04-07）\n执行以下命令安装：\n```bash\n/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n```\n\n### 切换源（2020-04-07）\n直接使用 Homebrew 还需要更改默认源，不然谁用谁想打人，原因你懂的。以下是将默认源替换为国内 USTC 源的方法。\n\n替换核心软件仓库：\n```bash\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n```\n\n替换 cask 软件仓库（提供 macOS 应用和大型二进制文件）：\n```bash\ncd \"$(brew --repo)\"/Library/Taps/caskroom/homebrew-cask\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git\n```\n\n替换 Bottles 源（Homebrew 预编译二进制软件包）：\n```bash\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n```","source":"_posts/其它/黑苹果使用指南.md","raw":"---\ntitle: 黑苹果使用指南\n\ncategories:\n- 其它\n\ndate: 2019-09-02\n---\n\n这里是常用的黑苹果指南。\n\n\n## 长按按键不能连续输入\n写代码时，会遇到连续输入同一个字符的情况，此时希望按住一个按键就能够连续输入，例如想要输入“*************\"，按住键就可以连续输入；但是实际情况是想要输入几个就要按几次，很麻烦；并且如果长按的话会出现下图的情况：\n\n![](001.webp)\n\n解决方法: \n\n1. 打开终端输入\n    ```bash\n    defaults write NSGlobalDomain ApplePressAndHoldEnabled -boolean false\n    ```\n\n    或者\n    ```bash\n    defaults write -g ApplePressAndHoldEnabled -bool false\n    ```\n\n1. 重启电脑\n\n> 备注：如果想要关闭只需要将上述命令行中的false改为true，重启电脑即可。\n\n## 开启F1-F12功能键\n使用Mac系统的人都知道，Mac系统默认是没有开启F1-F12的使用的，平时我们使用的系统都可以使用键盘上的功能键，下面我们就可看看，如何设置才能使用Mac键盘上的功能键。\n\n1. 首先在系统桌面的左上角点击苹果图标，找到“系统偏好设置”，点击打开“系统偏好设置”面板，如图所示。\n    ![](002.jpg)\n\n1. 在打开的“系统偏好设置”面板里的“硬件”里找到“键盘”，点击它。\n    ![](003.jpg)\n\n1. 在打开的“键盘”面板里找到“键盘”，这里有“键盘”和“键盘快捷键”两项，如图所示。\n    ![](004.jpg)\n\n1. 在“键盘”选项里找到“将F1、F2”等键用作标准功能键，把它前面的勾选上，如图所示。\n    ![](005.jpg)\n\n## 使用Karabiner映射Window键盘\n[Karabiner](https://link.jianshu.com/?t=https://github.com/wwwjfy/Karabiner-Elements/releases)是一款Mac平台修改键位映射的软件，有任何需要更改键位默认行为的需求都可以尝试用Karabiner做相应的映射，开源且免费。\n\n![](006.png)\n\n## 显示隐藏文件\n显示隐藏文件：\n```bash\ndefaults write com.apple.Finder AppleShowAllFiles YES;KillAll Finder\n```\n\n不显示隐藏文件：\n```bash\ndefaults write com.apple.Finder AppleShowAllFiles NO;KillAll Finder\n```\n\n## Homebrew\nHomebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。由于众所周知的原因，Homebrew在国内使用受到诸多限制，以下为改进方法（2020-04-07 测试成功）。\n\n### 安装（2020-04-07）\n执行以下命令安装：\n```bash\n/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n```\n\n### 切换源（2020-04-07）\n直接使用 Homebrew 还需要更改默认源，不然谁用谁想打人，原因你懂的。以下是将默认源替换为国内 USTC 源的方法。\n\n替换核心软件仓库：\n```bash\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n```\n\n替换 cask 软件仓库（提供 macOS 应用和大型二进制文件）：\n```bash\ncd \"$(brew --repo)\"/Library/Taps/caskroom/homebrew-cask\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git\n```\n\n替换 Bottles 源（Homebrew 预编译二进制软件包）：\n```bash\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n```","slug":"其它/黑苹果使用指南","published":1,"updated":"2020-04-12T08:28:29.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m6f004jm33pnv1xjzo4","content":"<p>这里是常用的黑苹果指南。</p>\n<h2 id=\"长按按键不能连续输入\"><a href=\"#长按按键不能连续输入\" class=\"headerlink\" title=\"长按按键不能连续输入\"></a>长按按键不能连续输入</h2><p>写代码时，会遇到连续输入同一个字符的情况，此时希望按住一个按键就能够连续输入，例如想要输入“<strong><strong><strong>*</strong></strong></strong>“，按住键就可以连续输入；但是实际情况是想要输入几个就要按几次，很麻烦；并且如果长按的话会出现下图的情况：</p>\n<p><img src=\"001.webp\" alt=\"\"></p>\n<p>解决方法: </p>\n<ol>\n<li><p>打开终端输入</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write NSGlobalDomain ApplePressAndHoldEnabled -boolean <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p> 或者</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write -g ApplePressAndHoldEnabled -bool <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启电脑</p>\n</li>\n</ol>\n<blockquote>\n<p>备注：如果想要关闭只需要将上述命令行中的false改为true，重启电脑即可。</p>\n</blockquote>\n<h2 id=\"开启F1-F12功能键\"><a href=\"#开启F1-F12功能键\" class=\"headerlink\" title=\"开启F1-F12功能键\"></a>开启F1-F12功能键</h2><p>使用Mac系统的人都知道，Mac系统默认是没有开启F1-F12的使用的，平时我们使用的系统都可以使用键盘上的功能键，下面我们就可看看，如何设置才能使用Mac键盘上的功能键。</p>\n<ol>\n<li><p>首先在系统桌面的左上角点击苹果图标，找到“系统偏好设置”，点击打开“系统偏好设置”面板，如图所示。<br> <img src=\"002.jpg\" alt=\"\"></p>\n</li>\n<li><p>在打开的“系统偏好设置”面板里的“硬件”里找到“键盘”，点击它。<br> <img src=\"003.jpg\" alt=\"\"></p>\n</li>\n<li><p>在打开的“键盘”面板里找到“键盘”，这里有“键盘”和“键盘快捷键”两项，如图所示。<br> <img src=\"004.jpg\" alt=\"\"></p>\n</li>\n<li><p>在“键盘”选项里找到“将F1、F2”等键用作标准功能键，把它前面的勾选上，如图所示。<br> <img src=\"005.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"使用Karabiner映射Window键盘\"><a href=\"#使用Karabiner映射Window键盘\" class=\"headerlink\" title=\"使用Karabiner映射Window键盘\"></a>使用Karabiner映射Window键盘</h2><p><a href=\"https://link.jianshu.com/?t=https://github.com/wwwjfy/Karabiner-Elements/releases\">Karabiner</a>是一款Mac平台修改键位映射的软件，有任何需要更改键位默认行为的需求都可以尝试用Karabiner做相应的映射，开源且免费。</p>\n<p><img src=\"006.png\" alt=\"\"></p>\n<h2 id=\"显示隐藏文件\"><a href=\"#显示隐藏文件\" class=\"headerlink\" title=\"显示隐藏文件\"></a>显示隐藏文件</h2><p>显示隐藏文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.Finder AppleShowAllFiles YES;KillAll Finder</span><br></pre></td></tr></table></figure></p>\n<p>不显示隐藏文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.Finder AppleShowAllFiles NO;KillAll Finder</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h2><p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。由于众所周知的原因，Homebrew在国内使用受到诸多限制，以下为改进方法（2020-04-07 测试成功）。</p>\n<h3 id=\"安装（2020-04-07）\"><a href=\"#安装（2020-04-07）\" class=\"headerlink\" title=\"安装（2020-04-07）\"></a>安装（2020-04-07）</h3><p>执行以下命令安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/zsh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"切换源（2020-04-07）\"><a href=\"#切换源（2020-04-07）\" class=\"headerlink\" title=\"切换源（2020-04-07）\"></a>切换源（2020-04-07）</h3><p>直接使用 Homebrew 还需要更改默认源，不然谁用谁想打人，原因你懂的。以下是将默认源替换为国内 USTC 源的方法。</p>\n<p>替换核心软件仓库：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure></p>\n<p>替换 cask 软件仓库（提供 macOS 应用和大型二进制文件）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span>/Library/Taps/caskroom/homebrew-cask</span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure></p>\n<p>替换 Bottles 源（Homebrew 预编译二进制软件包）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>这里是常用的黑苹果指南。</p>\n<h2 id=\"长按按键不能连续输入\"><a href=\"#长按按键不能连续输入\" class=\"headerlink\" title=\"长按按键不能连续输入\"></a>长按按键不能连续输入</h2><p>写代码时，会遇到连续输入同一个字符的情况，此时希望按住一个按键就能够连续输入，例如想要输入“<strong><strong><strong>*</strong></strong></strong>“，按住键就可以连续输入；但是实际情况是想要输入几个就要按几次，很麻烦；并且如果长按的话会出现下图的情况：</p>\n<p><img src=\"001.webp\" alt=\"\"></p>\n<p>解决方法: </p>\n<ol>\n<li><p>打开终端输入</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write NSGlobalDomain ApplePressAndHoldEnabled -boolean <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p> 或者</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write -g ApplePressAndHoldEnabled -bool <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启电脑</p>\n</li>\n</ol>\n<blockquote>\n<p>备注：如果想要关闭只需要将上述命令行中的false改为true，重启电脑即可。</p>\n</blockquote>\n<h2 id=\"开启F1-F12功能键\"><a href=\"#开启F1-F12功能键\" class=\"headerlink\" title=\"开启F1-F12功能键\"></a>开启F1-F12功能键</h2><p>使用Mac系统的人都知道，Mac系统默认是没有开启F1-F12的使用的，平时我们使用的系统都可以使用键盘上的功能键，下面我们就可看看，如何设置才能使用Mac键盘上的功能键。</p>\n<ol>\n<li><p>首先在系统桌面的左上角点击苹果图标，找到“系统偏好设置”，点击打开“系统偏好设置”面板，如图所示。<br> <img src=\"002.jpg\" alt=\"\"></p>\n</li>\n<li><p>在打开的“系统偏好设置”面板里的“硬件”里找到“键盘”，点击它。<br> <img src=\"003.jpg\" alt=\"\"></p>\n</li>\n<li><p>在打开的“键盘”面板里找到“键盘”，这里有“键盘”和“键盘快捷键”两项，如图所示。<br> <img src=\"004.jpg\" alt=\"\"></p>\n</li>\n<li><p>在“键盘”选项里找到“将F1、F2”等键用作标准功能键，把它前面的勾选上，如图所示。<br> <img src=\"005.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"使用Karabiner映射Window键盘\"><a href=\"#使用Karabiner映射Window键盘\" class=\"headerlink\" title=\"使用Karabiner映射Window键盘\"></a>使用Karabiner映射Window键盘</h2><p><a href=\"https://link.jianshu.com/?t=https://github.com/wwwjfy/Karabiner-Elements/releases\">Karabiner</a>是一款Mac平台修改键位映射的软件，有任何需要更改键位默认行为的需求都可以尝试用Karabiner做相应的映射，开源且免费。</p>\n<p><img src=\"006.png\" alt=\"\"></p>\n<h2 id=\"显示隐藏文件\"><a href=\"#显示隐藏文件\" class=\"headerlink\" title=\"显示隐藏文件\"></a>显示隐藏文件</h2><p>显示隐藏文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.Finder AppleShowAllFiles YES;KillAll Finder</span><br></pre></td></tr></table></figure></p>\n<p>不显示隐藏文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.Finder AppleShowAllFiles NO;KillAll Finder</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h2><p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。由于众所周知的原因，Homebrew在国内使用受到诸多限制，以下为改进方法（2020-04-07 测试成功）。</p>\n<h3 id=\"安装（2020-04-07）\"><a href=\"#安装（2020-04-07）\" class=\"headerlink\" title=\"安装（2020-04-07）\"></a>安装（2020-04-07）</h3><p>执行以下命令安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/zsh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"切换源（2020-04-07）\"><a href=\"#切换源（2020-04-07）\" class=\"headerlink\" title=\"切换源（2020-04-07）\"></a>切换源（2020-04-07）</h3><p>直接使用 Homebrew 还需要更改默认源，不然谁用谁想打人，原因你懂的。以下是将默认源替换为国内 USTC 源的方法。</p>\n<p>替换核心软件仓库：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure></p>\n<p>替换 cask 软件仓库（提供 macOS 应用和大型二进制文件）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span>/Library/Taps/caskroom/homebrew-cask</span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure></p>\n<p>替换 Bottles 源（Homebrew 预编译二进制软件包）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p>\n"},{"title":"1","date":"2020-01-21T16:00:00.000Z","_content":"\n\n## 同步器Synchronizer\n\n## 同步容器\n\n## 线程池ThreadPool、executor\n\n#### 同步和非同步的方法是否可以同时调用","source":"_posts/多线程高并发编程/001.md","raw":"---\ntitle: 001\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n\n\n## 同步器Synchronizer\n\n## 同步容器\n\n## 线程池ThreadPool、executor\n\n#### 同步和非同步的方法是否可以同时调用","slug":"多线程高并发编程/001","published":1,"updated":"2020-04-12T08:28:29.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m6i004om33pi0pf3i8q","content":"<h2 id=\"同步器Synchronizer\"><a href=\"#同步器Synchronizer\" class=\"headerlink\" title=\"同步器Synchronizer\"></a>同步器Synchronizer</h2><h2 id=\"同步容器\"><a href=\"#同步容器\" class=\"headerlink\" title=\"同步容器\"></a>同步容器</h2><h2 id=\"线程池ThreadPool、executor\"><a href=\"#线程池ThreadPool、executor\" class=\"headerlink\" title=\"线程池ThreadPool、executor\"></a>线程池ThreadPool、executor</h2><h4 id=\"同步和非同步的方法是否可以同时调用\"><a href=\"#同步和非同步的方法是否可以同时调用\" class=\"headerlink\" title=\"同步和非同步的方法是否可以同时调用\"></a>同步和非同步的方法是否可以同时调用</h4>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"同步器Synchronizer\"><a href=\"#同步器Synchronizer\" class=\"headerlink\" title=\"同步器Synchronizer\"></a>同步器Synchronizer</h2><h2 id=\"同步容器\"><a href=\"#同步容器\" class=\"headerlink\" title=\"同步容器\"></a>同步容器</h2><h2 id=\"线程池ThreadPool、executor\"><a href=\"#线程池ThreadPool、executor\" class=\"headerlink\" title=\"线程池ThreadPool、executor\"></a>线程池ThreadPool、executor</h2><h4 id=\"同步和非同步的方法是否可以同时调用\"><a href=\"#同步和非同步的方法是否可以同时调用\" class=\"headerlink\" title=\"同步和非同步的方法是否可以同时调用\"></a>同步和非同步的方法是否可以同时调用</h4>"},{"title":"用户帐号系统设计","date":"2020-02-06T16:00:00.000Z","_content":"用户系统，主要分为账号体系和用户信息两大类。账号体系包括，登陆验证、注册、第三方授权、以及权限管理。用户信息包括，用户地理位置、用户属性、用户设备信息、还有用户日志信息。\n\n## 登陆验证\n在一般项目账号体系中，一般会要求支持手机、邮箱、账号、QQ、微信、微博实现登陆。后面三种方式都是基于第三方授权后，完成的身份验证。手机、邮箱、账号则是相对传统的登录方式。\n\n用户身份与登录的授权方式是独立开的，即用户uid和登录方式是一对多的关系。举例来说，用户A在使用微博授权登陆后，服务端鉴别身份信息为uid=123。用户A下次使用微信登陆，服务端鉴别身份同样为uid=123。不存在同一用户A拥有多个账号信息的现象。\n\n## 用户信息\n用户信息，为便于扩展，分成两类。用户基础信息和用户拓展信息。基本信息用来保存用户的基本属性，年龄、性别、生日、头像、手机号码等。扩展信息，用来保存用户的设备信息或其他可扩展的内容。另外还有位置信息，这个可独立出来，也可合并到扩展信息中，根据自己的使用场景来定。\n\n## 用户日志信息\n日志信息，用来保存用户注册或者登陆行为的。另外会有一些修改密码或者修改重要信息的日志记录。\n\n## 全局uid\n建议不要使用表的主键作为用户ID，而是使用ID生成器(发号器)生成用户的唯一标示guid。当用户量急剧上升时，往往会采取分库分表的方法，然后通过将uid取余写到不同的表中。如果单纯的以某个表主键作为ID。会限制插入性能和增加业务复杂度,其次在分布式数据库中也无法保证ID唯一性。全局ID生成，是有很多方案的。简单一点，可以采用redis自增属性，因为其具有原子性，在分布式坏境中，能保证ID的唯一性。\n\n## Access Token\n与传统的Session相比，Access Token比较适合做RESTful Api开发。传统Web应用中，用户登陆后会写用户信息到cookie中，服务端通过Session就能得到用户的身份。\n\nAccess Token的是OAuth2.0中用户经过授权后，返回调用API的凭证。对于自己的应用来讲，用户在登录后，即返回Access Token。在token有效期内可凭借此凭证，调用其他接口。对于accesstoken的刷新有两种方案，第一种每次用户重启app时，重新refresh。第二种，在调用周期内服务端发现access token可能过期时，返回新的token给客户端。\n\n至于Access Token的生成，这个并没有规定，只要保证其唯一性即可。简单点，对用户uid和当前时间哈希得到新的Access Token，并设置过期时间。另外也可以采用JWT实现。\n\n## 要点\n1. 用户注册\n1. 用户登录\n1. 用户登录后身份校验\n1. 用户基本信息修改\n1. 用户安全中心\n\n## 划分\n1. 用户基本信息服务\n    提供用户的基本信息的获取和修改，该服务需要能够扛住较大的访问压力（当然也可以在调用方做缓存）\n1. 用户的注册和登录服务\n    提供用户的注册、登录授权颁发用户的登录标识\n1. 用户身份校验服务\n    对用户的登录标识进行校验，该服务需要扛住能够较大的访问压力（当然也可以在调用方做缓存）\n1. 用户安全中心服务\n    提供用户的重要信息的修改如登录的邮箱手机号，密码等。用户在进行这些敏感信息的修改是需要进行身份认证，来保证用户的安全性。\n\n## 用户信息表\n\n\n## 用户授权表\n|id|user_id|identity_type|identifier|credential|\n|:--|:--|:--|:--|:--|\n|1|1|email|123@example.com|123456|\n|2|1|phone|13888888888|123456|\n|3|1|weibo|-|微博Token|\n|4|2|username|moliniao|123456|\n|5|3|weixin|-|微信Token|\n\n## 交互流程\n","source":"_posts/单点登录/用户帐号系统设计.md","raw":"---\ntitle: 用户帐号系统设计\n\ncategories:\n- 单点登录\n\ntags:\n- 单点登录\n- 用户帐号系统设计\n\ndate: 2020-02-07\n---\n用户系统，主要分为账号体系和用户信息两大类。账号体系包括，登陆验证、注册、第三方授权、以及权限管理。用户信息包括，用户地理位置、用户属性、用户设备信息、还有用户日志信息。\n\n## 登陆验证\n在一般项目账号体系中，一般会要求支持手机、邮箱、账号、QQ、微信、微博实现登陆。后面三种方式都是基于第三方授权后，完成的身份验证。手机、邮箱、账号则是相对传统的登录方式。\n\n用户身份与登录的授权方式是独立开的，即用户uid和登录方式是一对多的关系。举例来说，用户A在使用微博授权登陆后，服务端鉴别身份信息为uid=123。用户A下次使用微信登陆，服务端鉴别身份同样为uid=123。不存在同一用户A拥有多个账号信息的现象。\n\n## 用户信息\n用户信息，为便于扩展，分成两类。用户基础信息和用户拓展信息。基本信息用来保存用户的基本属性，年龄、性别、生日、头像、手机号码等。扩展信息，用来保存用户的设备信息或其他可扩展的内容。另外还有位置信息，这个可独立出来，也可合并到扩展信息中，根据自己的使用场景来定。\n\n## 用户日志信息\n日志信息，用来保存用户注册或者登陆行为的。另外会有一些修改密码或者修改重要信息的日志记录。\n\n## 全局uid\n建议不要使用表的主键作为用户ID，而是使用ID生成器(发号器)生成用户的唯一标示guid。当用户量急剧上升时，往往会采取分库分表的方法，然后通过将uid取余写到不同的表中。如果单纯的以某个表主键作为ID。会限制插入性能和增加业务复杂度,其次在分布式数据库中也无法保证ID唯一性。全局ID生成，是有很多方案的。简单一点，可以采用redis自增属性，因为其具有原子性，在分布式坏境中，能保证ID的唯一性。\n\n## Access Token\n与传统的Session相比，Access Token比较适合做RESTful Api开发。传统Web应用中，用户登陆后会写用户信息到cookie中，服务端通过Session就能得到用户的身份。\n\nAccess Token的是OAuth2.0中用户经过授权后，返回调用API的凭证。对于自己的应用来讲，用户在登录后，即返回Access Token。在token有效期内可凭借此凭证，调用其他接口。对于accesstoken的刷新有两种方案，第一种每次用户重启app时，重新refresh。第二种，在调用周期内服务端发现access token可能过期时，返回新的token给客户端。\n\n至于Access Token的生成，这个并没有规定，只要保证其唯一性即可。简单点，对用户uid和当前时间哈希得到新的Access Token，并设置过期时间。另外也可以采用JWT实现。\n\n## 要点\n1. 用户注册\n1. 用户登录\n1. 用户登录后身份校验\n1. 用户基本信息修改\n1. 用户安全中心\n\n## 划分\n1. 用户基本信息服务\n    提供用户的基本信息的获取和修改，该服务需要能够扛住较大的访问压力（当然也可以在调用方做缓存）\n1. 用户的注册和登录服务\n    提供用户的注册、登录授权颁发用户的登录标识\n1. 用户身份校验服务\n    对用户的登录标识进行校验，该服务需要扛住能够较大的访问压力（当然也可以在调用方做缓存）\n1. 用户安全中心服务\n    提供用户的重要信息的修改如登录的邮箱手机号，密码等。用户在进行这些敏感信息的修改是需要进行身份认证，来保证用户的安全性。\n\n## 用户信息表\n\n\n## 用户授权表\n|id|user_id|identity_type|identifier|credential|\n|:--|:--|:--|:--|:--|\n|1|1|email|123@example.com|123456|\n|2|1|phone|13888888888|123456|\n|3|1|weibo|-|微博Token|\n|4|2|username|moliniao|123456|\n|5|3|weixin|-|微信Token|\n\n## 交互流程\n","slug":"单点登录/用户帐号系统设计","published":1,"updated":"2020-04-12T08:28:29.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m6o004qm33pcdrez88b","content":"<p>用户系统，主要分为账号体系和用户信息两大类。账号体系包括，登陆验证、注册、第三方授权、以及权限管理。用户信息包括，用户地理位置、用户属性、用户设备信息、还有用户日志信息。</p>\n<h2 id=\"登陆验证\"><a href=\"#登陆验证\" class=\"headerlink\" title=\"登陆验证\"></a>登陆验证</h2><p>在一般项目账号体系中，一般会要求支持手机、邮箱、账号、QQ、微信、微博实现登陆。后面三种方式都是基于第三方授权后，完成的身份验证。手机、邮箱、账号则是相对传统的登录方式。</p>\n<p>用户身份与登录的授权方式是独立开的，即用户uid和登录方式是一对多的关系。举例来说，用户A在使用微博授权登陆后，服务端鉴别身份信息为uid=123。用户A下次使用微信登陆，服务端鉴别身份同样为uid=123。不存在同一用户A拥有多个账号信息的现象。</p>\n<h2 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h2><p>用户信息，为便于扩展，分成两类。用户基础信息和用户拓展信息。基本信息用来保存用户的基本属性，年龄、性别、生日、头像、手机号码等。扩展信息，用来保存用户的设备信息或其他可扩展的内容。另外还有位置信息，这个可独立出来，也可合并到扩展信息中，根据自己的使用场景来定。</p>\n<h2 id=\"用户日志信息\"><a href=\"#用户日志信息\" class=\"headerlink\" title=\"用户日志信息\"></a>用户日志信息</h2><p>日志信息，用来保存用户注册或者登陆行为的。另外会有一些修改密码或者修改重要信息的日志记录。</p>\n<h2 id=\"全局uid\"><a href=\"#全局uid\" class=\"headerlink\" title=\"全局uid\"></a>全局uid</h2><p>建议不要使用表的主键作为用户ID，而是使用ID生成器(发号器)生成用户的唯一标示guid。当用户量急剧上升时，往往会采取分库分表的方法，然后通过将uid取余写到不同的表中。如果单纯的以某个表主键作为ID。会限制插入性能和增加业务复杂度,其次在分布式数据库中也无法保证ID唯一性。全局ID生成，是有很多方案的。简单一点，可以采用redis自增属性，因为其具有原子性，在分布式坏境中，能保证ID的唯一性。</p>\n<h2 id=\"Access-Token\"><a href=\"#Access-Token\" class=\"headerlink\" title=\"Access Token\"></a>Access Token</h2><p>与传统的Session相比，Access Token比较适合做RESTful Api开发。传统Web应用中，用户登陆后会写用户信息到cookie中，服务端通过Session就能得到用户的身份。</p>\n<p>Access Token的是OAuth2.0中用户经过授权后，返回调用API的凭证。对于自己的应用来讲，用户在登录后，即返回Access Token。在token有效期内可凭借此凭证，调用其他接口。对于accesstoken的刷新有两种方案，第一种每次用户重启app时，重新refresh。第二种，在调用周期内服务端发现access token可能过期时，返回新的token给客户端。</p>\n<p>至于Access Token的生成，这个并没有规定，只要保证其唯一性即可。简单点，对用户uid和当前时间哈希得到新的Access Token，并设置过期时间。另外也可以采用JWT实现。</p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ol>\n<li>用户注册</li>\n<li>用户登录</li>\n<li>用户登录后身份校验</li>\n<li>用户基本信息修改</li>\n<li>用户安全中心</li>\n</ol>\n<h2 id=\"划分\"><a href=\"#划分\" class=\"headerlink\" title=\"划分\"></a>划分</h2><ol>\n<li>用户基本信息服务<br> 提供用户的基本信息的获取和修改，该服务需要能够扛住较大的访问压力（当然也可以在调用方做缓存）</li>\n<li>用户的注册和登录服务<br> 提供用户的注册、登录授权颁发用户的登录标识</li>\n<li>用户身份校验服务<br> 对用户的登录标识进行校验，该服务需要扛住能够较大的访问压力（当然也可以在调用方做缓存）</li>\n<li>用户安全中心服务<br> 提供用户的重要信息的修改如登录的邮箱手机号，密码等。用户在进行这些敏感信息的修改是需要进行身份认证，来保证用户的安全性。</li>\n</ol>\n<h2 id=\"用户信息表\"><a href=\"#用户信息表\" class=\"headerlink\" title=\"用户信息表\"></a>用户信息表</h2><h2 id=\"用户授权表\"><a href=\"#用户授权表\" class=\"headerlink\" title=\"用户授权表\"></a>用户授权表</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">id</th>\n<th style=\"text-align:left\">user_id</th>\n<th style=\"text-align:left\">identity_type</th>\n<th style=\"text-align:left\">identifier</th>\n<th style=\"text-align:left\">credential</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">email</td>\n<td style=\"text-align:left\">123@example.com</td>\n<td style=\"text-align:left\">123456</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">phone</td>\n<td style=\"text-align:left\">13888888888</td>\n<td style=\"text-align:left\">123456</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">weibo</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">微博Token</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">username</td>\n<td style=\"text-align:left\">moliniao</td>\n<td style=\"text-align:left\">123456</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">weixin</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">微信Token</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"交互流程\"><a href=\"#交互流程\" class=\"headerlink\" title=\"交互流程\"></a>交互流程</h2>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>用户系统，主要分为账号体系和用户信息两大类。账号体系包括，登陆验证、注册、第三方授权、以及权限管理。用户信息包括，用户地理位置、用户属性、用户设备信息、还有用户日志信息。</p>\n<h2 id=\"登陆验证\"><a href=\"#登陆验证\" class=\"headerlink\" title=\"登陆验证\"></a>登陆验证</h2><p>在一般项目账号体系中，一般会要求支持手机、邮箱、账号、QQ、微信、微博实现登陆。后面三种方式都是基于第三方授权后，完成的身份验证。手机、邮箱、账号则是相对传统的登录方式。</p>\n<p>用户身份与登录的授权方式是独立开的，即用户uid和登录方式是一对多的关系。举例来说，用户A在使用微博授权登陆后，服务端鉴别身份信息为uid=123。用户A下次使用微信登陆，服务端鉴别身份同样为uid=123。不存在同一用户A拥有多个账号信息的现象。</p>\n<h2 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h2><p>用户信息，为便于扩展，分成两类。用户基础信息和用户拓展信息。基本信息用来保存用户的基本属性，年龄、性别、生日、头像、手机号码等。扩展信息，用来保存用户的设备信息或其他可扩展的内容。另外还有位置信息，这个可独立出来，也可合并到扩展信息中，根据自己的使用场景来定。</p>\n<h2 id=\"用户日志信息\"><a href=\"#用户日志信息\" class=\"headerlink\" title=\"用户日志信息\"></a>用户日志信息</h2><p>日志信息，用来保存用户注册或者登陆行为的。另外会有一些修改密码或者修改重要信息的日志记录。</p>\n<h2 id=\"全局uid\"><a href=\"#全局uid\" class=\"headerlink\" title=\"全局uid\"></a>全局uid</h2><p>建议不要使用表的主键作为用户ID，而是使用ID生成器(发号器)生成用户的唯一标示guid。当用户量急剧上升时，往往会采取分库分表的方法，然后通过将uid取余写到不同的表中。如果单纯的以某个表主键作为ID。会限制插入性能和增加业务复杂度,其次在分布式数据库中也无法保证ID唯一性。全局ID生成，是有很多方案的。简单一点，可以采用redis自增属性，因为其具有原子性，在分布式坏境中，能保证ID的唯一性。</p>\n<h2 id=\"Access-Token\"><a href=\"#Access-Token\" class=\"headerlink\" title=\"Access Token\"></a>Access Token</h2><p>与传统的Session相比，Access Token比较适合做RESTful Api开发。传统Web应用中，用户登陆后会写用户信息到cookie中，服务端通过Session就能得到用户的身份。</p>\n<p>Access Token的是OAuth2.0中用户经过授权后，返回调用API的凭证。对于自己的应用来讲，用户在登录后，即返回Access Token。在token有效期内可凭借此凭证，调用其他接口。对于accesstoken的刷新有两种方案，第一种每次用户重启app时，重新refresh。第二种，在调用周期内服务端发现access token可能过期时，返回新的token给客户端。</p>\n<p>至于Access Token的生成，这个并没有规定，只要保证其唯一性即可。简单点，对用户uid和当前时间哈希得到新的Access Token，并设置过期时间。另外也可以采用JWT实现。</p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ol>\n<li>用户注册</li>\n<li>用户登录</li>\n<li>用户登录后身份校验</li>\n<li>用户基本信息修改</li>\n<li>用户安全中心</li>\n</ol>\n<h2 id=\"划分\"><a href=\"#划分\" class=\"headerlink\" title=\"划分\"></a>划分</h2><ol>\n<li>用户基本信息服务<br> 提供用户的基本信息的获取和修改，该服务需要能够扛住较大的访问压力（当然也可以在调用方做缓存）</li>\n<li>用户的注册和登录服务<br> 提供用户的注册、登录授权颁发用户的登录标识</li>\n<li>用户身份校验服务<br> 对用户的登录标识进行校验，该服务需要扛住能够较大的访问压力（当然也可以在调用方做缓存）</li>\n<li>用户安全中心服务<br> 提供用户的重要信息的修改如登录的邮箱手机号，密码等。用户在进行这些敏感信息的修改是需要进行身份认证，来保证用户的安全性。</li>\n</ol>\n<h2 id=\"用户信息表\"><a href=\"#用户信息表\" class=\"headerlink\" title=\"用户信息表\"></a>用户信息表</h2><h2 id=\"用户授权表\"><a href=\"#用户授权表\" class=\"headerlink\" title=\"用户授权表\"></a>用户授权表</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">id</th>\n<th style=\"text-align:left\">user_id</th>\n<th style=\"text-align:left\">identity_type</th>\n<th style=\"text-align:left\">identifier</th>\n<th style=\"text-align:left\">credential</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">email</td>\n<td style=\"text-align:left\">123@example.com</td>\n<td style=\"text-align:left\">123456</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">phone</td>\n<td style=\"text-align:left\">13888888888</td>\n<td style=\"text-align:left\">123456</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">weibo</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">微博Token</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">username</td>\n<td style=\"text-align:left\">moliniao</td>\n<td style=\"text-align:left\">123456</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">weixin</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">微信Token</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"交互流程\"><a href=\"#交互流程\" class=\"headerlink\" title=\"交互流程\"></a>交互流程</h2>"},{"title":"2.1 火车售票问题","date":"2020-01-21T16:00:00.000Z","_content":"有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","source":"_posts/多线程高并发编程/2.1 火车售票问题.md","raw":"---\ntitle: 2.1 火车售票问题\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","slug":"多线程高并发编程/2.1 火车售票问题","published":1,"updated":"2020-04-12T08:28:29.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m6s004um33pjol7123x","content":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n"},{"title":"2.2 ConcurrentMap","date":"2020-01-21T16:00:00.000Z","_content":"","source":"_posts/多线程高并发编程/2.2 ConcurrentMap.md","raw":"---\ntitle: 2.2 ConcurrentMap\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n","slug":"多线程高并发编程/2.2 ConcurrentMap","published":1,"updated":"2020-04-12T08:28:29.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m6u004xm33pj923ki4i","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"2.2 ConcurrentMap","date":"2020-01-21T16:00:00.000Z","_content":"","source":"_posts/多线程高并发编程/2.3 CopyOnWriteList.md","raw":"---\ntitle: 2.2 ConcurrentMap\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n","slug":"多线程高并发编程/2.3 CopyOnWriteList","published":1,"updated":"2020-04-12T08:28:29.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m6z0051m33pgvtbqoh2","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"2.2 ConcurrentMap","date":"2020-01-21T16:00:00.000Z","_content":"","source":"_posts/多线程高并发编程/2.4 SynchronizedList.md","raw":"---\ntitle: 2.2 ConcurrentMap\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n","slug":"多线程高并发编程/2.4 SynchronizedList","published":1,"updated":"2020-04-12T08:28:29.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m710053m33pmfzwjra9","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"2.2 ConcurrentMap","date":"2020-01-21T16:00:00.000Z","_content":"","source":"_posts/多线程高并发编程/2.5 ConcurrentQueue.md","raw":"---\ntitle: 2.2 ConcurrentMap\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n","slug":"多线程高并发编程/2.5 ConcurrentQueue","published":1,"updated":"2020-04-12T08:28:29.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m730056m33p8y8yidpr","content":"","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":""},{"title":"2.1 火车售票问题","date":"2020-01-21T16:00:00.000Z","_content":"有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","source":"_posts/多线程高并发编程/3.1 Executor.md","raw":"---\ntitle: 2.1 火车售票问题\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","slug":"多线程高并发编程/3.1 Executor","published":1,"updated":"2020-04-12T08:28:29.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m750059m33pnl5unytb","content":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n"},{"title":"2.1 火车售票问题","date":"2020-01-21T16:00:00.000Z","_content":"有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","source":"_posts/多线程高并发编程/3.2 ExecutorService.md","raw":"---\ntitle: 2.1 火车售票问题\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","slug":"多线程高并发编程/3.2 ExecutorService","published":1,"updated":"2020-04-12T08:28:29.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m76005cm33ptmokhrrj","content":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n"},{"title":"2.1 火车售票问题","date":"2020-01-21T16:00:00.000Z","_content":"有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","source":"_posts/多线程高并发编程/3.3 Executors.md","raw":"---\ntitle: 2.1 火车售票问题\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","slug":"多线程高并发编程/3.3 Executors","published":1,"updated":"2020-04-12T08:28:29.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m78005gm33puu98q1pm","content":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n"},{"title":"2.1 火车售票问题","date":"2020-01-21T16:00:00.000Z","_content":"有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","source":"_posts/多线程高并发编程/3.4 ThreadPool.md","raw":"---\ntitle: 2.1 火车售票问题\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","slug":"多线程高并发编程/3.4 ThreadPool","published":1,"updated":"2020-04-12T08:28:29.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m79005im33phliuuo4n","content":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n"},{"title":"2.1 火车售票问题","date":"2020-01-21T16:00:00.000Z","_content":"有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","source":"_posts/多线程高并发编程/3.5 Future.md","raw":"---\ntitle: 2.1 火车售票问题\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","slug":"多线程高并发编程/3.5 Future","published":1,"updated":"2020-04-12T08:28:29.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m7e005nm33pi9umdub8","content":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n"},{"title":"2.1 火车售票问题","date":"2020-01-21T16:00:00.000Z","_content":"有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","source":"_posts/多线程高并发编程/3.6 ParallelComputing.md","raw":"---\ntitle: 2.1 火车售票问题\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。\n\n## 实现一\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里程序有2个问题：\n1. 判断数量和售卖不是原子性的，有可能超票\n1. 售卖`remove`也不是原子性的，有可能卖重\n\n## 实现二\n```java\nprivate static Vector<String> tickets = new Vector<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (tickets.size() > 0) {\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + tickets.remove(0));\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`Vetor`容器，它是线程安全的，解决了售卖`remove`的原子性问题，但是判断数量和售卖依然是分离的。\n\n## 实现三\n```java\nprivate static List<String> tickets = new ArrayList<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                synchronized (tickets) {\n\n                    if (tickets.size() <= 0) break;\n                    // 售卖操作\n                    TimeUnit.SECONEDS.sleep(10);\n                    System.out.println(\"销售了--\" + tickets.remove(0));\n                }\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了同步锁`synchronized`，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。\n\n## 实现四\n```java\nprivate Queue<String> tickets = new ConcurrentLinkedQueue<>();\n\nstatic {\n    for (int i = 0; i < 10000; i++) {\n        tickets.add(\"票编号：\" + i);\n    }\n}\n\npublic static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            while (true) {\n                String s = tickets.poll();\n                if (s == null) break;\n                // 售卖操作\n                TimeUnit.SECONEDS.sleep(10);\n                System.out.println(\"销售了--\" + s);\n            }\n        }).start();\n    }\n}\n```\n\n这里使用了`ConcurrentLinkedQueue`，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。`ConcurrentLinkedQueue`是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。\n","slug":"多线程高并发编程/3.6 ParallelComputing","published":1,"updated":"2020-04-12T08:28:29.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m7f005pm33panzxid6i","content":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>有N张火车票，每张票都有一个编号，同时有10个窗口对外售票。请写一个模拟程序。</p>\n<h2 id=\"实现一\"><a href=\"#实现一\" class=\"headerlink\" title=\"实现一\"></a>实现一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里程序有2个问题：</p>\n<ol>\n<li>判断数量和售卖不是原子性的，有可能超票</li>\n<li>售卖<code>remove</code>也不是原子性的，有可能卖重</li>\n</ol>\n<h2 id=\"实现二\"><a href=\"#实现二\" class=\"headerlink\" title=\"实现二\"></a>实现二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; tickets = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tickets.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>Vetor</code>容器，它是线程安全的，解决了售卖<code>remove</code>的原子性问题，但是判断数量和售卖依然是分离的。</p>\n<h2 id=\"实现三\"><a href=\"#实现三\" class=\"headerlink\" title=\"实现三\"></a>实现三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; tickets = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (tickets) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tickets.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                    TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"销售了--\"</span> + tickets.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了同步锁<code>synchronized</code>，解决了超卖和重卖的问题，但每次只能有一个售票的操作，影响了性能。</p>\n<h2 id=\"实现四\"><a href=\"#实现四\" class=\"headerlink\" title=\"实现四\"></a>实现四</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Queue&lt;String&gt; tickets = <span class=\"keyword\">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        tickets.add(<span class=\"string\">\"票编号：\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                String s = tickets.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 售卖操作</span></span><br><span class=\"line\">                TimeUnit.SECONEDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"销售了--\"</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了<code>ConcurrentLinkedQueue</code>，一个基于链接节点的无界线程安全队列。此队列按照先进先出的原则对元素进行排序。<code>ConcurrentLinkedQueue</code>是支持并发操作的，所以效率相当高，也没有超卖和重卖的问题。</p>\n"},{"title":"4.2 FixedThreadPool","date":"2020-01-23T07:00:00.000Z","_content":"FixedThreadPool适用于任务量比较固定但耗时长的任务。它采用了无界的阻塞队列`LinkedBlockingQueue`，在执行`execute`方法时，如果运行的线程数没有达到`corePoolSize`就创建线程执行任务，否则就阻塞在任务队列中，直到有空闲线程来取。\n\n## 构造函数\n```java\nnew ThreadPoolExecutor(nThreads, nThreads, \n                       0L, TimeUnit.MILLISECONDS, \n                       new LinkedBlockingQueue<Runnable>());\n```\n\n## 创建方式\n```java\n// nThreads为线程的数量\nExecutors.newFixedThreadPool(int nThreads);\n// nThreads为线程的数量，threadFactory创建线程\nExecutors.newFixedThreadPool(int nThreads, ThreadFactory threadFactory);\n```\n## 特点\n1. 线程池中的线程处于一定的量，可以很好的控制线程并发量。\n1. 线程可以重复被使用，在显式的关闭之前都将一直存在\n1. 超出数量的任务需要在队列中等待\n1. 全是核心线程\n\n## 实例\n```java\npublic class FixedThreadPoolCase {\n\n    public static void main(String[] args) throws InterruptedException {\n        ExecutorService exec = Executors.newFixedThreadPool(3);\n\n        // 无论 sleep 间隔时间是多少，总共都创建 3 个线程，并交替执行。\n        for (int i = 0; i < 5; i++) {\n            exec.execute(new LiftOff());\n            Thread.sleep(10);\n        }\n        exec.shutdown();\n    }\n}\n```","source":"_posts/多线程高并发编程/4.2 FixedThreadPool copy.md","raw":"---\ntitle: 4.2 FixedThreadPool\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- Thread\n- FixedThreadPool\n\ndate: 2020-01-23 15:00\n---\nFixedThreadPool适用于任务量比较固定但耗时长的任务。它采用了无界的阻塞队列`LinkedBlockingQueue`，在执行`execute`方法时，如果运行的线程数没有达到`corePoolSize`就创建线程执行任务，否则就阻塞在任务队列中，直到有空闲线程来取。\n\n## 构造函数\n```java\nnew ThreadPoolExecutor(nThreads, nThreads, \n                       0L, TimeUnit.MILLISECONDS, \n                       new LinkedBlockingQueue<Runnable>());\n```\n\n## 创建方式\n```java\n// nThreads为线程的数量\nExecutors.newFixedThreadPool(int nThreads);\n// nThreads为线程的数量，threadFactory创建线程\nExecutors.newFixedThreadPool(int nThreads, ThreadFactory threadFactory);\n```\n## 特点\n1. 线程池中的线程处于一定的量，可以很好的控制线程并发量。\n1. 线程可以重复被使用，在显式的关闭之前都将一直存在\n1. 超出数量的任务需要在队列中等待\n1. 全是核心线程\n\n## 实例\n```java\npublic class FixedThreadPoolCase {\n\n    public static void main(String[] args) throws InterruptedException {\n        ExecutorService exec = Executors.newFixedThreadPool(3);\n\n        // 无论 sleep 间隔时间是多少，总共都创建 3 个线程，并交替执行。\n        for (int i = 0; i < 5; i++) {\n            exec.execute(new LiftOff());\n            Thread.sleep(10);\n        }\n        exec.shutdown();\n    }\n}\n```","slug":"多线程高并发编程/4.2 FixedThreadPool copy","published":1,"updated":"2020-04-12T08:28:29.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m7j005um33p0y9ho68y","content":"<p>FixedThreadPool适用于任务量比较固定但耗时长的任务。它采用了无界的阻塞队列<code>LinkedBlockingQueue</code>，在执行<code>execute</code>方法时，如果运行的线程数没有达到<code>corePoolSize</code>就创建线程执行任务，否则就阻塞在任务队列中，直到有空闲线程来取。</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads, </span><br><span class=\"line\">                       <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS, </span><br><span class=\"line\">                       <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nThreads为线程的数量</span></span><br><span class=\"line\">Executors.newFixedThreadPool(<span class=\"keyword\">int</span> nThreads);</span><br><span class=\"line\"><span class=\"comment\">// nThreads为线程的数量，threadFactory创建线程</span></span><br><span class=\"line\">Executors.newFixedThreadPool(<span class=\"keyword\">int</span> nThreads, ThreadFactory threadFactory);</span><br></pre></td></tr></table></figure>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ol>\n<li>线程池中的线程处于一定的量，可以很好的控制线程并发量。</li>\n<li>线程可以重复被使用，在显式的关闭之前都将一直存在</li>\n<li>超出数量的任务需要在队列中等待</li>\n<li>全是核心线程</li>\n</ol>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FixedThreadPoolCase</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        ExecutorService exec = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 无论 sleep 间隔时间是多少，总共都创建 3 个线程，并交替执行。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            exec.execute(<span class=\"keyword\">new</span> LiftOff());</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        exec.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>FixedThreadPool适用于任务量比较固定但耗时长的任务。它采用了无界的阻塞队列<code>LinkedBlockingQueue</code>，在执行<code>execute</code>方法时，如果运行的线程数没有达到<code>corePoolSize</code>就创建线程执行任务，否则就阻塞在任务队列中，直到有空闲线程来取。</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads, </span><br><span class=\"line\">                       <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS, </span><br><span class=\"line\">                       <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nThreads为线程的数量</span></span><br><span class=\"line\">Executors.newFixedThreadPool(<span class=\"keyword\">int</span> nThreads);</span><br><span class=\"line\"><span class=\"comment\">// nThreads为线程的数量，threadFactory创建线程</span></span><br><span class=\"line\">Executors.newFixedThreadPool(<span class=\"keyword\">int</span> nThreads, ThreadFactory threadFactory);</span><br></pre></td></tr></table></figure>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ol>\n<li>线程池中的线程处于一定的量，可以很好的控制线程并发量。</li>\n<li>线程可以重复被使用，在显式的关闭之前都将一直存在</li>\n<li>超出数量的任务需要在队列中等待</li>\n<li>全是核心线程</li>\n</ol>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FixedThreadPoolCase</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        ExecutorService exec = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 无论 sleep 间隔时间是多少，总共都创建 3 个线程，并交替执行。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            exec.execute(<span class=\"keyword\">new</span> LiftOff());</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        exec.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"4.1 线程池","date":"2020-01-22T16:00:00.000Z","_content":"\n在讨论线程池之前，我们先理解几个概念：\n1. `ExecutorService`\n1. `ThreadPoolExecutor`\n    `ThreadPoolExecutor`是线程池的真正实现，他通过构造方法的一系列参数，来构成不同配置的线程池。\n1. Executors\n\n```mermaid\ngraph BT\n    A[ExecutorService]\n    B[AbstractExecutorService]\n    C[ThreadPoolExecutor]\n    D[Executors]\n\n    B .-> A\n    C --> B\n```\n\n| 参数 | 类型 | 含义 |\n| :- | :- | :- |\n| corePoolSize | int | \t核心线程池大小 |\n| maximumPoolSize | int | 最大线程池大小 |\n| keepAliveTime | long | 线程最大空闲时间 |\n| unit | TimeUnit | 时间单位 |\n| workQueue | BlockingQueue<Runnable> | 线程等待队列 |\n| threadFactory | ThreadFactory | 线程创建工厂 |\n| handler | RejectedExecutionHandler | 拒绝策略 |\n\n## ExecutorService\n`ExecutorService`使用线程池中的线程执行每个提交的任务，所有的线程池都实现了这个接口。通常我们使用`Executors`的工厂方法来创建`ExecutorServer`。\n\n`ExecutorService`解决了两个不同的问题：\n1. 提升性能：它们通常在执行大量异步任务时，由于减少了每个任务的调用开销，并且它们提供了一种限制和管理资源（包括线程）的方法，使得性能提升明显\n1. 统计信息：每个`ThreadPoolExecutor`保持一些基本的统计信息，例如完成的任务数量\n\n\n## corePoolSize、maximumPoolSize\n线程池执行器将会根据`corePoolSize`、`maximumPoolSize`自动地调整线程池大小。\n\n当在`execute(Runable)`方法中提交新任务并且少于`corePoolSize`线程正在运行时，即使其它工作线程处于空闲状态，也会创建一个新线程来处理该请求。如果有多于`corePoolSize`但小于`maximumPoolSize`的线程正在运行，则仅当队列已满时才会创建新线程。\n\n通过设置相同的corePoolSize和maxinumPoolSize，我们可以创建一个固定大小的线程池。通过将maxinumPoolSize设置为基本上无界的只，例如Integer.MAXX_VALUE，我们可以允许线程池容纳任意数量的并发任务（可能会抛出`OutOfMemoryError`）。\n\n通常，`corePoolSize`和`maximumPoolSize`仅在构建时设置，但也可以使用`setCorePoolSize`和`setMaxinumPoolSize`进行动态的更改。\n\n```mermaid\nsequenceDiagram\n    participant 任务\n    participant 线程池\n    participant 队列\n    participant 创建线程\n    participant 拒绝策略\n\n    任务 ->> 线程池: 提交任务\n\n    线程池 ->>+ 创建线程: 核心线程池未满\n    创建线程 ->>- 线程池: SUCCESS\n\n    线程池 ->> 队列: 进入队列\n\n    队列 -x 拒绝策略: 队列已满、最大线程池已满\n\n    队列 ->>+ 创建线程: 队列已满、最大线程池未满\n    创建线程 ->>- 队列: SUCCESS\n\n    队列 ->> 任务: 执行任务\n```\n\n## prestartCoreThread\n在默认情况下，只有当新任务到达时，才开始创建和启动核心线程，但是我们可以使用下面2个方法进行动态调整（如果使用非空队列构建池，则可能需要预先启动线程）。\n\n| 方法 | 作用 |\n| :-- | :-- |\n| prestartCoreThread() | 创一个空闲任务线程等待任务的到达 |\n| prestartAllCoreThreads() | 创建核心线程池数量的空闲任务线程等待任务的到达 |\n\n## ThreadFactory\n新线程使用`ThreadFactory`创建，如果未另行指定，则使用`Executors.defaultThreadFactory`默认工厂，使其全部位于同一个ThreadGroup中，并且具有相同的优先级和非守护进程状态。\n\n通过提供不同的`ThreadFactory`，您可以更改线程的名称，线程组，优先级，守护进程状态等。\n\n## keepAliveTime\n如果线程池拥有超过核心线程池数的线程，那么多余的线程在空闲时间超过`keepAliveTime`时会被终止。\n\n## BlockingQueue\n`BlockingQueue`队列用于存放提交的任务，它的实际容量与线程池大小无关。\n1. 如果当前线程池任务线程数小于核心线程数，执行器总是优先创建一个任务线程，而不是从线程队列中取一个空闲线程\n1. 如果当前线程池任务线程数大于核心线程数，执行器总是优先先线程队列中去一个空闲线程，而不是创建一个任务线程\n1. 如果当前线程池任务线程数大于核心线程数，且队列中无空闲任务线程，将会创建一个任务线程，直到超出最大线程数，从而拒绝任务\n\n队列主要有3种策略：\n1. Direct handoffs：直接握手队列，一个很好的默认选项是`SynchronousQueue`，它将任务交给线程而不需要保留。这里，如果没有线程立即可用来运行它，那么排队任务的尝试将失败，因此将构建新的线程\n1. Unbounded queues：无界队列，当所有核心线程繁忙时，使用无界队列（例如，没有预定指定容量的`LinkedBlockQueue`）将导致新任务在队列中等待，从而导致`maximumPoolSize`值没有任何作用。当每个任务互不影响，完全独立于其它任务时，这可能是合适的：例如，在网页服务器中，这种队列方式可以用于平滑瞬时大量请求。\n1. Bounded queues：一个有界的队列（例如`ArrayBlockingQueue`）和有限的`maximumPoolSize`有助于防止资源耗尽。\n\n使用大队列和较小的`maximumPoolSizes`可以最大限度地减少CPU使用率，操作系统资源和上下文切换开销，但会导致人为的低吞吐量。如果任务经常被阻塞（比如I/O限制），那么系统可以调度比我们允许的更多的线程。\n\n使用小队列通常需要较大的`maximumPoolSizes`，这会使CPU更加繁忙，遇到不可接受的调度开销，这也会降低吞吐量。\n\n## Rejected Tasks\n拒绝任务有2种情况：线程池已经被关闭、任务队列已满且`maximumPoolSizes`已满。\n\n无论是哪种情况，都会调用`RejectedExecutionHandler`的`rejectedExecution`方法，它预定义了4种处理策略：\n1. AbortPoliy：默认策略，抛出`RejectedExecutionException`运行时异常\n1. CallerRunsPolicy：提供了一个简单的反馈控制机制，可以减慢提交新任务的速度\n1. DiscardPolicy：直接丢弃新提交的任务\n1. DiscardOldestPolicy：如果执行器没有关闭，队列头的任务将会被抛弃，然后重新尝试执行任务\n\n## Hook Methods\n`ThreadPoolExecutor`为每个任务执行前后提供了钩子方法`beforeExecute`和`afterExecute`用于操纵执行环境：例如，重新初始化ThreadLocals，收集统计信息或记录日志等。此外，`terminated`方法在线程池完全终止之后会被触发，可以重写此方法以执行特殊业务。\n\n需要留意是的，如果钩子方法或回调方法抛出异常，内部的任务线程将会失败并结束。\n\n## Finalization\n如果程序中不再持有线程池的引用，并且线程池中没有线程时，线程池将会自动关闭。如果你希望确保即使用户忘记调用`shudown()`也可以回收未引用的线程池，那么必须通过设置适当的`keepAliveTime`并设置`allowCoreThreadTimeOut(true)`或者使得`corePoolSize`的值为0。\n\n一般情况下，线程池启动后建议手动调用`shutdown()`关闭。\n\n## 预设线程池\n在常见场景中，Java预设了几种线程池，可以通过`Executors`的工厂方法创建使用：\n- Executors.newFixedTrheadPool：固定大小的线程池\n- Executors.newCachedThreadPool：无界线程池，自动回收\n- Executors.newSingleThreadExecutor：单一后台线程 \n\n","source":"_posts/多线程高并发编程/4.1 线程池.md","raw":"---\ntitle: 4.1 线程池\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- Thread\n- ThreadPoolExcutor\n\ndate: 2020-01-23\n---\n\n在讨论线程池之前，我们先理解几个概念：\n1. `ExecutorService`\n1. `ThreadPoolExecutor`\n    `ThreadPoolExecutor`是线程池的真正实现，他通过构造方法的一系列参数，来构成不同配置的线程池。\n1. Executors\n\n```mermaid\ngraph BT\n    A[ExecutorService]\n    B[AbstractExecutorService]\n    C[ThreadPoolExecutor]\n    D[Executors]\n\n    B .-> A\n    C --> B\n```\n\n| 参数 | 类型 | 含义 |\n| :- | :- | :- |\n| corePoolSize | int | \t核心线程池大小 |\n| maximumPoolSize | int | 最大线程池大小 |\n| keepAliveTime | long | 线程最大空闲时间 |\n| unit | TimeUnit | 时间单位 |\n| workQueue | BlockingQueue<Runnable> | 线程等待队列 |\n| threadFactory | ThreadFactory | 线程创建工厂 |\n| handler | RejectedExecutionHandler | 拒绝策略 |\n\n## ExecutorService\n`ExecutorService`使用线程池中的线程执行每个提交的任务，所有的线程池都实现了这个接口。通常我们使用`Executors`的工厂方法来创建`ExecutorServer`。\n\n`ExecutorService`解决了两个不同的问题：\n1. 提升性能：它们通常在执行大量异步任务时，由于减少了每个任务的调用开销，并且它们提供了一种限制和管理资源（包括线程）的方法，使得性能提升明显\n1. 统计信息：每个`ThreadPoolExecutor`保持一些基本的统计信息，例如完成的任务数量\n\n\n## corePoolSize、maximumPoolSize\n线程池执行器将会根据`corePoolSize`、`maximumPoolSize`自动地调整线程池大小。\n\n当在`execute(Runable)`方法中提交新任务并且少于`corePoolSize`线程正在运行时，即使其它工作线程处于空闲状态，也会创建一个新线程来处理该请求。如果有多于`corePoolSize`但小于`maximumPoolSize`的线程正在运行，则仅当队列已满时才会创建新线程。\n\n通过设置相同的corePoolSize和maxinumPoolSize，我们可以创建一个固定大小的线程池。通过将maxinumPoolSize设置为基本上无界的只，例如Integer.MAXX_VALUE，我们可以允许线程池容纳任意数量的并发任务（可能会抛出`OutOfMemoryError`）。\n\n通常，`corePoolSize`和`maximumPoolSize`仅在构建时设置，但也可以使用`setCorePoolSize`和`setMaxinumPoolSize`进行动态的更改。\n\n```mermaid\nsequenceDiagram\n    participant 任务\n    participant 线程池\n    participant 队列\n    participant 创建线程\n    participant 拒绝策略\n\n    任务 ->> 线程池: 提交任务\n\n    线程池 ->>+ 创建线程: 核心线程池未满\n    创建线程 ->>- 线程池: SUCCESS\n\n    线程池 ->> 队列: 进入队列\n\n    队列 -x 拒绝策略: 队列已满、最大线程池已满\n\n    队列 ->>+ 创建线程: 队列已满、最大线程池未满\n    创建线程 ->>- 队列: SUCCESS\n\n    队列 ->> 任务: 执行任务\n```\n\n## prestartCoreThread\n在默认情况下，只有当新任务到达时，才开始创建和启动核心线程，但是我们可以使用下面2个方法进行动态调整（如果使用非空队列构建池，则可能需要预先启动线程）。\n\n| 方法 | 作用 |\n| :-- | :-- |\n| prestartCoreThread() | 创一个空闲任务线程等待任务的到达 |\n| prestartAllCoreThreads() | 创建核心线程池数量的空闲任务线程等待任务的到达 |\n\n## ThreadFactory\n新线程使用`ThreadFactory`创建，如果未另行指定，则使用`Executors.defaultThreadFactory`默认工厂，使其全部位于同一个ThreadGroup中，并且具有相同的优先级和非守护进程状态。\n\n通过提供不同的`ThreadFactory`，您可以更改线程的名称，线程组，优先级，守护进程状态等。\n\n## keepAliveTime\n如果线程池拥有超过核心线程池数的线程，那么多余的线程在空闲时间超过`keepAliveTime`时会被终止。\n\n## BlockingQueue\n`BlockingQueue`队列用于存放提交的任务，它的实际容量与线程池大小无关。\n1. 如果当前线程池任务线程数小于核心线程数，执行器总是优先创建一个任务线程，而不是从线程队列中取一个空闲线程\n1. 如果当前线程池任务线程数大于核心线程数，执行器总是优先先线程队列中去一个空闲线程，而不是创建一个任务线程\n1. 如果当前线程池任务线程数大于核心线程数，且队列中无空闲任务线程，将会创建一个任务线程，直到超出最大线程数，从而拒绝任务\n\n队列主要有3种策略：\n1. Direct handoffs：直接握手队列，一个很好的默认选项是`SynchronousQueue`，它将任务交给线程而不需要保留。这里，如果没有线程立即可用来运行它，那么排队任务的尝试将失败，因此将构建新的线程\n1. Unbounded queues：无界队列，当所有核心线程繁忙时，使用无界队列（例如，没有预定指定容量的`LinkedBlockQueue`）将导致新任务在队列中等待，从而导致`maximumPoolSize`值没有任何作用。当每个任务互不影响，完全独立于其它任务时，这可能是合适的：例如，在网页服务器中，这种队列方式可以用于平滑瞬时大量请求。\n1. Bounded queues：一个有界的队列（例如`ArrayBlockingQueue`）和有限的`maximumPoolSize`有助于防止资源耗尽。\n\n使用大队列和较小的`maximumPoolSizes`可以最大限度地减少CPU使用率，操作系统资源和上下文切换开销，但会导致人为的低吞吐量。如果任务经常被阻塞（比如I/O限制），那么系统可以调度比我们允许的更多的线程。\n\n使用小队列通常需要较大的`maximumPoolSizes`，这会使CPU更加繁忙，遇到不可接受的调度开销，这也会降低吞吐量。\n\n## Rejected Tasks\n拒绝任务有2种情况：线程池已经被关闭、任务队列已满且`maximumPoolSizes`已满。\n\n无论是哪种情况，都会调用`RejectedExecutionHandler`的`rejectedExecution`方法，它预定义了4种处理策略：\n1. AbortPoliy：默认策略，抛出`RejectedExecutionException`运行时异常\n1. CallerRunsPolicy：提供了一个简单的反馈控制机制，可以减慢提交新任务的速度\n1. DiscardPolicy：直接丢弃新提交的任务\n1. DiscardOldestPolicy：如果执行器没有关闭，队列头的任务将会被抛弃，然后重新尝试执行任务\n\n## Hook Methods\n`ThreadPoolExecutor`为每个任务执行前后提供了钩子方法`beforeExecute`和`afterExecute`用于操纵执行环境：例如，重新初始化ThreadLocals，收集统计信息或记录日志等。此外，`terminated`方法在线程池完全终止之后会被触发，可以重写此方法以执行特殊业务。\n\n需要留意是的，如果钩子方法或回调方法抛出异常，内部的任务线程将会失败并结束。\n\n## Finalization\n如果程序中不再持有线程池的引用，并且线程池中没有线程时，线程池将会自动关闭。如果你希望确保即使用户忘记调用`shudown()`也可以回收未引用的线程池，那么必须通过设置适当的`keepAliveTime`并设置`allowCoreThreadTimeOut(true)`或者使得`corePoolSize`的值为0。\n\n一般情况下，线程池启动后建议手动调用`shutdown()`关闭。\n\n## 预设线程池\n在常见场景中，Java预设了几种线程池，可以通过`Executors`的工厂方法创建使用：\n- Executors.newFixedTrheadPool：固定大小的线程池\n- Executors.newCachedThreadPool：无界线程池，自动回收\n- Executors.newSingleThreadExecutor：单一后台线程 \n\n","slug":"多线程高并发编程/4.1 线程池","published":1,"updated":"2020-04-12T08:28:29.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m7m005wm33pi3bcapnz","content":"<p>在讨论线程池之前，我们先理解几个概念：</p>\n<ol>\n<li><code>ExecutorService</code></li>\n<li><code>ThreadPoolExecutor</code><br> <code>ThreadPoolExecutor</code>是线程池的真正实现，他通过构造方法的一系列参数，来构成不同配置的线程池。</li>\n<li>Executors</li>\n</ol>\n<pre class=\"mermaid\">graph BT\n    A[ExecutorService]\n    B[AbstractExecutorService]\n    C[ThreadPoolExecutor]\n    D[Executors]\n\n    B .-> A\n    C --> B</pre>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">corePoolSize</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">核心线程池大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">maximumPoolSize</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">最大线程池大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">keepAliveTime</td>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">线程最大空闲时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unit</td>\n<td style=\"text-align:left\">TimeUnit</td>\n<td style=\"text-align:left\">时间单位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">workQueue</td>\n<td style=\"text-align:left\">BlockingQueue<Runnable></td>\n<td style=\"text-align:left\">线程等待队列</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">threadFactory</td>\n<td style=\"text-align:left\">ThreadFactory</td>\n<td style=\"text-align:left\">线程创建工厂</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">handler</td>\n<td style=\"text-align:left\">RejectedExecutionHandler</td>\n<td style=\"text-align:left\">拒绝策略</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"ExecutorService\"><a href=\"#ExecutorService\" class=\"headerlink\" title=\"ExecutorService\"></a>ExecutorService</h2><p><code>ExecutorService</code>使用线程池中的线程执行每个提交的任务，所有的线程池都实现了这个接口。通常我们使用<code>Executors</code>的工厂方法来创建<code>ExecutorServer</code>。</p>\n<p><code>ExecutorService</code>解决了两个不同的问题：</p>\n<ol>\n<li>提升性能：它们通常在执行大量异步任务时，由于减少了每个任务的调用开销，并且它们提供了一种限制和管理资源（包括线程）的方法，使得性能提升明显</li>\n<li>统计信息：每个<code>ThreadPoolExecutor</code>保持一些基本的统计信息，例如完成的任务数量</li>\n</ol>\n<h2 id=\"corePoolSize、maximumPoolSize\"><a href=\"#corePoolSize、maximumPoolSize\" class=\"headerlink\" title=\"corePoolSize、maximumPoolSize\"></a>corePoolSize、maximumPoolSize</h2><p>线程池执行器将会根据<code>corePoolSize</code>、<code>maximumPoolSize</code>自动地调整线程池大小。</p>\n<p>当在<code>execute(Runable)</code>方法中提交新任务并且少于<code>corePoolSize</code>线程正在运行时，即使其它工作线程处于空闲状态，也会创建一个新线程来处理该请求。如果有多于<code>corePoolSize</code>但小于<code>maximumPoolSize</code>的线程正在运行，则仅当队列已满时才会创建新线程。</p>\n<p>通过设置相同的corePoolSize和maxinumPoolSize，我们可以创建一个固定大小的线程池。通过将maxinumPoolSize设置为基本上无界的只，例如Integer.MAXX_VALUE，我们可以允许线程池容纳任意数量的并发任务（可能会抛出<code>OutOfMemoryError</code>）。</p>\n<p>通常，<code>corePoolSize</code>和<code>maximumPoolSize</code>仅在构建时设置，但也可以使用<code>setCorePoolSize</code>和<code>setMaxinumPoolSize</code>进行动态的更改。</p>\n<pre class=\"mermaid\">sequenceDiagram\n    participant 任务\n    participant 线程池\n    participant 队列\n    participant 创建线程\n    participant 拒绝策略\n\n    任务 ->> 线程池: 提交任务\n\n    线程池 ->>+ 创建线程: 核心线程池未满\n    创建线程 ->>- 线程池: SUCCESS\n\n    线程池 ->> 队列: 进入队列\n\n    队列 -x 拒绝策略: 队列已满、最大线程池已满\n\n    队列 ->>+ 创建线程: 队列已满、最大线程池未满\n    创建线程 ->>- 队列: SUCCESS\n\n    队列 ->> 任务: 执行任务</pre>\n\n<h2 id=\"prestartCoreThread\"><a href=\"#prestartCoreThread\" class=\"headerlink\" title=\"prestartCoreThread\"></a>prestartCoreThread</h2><p>在默认情况下，只有当新任务到达时，才开始创建和启动核心线程，但是我们可以使用下面2个方法进行动态调整（如果使用非空队列构建池，则可能需要预先启动线程）。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">prestartCoreThread()</td>\n<td style=\"text-align:left\">创一个空闲任务线程等待任务的到达</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">prestartAllCoreThreads()</td>\n<td style=\"text-align:left\">创建核心线程池数量的空闲任务线程等待任务的到达</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"ThreadFactory\"><a href=\"#ThreadFactory\" class=\"headerlink\" title=\"ThreadFactory\"></a>ThreadFactory</h2><p>新线程使用<code>ThreadFactory</code>创建，如果未另行指定，则使用<code>Executors.defaultThreadFactory</code>默认工厂，使其全部位于同一个ThreadGroup中，并且具有相同的优先级和非守护进程状态。</p>\n<p>通过提供不同的<code>ThreadFactory</code>，您可以更改线程的名称，线程组，优先级，守护进程状态等。</p>\n<h2 id=\"keepAliveTime\"><a href=\"#keepAliveTime\" class=\"headerlink\" title=\"keepAliveTime\"></a>keepAliveTime</h2><p>如果线程池拥有超过核心线程池数的线程，那么多余的线程在空闲时间超过<code>keepAliveTime</code>时会被终止。</p>\n<h2 id=\"BlockingQueue\"><a href=\"#BlockingQueue\" class=\"headerlink\" title=\"BlockingQueue\"></a>BlockingQueue</h2><p><code>BlockingQueue</code>队列用于存放提交的任务，它的实际容量与线程池大小无关。</p>\n<ol>\n<li>如果当前线程池任务线程数小于核心线程数，执行器总是优先创建一个任务线程，而不是从线程队列中取一个空闲线程</li>\n<li>如果当前线程池任务线程数大于核心线程数，执行器总是优先先线程队列中去一个空闲线程，而不是创建一个任务线程</li>\n<li>如果当前线程池任务线程数大于核心线程数，且队列中无空闲任务线程，将会创建一个任务线程，直到超出最大线程数，从而拒绝任务</li>\n</ol>\n<p>队列主要有3种策略：</p>\n<ol>\n<li>Direct handoffs：直接握手队列，一个很好的默认选项是<code>SynchronousQueue</code>，它将任务交给线程而不需要保留。这里，如果没有线程立即可用来运行它，那么排队任务的尝试将失败，因此将构建新的线程</li>\n<li>Unbounded queues：无界队列，当所有核心线程繁忙时，使用无界队列（例如，没有预定指定容量的<code>LinkedBlockQueue</code>）将导致新任务在队列中等待，从而导致<code>maximumPoolSize</code>值没有任何作用。当每个任务互不影响，完全独立于其它任务时，这可能是合适的：例如，在网页服务器中，这种队列方式可以用于平滑瞬时大量请求。</li>\n<li>Bounded queues：一个有界的队列（例如<code>ArrayBlockingQueue</code>）和有限的<code>maximumPoolSize</code>有助于防止资源耗尽。</li>\n</ol>\n<p>使用大队列和较小的<code>maximumPoolSizes</code>可以最大限度地减少CPU使用率，操作系统资源和上下文切换开销，但会导致人为的低吞吐量。如果任务经常被阻塞（比如I/O限制），那么系统可以调度比我们允许的更多的线程。</p>\n<p>使用小队列通常需要较大的<code>maximumPoolSizes</code>，这会使CPU更加繁忙，遇到不可接受的调度开销，这也会降低吞吐量。</p>\n<h2 id=\"Rejected-Tasks\"><a href=\"#Rejected-Tasks\" class=\"headerlink\" title=\"Rejected Tasks\"></a>Rejected Tasks</h2><p>拒绝任务有2种情况：线程池已经被关闭、任务队列已满且<code>maximumPoolSizes</code>已满。</p>\n<p>无论是哪种情况，都会调用<code>RejectedExecutionHandler</code>的<code>rejectedExecution</code>方法，它预定义了4种处理策略：</p>\n<ol>\n<li>AbortPoliy：默认策略，抛出<code>RejectedExecutionException</code>运行时异常</li>\n<li>CallerRunsPolicy：提供了一个简单的反馈控制机制，可以减慢提交新任务的速度</li>\n<li>DiscardPolicy：直接丢弃新提交的任务</li>\n<li>DiscardOldestPolicy：如果执行器没有关闭，队列头的任务将会被抛弃，然后重新尝试执行任务</li>\n</ol>\n<h2 id=\"Hook-Methods\"><a href=\"#Hook-Methods\" class=\"headerlink\" title=\"Hook Methods\"></a>Hook Methods</h2><p><code>ThreadPoolExecutor</code>为每个任务执行前后提供了钩子方法<code>beforeExecute</code>和<code>afterExecute</code>用于操纵执行环境：例如，重新初始化ThreadLocals，收集统计信息或记录日志等。此外，<code>terminated</code>方法在线程池完全终止之后会被触发，可以重写此方法以执行特殊业务。</p>\n<p>需要留意是的，如果钩子方法或回调方法抛出异常，内部的任务线程将会失败并结束。</p>\n<h2 id=\"Finalization\"><a href=\"#Finalization\" class=\"headerlink\" title=\"Finalization\"></a>Finalization</h2><p>如果程序中不再持有线程池的引用，并且线程池中没有线程时，线程池将会自动关闭。如果你希望确保即使用户忘记调用<code>shudown()</code>也可以回收未引用的线程池，那么必须通过设置适当的<code>keepAliveTime</code>并设置<code>allowCoreThreadTimeOut(true)</code>或者使得<code>corePoolSize</code>的值为0。</p>\n<p>一般情况下，线程池启动后建议手动调用<code>shutdown()</code>关闭。</p>\n<h2 id=\"预设线程池\"><a href=\"#预设线程池\" class=\"headerlink\" title=\"预设线程池\"></a>预设线程池</h2><p>在常见场景中，Java预设了几种线程池，可以通过<code>Executors</code>的工厂方法创建使用：</p>\n<ul>\n<li>Executors.newFixedTrheadPool：固定大小的线程池</li>\n<li>Executors.newCachedThreadPool：无界线程池，自动回收</li>\n<li>Executors.newSingleThreadExecutor：单一后台线程 </li>\n</ul>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>在讨论线程池之前，我们先理解几个概念：</p>\n<ol>\n<li><code>ExecutorService</code></li>\n<li><code>ThreadPoolExecutor</code><br> <code>ThreadPoolExecutor</code>是线程池的真正实现，他通过构造方法的一系列参数，来构成不同配置的线程池。</li>\n<li>Executors</li>\n</ol>\n<pre class=\"mermaid\">graph BT\n    A[ExecutorService]\n    B[AbstractExecutorService]\n    C[ThreadPoolExecutor]\n    D[Executors]\n\n    B .-> A\n    C --> B</pre>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">corePoolSize</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">核心线程池大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">maximumPoolSize</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">最大线程池大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">keepAliveTime</td>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">线程最大空闲时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unit</td>\n<td style=\"text-align:left\">TimeUnit</td>\n<td style=\"text-align:left\">时间单位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">workQueue</td>\n<td style=\"text-align:left\">BlockingQueue<Runnable></td>\n<td style=\"text-align:left\">线程等待队列</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">threadFactory</td>\n<td style=\"text-align:left\">ThreadFactory</td>\n<td style=\"text-align:left\">线程创建工厂</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">handler</td>\n<td style=\"text-align:left\">RejectedExecutionHandler</td>\n<td style=\"text-align:left\">拒绝策略</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"ExecutorService\"><a href=\"#ExecutorService\" class=\"headerlink\" title=\"ExecutorService\"></a>ExecutorService</h2><p><code>ExecutorService</code>使用线程池中的线程执行每个提交的任务，所有的线程池都实现了这个接口。通常我们使用<code>Executors</code>的工厂方法来创建<code>ExecutorServer</code>。</p>\n<p><code>ExecutorService</code>解决了两个不同的问题：</p>\n<ol>\n<li>提升性能：它们通常在执行大量异步任务时，由于减少了每个任务的调用开销，并且它们提供了一种限制和管理资源（包括线程）的方法，使得性能提升明显</li>\n<li>统计信息：每个<code>ThreadPoolExecutor</code>保持一些基本的统计信息，例如完成的任务数量</li>\n</ol>\n<h2 id=\"corePoolSize、maximumPoolSize\"><a href=\"#corePoolSize、maximumPoolSize\" class=\"headerlink\" title=\"corePoolSize、maximumPoolSize\"></a>corePoolSize、maximumPoolSize</h2><p>线程池执行器将会根据<code>corePoolSize</code>、<code>maximumPoolSize</code>自动地调整线程池大小。</p>\n<p>当在<code>execute(Runable)</code>方法中提交新任务并且少于<code>corePoolSize</code>线程正在运行时，即使其它工作线程处于空闲状态，也会创建一个新线程来处理该请求。如果有多于<code>corePoolSize</code>但小于<code>maximumPoolSize</code>的线程正在运行，则仅当队列已满时才会创建新线程。</p>\n<p>通过设置相同的corePoolSize和maxinumPoolSize，我们可以创建一个固定大小的线程池。通过将maxinumPoolSize设置为基本上无界的只，例如Integer.MAXX_VALUE，我们可以允许线程池容纳任意数量的并发任务（可能会抛出<code>OutOfMemoryError</code>）。</p>\n<p>通常，<code>corePoolSize</code>和<code>maximumPoolSize</code>仅在构建时设置，但也可以使用<code>setCorePoolSize</code>和<code>setMaxinumPoolSize</code>进行动态的更改。</p>\n<pre class=\"mermaid\">sequenceDiagram\n    participant 任务\n    participant 线程池\n    participant 队列\n    participant 创建线程\n    participant 拒绝策略\n\n    任务 ->> 线程池: 提交任务\n\n    线程池 ->>+ 创建线程: 核心线程池未满\n    创建线程 ->>- 线程池: SUCCESS\n\n    线程池 ->> 队列: 进入队列\n\n    队列 -x 拒绝策略: 队列已满、最大线程池已满\n\n    队列 ->>+ 创建线程: 队列已满、最大线程池未满\n    创建线程 ->>- 队列: SUCCESS\n\n    队列 ->> 任务: 执行任务</pre>\n\n<h2 id=\"prestartCoreThread\"><a href=\"#prestartCoreThread\" class=\"headerlink\" title=\"prestartCoreThread\"></a>prestartCoreThread</h2><p>在默认情况下，只有当新任务到达时，才开始创建和启动核心线程，但是我们可以使用下面2个方法进行动态调整（如果使用非空队列构建池，则可能需要预先启动线程）。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">prestartCoreThread()</td>\n<td style=\"text-align:left\">创一个空闲任务线程等待任务的到达</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">prestartAllCoreThreads()</td>\n<td style=\"text-align:left\">创建核心线程池数量的空闲任务线程等待任务的到达</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"ThreadFactory\"><a href=\"#ThreadFactory\" class=\"headerlink\" title=\"ThreadFactory\"></a>ThreadFactory</h2><p>新线程使用<code>ThreadFactory</code>创建，如果未另行指定，则使用<code>Executors.defaultThreadFactory</code>默认工厂，使其全部位于同一个ThreadGroup中，并且具有相同的优先级和非守护进程状态。</p>\n<p>通过提供不同的<code>ThreadFactory</code>，您可以更改线程的名称，线程组，优先级，守护进程状态等。</p>\n<h2 id=\"keepAliveTime\"><a href=\"#keepAliveTime\" class=\"headerlink\" title=\"keepAliveTime\"></a>keepAliveTime</h2><p>如果线程池拥有超过核心线程池数的线程，那么多余的线程在空闲时间超过<code>keepAliveTime</code>时会被终止。</p>\n<h2 id=\"BlockingQueue\"><a href=\"#BlockingQueue\" class=\"headerlink\" title=\"BlockingQueue\"></a>BlockingQueue</h2><p><code>BlockingQueue</code>队列用于存放提交的任务，它的实际容量与线程池大小无关。</p>\n<ol>\n<li>如果当前线程池任务线程数小于核心线程数，执行器总是优先创建一个任务线程，而不是从线程队列中取一个空闲线程</li>\n<li>如果当前线程池任务线程数大于核心线程数，执行器总是优先先线程队列中去一个空闲线程，而不是创建一个任务线程</li>\n<li>如果当前线程池任务线程数大于核心线程数，且队列中无空闲任务线程，将会创建一个任务线程，直到超出最大线程数，从而拒绝任务</li>\n</ol>\n<p>队列主要有3种策略：</p>\n<ol>\n<li>Direct handoffs：直接握手队列，一个很好的默认选项是<code>SynchronousQueue</code>，它将任务交给线程而不需要保留。这里，如果没有线程立即可用来运行它，那么排队任务的尝试将失败，因此将构建新的线程</li>\n<li>Unbounded queues：无界队列，当所有核心线程繁忙时，使用无界队列（例如，没有预定指定容量的<code>LinkedBlockQueue</code>）将导致新任务在队列中等待，从而导致<code>maximumPoolSize</code>值没有任何作用。当每个任务互不影响，完全独立于其它任务时，这可能是合适的：例如，在网页服务器中，这种队列方式可以用于平滑瞬时大量请求。</li>\n<li>Bounded queues：一个有界的队列（例如<code>ArrayBlockingQueue</code>）和有限的<code>maximumPoolSize</code>有助于防止资源耗尽。</li>\n</ol>\n<p>使用大队列和较小的<code>maximumPoolSizes</code>可以最大限度地减少CPU使用率，操作系统资源和上下文切换开销，但会导致人为的低吞吐量。如果任务经常被阻塞（比如I/O限制），那么系统可以调度比我们允许的更多的线程。</p>\n<p>使用小队列通常需要较大的<code>maximumPoolSizes</code>，这会使CPU更加繁忙，遇到不可接受的调度开销，这也会降低吞吐量。</p>\n<h2 id=\"Rejected-Tasks\"><a href=\"#Rejected-Tasks\" class=\"headerlink\" title=\"Rejected Tasks\"></a>Rejected Tasks</h2><p>拒绝任务有2种情况：线程池已经被关闭、任务队列已满且<code>maximumPoolSizes</code>已满。</p>\n<p>无论是哪种情况，都会调用<code>RejectedExecutionHandler</code>的<code>rejectedExecution</code>方法，它预定义了4种处理策略：</p>\n<ol>\n<li>AbortPoliy：默认策略，抛出<code>RejectedExecutionException</code>运行时异常</li>\n<li>CallerRunsPolicy：提供了一个简单的反馈控制机制，可以减慢提交新任务的速度</li>\n<li>DiscardPolicy：直接丢弃新提交的任务</li>\n<li>DiscardOldestPolicy：如果执行器没有关闭，队列头的任务将会被抛弃，然后重新尝试执行任务</li>\n</ol>\n<h2 id=\"Hook-Methods\"><a href=\"#Hook-Methods\" class=\"headerlink\" title=\"Hook Methods\"></a>Hook Methods</h2><p><code>ThreadPoolExecutor</code>为每个任务执行前后提供了钩子方法<code>beforeExecute</code>和<code>afterExecute</code>用于操纵执行环境：例如，重新初始化ThreadLocals，收集统计信息或记录日志等。此外，<code>terminated</code>方法在线程池完全终止之后会被触发，可以重写此方法以执行特殊业务。</p>\n<p>需要留意是的，如果钩子方法或回调方法抛出异常，内部的任务线程将会失败并结束。</p>\n<h2 id=\"Finalization\"><a href=\"#Finalization\" class=\"headerlink\" title=\"Finalization\"></a>Finalization</h2><p>如果程序中不再持有线程池的引用，并且线程池中没有线程时，线程池将会自动关闭。如果你希望确保即使用户忘记调用<code>shudown()</code>也可以回收未引用的线程池，那么必须通过设置适当的<code>keepAliveTime</code>并设置<code>allowCoreThreadTimeOut(true)</code>或者使得<code>corePoolSize</code>的值为0。</p>\n<p>一般情况下，线程池启动后建议手动调用<code>shutdown()</code>关闭。</p>\n<h2 id=\"预设线程池\"><a href=\"#预设线程池\" class=\"headerlink\" title=\"预设线程池\"></a>预设线程池</h2><p>在常见场景中，Java预设了几种线程池，可以通过<code>Executors</code>的工厂方法创建使用：</p>\n<ul>\n<li>Executors.newFixedTrheadPool：固定大小的线程池</li>\n<li>Executors.newCachedThreadPool：无界线程池，自动回收</li>\n<li>Executors.newSingleThreadExecutor：单一后台线程 </li>\n</ul>\n"},{"title":"4.3 CachedThreadPool","date":"2020-02-03T07:00:00.000Z","_content":"CachedThreadPool是一个可以无限扩大的线程池，它有以下特点：\n1. `corePoolSize`为0，`maximumPoolSize`为无限大，意味着线程数量可以无限大\n1. `keepAliveTime`为60秒，意味着线程空闲时间超过60秒就会被杀死\n1. 采用`SynchronousQueue`装载等待的任务，这个阻塞队列没有存储空间。这意味着只要有请求到来，就必须找到一个工作线程处理，如果当前没有空闲的线程，那么就创建一条新的线程\n\n## 构造函数\n```java\npublic static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>(),\n                                  threadFactory);\n}\n```\n\n## 实例\n```java\npublic class CachedThreadPool {\n\n    public static void main(String[] args) throws InterruptedException {\n        // 1. 创建线程池\n        ExecutorService service = Executors.newCachedThreadPool();\n        System.out.println(service);\n\n        // 2. 添加任务\n        for (int i = 0; i < 2; i++) {\n            service.execute(() -> {\n                try {\n                    TimeUnit.SECONDS.sleep(1L);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread().getName());\n            });\n        }\n\n        // 3. 查询线程池状态（一段时间后自动销毁空闲线程）\n        System.out.println(service);\n        TimeUnit.SECONDS.sleep(80);\n        System.out.println(service);\n    }\n}\n\n// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]\n// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 0]\n// pool-1-thread-2\n// pool-1-thread-1\n// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2]\n```","source":"_posts/多线程高并发编程/4.3 CachedThreadPool.md","raw":"---\ntitle: 4.3 CachedThreadPool\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- Thread\n- CachedThreadPool\n\ndate: 2020-02-03 15:00\n---\nCachedThreadPool是一个可以无限扩大的线程池，它有以下特点：\n1. `corePoolSize`为0，`maximumPoolSize`为无限大，意味着线程数量可以无限大\n1. `keepAliveTime`为60秒，意味着线程空闲时间超过60秒就会被杀死\n1. 采用`SynchronousQueue`装载等待的任务，这个阻塞队列没有存储空间。这意味着只要有请求到来，就必须找到一个工作线程处理，如果当前没有空闲的线程，那么就创建一条新的线程\n\n## 构造函数\n```java\npublic static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>(),\n                                  threadFactory);\n}\n```\n\n## 实例\n```java\npublic class CachedThreadPool {\n\n    public static void main(String[] args) throws InterruptedException {\n        // 1. 创建线程池\n        ExecutorService service = Executors.newCachedThreadPool();\n        System.out.println(service);\n\n        // 2. 添加任务\n        for (int i = 0; i < 2; i++) {\n            service.execute(() -> {\n                try {\n                    TimeUnit.SECONDS.sleep(1L);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread().getName());\n            });\n        }\n\n        // 3. 查询线程池状态（一段时间后自动销毁空闲线程）\n        System.out.println(service);\n        TimeUnit.SECONDS.sleep(80);\n        System.out.println(service);\n    }\n}\n\n// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]\n// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 0]\n// pool-1-thread-2\n// pool-1-thread-1\n// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2]\n```","slug":"多线程高并发编程/4.3 CachedThreadPool","published":1,"updated":"2020-04-12T08:28:29.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m7o0061m33pxcvq6qdn","content":"<p>CachedThreadPool是一个可以无限扩大的线程池，它有以下特点：</p>\n<ol>\n<li><code>corePoolSize</code>为0，<code>maximumPoolSize</code>为无限大，意味着线程数量可以无限大</li>\n<li><code>keepAliveTime</code>为60秒，意味着线程空闲时间超过60秒就会被杀死</li>\n<li>采用<code>SynchronousQueue</code>装载等待的任务，这个阻塞队列没有存储空间。这意味着只要有请求到来，就必须找到一个工作线程处理，如果当前没有空闲的线程，那么就创建一条新的线程</li>\n</ol>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                  threadFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CachedThreadPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建线程池</span></span><br><span class=\"line\">        ExecutorService service = Executors.newCachedThreadPool();</span><br><span class=\"line\">        System.out.println(service);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 添加任务</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            service.execute(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1L</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 查询线程池状态（一段时间后自动销毁空闲线程）</span></span><br><span class=\"line\">        System.out.println(service);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">80</span>);</span><br><span class=\"line\">        System.out.println(service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]</span></span><br><span class=\"line\"><span class=\"comment\">// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 0]</span></span><br><span class=\"line\"><span class=\"comment\">// pool-1-thread-2</span></span><br><span class=\"line\"><span class=\"comment\">// pool-1-thread-1</span></span><br><span class=\"line\"><span class=\"comment\">// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2]</span></span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>CachedThreadPool是一个可以无限扩大的线程池，它有以下特点：</p>\n<ol>\n<li><code>corePoolSize</code>为0，<code>maximumPoolSize</code>为无限大，意味着线程数量可以无限大</li>\n<li><code>keepAliveTime</code>为60秒，意味着线程空闲时间超过60秒就会被杀死</li>\n<li>采用<code>SynchronousQueue</code>装载等待的任务，这个阻塞队列没有存储空间。这意味着只要有请求到来，就必须找到一个工作线程处理，如果当前没有空闲的线程，那么就创建一条新的线程</li>\n</ol>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                  threadFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CachedThreadPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建线程池</span></span><br><span class=\"line\">        ExecutorService service = Executors.newCachedThreadPool();</span><br><span class=\"line\">        System.out.println(service);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 添加任务</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            service.execute(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1L</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 查询线程池状态（一段时间后自动销毁空闲线程）</span></span><br><span class=\"line\">        System.out.println(service);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">80</span>);</span><br><span class=\"line\">        System.out.println(service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]</span></span><br><span class=\"line\"><span class=\"comment\">// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 0]</span></span><br><span class=\"line\"><span class=\"comment\">// pool-1-thread-2</span></span><br><span class=\"line\"><span class=\"comment\">// pool-1-thread-1</span></span><br><span class=\"line\"><span class=\"comment\">// java.util.concurrent.ThreadPoolExecutor@28a418fc[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2]</span></span><br></pre></td></tr></table></figure>"},{"title":"4.4 SingleThreadExecutor","date":"2020-02-03T09:00:00.000Z","_content":"SingleThreadExecutor就像线程数为1的FixedThreadPool，它可以确保任务线程中都只有唯一的任务在运行（多个线程使用同一文件系统时，可以用SingleThreadExecutor来保持同步）。\n\nSingleThreadExecutor不能保证任务执行的顺序。\n\n## 实例\n```java\npublic class SingleThreadExecutor {\n\n    public static void main(String[] args) {\n        ExecutorService service = Executors.newSingleThreadExecutor();\n        for (int i = 0; i < 5; i++) {\n            final int j = i;\n            service.execute(() -> System.out.println(j + \" \" + Thread.currentThread().getName()));\n        }\n    }\n}\n\n// 0 pool-1-thread-1\n// 1 pool-1-thread-1\n// 2 pool-1-thread-1\n// 3 pool-1-thread-1\n// 4 pool-1-thread-1\n```","source":"_posts/多线程高并发编程/4.4 SingleThreadExecutor.md","raw":"---\ntitle: 4.4 SingleThreadExecutor\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- Thread\n- SingleThreadExecutor\n\ndate: 2020-02-03 17:00\n---\nSingleThreadExecutor就像线程数为1的FixedThreadPool，它可以确保任务线程中都只有唯一的任务在运行（多个线程使用同一文件系统时，可以用SingleThreadExecutor来保持同步）。\n\nSingleThreadExecutor不能保证任务执行的顺序。\n\n## 实例\n```java\npublic class SingleThreadExecutor {\n\n    public static void main(String[] args) {\n        ExecutorService service = Executors.newSingleThreadExecutor();\n        for (int i = 0; i < 5; i++) {\n            final int j = i;\n            service.execute(() -> System.out.println(j + \" \" + Thread.currentThread().getName()));\n        }\n    }\n}\n\n// 0 pool-1-thread-1\n// 1 pool-1-thread-1\n// 2 pool-1-thread-1\n// 3 pool-1-thread-1\n// 4 pool-1-thread-1\n```","slug":"多线程高并发编程/4.4 SingleThreadExecutor","published":1,"updated":"2020-04-12T08:28:29.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m7q0063m33pbh8ng65o","content":"<p>SingleThreadExecutor就像线程数为1的FixedThreadPool，它可以确保任务线程中都只有唯一的任务在运行（多个线程使用同一文件系统时，可以用SingleThreadExecutor来保持同步）。</p>\n<p>SingleThreadExecutor不能保证任务执行的顺序。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleThreadExecutor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService service = Executors.newSingleThreadExecutor();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">            service.execute(() -&gt; System.out.println(j + <span class=\"string\">\" \"</span> + Thread.currentThread().getName()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0 pool-1-thread-1</span></span><br><span class=\"line\"><span class=\"comment\">// 1 pool-1-thread-1</span></span><br><span class=\"line\"><span class=\"comment\">// 2 pool-1-thread-1</span></span><br><span class=\"line\"><span class=\"comment\">// 3 pool-1-thread-1</span></span><br><span class=\"line\"><span class=\"comment\">// 4 pool-1-thread-1</span></span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>SingleThreadExecutor就像线程数为1的FixedThreadPool，它可以确保任务线程中都只有唯一的任务在运行（多个线程使用同一文件系统时，可以用SingleThreadExecutor来保持同步）。</p>\n<p>SingleThreadExecutor不能保证任务执行的顺序。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleThreadExecutor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService service = Executors.newSingleThreadExecutor();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">            service.execute(() -&gt; System.out.println(j + <span class=\"string\">\" \"</span> + Thread.currentThread().getName()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0 pool-1-thread-1</span></span><br><span class=\"line\"><span class=\"comment\">// 1 pool-1-thread-1</span></span><br><span class=\"line\"><span class=\"comment\">// 2 pool-1-thread-1</span></span><br><span class=\"line\"><span class=\"comment\">// 3 pool-1-thread-1</span></span><br><span class=\"line\"><span class=\"comment\">// 4 pool-1-thread-1</span></span><br></pre></td></tr></table></figure>"},{"title":"4.5 ScheduledThreadPool","date":"2020-02-03T10:00:00.000Z","_content":"ScheduledThreadPool用来处理延时任务或定时任务，它接受SchduledFutureTask类型的任务，有两种提交任务的方式。\n\n```mermaid\ngraph LR\n    A[主线程]\n    B1[scheduleAtFixedRate]\n    B2[scheduleWithFixedRate]\n    C1[Runnable]\n    C2[Runnable]\n    C3[Runnable]\n\n    D1[线程]\n    D2[线程]\n    D3[线程]\n\n    subgraph DelayQueue\n        C1\n        C2\n        C3\n    end\n\n    subgraph CorePool\n        D1\n        D2\n        D3\n    end\n\n    A --> B1\n    A --> B2\n\n    B1 --> C1\n    B2 --> C2\n\n    D1 -->|take| C3\n```\n\n\n## scheduleAtFixedRate\n每间隔一段时间执行，分为两种情况：\n1. 当前任务执行时间小于间隔时间，每次到点即执行\n1. 当前任务执行时间大于等于间隔时间，任务执行后立即执行下一次任务。相当于连续执行了\n\n```java\n/**\n * 任务执行时间（10s）小于间隔时间(10s)\n */\npublic class ScheduleExecutorPool {\n\n    public static void main(String[] args) {\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n        \n        System.out.println(\"start...\");\n        scheduler.scheduleAtFixedRate(() -> {\n            System.out.println(\"Start: scheduleAtFixedRate:    \" + new Date());\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"End  : scheduleAtFixedRate:    \" + new Date());\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n}\n// Start: scheduleAtFixedRate:    Mon Feb 03 18:57:43 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 18:57:45 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 18:57:53 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 18:57:55 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 18:58:03 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 18:58:05 CST 2020\n\n/**\n * 任务执行时间（15s）大于间隔时间(10s)\n */\npublic class ScheduleExecutorPool {\n\n    public static void main(String[] args) {\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n\n        scheduler.scheduleAtFixedRate(() -> {\n            System.out.println(\"Start: scheduleAtFixedRate:    \" + new Date());\n            try {\n                TimeUnit.SECONDS.sleep(15);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"End  : scheduleAtFixedRate:    \" + new Date());\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n}\n\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:00:39 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:00:54 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:00:54 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:01:09 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:01:09 CST 2020\n```\n\n## scheduleWithFixedDelay\n每当上次任务执行完毕后，间隔一段时间执行。不管当前任务执行时间大于、等于还是小于间隔时间，执行效果都是一样的。\n\n```java\n/**\n * 任务执行时间（5s）小于间隔时间(10s)\n * 可以看出每个End后，等待了10秒，才启动下一次Start。\n */\npublic class ScheduleExecutorPool {\n\n    public static void main(String[] args) {\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n\n        scheduler.scheduleWithFixedDelay(() -> {\n            System.out.println(\"Start: scheduleAtFixedRate:    \" + new Date());\n            try {\n                TimeUnit.SECONDS.sleep(5);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"End  : scheduleAtFixedRate:    \" + new Date());\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n}\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:03:41 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:03:46 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:03:56 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:04:01 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:04:11 CST 2020\n\n\n/**\n * 任务执行时间（15s）大于间隔时间(10s)\n * 可以看出每个End后，等待了10秒，才启动下一次Start。\n */\npublic class ScheduleExecutorPool {\n\n    public static void main(String[] args) {\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n\n        scheduler.scheduleWithFixedDelay(() -> {\n            System.out.println(\"Start: scheduleAtFixedRate:    \" + new Date());\n            try {\n                TimeUnit.SECONDS.sleep(15);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"End  : scheduleAtFixedRate:    \" + new Date());\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n}\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:06:41 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:06:57 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:07:07 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:07:22 CST 2020\n```","source":"_posts/多线程高并发编程/4.5 ScheduledThreadPool.md","raw":"---\ntitle: 4.5 ScheduledThreadPool\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- Thread\n- SingleThreadExecutor\n\ndate: 2020-02-03 18:00\n---\nScheduledThreadPool用来处理延时任务或定时任务，它接受SchduledFutureTask类型的任务，有两种提交任务的方式。\n\n```mermaid\ngraph LR\n    A[主线程]\n    B1[scheduleAtFixedRate]\n    B2[scheduleWithFixedRate]\n    C1[Runnable]\n    C2[Runnable]\n    C3[Runnable]\n\n    D1[线程]\n    D2[线程]\n    D3[线程]\n\n    subgraph DelayQueue\n        C1\n        C2\n        C3\n    end\n\n    subgraph CorePool\n        D1\n        D2\n        D3\n    end\n\n    A --> B1\n    A --> B2\n\n    B1 --> C1\n    B2 --> C2\n\n    D1 -->|take| C3\n```\n\n\n## scheduleAtFixedRate\n每间隔一段时间执行，分为两种情况：\n1. 当前任务执行时间小于间隔时间，每次到点即执行\n1. 当前任务执行时间大于等于间隔时间，任务执行后立即执行下一次任务。相当于连续执行了\n\n```java\n/**\n * 任务执行时间（10s）小于间隔时间(10s)\n */\npublic class ScheduleExecutorPool {\n\n    public static void main(String[] args) {\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n        \n        System.out.println(\"start...\");\n        scheduler.scheduleAtFixedRate(() -> {\n            System.out.println(\"Start: scheduleAtFixedRate:    \" + new Date());\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"End  : scheduleAtFixedRate:    \" + new Date());\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n}\n// Start: scheduleAtFixedRate:    Mon Feb 03 18:57:43 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 18:57:45 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 18:57:53 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 18:57:55 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 18:58:03 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 18:58:05 CST 2020\n\n/**\n * 任务执行时间（15s）大于间隔时间(10s)\n */\npublic class ScheduleExecutorPool {\n\n    public static void main(String[] args) {\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n\n        scheduler.scheduleAtFixedRate(() -> {\n            System.out.println(\"Start: scheduleAtFixedRate:    \" + new Date());\n            try {\n                TimeUnit.SECONDS.sleep(15);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"End  : scheduleAtFixedRate:    \" + new Date());\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n}\n\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:00:39 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:00:54 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:00:54 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:01:09 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:01:09 CST 2020\n```\n\n## scheduleWithFixedDelay\n每当上次任务执行完毕后，间隔一段时间执行。不管当前任务执行时间大于、等于还是小于间隔时间，执行效果都是一样的。\n\n```java\n/**\n * 任务执行时间（5s）小于间隔时间(10s)\n * 可以看出每个End后，等待了10秒，才启动下一次Start。\n */\npublic class ScheduleExecutorPool {\n\n    public static void main(String[] args) {\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n\n        scheduler.scheduleWithFixedDelay(() -> {\n            System.out.println(\"Start: scheduleAtFixedRate:    \" + new Date());\n            try {\n                TimeUnit.SECONDS.sleep(5);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"End  : scheduleAtFixedRate:    \" + new Date());\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n}\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:03:41 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:03:46 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:03:56 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:04:01 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:04:11 CST 2020\n\n\n/**\n * 任务执行时间（15s）大于间隔时间(10s)\n * 可以看出每个End后，等待了10秒，才启动下一次Start。\n */\npublic class ScheduleExecutorPool {\n\n    public static void main(String[] args) {\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n\n        scheduler.scheduleWithFixedDelay(() -> {\n            System.out.println(\"Start: scheduleAtFixedRate:    \" + new Date());\n            try {\n                TimeUnit.SECONDS.sleep(15);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"End  : scheduleAtFixedRate:    \" + new Date());\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n}\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:06:41 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:06:57 CST 2020\n// Start: scheduleAtFixedRate:    Mon Feb 03 19:07:07 CST 2020\n// End  : scheduleAtFixedRate:    Mon Feb 03 19:07:22 CST 2020\n```","slug":"多线程高并发编程/4.5 ScheduledThreadPool","published":1,"updated":"2020-04-12T08:28:29.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m7t0068m33p5hzre2us","content":"<p>ScheduledThreadPool用来处理延时任务或定时任务，它接受SchduledFutureTask类型的任务，有两种提交任务的方式。</p>\n<pre class=\"mermaid\">graph LR\n    A[主线程]\n    B1[scheduleAtFixedRate]\n    B2[scheduleWithFixedRate]\n    C1[Runnable]\n    C2[Runnable]\n    C3[Runnable]\n\n    D1[线程]\n    D2[线程]\n    D3[线程]\n\n    subgraph DelayQueue\n        C1\n        C2\n        C3\n    end\n\n    subgraph CorePool\n        D1\n        D2\n        D3\n    end\n\n    A --> B1\n    A --> B2\n\n    B1 --> C1\n    B2 --> C2\n\n    D1 -->|take| C3</pre>\n\n\n<h2 id=\"scheduleAtFixedRate\"><a href=\"#scheduleAtFixedRate\" class=\"headerlink\" title=\"scheduleAtFixedRate\"></a>scheduleAtFixedRate</h2><p>每间隔一段时间执行，分为两种情况：</p>\n<ol>\n<li>当前任务执行时间小于间隔时间，每次到点即执行</li>\n<li>当前任务执行时间大于等于间隔时间，任务执行后立即执行下一次任务。相当于连续执行了</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务执行时间（10s）小于间隔时间(10s)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleExecutorPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start...\"</span>);</span><br><span class=\"line\">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Start: scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"End  : scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 18:57:43 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 18:57:45 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 18:57:53 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 18:57:55 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 18:58:03 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 18:58:05 CST 2020</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务执行时间（15s）大于间隔时间(10s)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleExecutorPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Start: scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">15</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"End  : scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:00:39 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:00:54 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:00:54 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:01:09 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:01:09 CST 2020</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"scheduleWithFixedDelay\"><a href=\"#scheduleWithFixedDelay\" class=\"headerlink\" title=\"scheduleWithFixedDelay\"></a>scheduleWithFixedDelay</h2><p>每当上次任务执行完毕后，间隔一段时间执行。不管当前任务执行时间大于、等于还是小于间隔时间，执行效果都是一样的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务执行时间（5s）小于间隔时间(10s)</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以看出每个End后，等待了10秒，才启动下一次Start。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleExecutorPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduler.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Start: scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"End  : scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:03:41 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:03:46 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:03:56 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:04:01 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:04:11 CST 2020</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务执行时间（15s）大于间隔时间(10s)</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以看出每个End后，等待了10秒，才启动下一次Start。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleExecutorPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduler.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Start: scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">15</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"End  : scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:06:41 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:06:57 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:07:07 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:07:22 CST 2020</span></span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>ScheduledThreadPool用来处理延时任务或定时任务，它接受SchduledFutureTask类型的任务，有两种提交任务的方式。</p>\n<pre class=\"mermaid\">graph LR\n    A[主线程]\n    B1[scheduleAtFixedRate]\n    B2[scheduleWithFixedRate]\n    C1[Runnable]\n    C2[Runnable]\n    C3[Runnable]\n\n    D1[线程]\n    D2[线程]\n    D3[线程]\n\n    subgraph DelayQueue\n        C1\n        C2\n        C3\n    end\n\n    subgraph CorePool\n        D1\n        D2\n        D3\n    end\n\n    A --> B1\n    A --> B2\n\n    B1 --> C1\n    B2 --> C2\n\n    D1 -->|take| C3</pre>\n\n\n<h2 id=\"scheduleAtFixedRate\"><a href=\"#scheduleAtFixedRate\" class=\"headerlink\" title=\"scheduleAtFixedRate\"></a>scheduleAtFixedRate</h2><p>每间隔一段时间执行，分为两种情况：</p>\n<ol>\n<li>当前任务执行时间小于间隔时间，每次到点即执行</li>\n<li>当前任务执行时间大于等于间隔时间，任务执行后立即执行下一次任务。相当于连续执行了</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务执行时间（10s）小于间隔时间(10s)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleExecutorPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start...\"</span>);</span><br><span class=\"line\">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Start: scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"End  : scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 18:57:43 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 18:57:45 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 18:57:53 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 18:57:55 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 18:58:03 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 18:58:05 CST 2020</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务执行时间（15s）大于间隔时间(10s)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleExecutorPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Start: scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">15</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"End  : scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:00:39 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:00:54 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:00:54 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:01:09 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:01:09 CST 2020</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"scheduleWithFixedDelay\"><a href=\"#scheduleWithFixedDelay\" class=\"headerlink\" title=\"scheduleWithFixedDelay\"></a>scheduleWithFixedDelay</h2><p>每当上次任务执行完毕后，间隔一段时间执行。不管当前任务执行时间大于、等于还是小于间隔时间，执行效果都是一样的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务执行时间（5s）小于间隔时间(10s)</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以看出每个End后，等待了10秒，才启动下一次Start。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleExecutorPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduler.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Start: scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"End  : scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:03:41 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:03:46 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:03:56 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:04:01 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:04:11 CST 2020</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务执行时间（15s）大于间隔时间(10s)</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以看出每个End后，等待了10秒，才启动下一次Start。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleExecutorPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduler.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Start: scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">15</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"End  : scheduleAtFixedRate:    \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:06:41 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:06:57 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// Start: scheduleAtFixedRate:    Mon Feb 03 19:07:07 CST 2020</span></span><br><span class=\"line\"><span class=\"comment\">// End  : scheduleAtFixedRate:    Mon Feb 03 19:07:22 CST 2020</span></span><br></pre></td></tr></table></figure>"},{"title":"4.6 ForkJoinPool","date":"2020-02-03T17:13:00.000Z","_content":"Java7提供了ForkJoinPool来支持将一个任务拆分成多个“小任务”并行计算，再把多个“小任务”的结果合并成总的计算结果。\n\nForkJoinPool是ExecutorService的实现类，因此是一种特殊的线程池。\n\n```mermaid\nclassDiagram\n    class Future\n    class ForkJoinTask\n\n    class RecusiveTask {\n        T compute()*\n    }\n    class RecusiveAction {\n        void compute()*\n    }\n\n    Future <|.. ForkJoinTask\n    ForkJoinTask <|--RecusiveTask\n    ForkJoinTask <|--RecusiveAction\n\n    class Executor\n    class ExecutorService\n    class AbstractExecutorService\n    class ForkJoinPool {\n        invoke(ForkJoinTask task)\n        submit(ForkJoinTask task)\n    }\n\n    Executor <|-- ExecutorService\n    ExecutorService <|.. AbstractExecutorService\n    AbstractExecutorService <|.. ForkJoinPool\n```\n\n## 使用方法\n创建ForkJoinPool实例之后，就可以调用它的`submit(ForkJoinTask<T> task)`或`invoke(ForkJoinTask<T> task)`来执行任务了。\n\n其中ForkJoinTask代表一个可以并行、合并的任务。ForkJoinTask是可以抽象类，它还有两个抽象子类：RecusiveAction和RecusiveTask。其中RecusiveTask代表有返回值的任务，而RecusiveAction代表没有返回值的任务。\n\n## 实例\n```java\n/**\n * Project Name:Spring0725\n * File Name:ForJoinPollTask.java\n * Package Name:work1201.basic\n * Date:2017年12月4日下午5:41:46\n * Copyright (c) 2017, 深圳金融电子结算中心 All Rights Reserved.\n *\n*/\n\npackage work1201.basic;\n\nimport java.util.Random;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.RecursiveTask;\n\n/**\n * ClassName:ForJoinPollTask <br/>\n * Function: 对一个长度为100的元素值进行累加\n * Date:     2017年12月4日 下午5:41:46 <br/>\n * @author   prd-lxw\n * @version   1.0\n * @since    JDK 1.7\n * @see      \n */\npublic class ForJoinPollTask {\n\n    public static void main(String[] args) throws Exception {\n        int[] arr = new int[100];\n        Random random = new Random();\n        int total =0;\n        //初始化100个数组元素\n        for(int i=0,len = arr.length;i<len;i++){\n            int temp = random.nextInt(20);\n            //对数组元素赋值，并将数组元素的值添加到sum总和中\n            total += (arr[i]=temp);\n        }\n        System.out.println(\"初始化数组总和：\"+total);\n        SumTask task = new SumTask(arr, 0, arr.length);\n        // 创建一个通用池，这个是jdk1.8提供的功能\n        ForkJoinPool pool = ForkJoinPool.commonPool();\n        Future<Integer> future = pool.submit(task); //提交分解的SumTask 任务\n        System.out.println(\"多线程执行结果：\"+future.get());\n        pool.shutdown(); //关闭线程池\n    }\n\n}\n\n/**\n * ClassName: SumTask <br/>\n * Function: 继承抽象类RecursiveTask，通过返回的结果，来实现数组的多线程分段累累加\n *  RecursiveTask 具有返回值\n * date: 2017年12月4日 下午6:08:11 <br/>\n *\n * @author prd-lxw\n * @version 1.0\n * @since JDK 1.7\n */\nclass SumTask extends RecursiveTask<Integer>{\n    private static final int THRESHOLD = 20; //每个小任务 最多只累加20个数\n    private int arry[];\n    private int start;\n    private int end;\n    \n    \n\n    /**\n     * Creates a new instance of SumTask.\n     * 累加从start到end的arry数组\n     * @param arry\n     * @param start\n     * @param end\n     */\n    public SumTask(int[] arry, int start, int end) {\n        super();\n        this.arry = arry;\n        this.start = start;\n        this.end = end;\n    }\n\n\n\n    @Override\n    protected Integer compute() {\n        int sum =0;\n        //当end与start之间的差小于threshold时，开始进行实际的累加\n        if(end - start <THRESHOLD){\n            for(int i= start;i<end;i++){\n                sum += arry[i];\n            }\n            return sum;\n        }else {//当end与start之间的差大于threshold，即要累加的数超过20个时候，将大任务分解成小任务\n            int middle = (start+ end)/2;\n            SumTask left = new SumTask(arry, start, middle);\n            SumTask right = new SumTask(arry, middle, end);\n            //并行执行两个 小任务\n            left.fork();\n            right.fork();\n            //把两个小任务累加的结果合并起来\n            return left.join()+right.join();\n        }\n        \n    }\n    \n}\n```","source":"_posts/多线程高并发编程/4.6 ForkJoinPool.md","raw":"---\ntitle: 4.6 ForkJoinPool\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- Thread\n- WorkStealingPool\n\ndate: 2020-02-04 01:13\n---\nJava7提供了ForkJoinPool来支持将一个任务拆分成多个“小任务”并行计算，再把多个“小任务”的结果合并成总的计算结果。\n\nForkJoinPool是ExecutorService的实现类，因此是一种特殊的线程池。\n\n```mermaid\nclassDiagram\n    class Future\n    class ForkJoinTask\n\n    class RecusiveTask {\n        T compute()*\n    }\n    class RecusiveAction {\n        void compute()*\n    }\n\n    Future <|.. ForkJoinTask\n    ForkJoinTask <|--RecusiveTask\n    ForkJoinTask <|--RecusiveAction\n\n    class Executor\n    class ExecutorService\n    class AbstractExecutorService\n    class ForkJoinPool {\n        invoke(ForkJoinTask task)\n        submit(ForkJoinTask task)\n    }\n\n    Executor <|-- ExecutorService\n    ExecutorService <|.. AbstractExecutorService\n    AbstractExecutorService <|.. ForkJoinPool\n```\n\n## 使用方法\n创建ForkJoinPool实例之后，就可以调用它的`submit(ForkJoinTask<T> task)`或`invoke(ForkJoinTask<T> task)`来执行任务了。\n\n其中ForkJoinTask代表一个可以并行、合并的任务。ForkJoinTask是可以抽象类，它还有两个抽象子类：RecusiveAction和RecusiveTask。其中RecusiveTask代表有返回值的任务，而RecusiveAction代表没有返回值的任务。\n\n## 实例\n```java\n/**\n * Project Name:Spring0725\n * File Name:ForJoinPollTask.java\n * Package Name:work1201.basic\n * Date:2017年12月4日下午5:41:46\n * Copyright (c) 2017, 深圳金融电子结算中心 All Rights Reserved.\n *\n*/\n\npackage work1201.basic;\n\nimport java.util.Random;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.RecursiveTask;\n\n/**\n * ClassName:ForJoinPollTask <br/>\n * Function: 对一个长度为100的元素值进行累加\n * Date:     2017年12月4日 下午5:41:46 <br/>\n * @author   prd-lxw\n * @version   1.0\n * @since    JDK 1.7\n * @see      \n */\npublic class ForJoinPollTask {\n\n    public static void main(String[] args) throws Exception {\n        int[] arr = new int[100];\n        Random random = new Random();\n        int total =0;\n        //初始化100个数组元素\n        for(int i=0,len = arr.length;i<len;i++){\n            int temp = random.nextInt(20);\n            //对数组元素赋值，并将数组元素的值添加到sum总和中\n            total += (arr[i]=temp);\n        }\n        System.out.println(\"初始化数组总和：\"+total);\n        SumTask task = new SumTask(arr, 0, arr.length);\n        // 创建一个通用池，这个是jdk1.8提供的功能\n        ForkJoinPool pool = ForkJoinPool.commonPool();\n        Future<Integer> future = pool.submit(task); //提交分解的SumTask 任务\n        System.out.println(\"多线程执行结果：\"+future.get());\n        pool.shutdown(); //关闭线程池\n    }\n\n}\n\n/**\n * ClassName: SumTask <br/>\n * Function: 继承抽象类RecursiveTask，通过返回的结果，来实现数组的多线程分段累累加\n *  RecursiveTask 具有返回值\n * date: 2017年12月4日 下午6:08:11 <br/>\n *\n * @author prd-lxw\n * @version 1.0\n * @since JDK 1.7\n */\nclass SumTask extends RecursiveTask<Integer>{\n    private static final int THRESHOLD = 20; //每个小任务 最多只累加20个数\n    private int arry[];\n    private int start;\n    private int end;\n    \n    \n\n    /**\n     * Creates a new instance of SumTask.\n     * 累加从start到end的arry数组\n     * @param arry\n     * @param start\n     * @param end\n     */\n    public SumTask(int[] arry, int start, int end) {\n        super();\n        this.arry = arry;\n        this.start = start;\n        this.end = end;\n    }\n\n\n\n    @Override\n    protected Integer compute() {\n        int sum =0;\n        //当end与start之间的差小于threshold时，开始进行实际的累加\n        if(end - start <THRESHOLD){\n            for(int i= start;i<end;i++){\n                sum += arry[i];\n            }\n            return sum;\n        }else {//当end与start之间的差大于threshold，即要累加的数超过20个时候，将大任务分解成小任务\n            int middle = (start+ end)/2;\n            SumTask left = new SumTask(arry, start, middle);\n            SumTask right = new SumTask(arry, middle, end);\n            //并行执行两个 小任务\n            left.fork();\n            right.fork();\n            //把两个小任务累加的结果合并起来\n            return left.join()+right.join();\n        }\n        \n    }\n    \n}\n```","slug":"多线程高并发编程/4.6 ForkJoinPool","published":1,"updated":"2020-04-12T08:28:29.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m7v006am33pc8ytdgkf","content":"<p>Java7提供了ForkJoinPool来支持将一个任务拆分成多个“小任务”并行计算，再把多个“小任务”的结果合并成总的计算结果。</p>\n<p>ForkJoinPool是ExecutorService的实现类，因此是一种特殊的线程池。</p>\n<pre class=\"mermaid\">classDiagram\n    class Future\n    class ForkJoinTask\n\n    class RecusiveTask {\n        T compute()*\n    }\n    class RecusiveAction {\n        void compute()*\n    }\n\n    Future <|.. ForkJoinTask\n    ForkJoinTask <|--RecusiveTask\n    ForkJoinTask <|--RecusiveAction\n\n    class Executor\n    class ExecutorService\n    class AbstractExecutorService\n    class ForkJoinPool {\n        invoke(ForkJoinTask task)\n        submit(ForkJoinTask task)\n    }\n\n    Executor <|-- ExecutorService\n    ExecutorService <|.. AbstractExecutorService\n    AbstractExecutorService <|.. ForkJoinPool</pre>\n\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>创建ForkJoinPool实例之后，就可以调用它的<code>submit(ForkJoinTask&lt;T&gt; task)</code>或<code>invoke(ForkJoinTask&lt;T&gt; task)</code>来执行任务了。</p>\n<p>其中ForkJoinTask代表一个可以并行、合并的任务。ForkJoinTask是可以抽象类，它还有两个抽象子类：RecusiveAction和RecusiveTask。其中RecusiveTask代表有返回值的任务，而RecusiveAction代表没有返回值的任务。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Project Name:Spring0725</span></span><br><span class=\"line\"><span class=\"comment\"> * File Name:ForJoinPollTask.java</span></span><br><span class=\"line\"><span class=\"comment\"> * Package Name:work1201.basic</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:2017年12月4日下午5:41:46</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2017, 深圳金融电子结算中心 All Rights Reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> work1201.basic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.RecursiveTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ClassName:ForJoinPollTask &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Function: 对一个长度为100的元素值进行累加</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:     2017年12月4日 下午5:41:46 &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>   prd-lxw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span>   1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span>    JDK 1.7</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>      </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForJoinPollTask</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//初始化100个数组元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,len = arr.length;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = random.nextInt(<span class=\"number\">20</span>);</span><br><span class=\"line\">            <span class=\"comment\">//对数组元素赋值，并将数组元素的值添加到sum总和中</span></span><br><span class=\"line\">            total += (arr[i]=temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化数组总和：\"</span>+total);</span><br><span class=\"line\">        SumTask task = <span class=\"keyword\">new</span> SumTask(arr, <span class=\"number\">0</span>, arr.length);</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个通用池，这个是jdk1.8提供的功能</span></span><br><span class=\"line\">        ForkJoinPool pool = ForkJoinPool.commonPool();</span><br><span class=\"line\">        Future&lt;Integer&gt; future = pool.submit(task); <span class=\"comment\">//提交分解的SumTask 任务</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"多线程执行结果：\"</span>+future.get());</span><br><span class=\"line\">        pool.shutdown(); <span class=\"comment\">//关闭线程池</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ClassName: SumTask &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Function: 继承抽象类RecursiveTask，通过返回的结果，来实现数组的多线程分段累累加</span></span><br><span class=\"line\"><span class=\"comment\"> *  RecursiveTask 具有返回值</span></span><br><span class=\"line\"><span class=\"comment\"> * date: 2017年12月4日 下午6:08:11 &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> prd-lxw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> JDK 1.7</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THRESHOLD = <span class=\"number\">20</span>; <span class=\"comment\">//每个小任务 最多只累加20个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> arry[];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new instance of SumTask.</span></span><br><span class=\"line\"><span class=\"comment\">     * 累加从start到end的arry数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arry</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SumTask</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arry, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arry = arry;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Integer <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//当end与start之间的差小于threshold时，开始进行实际的累加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(end - start &lt;THRESHOLD)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i= start;i&lt;end;i++)&#123;</span><br><span class=\"line\">                sum += arry[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//当end与start之间的差大于threshold，即要累加的数超过20个时候，将大任务分解成小任务</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> middle = (start+ end)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            SumTask left = <span class=\"keyword\">new</span> SumTask(arry, start, middle);</span><br><span class=\"line\">            SumTask right = <span class=\"keyword\">new</span> SumTask(arry, middle, end);</span><br><span class=\"line\">            <span class=\"comment\">//并行执行两个 小任务</span></span><br><span class=\"line\">            left.fork();</span><br><span class=\"line\">            right.fork();</span><br><span class=\"line\">            <span class=\"comment\">//把两个小任务累加的结果合并起来</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> left.join()+right.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Java7提供了ForkJoinPool来支持将一个任务拆分成多个“小任务”并行计算，再把多个“小任务”的结果合并成总的计算结果。</p>\n<p>ForkJoinPool是ExecutorService的实现类，因此是一种特殊的线程池。</p>\n<pre class=\"mermaid\">classDiagram\n    class Future\n    class ForkJoinTask\n\n    class RecusiveTask {\n        T compute()*\n    }\n    class RecusiveAction {\n        void compute()*\n    }\n\n    Future <|.. ForkJoinTask\n    ForkJoinTask <|--RecusiveTask\n    ForkJoinTask <|--RecusiveAction\n\n    class Executor\n    class ExecutorService\n    class AbstractExecutorService\n    class ForkJoinPool {\n        invoke(ForkJoinTask task)\n        submit(ForkJoinTask task)\n    }\n\n    Executor <|-- ExecutorService\n    ExecutorService <|.. AbstractExecutorService\n    AbstractExecutorService <|.. ForkJoinPool</pre>\n\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>创建ForkJoinPool实例之后，就可以调用它的<code>submit(ForkJoinTask&lt;T&gt; task)</code>或<code>invoke(ForkJoinTask&lt;T&gt; task)</code>来执行任务了。</p>\n<p>其中ForkJoinTask代表一个可以并行、合并的任务。ForkJoinTask是可以抽象类，它还有两个抽象子类：RecusiveAction和RecusiveTask。其中RecusiveTask代表有返回值的任务，而RecusiveAction代表没有返回值的任务。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Project Name:Spring0725</span></span><br><span class=\"line\"><span class=\"comment\"> * File Name:ForJoinPollTask.java</span></span><br><span class=\"line\"><span class=\"comment\"> * Package Name:work1201.basic</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:2017年12月4日下午5:41:46</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2017, 深圳金融电子结算中心 All Rights Reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> work1201.basic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.RecursiveTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ClassName:ForJoinPollTask &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Function: 对一个长度为100的元素值进行累加</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:     2017年12月4日 下午5:41:46 &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>   prd-lxw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span>   1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span>    JDK 1.7</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>      </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForJoinPollTask</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//初始化100个数组元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,len = arr.length;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = random.nextInt(<span class=\"number\">20</span>);</span><br><span class=\"line\">            <span class=\"comment\">//对数组元素赋值，并将数组元素的值添加到sum总和中</span></span><br><span class=\"line\">            total += (arr[i]=temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化数组总和：\"</span>+total);</span><br><span class=\"line\">        SumTask task = <span class=\"keyword\">new</span> SumTask(arr, <span class=\"number\">0</span>, arr.length);</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个通用池，这个是jdk1.8提供的功能</span></span><br><span class=\"line\">        ForkJoinPool pool = ForkJoinPool.commonPool();</span><br><span class=\"line\">        Future&lt;Integer&gt; future = pool.submit(task); <span class=\"comment\">//提交分解的SumTask 任务</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"多线程执行结果：\"</span>+future.get());</span><br><span class=\"line\">        pool.shutdown(); <span class=\"comment\">//关闭线程池</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ClassName: SumTask &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Function: 继承抽象类RecursiveTask，通过返回的结果，来实现数组的多线程分段累累加</span></span><br><span class=\"line\"><span class=\"comment\"> *  RecursiveTask 具有返回值</span></span><br><span class=\"line\"><span class=\"comment\"> * date: 2017年12月4日 下午6:08:11 &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> prd-lxw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> JDK 1.7</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THRESHOLD = <span class=\"number\">20</span>; <span class=\"comment\">//每个小任务 最多只累加20个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> arry[];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new instance of SumTask.</span></span><br><span class=\"line\"><span class=\"comment\">     * 累加从start到end的arry数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arry</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SumTask</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arry, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arry = arry;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Integer <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//当end与start之间的差小于threshold时，开始进行实际的累加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(end - start &lt;THRESHOLD)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i= start;i&lt;end;i++)&#123;</span><br><span class=\"line\">                sum += arry[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//当end与start之间的差大于threshold，即要累加的数超过20个时候，将大任务分解成小任务</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> middle = (start+ end)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            SumTask left = <span class=\"keyword\">new</span> SumTask(arry, start, middle);</span><br><span class=\"line\">            SumTask right = <span class=\"keyword\">new</span> SumTask(arry, middle, end);</span><br><span class=\"line\">            <span class=\"comment\">//并行执行两个 小任务</span></span><br><span class=\"line\">            left.fork();</span><br><span class=\"line\">            right.fork();</span><br><span class=\"line\">            <span class=\"comment\">//把两个小任务累加的结果合并起来</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> left.join()+right.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"4.7 自定义线程池","date":"2020-02-03T18:13:00.000Z","_content":"\n## Executors存在什么问题\n在阿里巴巴Java开发者手册中指明，使用Executor创建线程可能会导致OOM（OutOfMemory）：\n1. `FixedThreadPool和SingleThreadPool`\n    允许的请求队列长度为Integer.MAX_VALUE，可能会积累大量的请求，从而导致OOM\n1. `CacheThreadPool和ScheuledThreadPool`\n    允许的创建线程数为Integer.MAX_VALUE，可能会积累大量的请求，从而导致OOM\n\n```java\nExecutorService service = Executors.newFixedThreadPool(15);\nfor (int i = 0; i < Integer.MAX_VALUE; i++) {\n    service.execute(() -> {\n        // doing something\n    });\n}\n\n```\n\n通过指定JVM参数`-Xmx8m -Xms8m`运行以上代码，会抛出OOM`java.lang.OutOfMemoryError: GC overhead limit exceeded`。\n\n## 创建线程池的正确姿势\n避免使用Executor创建线程，主要是避免使用其中的默认实现。那么我们可以自己直接调用`ThreadPoolExecutor`的构造函数来自己创建线程池。在创建的同时，给`BlockQueue`指定容量就可以了。\n\n```java\nExecutorService service = new ThreadPoolExecutor(10, 10, 60L, TimeUnit.SECONDS, new ArrayBlockingQueue(10));\n```\n\n这种情况下，一旦提交的线程数超过当前可用线程数时，就会抛出`java.util.concurrent.RejectedExecutionException`，这是因为当前线程池使用的队列是有边界队列，队列已满了便无法继续处理新的请求。但是异常总比发生错误要好。\n\n除了自己定义`ThreadPoolExecutor`外，还可以使用如apache和guava等开源类库。\n\n```java\npublic class GuavaExecutorsDemo {\n    private static ThreadFactory nameThreadFactory = new ThreadFactoryBuilder().setNameformat(\"demo-pool-%d\").build();\n\n    private static ExecutorService pool = new ThreadPoolExecutor(5, 200, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(1024), nameThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n\n    public static void main(String[] args) {\n        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n            pool.execute(new SubThread());\n        }\n    }\n}\n\n通过上述方式创建线程时，不仅可以避免OOM的问题，还可以自定义线程名称，更加方便的出错的时候溯源。\n```","source":"_posts/多线程高并发编程/4.7 自定义线程池.md","raw":"---\ntitle: 4.7 自定义线程池\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- Thread\n- ThreadPoolExcutor\n\ndate: 2020-02-04 02:13\n---\n\n## Executors存在什么问题\n在阿里巴巴Java开发者手册中指明，使用Executor创建线程可能会导致OOM（OutOfMemory）：\n1. `FixedThreadPool和SingleThreadPool`\n    允许的请求队列长度为Integer.MAX_VALUE，可能会积累大量的请求，从而导致OOM\n1. `CacheThreadPool和ScheuledThreadPool`\n    允许的创建线程数为Integer.MAX_VALUE，可能会积累大量的请求，从而导致OOM\n\n```java\nExecutorService service = Executors.newFixedThreadPool(15);\nfor (int i = 0; i < Integer.MAX_VALUE; i++) {\n    service.execute(() -> {\n        // doing something\n    });\n}\n\n```\n\n通过指定JVM参数`-Xmx8m -Xms8m`运行以上代码，会抛出OOM`java.lang.OutOfMemoryError: GC overhead limit exceeded`。\n\n## 创建线程池的正确姿势\n避免使用Executor创建线程，主要是避免使用其中的默认实现。那么我们可以自己直接调用`ThreadPoolExecutor`的构造函数来自己创建线程池。在创建的同时，给`BlockQueue`指定容量就可以了。\n\n```java\nExecutorService service = new ThreadPoolExecutor(10, 10, 60L, TimeUnit.SECONDS, new ArrayBlockingQueue(10));\n```\n\n这种情况下，一旦提交的线程数超过当前可用线程数时，就会抛出`java.util.concurrent.RejectedExecutionException`，这是因为当前线程池使用的队列是有边界队列，队列已满了便无法继续处理新的请求。但是异常总比发生错误要好。\n\n除了自己定义`ThreadPoolExecutor`外，还可以使用如apache和guava等开源类库。\n\n```java\npublic class GuavaExecutorsDemo {\n    private static ThreadFactory nameThreadFactory = new ThreadFactoryBuilder().setNameformat(\"demo-pool-%d\").build();\n\n    private static ExecutorService pool = new ThreadPoolExecutor(5, 200, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(1024), nameThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n\n    public static void main(String[] args) {\n        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n            pool.execute(new SubThread());\n        }\n    }\n}\n\n通过上述方式创建线程时，不仅可以避免OOM的问题，还可以自定义线程名称，更加方便的出错的时候溯源。\n```","slug":"多线程高并发编程/4.7 自定义线程池","published":1,"updated":"2020-04-12T08:28:29.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m7x006fm33p0xkpsrac","content":"<h2 id=\"Executors存在什么问题\"><a href=\"#Executors存在什么问题\" class=\"headerlink\" title=\"Executors存在什么问题\"></a>Executors存在什么问题</h2><p>在阿里巴巴Java开发者手册中指明，使用Executor创建线程可能会导致OOM（OutOfMemory）：</p>\n<ol>\n<li><code>FixedThreadPool和SingleThreadPool</code><br> 允许的请求队列长度为Integer.MAX_VALUE，可能会积累大量的请求，从而导致OOM</li>\n<li><code>CacheThreadPool和ScheuledThreadPool</code><br> 允许的创建线程数为Integer.MAX_VALUE，可能会积累大量的请求，从而导致OOM</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">15</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class=\"line\">    service.execute(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// doing something</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过指定JVM参数<code>-Xmx8m -Xms8m</code>运行以上代码，会抛出OOM<code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code>。</p>\n<h2 id=\"创建线程池的正确姿势\"><a href=\"#创建线程池的正确姿势\" class=\"headerlink\" title=\"创建线程池的正确姿势\"></a>创建线程池的正确姿势</h2><p>避免使用Executor创建线程，主要是避免使用其中的默认实现。那么我们可以自己直接调用<code>ThreadPoolExecutor</code>的构造函数来自己创建线程池。在创建的同时，给<code>BlockQueue</code>指定容量就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">60L</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<p>这种情况下，一旦提交的线程数超过当前可用线程数时，就会抛出<code>java.util.concurrent.RejectedExecutionException</code>，这是因为当前线程池使用的队列是有边界队列，队列已满了便无法继续处理新的请求。但是异常总比发生错误要好。</p>\n<p>除了自己定义<code>ThreadPoolExecutor</code>外，还可以使用如apache和guava等开源类库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuavaExecutorsDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadFactory nameThreadFactory = <span class=\"keyword\">new</span> ThreadFactoryBuilder().setNameformat(<span class=\"string\">\"demo-pool-%d\"</span>).build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ExecutorService pool = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">200</span>, <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS, <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">1024</span>), nameThreadFactory, <span class=\"keyword\">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class=\"line\">            pool.execute(<span class=\"keyword\">new</span> SubThread());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">通过上述方式创建线程时，不仅可以避免OOM的问题，还可以自定义线程名称，更加方便的出错的时候溯源。</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"Executors存在什么问题\"><a href=\"#Executors存在什么问题\" class=\"headerlink\" title=\"Executors存在什么问题\"></a>Executors存在什么问题</h2><p>在阿里巴巴Java开发者手册中指明，使用Executor创建线程可能会导致OOM（OutOfMemory）：</p>\n<ol>\n<li><code>FixedThreadPool和SingleThreadPool</code><br> 允许的请求队列长度为Integer.MAX_VALUE，可能会积累大量的请求，从而导致OOM</li>\n<li><code>CacheThreadPool和ScheuledThreadPool</code><br> 允许的创建线程数为Integer.MAX_VALUE，可能会积累大量的请求，从而导致OOM</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">15</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class=\"line\">    service.execute(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// doing something</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过指定JVM参数<code>-Xmx8m -Xms8m</code>运行以上代码，会抛出OOM<code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code>。</p>\n<h2 id=\"创建线程池的正确姿势\"><a href=\"#创建线程池的正确姿势\" class=\"headerlink\" title=\"创建线程池的正确姿势\"></a>创建线程池的正确姿势</h2><p>避免使用Executor创建线程，主要是避免使用其中的默认实现。那么我们可以自己直接调用<code>ThreadPoolExecutor</code>的构造函数来自己创建线程池。在创建的同时，给<code>BlockQueue</code>指定容量就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">60L</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<p>这种情况下，一旦提交的线程数超过当前可用线程数时，就会抛出<code>java.util.concurrent.RejectedExecutionException</code>，这是因为当前线程池使用的队列是有边界队列，队列已满了便无法继续处理新的请求。但是异常总比发生错误要好。</p>\n<p>除了自己定义<code>ThreadPoolExecutor</code>外，还可以使用如apache和guava等开源类库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuavaExecutorsDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadFactory nameThreadFactory = <span class=\"keyword\">new</span> ThreadFactoryBuilder().setNameformat(<span class=\"string\">\"demo-pool-%d\"</span>).build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ExecutorService pool = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">200</span>, <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS, <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">1024</span>), nameThreadFactory, <span class=\"keyword\">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class=\"line\">            pool.execute(<span class=\"keyword\">new</span> SubThread());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">通过上述方式创建线程时，不仅可以避免OOM的问题，还可以自定义线程名称，更加方便的出错的时候溯源。</span><br></pre></td></tr></table></figure>"},{"title":"ReentrantLock","date":"2020-01-21T16:00:00.000Z","_content":"`Reentrantlock`用于代替`synchornized`，它们之间没有明显的性能差别，但是前者更灵活。\n\n## 例一\n本例子中由于`m1`锁定`this`，只有`m1`执行完毕的时候，`m2`才能执行。\n\n```java\nsynchronized void m1() {\n    try {\n        for (int i = 0; i < 10; i++) {\n            TimeUnit.SECONES.sleep(1);\n            System.out.println(i);\n        }\n    } catch(InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n\nsynchronized void m2() {\n    System.out.println(\"m2...\");\n}\n\npublic static void main(String[] args) {\n    new Thread(m1).start();\n    TimeUnit.SECONES.sleep(1);\n    new Thread(m2).start();\n}\n```\n\n## 例二\n使用ReentrantLock可以完成同样的功能。\n\n```java\nprivate Lock lock = new ReentrantLock();\n\nprivate void m1() {\n    try {\n        lock.lock(); // synchronized(this)\n        for (int i = 0; i < 10; i++) {\n            TimeUnit.SECONES.sleep(1);\n            System.out.println(i);\n        }\n    } catch(InterruptedException e) {\n        e.printStackTrace();\n    } finally {\n        lock.unlock();\n    }\n}\n\nprivate void m2() {\n    lock.lock();\n    System.out.println(\"m2...\");\n    lock.unlock();\n}\n\npublic static void main(String[] args) {\n    new Thread(m1).start();\n    TimeUnit.SECONES.sleep(1);\n    new Thread(m2).start();\n}\n```\n\n需要注意的是，必须要手工释放锁。因为使用`synchronized`锁定的话如果遇到异常，JVM会自动释放锁，但是`ReentrantLock`必须手动释放锁，因为经常在`finally`中进行锁的释放。\n\n## 例三\n`ReentrantLock`可以使用`tryLock`进行尝试锁定，不管锁定与否，方法都将继续执行，可以根据`tryLock`的返回值来判定是否锁定。\n\n```java\nprivate void m3() {\n    boolean locked = lock.tryLock();\n    System.out.println(\"m3...\");\n    if (locked) lock.unlock();\n}\n```\n\n`ReentrantLock`也可以指定`tryLock`的时间，由于`tryLock(time)`会抛出异常，所以要注意`unlock`的处理，必须放到`finally`中。\n\n```java\nprivate void m4() {\n    boolean locked = false;\n\n    try {\n        locked = lock.tryLock(5, TimeUnit.SECONDS);\n        System.out.println(\"m4...\");\n    } catch(InterruptedException e) {\n        e.printStackTrace();\n    } finally {\n        if (locked) lock.unlock();\n    }\n}\n```\n\n## 例四\n`ReentrantLock`还可以调用`lockInterruptibly`方法，可以对线程方法做出响应，在一个线程等待锁的过程中，可以被打断。\n\n```java\npublic static void main(String[] args) {\n    Lock lock = new ReentrantLock();\n\n    Thread t1 = new Thread(() -> {\n        // 因为是静态方法，所以这里lock的是Class\n        lock.lock();\n\n        System.out.println(\"t1...\");\n        // 直接睡死\n        TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);\n        \n        lock.unlock();\n    });\n    t1.start();\n\n    Thread t2 = new Thread(() -> {\n        // 因为是静态方法，所以这里lock的是Class\n        // 因为上面已经睡死了，所以这里一直等待不到锁\n        lock.lock();\n\n        System.out.println(\"t1...\");\n\n        lock.unlock();\n    });\n    t2.start();\n\n    TimeUnit.SECONDS.sleep(1);\n\n    // 打断线程2的等待\n    // 因为t2使用的是lock，所以没法做响应。这里没法执行    \n    t2.interrupt();\n}\n```\n\n```java\npublic static void main(String[] args) {\n    Lock lock = new ReentrantLock();\n\n    Thread t1 = new Thread(() -> {\n        // 因为是静态方法，所以这里lock的是Class\n        lock.lock();\n\n        System.out.println(\"t1...\");\n        // 直接睡死\n        TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);\n        \n        lock.unlock();\n    });\n    t1.start();\n\n    Thread t2 = new Thread(() -> {\n        // 因为是静态方法，所以这里lock的是Class\n        // 这种写法可以对interrupt()作出响应\n        lock.lockInterruptibly();\n\n        System.out.println(\"t1...\");\n\n        lock.unlock();\n    });\n    t2.start();\n\n    TimeUnit.SECONDS.sleep(1);\n\n    // 打断线程2的等待，lockInterruptibly能响应。\n    t2.interrupt();\n}\n```\n\n```mermaid\nsequenceDiagram\n    T1    ->>  Lock:  获取锁（一直占着）\n    T2    -->> Lock:  等待锁\n    主线程 ->>  T2:    中断T2的等待\n```\n\n## 例五\n`ReentrantLock`还可以指定为公平锁。\n\n默认的`synchronized`是竞争锁，没有公平性可言，有可能一个线程等待1秒就获得了锁，另外一个线程等了1天也没能获取。但是它效率高，不需要计算每个线程等了多长时间。\n\n```java\npublic static void main(String[] args) {\n    // 默认的竞争锁，谁得到锁看运气\n    ReentrantLock lock = new ReentrantLock();\n\n    new Thread(() -> {\n        for (int i = 0; i < 100; i++) {\n            lock.lock();\n            System.out.println(\"线程一获取了锁。。。\");\n            lock.unlock();\n        }\n    }).start();\n\n    new Thread(() -> {\n        for (int i = 0; i < 100; i++) {\n            lock.lock();\n            System.out.println(\"线程二获取了锁。。。\");\n            lock.unlock();\n        }\n    }).start();\n}\n\n// 结果分布不均匀\n线程一获取了锁。。。\n线程一获取了锁。。。\n线程一获取了锁。。。\n线程一获取了锁。。。\n线程二获取了锁。。。\n线程二获取了锁。。。\n线程一获取了锁。。。\n...\n```\n\n```mermaid\ngraph BT\n    T1 -->|获取锁| Lock\n    T2 .->|可能需等1秒| Lock\n    T3 .->|可能需等10秒| Lock\n    T4 .->|可能需等1天| Lock\n```\n\n公平锁就是谁等待的时间长，谁就更容易得到锁。\n\n```java\npublic static void main(String[] args) {\n    // 参数为true表示公平锁\n    ReentrantLock lock = new ReentrantLock(true);\n\n    new Thread(() -> {\n        for (int i = 0; i < 100; i++) {\n            lock.lock();\n            System.out.println(\"线程一获取了锁。。。\");\n            lock.unlock();\n        }\n    }).start();\n\n    new Thread(() -> {\n        for (int i = 0; i < 100; i++) {\n            lock.lock();\n            System.out.println(\"线程二获取了锁。。。\");\n            lock.unlock();\n        }\n    }).start();\n}\n\n// 结果分布比较均匀\n线程一获取了锁。。。\n线程一获取了锁。。。\n线程二获取了锁。。。。\n线程一获取了锁。。。\n线程二获取了锁。。。\n线程二获取了锁。。。\n线程一获取了锁。。。\n...\n```\n","source":"_posts/多线程高并发编程/reentrantlock.md","raw":"---\ntitle: ReentrantLock\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-01-22\n---\n`Reentrantlock`用于代替`synchornized`，它们之间没有明显的性能差别，但是前者更灵活。\n\n## 例一\n本例子中由于`m1`锁定`this`，只有`m1`执行完毕的时候，`m2`才能执行。\n\n```java\nsynchronized void m1() {\n    try {\n        for (int i = 0; i < 10; i++) {\n            TimeUnit.SECONES.sleep(1);\n            System.out.println(i);\n        }\n    } catch(InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n\nsynchronized void m2() {\n    System.out.println(\"m2...\");\n}\n\npublic static void main(String[] args) {\n    new Thread(m1).start();\n    TimeUnit.SECONES.sleep(1);\n    new Thread(m2).start();\n}\n```\n\n## 例二\n使用ReentrantLock可以完成同样的功能。\n\n```java\nprivate Lock lock = new ReentrantLock();\n\nprivate void m1() {\n    try {\n        lock.lock(); // synchronized(this)\n        for (int i = 0; i < 10; i++) {\n            TimeUnit.SECONES.sleep(1);\n            System.out.println(i);\n        }\n    } catch(InterruptedException e) {\n        e.printStackTrace();\n    } finally {\n        lock.unlock();\n    }\n}\n\nprivate void m2() {\n    lock.lock();\n    System.out.println(\"m2...\");\n    lock.unlock();\n}\n\npublic static void main(String[] args) {\n    new Thread(m1).start();\n    TimeUnit.SECONES.sleep(1);\n    new Thread(m2).start();\n}\n```\n\n需要注意的是，必须要手工释放锁。因为使用`synchronized`锁定的话如果遇到异常，JVM会自动释放锁，但是`ReentrantLock`必须手动释放锁，因为经常在`finally`中进行锁的释放。\n\n## 例三\n`ReentrantLock`可以使用`tryLock`进行尝试锁定，不管锁定与否，方法都将继续执行，可以根据`tryLock`的返回值来判定是否锁定。\n\n```java\nprivate void m3() {\n    boolean locked = lock.tryLock();\n    System.out.println(\"m3...\");\n    if (locked) lock.unlock();\n}\n```\n\n`ReentrantLock`也可以指定`tryLock`的时间，由于`tryLock(time)`会抛出异常，所以要注意`unlock`的处理，必须放到`finally`中。\n\n```java\nprivate void m4() {\n    boolean locked = false;\n\n    try {\n        locked = lock.tryLock(5, TimeUnit.SECONDS);\n        System.out.println(\"m4...\");\n    } catch(InterruptedException e) {\n        e.printStackTrace();\n    } finally {\n        if (locked) lock.unlock();\n    }\n}\n```\n\n## 例四\n`ReentrantLock`还可以调用`lockInterruptibly`方法，可以对线程方法做出响应，在一个线程等待锁的过程中，可以被打断。\n\n```java\npublic static void main(String[] args) {\n    Lock lock = new ReentrantLock();\n\n    Thread t1 = new Thread(() -> {\n        // 因为是静态方法，所以这里lock的是Class\n        lock.lock();\n\n        System.out.println(\"t1...\");\n        // 直接睡死\n        TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);\n        \n        lock.unlock();\n    });\n    t1.start();\n\n    Thread t2 = new Thread(() -> {\n        // 因为是静态方法，所以这里lock的是Class\n        // 因为上面已经睡死了，所以这里一直等待不到锁\n        lock.lock();\n\n        System.out.println(\"t1...\");\n\n        lock.unlock();\n    });\n    t2.start();\n\n    TimeUnit.SECONDS.sleep(1);\n\n    // 打断线程2的等待\n    // 因为t2使用的是lock，所以没法做响应。这里没法执行    \n    t2.interrupt();\n}\n```\n\n```java\npublic static void main(String[] args) {\n    Lock lock = new ReentrantLock();\n\n    Thread t1 = new Thread(() -> {\n        // 因为是静态方法，所以这里lock的是Class\n        lock.lock();\n\n        System.out.println(\"t1...\");\n        // 直接睡死\n        TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);\n        \n        lock.unlock();\n    });\n    t1.start();\n\n    Thread t2 = new Thread(() -> {\n        // 因为是静态方法，所以这里lock的是Class\n        // 这种写法可以对interrupt()作出响应\n        lock.lockInterruptibly();\n\n        System.out.println(\"t1...\");\n\n        lock.unlock();\n    });\n    t2.start();\n\n    TimeUnit.SECONDS.sleep(1);\n\n    // 打断线程2的等待，lockInterruptibly能响应。\n    t2.interrupt();\n}\n```\n\n```mermaid\nsequenceDiagram\n    T1    ->>  Lock:  获取锁（一直占着）\n    T2    -->> Lock:  等待锁\n    主线程 ->>  T2:    中断T2的等待\n```\n\n## 例五\n`ReentrantLock`还可以指定为公平锁。\n\n默认的`synchronized`是竞争锁，没有公平性可言，有可能一个线程等待1秒就获得了锁，另外一个线程等了1天也没能获取。但是它效率高，不需要计算每个线程等了多长时间。\n\n```java\npublic static void main(String[] args) {\n    // 默认的竞争锁，谁得到锁看运气\n    ReentrantLock lock = new ReentrantLock();\n\n    new Thread(() -> {\n        for (int i = 0; i < 100; i++) {\n            lock.lock();\n            System.out.println(\"线程一获取了锁。。。\");\n            lock.unlock();\n        }\n    }).start();\n\n    new Thread(() -> {\n        for (int i = 0; i < 100; i++) {\n            lock.lock();\n            System.out.println(\"线程二获取了锁。。。\");\n            lock.unlock();\n        }\n    }).start();\n}\n\n// 结果分布不均匀\n线程一获取了锁。。。\n线程一获取了锁。。。\n线程一获取了锁。。。\n线程一获取了锁。。。\n线程二获取了锁。。。\n线程二获取了锁。。。\n线程一获取了锁。。。\n...\n```\n\n```mermaid\ngraph BT\n    T1 -->|获取锁| Lock\n    T2 .->|可能需等1秒| Lock\n    T3 .->|可能需等10秒| Lock\n    T4 .->|可能需等1天| Lock\n```\n\n公平锁就是谁等待的时间长，谁就更容易得到锁。\n\n```java\npublic static void main(String[] args) {\n    // 参数为true表示公平锁\n    ReentrantLock lock = new ReentrantLock(true);\n\n    new Thread(() -> {\n        for (int i = 0; i < 100; i++) {\n            lock.lock();\n            System.out.println(\"线程一获取了锁。。。\");\n            lock.unlock();\n        }\n    }).start();\n\n    new Thread(() -> {\n        for (int i = 0; i < 100; i++) {\n            lock.lock();\n            System.out.println(\"线程二获取了锁。。。\");\n            lock.unlock();\n        }\n    }).start();\n}\n\n// 结果分布比较均匀\n线程一获取了锁。。。\n线程一获取了锁。。。\n线程二获取了锁。。。。\n线程一获取了锁。。。\n线程二获取了锁。。。\n线程二获取了锁。。。\n线程一获取了锁。。。\n...\n```\n","slug":"多线程高并发编程/reentrantlock","published":1,"updated":"2020-04-12T08:28:29.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m7z006hm33p2fdv5flb","content":"<p><code>Reentrantlock</code>用于代替<code>synchornized</code>，它们之间没有明显的性能差别，但是前者更灵活。</p>\n<h2 id=\"例一\"><a href=\"#例一\" class=\"headerlink\" title=\"例一\"></a>例一</h2><p>本例子中由于<code>m1</code>锁定<code>this</code>，只有<code>m1</code>执行完毕的时候，<code>m2</code>才能执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            TimeUnit.SECONES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"m2...\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(m1).start();</span><br><span class=\"line\">    TimeUnit.SECONES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(m2).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例二\"><a href=\"#例二\" class=\"headerlink\" title=\"例二\"></a>例二</h2><p>使用ReentrantLock可以完成同样的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        lock.lock(); <span class=\"comment\">// synchronized(this)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            TimeUnit.SECONES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"m2...\"</span>);</span><br><span class=\"line\">    lock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(m1).start();</span><br><span class=\"line\">    TimeUnit.SECONES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(m2).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，必须要手工释放锁。因为使用<code>synchronized</code>锁定的话如果遇到异常，JVM会自动释放锁，但是<code>ReentrantLock</code>必须手动释放锁，因为经常在<code>finally</code>中进行锁的释放。</p>\n<h2 id=\"例三\"><a href=\"#例三\" class=\"headerlink\" title=\"例三\"></a>例三</h2><p><code>ReentrantLock</code>可以使用<code>tryLock</code>进行尝试锁定，不管锁定与否，方法都将继续执行，可以根据<code>tryLock</code>的返回值来判定是否锁定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> locked = lock.tryLock();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"m3...\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (locked) lock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ReentrantLock</code>也可以指定<code>tryLock</code>的时间，由于<code>tryLock(time)</code>会抛出异常，所以要注意<code>unlock</code>的处理，必须放到<code>finally</code>中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> locked = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        locked = lock.tryLock(<span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"m4...\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (locked) lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例四\"><a href=\"#例四\" class=\"headerlink\" title=\"例四\"></a>例四</h2><p><code>ReentrantLock</code>还可以调用<code>lockInterruptibly</code>方法，可以对线程方法做出响应，在一个线程等待锁的过程中，可以被打断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为是静态方法，所以这里lock的是Class</span></span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"t1...\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 直接睡死</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);</span><br><span class=\"line\">        </span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为是静态方法，所以这里lock的是Class</span></span><br><span class=\"line\">        <span class=\"comment\">// 因为上面已经睡死了，所以这里一直等待不到锁</span></span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"t1...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打断线程2的等待</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为t2使用的是lock，所以没法做响应。这里没法执行    </span></span><br><span class=\"line\">    t2.interrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为是静态方法，所以这里lock的是Class</span></span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"t1...\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 直接睡死</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);</span><br><span class=\"line\">        </span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为是静态方法，所以这里lock的是Class</span></span><br><span class=\"line\">        <span class=\"comment\">// 这种写法可以对interrupt()作出响应</span></span><br><span class=\"line\">        lock.lockInterruptibly();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"t1...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打断线程2的等待，lockInterruptibly能响应。</span></span><br><span class=\"line\">    t2.interrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">sequenceDiagram\n    T1    ->>  Lock:  获取锁（一直占着）\n    T2    -->> Lock:  等待锁\n    主线程 ->>  T2:    中断T2的等待</pre>\n\n<h2 id=\"例五\"><a href=\"#例五\" class=\"headerlink\" title=\"例五\"></a>例五</h2><p><code>ReentrantLock</code>还可以指定为公平锁。</p>\n<p>默认的<code>synchronized</code>是竞争锁，没有公平性可言，有可能一个线程等待1秒就获得了锁，另外一个线程等了1天也没能获取。但是它效率高，不需要计算每个线程等了多长时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认的竞争锁，谁得到锁看运气</span></span><br><span class=\"line\">    ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"线程一获取了锁。。。\"</span>);</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"线程二获取了锁。。。\"</span>);</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果分布不均匀</span></span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程二获取了锁。。。</span><br><span class=\"line\">线程二获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">graph BT\n    T1 -->|获取锁| Lock\n    T2 .->|可能需等1秒| Lock\n    T3 .->|可能需等10秒| Lock\n    T4 .->|可能需等1天| Lock</pre>\n\n<p>公平锁就是谁等待的时间长，谁就更容易得到锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数为true表示公平锁</span></span><br><span class=\"line\">    ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"线程一获取了锁。。。\"</span>);</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"线程二获取了锁。。。\"</span>);</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果分布比较均匀</span></span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程二获取了锁。。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程二获取了锁。。。</span><br><span class=\"line\">线程二获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p><code>Reentrantlock</code>用于代替<code>synchornized</code>，它们之间没有明显的性能差别，但是前者更灵活。</p>\n<h2 id=\"例一\"><a href=\"#例一\" class=\"headerlink\" title=\"例一\"></a>例一</h2><p>本例子中由于<code>m1</code>锁定<code>this</code>，只有<code>m1</code>执行完毕的时候，<code>m2</code>才能执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            TimeUnit.SECONES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"m2...\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(m1).start();</span><br><span class=\"line\">    TimeUnit.SECONES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(m2).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例二\"><a href=\"#例二\" class=\"headerlink\" title=\"例二\"></a>例二</h2><p>使用ReentrantLock可以完成同样的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        lock.lock(); <span class=\"comment\">// synchronized(this)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            TimeUnit.SECONES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"m2...\"</span>);</span><br><span class=\"line\">    lock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(m1).start();</span><br><span class=\"line\">    TimeUnit.SECONES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(m2).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，必须要手工释放锁。因为使用<code>synchronized</code>锁定的话如果遇到异常，JVM会自动释放锁，但是<code>ReentrantLock</code>必须手动释放锁，因为经常在<code>finally</code>中进行锁的释放。</p>\n<h2 id=\"例三\"><a href=\"#例三\" class=\"headerlink\" title=\"例三\"></a>例三</h2><p><code>ReentrantLock</code>可以使用<code>tryLock</code>进行尝试锁定，不管锁定与否，方法都将继续执行，可以根据<code>tryLock</code>的返回值来判定是否锁定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> locked = lock.tryLock();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"m3...\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (locked) lock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ReentrantLock</code>也可以指定<code>tryLock</code>的时间，由于<code>tryLock(time)</code>会抛出异常，所以要注意<code>unlock</code>的处理，必须放到<code>finally</code>中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> locked = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        locked = lock.tryLock(<span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"m4...\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (locked) lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例四\"><a href=\"#例四\" class=\"headerlink\" title=\"例四\"></a>例四</h2><p><code>ReentrantLock</code>还可以调用<code>lockInterruptibly</code>方法，可以对线程方法做出响应，在一个线程等待锁的过程中，可以被打断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为是静态方法，所以这里lock的是Class</span></span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"t1...\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 直接睡死</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);</span><br><span class=\"line\">        </span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为是静态方法，所以这里lock的是Class</span></span><br><span class=\"line\">        <span class=\"comment\">// 因为上面已经睡死了，所以这里一直等待不到锁</span></span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"t1...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打断线程2的等待</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为t2使用的是lock，所以没法做响应。这里没法执行    </span></span><br><span class=\"line\">    t2.interrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为是静态方法，所以这里lock的是Class</span></span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"t1...\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 直接睡死</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);</span><br><span class=\"line\">        </span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为是静态方法，所以这里lock的是Class</span></span><br><span class=\"line\">        <span class=\"comment\">// 这种写法可以对interrupt()作出响应</span></span><br><span class=\"line\">        lock.lockInterruptibly();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"t1...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打断线程2的等待，lockInterruptibly能响应。</span></span><br><span class=\"line\">    t2.interrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">sequenceDiagram\n    T1    ->>  Lock:  获取锁（一直占着）\n    T2    -->> Lock:  等待锁\n    主线程 ->>  T2:    中断T2的等待</pre>\n\n<h2 id=\"例五\"><a href=\"#例五\" class=\"headerlink\" title=\"例五\"></a>例五</h2><p><code>ReentrantLock</code>还可以指定为公平锁。</p>\n<p>默认的<code>synchronized</code>是竞争锁，没有公平性可言，有可能一个线程等待1秒就获得了锁，另外一个线程等了1天也没能获取。但是它效率高，不需要计算每个线程等了多长时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认的竞争锁，谁得到锁看运气</span></span><br><span class=\"line\">    ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"线程一获取了锁。。。\"</span>);</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"线程二获取了锁。。。\"</span>);</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果分布不均匀</span></span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程二获取了锁。。。</span><br><span class=\"line\">线程二获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">graph BT\n    T1 -->|获取锁| Lock\n    T2 .->|可能需等1秒| Lock\n    T3 .->|可能需等10秒| Lock\n    T4 .->|可能需等1天| Lock</pre>\n\n<p>公平锁就是谁等待的时间长，谁就更容易得到锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数为true表示公平锁</span></span><br><span class=\"line\">    ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"线程一获取了锁。。。\"</span>);</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"线程二获取了锁。。。\"</span>);</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果分布比较均匀</span></span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程二获取了锁。。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">线程二获取了锁。。。</span><br><span class=\"line\">线程二获取了锁。。。</span><br><span class=\"line\">线程一获取了锁。。。</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n"},{"title":"第01期：何为学习","date":"2020-02-11T10:01:00.000Z","_content":"老师和家长总是告诉我们要好好学习，可从没有人告诉过我们什么是学习，学习和记忆的区别又是什么。以至于很多人误以为记忆就是学习。\n\n更讽刺的是，市面上有一大堆学习方法，学习这些“学习方法”比你要学习的内容还要难。\n\n或许你曾有过疑问，为什么小学你经常拿满分，但到了初中后拿满分却越来越难，并非你没有努力，是也不是因为难度不同，而是因为前后所运用的是两种不同的能力。\n\n小学二年级的乘法所运用的能力是记忆，考试题都在乘法表的 81 种情况之内，只要没有偷懒，就可以拿满分。\n\n但记忆可以解决的是情况有限的问题。它两个弊端：\n- 容量限制：你我都知道乘法有无数种情况，我们没有办法记忆所有情况的答案。\n- 难以集齐：就算想要记忆，也无法集齐所有的情况。设想有 108 种不同的卡片，每次随机给你 1 张，要集齐所有卡片的难度有多大？当年小浣熊干脆面就是用这种水浒卡的营销策略大赚了一笔。\n\n实际生活中，所要解决的问题都有无数种情况，但可记忆的例子十分有限，这也是为什么我们需要学习。\n\n> 学习是从有限的例子中，找出问题和答案之间规律的一个过程，而所找出的规律叫做知识。\n\n高中有了文科和理科，恰巧分别对应着记忆和学习：\n- 文科：人文规定，社会文化等知识，相对而言难以找到规律来压缩信息，只能依靠大量的记忆。\n- 理科：自然规律，可以像 F = ma 一样找到一个公式压缩无限情况，可以通过若干例子找出规则。\n\n然而分科并不科学。很多女孩子正是因为“听话”，可又没人告诉过她们正确的学习方式，使得她们今后的“学习”走偏了方向，会非常认真的记忆所有信息。\n\n然而如果“学习”后要记忆的内容比“学习”前还要多，那并没有真正学习。\n\n我们常说学习要举一反三，但严格来说，只有举一反三才叫学习。\n\n诺贝尔物理奖得主费曼说“如果你没有办法用简单的语言表述你所学的知识，你就没有真正学会它”。因为学习正是在用知识来压缩原本无限的信息。\n\n学习英语时，我们多么希望动词的过去式没有特例，因为我们不想记忆各种不同的情况，也难以搜集这些不同的情况。我们在用规律来换取信息的压缩。\n\n如果我们真的能获得所有的例子，那就压根不需要学习了。\n\n![](001.png)","source":"_posts/学习观/第01期：何为学习.md","raw":"---\ntitle: 第01期：何为学习\ncategories:\n- 学习观\n\ntags:\n- 学习观\n- 何为学习\n\ndate: 2020-02-11 18:01\n---\n老师和家长总是告诉我们要好好学习，可从没有人告诉过我们什么是学习，学习和记忆的区别又是什么。以至于很多人误以为记忆就是学习。\n\n更讽刺的是，市面上有一大堆学习方法，学习这些“学习方法”比你要学习的内容还要难。\n\n或许你曾有过疑问，为什么小学你经常拿满分，但到了初中后拿满分却越来越难，并非你没有努力，是也不是因为难度不同，而是因为前后所运用的是两种不同的能力。\n\n小学二年级的乘法所运用的能力是记忆，考试题都在乘法表的 81 种情况之内，只要没有偷懒，就可以拿满分。\n\n但记忆可以解决的是情况有限的问题。它两个弊端：\n- 容量限制：你我都知道乘法有无数种情况，我们没有办法记忆所有情况的答案。\n- 难以集齐：就算想要记忆，也无法集齐所有的情况。设想有 108 种不同的卡片，每次随机给你 1 张，要集齐所有卡片的难度有多大？当年小浣熊干脆面就是用这种水浒卡的营销策略大赚了一笔。\n\n实际生活中，所要解决的问题都有无数种情况，但可记忆的例子十分有限，这也是为什么我们需要学习。\n\n> 学习是从有限的例子中，找出问题和答案之间规律的一个过程，而所找出的规律叫做知识。\n\n高中有了文科和理科，恰巧分别对应着记忆和学习：\n- 文科：人文规定，社会文化等知识，相对而言难以找到规律来压缩信息，只能依靠大量的记忆。\n- 理科：自然规律，可以像 F = ma 一样找到一个公式压缩无限情况，可以通过若干例子找出规则。\n\n然而分科并不科学。很多女孩子正是因为“听话”，可又没人告诉过她们正确的学习方式，使得她们今后的“学习”走偏了方向，会非常认真的记忆所有信息。\n\n然而如果“学习”后要记忆的内容比“学习”前还要多，那并没有真正学习。\n\n我们常说学习要举一反三，但严格来说，只有举一反三才叫学习。\n\n诺贝尔物理奖得主费曼说“如果你没有办法用简单的语言表述你所学的知识，你就没有真正学会它”。因为学习正是在用知识来压缩原本无限的信息。\n\n学习英语时，我们多么希望动词的过去式没有特例，因为我们不想记忆各种不同的情况，也难以搜集这些不同的情况。我们在用规律来换取信息的压缩。\n\n如果我们真的能获得所有的例子，那就压根不需要学习了。\n\n![](001.png)","slug":"学习观/第01期：何为学习","published":1,"updated":"2020-04-12T08:28:29.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m82006lm33pz4zcrcnm","content":"<p>老师和家长总是告诉我们要好好学习，可从没有人告诉过我们什么是学习，学习和记忆的区别又是什么。以至于很多人误以为记忆就是学习。</p>\n<p>更讽刺的是，市面上有一大堆学习方法，学习这些“学习方法”比你要学习的内容还要难。</p>\n<p>或许你曾有过疑问，为什么小学你经常拿满分，但到了初中后拿满分却越来越难，并非你没有努力，是也不是因为难度不同，而是因为前后所运用的是两种不同的能力。</p>\n<p>小学二年级的乘法所运用的能力是记忆，考试题都在乘法表的 81 种情况之内，只要没有偷懒，就可以拿满分。</p>\n<p>但记忆可以解决的是情况有限的问题。它两个弊端：</p>\n<ul>\n<li>容量限制：你我都知道乘法有无数种情况，我们没有办法记忆所有情况的答案。</li>\n<li>难以集齐：就算想要记忆，也无法集齐所有的情况。设想有 108 种不同的卡片，每次随机给你 1 张，要集齐所有卡片的难度有多大？当年小浣熊干脆面就是用这种水浒卡的营销策略大赚了一笔。</li>\n</ul>\n<p>实际生活中，所要解决的问题都有无数种情况，但可记忆的例子十分有限，这也是为什么我们需要学习。</p>\n<blockquote>\n<p>学习是从有限的例子中，找出问题和答案之间规律的一个过程，而所找出的规律叫做知识。</p>\n</blockquote>\n<p>高中有了文科和理科，恰巧分别对应着记忆和学习：</p>\n<ul>\n<li>文科：人文规定，社会文化等知识，相对而言难以找到规律来压缩信息，只能依靠大量的记忆。</li>\n<li>理科：自然规律，可以像 F = ma 一样找到一个公式压缩无限情况，可以通过若干例子找出规则。</li>\n</ul>\n<p>然而分科并不科学。很多女孩子正是因为“听话”，可又没人告诉过她们正确的学习方式，使得她们今后的“学习”走偏了方向，会非常认真的记忆所有信息。</p>\n<p>然而如果“学习”后要记忆的内容比“学习”前还要多，那并没有真正学习。</p>\n<p>我们常说学习要举一反三，但严格来说，只有举一反三才叫学习。</p>\n<p>诺贝尔物理奖得主费曼说“如果你没有办法用简单的语言表述你所学的知识，你就没有真正学会它”。因为学习正是在用知识来压缩原本无限的信息。</p>\n<p>学习英语时，我们多么希望动词的过去式没有特例，因为我们不想记忆各种不同的情况，也难以搜集这些不同的情况。我们在用规律来换取信息的压缩。</p>\n<p>如果我们真的能获得所有的例子，那就压根不需要学习了。</p>\n<p><img src=\"001.png\" alt=\"\"></p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>老师和家长总是告诉我们要好好学习，可从没有人告诉过我们什么是学习，学习和记忆的区别又是什么。以至于很多人误以为记忆就是学习。</p>\n<p>更讽刺的是，市面上有一大堆学习方法，学习这些“学习方法”比你要学习的内容还要难。</p>\n<p>或许你曾有过疑问，为什么小学你经常拿满分，但到了初中后拿满分却越来越难，并非你没有努力，是也不是因为难度不同，而是因为前后所运用的是两种不同的能力。</p>\n<p>小学二年级的乘法所运用的能力是记忆，考试题都在乘法表的 81 种情况之内，只要没有偷懒，就可以拿满分。</p>\n<p>但记忆可以解决的是情况有限的问题。它两个弊端：</p>\n<ul>\n<li>容量限制：你我都知道乘法有无数种情况，我们没有办法记忆所有情况的答案。</li>\n<li>难以集齐：就算想要记忆，也无法集齐所有的情况。设想有 108 种不同的卡片，每次随机给你 1 张，要集齐所有卡片的难度有多大？当年小浣熊干脆面就是用这种水浒卡的营销策略大赚了一笔。</li>\n</ul>\n<p>实际生活中，所要解决的问题都有无数种情况，但可记忆的例子十分有限，这也是为什么我们需要学习。</p>\n<blockquote>\n<p>学习是从有限的例子中，找出问题和答案之间规律的一个过程，而所找出的规律叫做知识。</p>\n</blockquote>\n<p>高中有了文科和理科，恰巧分别对应着记忆和学习：</p>\n<ul>\n<li>文科：人文规定，社会文化等知识，相对而言难以找到规律来压缩信息，只能依靠大量的记忆。</li>\n<li>理科：自然规律，可以像 F = ma 一样找到一个公式压缩无限情况，可以通过若干例子找出规则。</li>\n</ul>\n<p>然而分科并不科学。很多女孩子正是因为“听话”，可又没人告诉过她们正确的学习方式，使得她们今后的“学习”走偏了方向，会非常认真的记忆所有信息。</p>\n<p>然而如果“学习”后要记忆的内容比“学习”前还要多，那并没有真正学习。</p>\n<p>我们常说学习要举一反三，但严格来说，只有举一反三才叫学习。</p>\n<p>诺贝尔物理奖得主费曼说“如果你没有办法用简单的语言表述你所学的知识，你就没有真正学会它”。因为学习正是在用知识来压缩原本无限的信息。</p>\n<p>学习英语时，我们多么希望动词的过去式没有特例，因为我们不想记忆各种不同的情况，也难以搜集这些不同的情况。我们在用规律来换取信息的压缩。</p>\n<p>如果我们真的能获得所有的例子，那就压根不需要学习了。</p>\n<p><img src=\"001.png\" alt=\"\"></p>\n"},{"title":"第02期：学习步骤","date":"2020-02-11T10:02:00.000Z","_content":"\n## 光看定义是学不会的\n在人脑中，学习是通过例子找出问题和答案的规律，重塑大脑连接而完成。学习的第一步就是**要明确什么是问题，什么是答案**。很多人压根连要学的知识所描述的问题和答案都不清楚就“学习”，最后只是记住知识的描述而已。\n\n例1：这就是为什么你查维基、百度百科，看完定义还是什么都不懂。因为定义是知识的描述。\n\n例2：学习做菜，我们很清楚，问题（输入）食材，答案（输出）是的美食，要学习的是怎么把食材变成美食。通过的是一个又一个的例子让大脑的连接记住了什么样的食材应该怎么切，多重的食材应该放多少盐。\n\n例3：某人想要学习计算机 C 语言，认认真真的记住了培训老师的每一句话，但老师从来没告诉过他 C 这个知识的问题（输入）和答案（输出）是什么，要用 C 做什么（输入怎么变成输出）。最终只是记忆住了知识的描述而已。给他新的任务（输入），他还是不知道怎么把任务变成计算机可执行的步骤（输出）。甚至给他任务后，他都不知道自己在哪，要做什么。\n\n## 信息与知识\n然而知识不是信息，学习不是记忆，并无法仅凭记住知识来学会知识。这也是人们在教和学的过程中最容易犯的错误。以为将知识告诉了某人，对方就可以学会。以为听懂了知识，就表示自己学会了。\n\n信息是具体的情况，知识不是单纯的信息，而是信息与信息之间的关系。\n\n例1：你小时候养的狗有四条腿，隔壁邻居家的狗有四条腿，这里有两个具体的情况。但要学习的知识是全宇宙的狗与狗腿数的关系，即狗都有四条腿。\n\n例2：狗剩花了15元买了10斤西瓜，赵四花了30元买了20斤西瓜，这里是两个具体情况。可获得的知识是，可能他们村的西瓜斤数（输入）与价格（输出）的关系是1.5元每斤。\n\n例3：父母对孩子的照顾是爱，人们对花草的呵护是爱，少年对李小龙的崇拜是爱，男生付出了金钱要求对方一定要回报自己，不是爱，是交易。4个实例中，爱的共性是奉献。输入是事件，输出是判断是否为爱。这种判断类的问题叫做分类。可以是多个类别。\n\n为什么一定学习？正如上面的例子所展现的，这些实例我们一辈子都记不完，也穷举不出所有的不同情况。只能找出共性，来判断从来没见过的事件是不是爱。来判断一锅的食材该放多少盐合适。\n\n## 改变你的大脑连接才是学习\n然而知识的描述只是对学习起到指引的作用，最终的学习一定要**通过例子理清问题和答案的关系来重塑大脑连接**。\n\n这就是为什么在讨论、写文章、以及辩论时一定会伴随着例子，而不是单纯的对知识进行描述。因此在看书时，也要注意区分，哪些是例子，哪些是对知识的描述。我个人在写文章时，甚至常常会将例子和知识描述分开来写。\n\n例1：游泳并不是看了游泳书就能学会的，而是需要通过无数个例子来重塑大脑的神经连接。所以需要时间，需要睡眠，反复几天的重塑后，你会发现自己并没有看过什么新的游泳书，但就会游泳了，因为大脑连接重塑了。\n\n例2：真正学会的知识最难忘记，而且是越复杂的知识越难忘，这也是为什么就算流落荒岛10年的人后回家后照样可以听懂母语，毕竟大脑连接已经构造出这种信息与信息的关系。\n\n![](001.jpeg)\n\n## 先把书读厚，再把书读薄\n华罗庚的先把书读厚，再把书读薄的学习方法就是指：先尽可能的搜集更多的例子帮助你体会问题和答案之间的关系，而当你真正学会的时候，这些例子就被压缩成知识。\n\n例1：单看我的视频并且自己不去联想例子、也没有看这个文章，只是看完就完了的人，只会觉得他懂了。但实际没有。1分钟的视频是装不下那么多信息的，《学习观》视频最大的作用在于调动注意力和帮助梳理关系，但若看完了梳理的关系而不去联想身边的无数个例子从而改变自己大脑连接的话，也就没有做到先把书读厚，再把书读薄。\n\n## 学得的知识不一定正确\n最后，由于学习是为了解决新问题，所以需要验证从现有例子中所提炼的知识，是否能描述问题和答案的真正规律，而不是仅仅记忆了现有的例子。\n\n例1：这就是为什么需要考试。考试的目的正是为了验证你构建的关系是否正确，通过分数来回过头调节自己的学习。不幸的由于成长环境的因素，让学生以为学习就是为了考试得高分。\n\n例2：因为学习的核心是从少数例子推出规律的归纳法，永远无法保证正确，只能保证符合现有的例子中。所以需要来不断通过验证的方式调整自己归纳的规律。比如牛顿力学在宏观例子中好用，但在微观例子中就出现误差了。","source":"_posts/学习观/第02期：学习步骤.md","raw":"---\ntitle: 第02期：学习步骤\ncategories:\n- 学习观\n\ntags:\n- 学习观\n- 学习步骤\n\ndate: 2020-02-11 18:02\n---\n\n## 光看定义是学不会的\n在人脑中，学习是通过例子找出问题和答案的规律，重塑大脑连接而完成。学习的第一步就是**要明确什么是问题，什么是答案**。很多人压根连要学的知识所描述的问题和答案都不清楚就“学习”，最后只是记住知识的描述而已。\n\n例1：这就是为什么你查维基、百度百科，看完定义还是什么都不懂。因为定义是知识的描述。\n\n例2：学习做菜，我们很清楚，问题（输入）食材，答案（输出）是的美食，要学习的是怎么把食材变成美食。通过的是一个又一个的例子让大脑的连接记住了什么样的食材应该怎么切，多重的食材应该放多少盐。\n\n例3：某人想要学习计算机 C 语言，认认真真的记住了培训老师的每一句话，但老师从来没告诉过他 C 这个知识的问题（输入）和答案（输出）是什么，要用 C 做什么（输入怎么变成输出）。最终只是记忆住了知识的描述而已。给他新的任务（输入），他还是不知道怎么把任务变成计算机可执行的步骤（输出）。甚至给他任务后，他都不知道自己在哪，要做什么。\n\n## 信息与知识\n然而知识不是信息，学习不是记忆，并无法仅凭记住知识来学会知识。这也是人们在教和学的过程中最容易犯的错误。以为将知识告诉了某人，对方就可以学会。以为听懂了知识，就表示自己学会了。\n\n信息是具体的情况，知识不是单纯的信息，而是信息与信息之间的关系。\n\n例1：你小时候养的狗有四条腿，隔壁邻居家的狗有四条腿，这里有两个具体的情况。但要学习的知识是全宇宙的狗与狗腿数的关系，即狗都有四条腿。\n\n例2：狗剩花了15元买了10斤西瓜，赵四花了30元买了20斤西瓜，这里是两个具体情况。可获得的知识是，可能他们村的西瓜斤数（输入）与价格（输出）的关系是1.5元每斤。\n\n例3：父母对孩子的照顾是爱，人们对花草的呵护是爱，少年对李小龙的崇拜是爱，男生付出了金钱要求对方一定要回报自己，不是爱，是交易。4个实例中，爱的共性是奉献。输入是事件，输出是判断是否为爱。这种判断类的问题叫做分类。可以是多个类别。\n\n为什么一定学习？正如上面的例子所展现的，这些实例我们一辈子都记不完，也穷举不出所有的不同情况。只能找出共性，来判断从来没见过的事件是不是爱。来判断一锅的食材该放多少盐合适。\n\n## 改变你的大脑连接才是学习\n然而知识的描述只是对学习起到指引的作用，最终的学习一定要**通过例子理清问题和答案的关系来重塑大脑连接**。\n\n这就是为什么在讨论、写文章、以及辩论时一定会伴随着例子，而不是单纯的对知识进行描述。因此在看书时，也要注意区分，哪些是例子，哪些是对知识的描述。我个人在写文章时，甚至常常会将例子和知识描述分开来写。\n\n例1：游泳并不是看了游泳书就能学会的，而是需要通过无数个例子来重塑大脑的神经连接。所以需要时间，需要睡眠，反复几天的重塑后，你会发现自己并没有看过什么新的游泳书，但就会游泳了，因为大脑连接重塑了。\n\n例2：真正学会的知识最难忘记，而且是越复杂的知识越难忘，这也是为什么就算流落荒岛10年的人后回家后照样可以听懂母语，毕竟大脑连接已经构造出这种信息与信息的关系。\n\n![](001.jpeg)\n\n## 先把书读厚，再把书读薄\n华罗庚的先把书读厚，再把书读薄的学习方法就是指：先尽可能的搜集更多的例子帮助你体会问题和答案之间的关系，而当你真正学会的时候，这些例子就被压缩成知识。\n\n例1：单看我的视频并且自己不去联想例子、也没有看这个文章，只是看完就完了的人，只会觉得他懂了。但实际没有。1分钟的视频是装不下那么多信息的，《学习观》视频最大的作用在于调动注意力和帮助梳理关系，但若看完了梳理的关系而不去联想身边的无数个例子从而改变自己大脑连接的话，也就没有做到先把书读厚，再把书读薄。\n\n## 学得的知识不一定正确\n最后，由于学习是为了解决新问题，所以需要验证从现有例子中所提炼的知识，是否能描述问题和答案的真正规律，而不是仅仅记忆了现有的例子。\n\n例1：这就是为什么需要考试。考试的目的正是为了验证你构建的关系是否正确，通过分数来回过头调节自己的学习。不幸的由于成长环境的因素，让学生以为学习就是为了考试得高分。\n\n例2：因为学习的核心是从少数例子推出规律的归纳法，永远无法保证正确，只能保证符合现有的例子中。所以需要来不断通过验证的方式调整自己归纳的规律。比如牛顿力学在宏观例子中好用，但在微观例子中就出现误差了。","slug":"学习观/第02期：学习步骤","published":1,"updated":"2020-04-12T08:28:29.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m84006nm33pzwk2ldjz","content":"<h2 id=\"光看定义是学不会的\"><a href=\"#光看定义是学不会的\" class=\"headerlink\" title=\"光看定义是学不会的\"></a>光看定义是学不会的</h2><p>在人脑中，学习是通过例子找出问题和答案的规律，重塑大脑连接而完成。学习的第一步就是<strong>要明确什么是问题，什么是答案</strong>。很多人压根连要学的知识所描述的问题和答案都不清楚就“学习”，最后只是记住知识的描述而已。</p>\n<p>例1：这就是为什么你查维基、百度百科，看完定义还是什么都不懂。因为定义是知识的描述。</p>\n<p>例2：学习做菜，我们很清楚，问题（输入）食材，答案（输出）是的美食，要学习的是怎么把食材变成美食。通过的是一个又一个的例子让大脑的连接记住了什么样的食材应该怎么切，多重的食材应该放多少盐。</p>\n<p>例3：某人想要学习计算机 C 语言，认认真真的记住了培训老师的每一句话，但老师从来没告诉过他 C 这个知识的问题（输入）和答案（输出）是什么，要用 C 做什么（输入怎么变成输出）。最终只是记忆住了知识的描述而已。给他新的任务（输入），他还是不知道怎么把任务变成计算机可执行的步骤（输出）。甚至给他任务后，他都不知道自己在哪，要做什么。</p>\n<h2 id=\"信息与知识\"><a href=\"#信息与知识\" class=\"headerlink\" title=\"信息与知识\"></a>信息与知识</h2><p>然而知识不是信息，学习不是记忆，并无法仅凭记住知识来学会知识。这也是人们在教和学的过程中最容易犯的错误。以为将知识告诉了某人，对方就可以学会。以为听懂了知识，就表示自己学会了。</p>\n<p>信息是具体的情况，知识不是单纯的信息，而是信息与信息之间的关系。</p>\n<p>例1：你小时候养的狗有四条腿，隔壁邻居家的狗有四条腿，这里有两个具体的情况。但要学习的知识是全宇宙的狗与狗腿数的关系，即狗都有四条腿。</p>\n<p>例2：狗剩花了15元买了10斤西瓜，赵四花了30元买了20斤西瓜，这里是两个具体情况。可获得的知识是，可能他们村的西瓜斤数（输入）与价格（输出）的关系是1.5元每斤。</p>\n<p>例3：父母对孩子的照顾是爱，人们对花草的呵护是爱，少年对李小龙的崇拜是爱，男生付出了金钱要求对方一定要回报自己，不是爱，是交易。4个实例中，爱的共性是奉献。输入是事件，输出是判断是否为爱。这种判断类的问题叫做分类。可以是多个类别。</p>\n<p>为什么一定学习？正如上面的例子所展现的，这些实例我们一辈子都记不完，也穷举不出所有的不同情况。只能找出共性，来判断从来没见过的事件是不是爱。来判断一锅的食材该放多少盐合适。</p>\n<h2 id=\"改变你的大脑连接才是学习\"><a href=\"#改变你的大脑连接才是学习\" class=\"headerlink\" title=\"改变你的大脑连接才是学习\"></a>改变你的大脑连接才是学习</h2><p>然而知识的描述只是对学习起到指引的作用，最终的学习一定要<strong>通过例子理清问题和答案的关系来重塑大脑连接</strong>。</p>\n<p>这就是为什么在讨论、写文章、以及辩论时一定会伴随着例子，而不是单纯的对知识进行描述。因此在看书时，也要注意区分，哪些是例子，哪些是对知识的描述。我个人在写文章时，甚至常常会将例子和知识描述分开来写。</p>\n<p>例1：游泳并不是看了游泳书就能学会的，而是需要通过无数个例子来重塑大脑的神经连接。所以需要时间，需要睡眠，反复几天的重塑后，你会发现自己并没有看过什么新的游泳书，但就会游泳了，因为大脑连接重塑了。</p>\n<p>例2：真正学会的知识最难忘记，而且是越复杂的知识越难忘，这也是为什么就算流落荒岛10年的人后回家后照样可以听懂母语，毕竟大脑连接已经构造出这种信息与信息的关系。</p>\n<p><img src=\"001.jpeg\" alt=\"\"></p>\n<h2 id=\"先把书读厚，再把书读薄\"><a href=\"#先把书读厚，再把书读薄\" class=\"headerlink\" title=\"先把书读厚，再把书读薄\"></a>先把书读厚，再把书读薄</h2><p>华罗庚的先把书读厚，再把书读薄的学习方法就是指：先尽可能的搜集更多的例子帮助你体会问题和答案之间的关系，而当你真正学会的时候，这些例子就被压缩成知识。</p>\n<p>例1：单看我的视频并且自己不去联想例子、也没有看这个文章，只是看完就完了的人，只会觉得他懂了。但实际没有。1分钟的视频是装不下那么多信息的，《学习观》视频最大的作用在于调动注意力和帮助梳理关系，但若看完了梳理的关系而不去联想身边的无数个例子从而改变自己大脑连接的话，也就没有做到先把书读厚，再把书读薄。</p>\n<h2 id=\"学得的知识不一定正确\"><a href=\"#学得的知识不一定正确\" class=\"headerlink\" title=\"学得的知识不一定正确\"></a>学得的知识不一定正确</h2><p>最后，由于学习是为了解决新问题，所以需要验证从现有例子中所提炼的知识，是否能描述问题和答案的真正规律，而不是仅仅记忆了现有的例子。</p>\n<p>例1：这就是为什么需要考试。考试的目的正是为了验证你构建的关系是否正确，通过分数来回过头调节自己的学习。不幸的由于成长环境的因素，让学生以为学习就是为了考试得高分。</p>\n<p>例2：因为学习的核心是从少数例子推出规律的归纳法，永远无法保证正确，只能保证符合现有的例子中。所以需要来不断通过验证的方式调整自己归纳的规律。比如牛顿力学在宏观例子中好用，但在微观例子中就出现误差了。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"光看定义是学不会的\"><a href=\"#光看定义是学不会的\" class=\"headerlink\" title=\"光看定义是学不会的\"></a>光看定义是学不会的</h2><p>在人脑中，学习是通过例子找出问题和答案的规律，重塑大脑连接而完成。学习的第一步就是<strong>要明确什么是问题，什么是答案</strong>。很多人压根连要学的知识所描述的问题和答案都不清楚就“学习”，最后只是记住知识的描述而已。</p>\n<p>例1：这就是为什么你查维基、百度百科，看完定义还是什么都不懂。因为定义是知识的描述。</p>\n<p>例2：学习做菜，我们很清楚，问题（输入）食材，答案（输出）是的美食，要学习的是怎么把食材变成美食。通过的是一个又一个的例子让大脑的连接记住了什么样的食材应该怎么切，多重的食材应该放多少盐。</p>\n<p>例3：某人想要学习计算机 C 语言，认认真真的记住了培训老师的每一句话，但老师从来没告诉过他 C 这个知识的问题（输入）和答案（输出）是什么，要用 C 做什么（输入怎么变成输出）。最终只是记忆住了知识的描述而已。给他新的任务（输入），他还是不知道怎么把任务变成计算机可执行的步骤（输出）。甚至给他任务后，他都不知道自己在哪，要做什么。</p>\n<h2 id=\"信息与知识\"><a href=\"#信息与知识\" class=\"headerlink\" title=\"信息与知识\"></a>信息与知识</h2><p>然而知识不是信息，学习不是记忆，并无法仅凭记住知识来学会知识。这也是人们在教和学的过程中最容易犯的错误。以为将知识告诉了某人，对方就可以学会。以为听懂了知识，就表示自己学会了。</p>\n<p>信息是具体的情况，知识不是单纯的信息，而是信息与信息之间的关系。</p>\n<p>例1：你小时候养的狗有四条腿，隔壁邻居家的狗有四条腿，这里有两个具体的情况。但要学习的知识是全宇宙的狗与狗腿数的关系，即狗都有四条腿。</p>\n<p>例2：狗剩花了15元买了10斤西瓜，赵四花了30元买了20斤西瓜，这里是两个具体情况。可获得的知识是，可能他们村的西瓜斤数（输入）与价格（输出）的关系是1.5元每斤。</p>\n<p>例3：父母对孩子的照顾是爱，人们对花草的呵护是爱，少年对李小龙的崇拜是爱，男生付出了金钱要求对方一定要回报自己，不是爱，是交易。4个实例中，爱的共性是奉献。输入是事件，输出是判断是否为爱。这种判断类的问题叫做分类。可以是多个类别。</p>\n<p>为什么一定学习？正如上面的例子所展现的，这些实例我们一辈子都记不完，也穷举不出所有的不同情况。只能找出共性，来判断从来没见过的事件是不是爱。来判断一锅的食材该放多少盐合适。</p>\n<h2 id=\"改变你的大脑连接才是学习\"><a href=\"#改变你的大脑连接才是学习\" class=\"headerlink\" title=\"改变你的大脑连接才是学习\"></a>改变你的大脑连接才是学习</h2><p>然而知识的描述只是对学习起到指引的作用，最终的学习一定要<strong>通过例子理清问题和答案的关系来重塑大脑连接</strong>。</p>\n<p>这就是为什么在讨论、写文章、以及辩论时一定会伴随着例子，而不是单纯的对知识进行描述。因此在看书时，也要注意区分，哪些是例子，哪些是对知识的描述。我个人在写文章时，甚至常常会将例子和知识描述分开来写。</p>\n<p>例1：游泳并不是看了游泳书就能学会的，而是需要通过无数个例子来重塑大脑的神经连接。所以需要时间，需要睡眠，反复几天的重塑后，你会发现自己并没有看过什么新的游泳书，但就会游泳了，因为大脑连接重塑了。</p>\n<p>例2：真正学会的知识最难忘记，而且是越复杂的知识越难忘，这也是为什么就算流落荒岛10年的人后回家后照样可以听懂母语，毕竟大脑连接已经构造出这种信息与信息的关系。</p>\n<p><img src=\"001.jpeg\" alt=\"\"></p>\n<h2 id=\"先把书读厚，再把书读薄\"><a href=\"#先把书读厚，再把书读薄\" class=\"headerlink\" title=\"先把书读厚，再把书读薄\"></a>先把书读厚，再把书读薄</h2><p>华罗庚的先把书读厚，再把书读薄的学习方法就是指：先尽可能的搜集更多的例子帮助你体会问题和答案之间的关系，而当你真正学会的时候，这些例子就被压缩成知识。</p>\n<p>例1：单看我的视频并且自己不去联想例子、也没有看这个文章，只是看完就完了的人，只会觉得他懂了。但实际没有。1分钟的视频是装不下那么多信息的，《学习观》视频最大的作用在于调动注意力和帮助梳理关系，但若看完了梳理的关系而不去联想身边的无数个例子从而改变自己大脑连接的话，也就没有做到先把书读厚，再把书读薄。</p>\n<h2 id=\"学得的知识不一定正确\"><a href=\"#学得的知识不一定正确\" class=\"headerlink\" title=\"学得的知识不一定正确\"></a>学得的知识不一定正确</h2><p>最后，由于学习是为了解决新问题，所以需要验证从现有例子中所提炼的知识，是否能描述问题和答案的真正规律，而不是仅仅记忆了现有的例子。</p>\n<p>例1：这就是为什么需要考试。考试的目的正是为了验证你构建的关系是否正确，通过分数来回过头调节自己的学习。不幸的由于成长环境的因素，让学生以为学习就是为了考试得高分。</p>\n<p>例2：因为学习的核心是从少数例子推出规律的归纳法，永远无法保证正确，只能保证符合现有的例子中。所以需要来不断通过验证的方式调整自己归纳的规律。比如牛顿力学在宏观例子中好用，但在微观例子中就出现误差了。</p>\n"},{"title":"第03期：学习误区","date":"2020-02-11T10:03:00.000Z","_content":"> 我们知道体育运动需要练习，知道理论也并不能做到。可我们对外语的学习却在「用看书来学游泳」\n\n学习最重要的两步：\n1. 明确问题（输入）和答案（输出）\n1. 用例子构建知识：知识的构建分为两大类型：运动类和思考类 \n\n区别在于是否依靠意识，因为意识是后进化出来的，擅长解决的是推断问题，但速度缓慢，无法应对多因素任务。\n\n学不会的原因都出在：\n1. 错误的输入和输出，甚至都不知道输入和输出是什么\n1. 错误的知识构建方式，很多人一生都在用思考类方式来学习所有知识。比如看书学游泳\n1. 不通过例子仅记忆知识\n\n![](001.png)\n\n以语言为例，四项能力的正确的输入，输出，类型分别是：\n- 听：声音 -> 意思，运动类\n- 说：想法 -> 发声，运动类\n- 读：文字 -> 意思，运动类\n- 写：想法 -> 打字，运动类\n\n我当年接受的应试英语的普遍误区是：输入和输出是完形填空，阅读选择等这类从一些列文字到另一系列文字的思考类问题\n- 听：文字 -> 文字，思考类\n- 说：文字 -> 文字，思考类\n- 读：文字 -> 文字，思考类\n- 写：文字 -> 文字，思考类\n\n而当你出国后，就会发现你所学“英语”的输入和真实英语输入是不同的。\n\n那既然都是文字，是否意味着我们练就了很好的阅读能力呢？也并非如此， 因为多数时候学生只是记住了单词的中文描述。 \n\n然而语言的输入从来就不是一个单词，而是一个句子，同一单词在不同句子中有不同的意思。 要想把握句子中某个单词的真正含义，需要通过体会大量不同的例句的意思。所犯的正是没有例子这个错误。很多英语“名师”，不管他们总结的再好，若仅仅是告诉你语法，你永远都是在记忆信息，而不是学习知识。\n\n在用百词斩背单词时还容易产生另一种偏差，输入输出变成了：图片 -> 中文，运动类。\n\n而学英语时最为致命的误区是插入了中文思考这个中间输出，把单一知识变成了两套思考类问题：\n- 听：声音 -> 中文 -> 意思，思考类\n- 说：想法 -> 中文 -> 发声，思考类\n- 读：文字 -> 中文 -> 意思，思考类\n- 写：想法 -> 中文 -> 打字，思考类\n\n所以掺入意识思考中文后说英语会异常慢。 很多人可以听得懂意思，但让他同时给你翻译成中文的话，他会反应不过来， 就是因为他的大脑在这个过程中其实并不思考中文。\n\n很多英语方法正是在解决这三个误区。\n\n原理一：矫正输入输出的偏差\n- 看电影学英语\n- 练习说外语：选个话题，表达看法，不思考中文\n- 只看英语解释，是避免加入中文思考这个中间输出\n\n原理二：不经过意识，而使用运动类构建知识\n- 泛听，泛读\n- 看电影学英语\n\n原理三：通过例子避免仅把知识当信息记忆\n- 理解单词时看很多个例句，重构你的大脑对理解该意思的连接\n- 针对听、说、读、写，四项能力分别用大量例子练习\n\n十年学不会英语的真相很残酷，并不是因为没有努力，你确实学到了知识，但却是完全不同的知识。","source":"_posts/学习观/第03期：学习误区.md","raw":"---\ntitle: 第03期：学习误区\ncategories:\n- 学习观\n\ntags:\n- 学习观\n\ndate: 2020-02-11 18:03\n---\n> 我们知道体育运动需要练习，知道理论也并不能做到。可我们对外语的学习却在「用看书来学游泳」\n\n学习最重要的两步：\n1. 明确问题（输入）和答案（输出）\n1. 用例子构建知识：知识的构建分为两大类型：运动类和思考类 \n\n区别在于是否依靠意识，因为意识是后进化出来的，擅长解决的是推断问题，但速度缓慢，无法应对多因素任务。\n\n学不会的原因都出在：\n1. 错误的输入和输出，甚至都不知道输入和输出是什么\n1. 错误的知识构建方式，很多人一生都在用思考类方式来学习所有知识。比如看书学游泳\n1. 不通过例子仅记忆知识\n\n![](001.png)\n\n以语言为例，四项能力的正确的输入，输出，类型分别是：\n- 听：声音 -> 意思，运动类\n- 说：想法 -> 发声，运动类\n- 读：文字 -> 意思，运动类\n- 写：想法 -> 打字，运动类\n\n我当年接受的应试英语的普遍误区是：输入和输出是完形填空，阅读选择等这类从一些列文字到另一系列文字的思考类问题\n- 听：文字 -> 文字，思考类\n- 说：文字 -> 文字，思考类\n- 读：文字 -> 文字，思考类\n- 写：文字 -> 文字，思考类\n\n而当你出国后，就会发现你所学“英语”的输入和真实英语输入是不同的。\n\n那既然都是文字，是否意味着我们练就了很好的阅读能力呢？也并非如此， 因为多数时候学生只是记住了单词的中文描述。 \n\n然而语言的输入从来就不是一个单词，而是一个句子，同一单词在不同句子中有不同的意思。 要想把握句子中某个单词的真正含义，需要通过体会大量不同的例句的意思。所犯的正是没有例子这个错误。很多英语“名师”，不管他们总结的再好，若仅仅是告诉你语法，你永远都是在记忆信息，而不是学习知识。\n\n在用百词斩背单词时还容易产生另一种偏差，输入输出变成了：图片 -> 中文，运动类。\n\n而学英语时最为致命的误区是插入了中文思考这个中间输出，把单一知识变成了两套思考类问题：\n- 听：声音 -> 中文 -> 意思，思考类\n- 说：想法 -> 中文 -> 发声，思考类\n- 读：文字 -> 中文 -> 意思，思考类\n- 写：想法 -> 中文 -> 打字，思考类\n\n所以掺入意识思考中文后说英语会异常慢。 很多人可以听得懂意思，但让他同时给你翻译成中文的话，他会反应不过来， 就是因为他的大脑在这个过程中其实并不思考中文。\n\n很多英语方法正是在解决这三个误区。\n\n原理一：矫正输入输出的偏差\n- 看电影学英语\n- 练习说外语：选个话题，表达看法，不思考中文\n- 只看英语解释，是避免加入中文思考这个中间输出\n\n原理二：不经过意识，而使用运动类构建知识\n- 泛听，泛读\n- 看电影学英语\n\n原理三：通过例子避免仅把知识当信息记忆\n- 理解单词时看很多个例句，重构你的大脑对理解该意思的连接\n- 针对听、说、读、写，四项能力分别用大量例子练习\n\n十年学不会英语的真相很残酷，并不是因为没有努力，你确实学到了知识，但却是完全不同的知识。","slug":"学习观/第03期：学习误区","published":1,"updated":"2020-04-12T08:28:29.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m86006sm33pyrrcxdyw","content":"<blockquote>\n<p>我们知道体育运动需要练习，知道理论也并不能做到。可我们对外语的学习却在「用看书来学游泳」</p>\n</blockquote>\n<p>学习最重要的两步：</p>\n<ol>\n<li>明确问题（输入）和答案（输出）</li>\n<li>用例子构建知识：知识的构建分为两大类型：运动类和思考类 </li>\n</ol>\n<p>区别在于是否依靠意识，因为意识是后进化出来的，擅长解决的是推断问题，但速度缓慢，无法应对多因素任务。</p>\n<p>学不会的原因都出在：</p>\n<ol>\n<li>错误的输入和输出，甚至都不知道输入和输出是什么</li>\n<li>错误的知识构建方式，很多人一生都在用思考类方式来学习所有知识。比如看书学游泳</li>\n<li>不通过例子仅记忆知识</li>\n</ol>\n<p><img src=\"001.png\" alt=\"\"></p>\n<p>以语言为例，四项能力的正确的输入，输出，类型分别是：</p>\n<ul>\n<li>听：声音 -&gt; 意思，运动类</li>\n<li>说：想法 -&gt; 发声，运动类</li>\n<li>读：文字 -&gt; 意思，运动类</li>\n<li>写：想法 -&gt; 打字，运动类</li>\n</ul>\n<p>我当年接受的应试英语的普遍误区是：输入和输出是完形填空，阅读选择等这类从一些列文字到另一系列文字的思考类问题</p>\n<ul>\n<li>听：文字 -&gt; 文字，思考类</li>\n<li>说：文字 -&gt; 文字，思考类</li>\n<li>读：文字 -&gt; 文字，思考类</li>\n<li>写：文字 -&gt; 文字，思考类</li>\n</ul>\n<p>而当你出国后，就会发现你所学“英语”的输入和真实英语输入是不同的。</p>\n<p>那既然都是文字，是否意味着我们练就了很好的阅读能力呢？也并非如此， 因为多数时候学生只是记住了单词的中文描述。 </p>\n<p>然而语言的输入从来就不是一个单词，而是一个句子，同一单词在不同句子中有不同的意思。 要想把握句子中某个单词的真正含义，需要通过体会大量不同的例句的意思。所犯的正是没有例子这个错误。很多英语“名师”，不管他们总结的再好，若仅仅是告诉你语法，你永远都是在记忆信息，而不是学习知识。</p>\n<p>在用百词斩背单词时还容易产生另一种偏差，输入输出变成了：图片 -&gt; 中文，运动类。</p>\n<p>而学英语时最为致命的误区是插入了中文思考这个中间输出，把单一知识变成了两套思考类问题：</p>\n<ul>\n<li>听：声音 -&gt; 中文 -&gt; 意思，思考类</li>\n<li>说：想法 -&gt; 中文 -&gt; 发声，思考类</li>\n<li>读：文字 -&gt; 中文 -&gt; 意思，思考类</li>\n<li>写：想法 -&gt; 中文 -&gt; 打字，思考类</li>\n</ul>\n<p>所以掺入意识思考中文后说英语会异常慢。 很多人可以听得懂意思，但让他同时给你翻译成中文的话，他会反应不过来， 就是因为他的大脑在这个过程中其实并不思考中文。</p>\n<p>很多英语方法正是在解决这三个误区。</p>\n<p>原理一：矫正输入输出的偏差</p>\n<ul>\n<li>看电影学英语</li>\n<li>练习说外语：选个话题，表达看法，不思考中文</li>\n<li>只看英语解释，是避免加入中文思考这个中间输出</li>\n</ul>\n<p>原理二：不经过意识，而使用运动类构建知识</p>\n<ul>\n<li>泛听，泛读</li>\n<li>看电影学英语</li>\n</ul>\n<p>原理三：通过例子避免仅把知识当信息记忆</p>\n<ul>\n<li>理解单词时看很多个例句，重构你的大脑对理解该意思的连接</li>\n<li>针对听、说、读、写，四项能力分别用大量例子练习</li>\n</ul>\n<p>十年学不会英语的真相很残酷，并不是因为没有努力，你确实学到了知识，但却是完全不同的知识。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<blockquote>\n<p>我们知道体育运动需要练习，知道理论也并不能做到。可我们对外语的学习却在「用看书来学游泳」</p>\n</blockquote>\n<p>学习最重要的两步：</p>\n<ol>\n<li>明确问题（输入）和答案（输出）</li>\n<li>用例子构建知识：知识的构建分为两大类型：运动类和思考类 </li>\n</ol>\n<p>区别在于是否依靠意识，因为意识是后进化出来的，擅长解决的是推断问题，但速度缓慢，无法应对多因素任务。</p>\n<p>学不会的原因都出在：</p>\n<ol>\n<li>错误的输入和输出，甚至都不知道输入和输出是什么</li>\n<li>错误的知识构建方式，很多人一生都在用思考类方式来学习所有知识。比如看书学游泳</li>\n<li>不通过例子仅记忆知识</li>\n</ol>\n<p><img src=\"001.png\" alt=\"\"></p>\n<p>以语言为例，四项能力的正确的输入，输出，类型分别是：</p>\n<ul>\n<li>听：声音 -&gt; 意思，运动类</li>\n<li>说：想法 -&gt; 发声，运动类</li>\n<li>读：文字 -&gt; 意思，运动类</li>\n<li>写：想法 -&gt; 打字，运动类</li>\n</ul>\n<p>我当年接受的应试英语的普遍误区是：输入和输出是完形填空，阅读选择等这类从一些列文字到另一系列文字的思考类问题</p>\n<ul>\n<li>听：文字 -&gt; 文字，思考类</li>\n<li>说：文字 -&gt; 文字，思考类</li>\n<li>读：文字 -&gt; 文字，思考类</li>\n<li>写：文字 -&gt; 文字，思考类</li>\n</ul>\n<p>而当你出国后，就会发现你所学“英语”的输入和真实英语输入是不同的。</p>\n<p>那既然都是文字，是否意味着我们练就了很好的阅读能力呢？也并非如此， 因为多数时候学生只是记住了单词的中文描述。 </p>\n<p>然而语言的输入从来就不是一个单词，而是一个句子，同一单词在不同句子中有不同的意思。 要想把握句子中某个单词的真正含义，需要通过体会大量不同的例句的意思。所犯的正是没有例子这个错误。很多英语“名师”，不管他们总结的再好，若仅仅是告诉你语法，你永远都是在记忆信息，而不是学习知识。</p>\n<p>在用百词斩背单词时还容易产生另一种偏差，输入输出变成了：图片 -&gt; 中文，运动类。</p>\n<p>而学英语时最为致命的误区是插入了中文思考这个中间输出，把单一知识变成了两套思考类问题：</p>\n<ul>\n<li>听：声音 -&gt; 中文 -&gt; 意思，思考类</li>\n<li>说：想法 -&gt; 中文 -&gt; 发声，思考类</li>\n<li>读：文字 -&gt; 中文 -&gt; 意思，思考类</li>\n<li>写：想法 -&gt; 中文 -&gt; 打字，思考类</li>\n</ul>\n<p>所以掺入意识思考中文后说英语会异常慢。 很多人可以听得懂意思，但让他同时给你翻译成中文的话，他会反应不过来， 就是因为他的大脑在这个过程中其实并不思考中文。</p>\n<p>很多英语方法正是在解决这三个误区。</p>\n<p>原理一：矫正输入输出的偏差</p>\n<ul>\n<li>看电影学英语</li>\n<li>练习说外语：选个话题，表达看法，不思考中文</li>\n<li>只看英语解释，是避免加入中文思考这个中间输出</li>\n</ul>\n<p>原理二：不经过意识，而使用运动类构建知识</p>\n<ul>\n<li>泛听，泛读</li>\n<li>看电影学英语</li>\n</ul>\n<p>原理三：通过例子避免仅把知识当信息记忆</p>\n<ul>\n<li>理解单词时看很多个例句，重构你的大脑对理解该意思的连接</li>\n<li>针对听、说、读、写，四项能力分别用大量例子练习</li>\n</ul>\n<p>十年学不会英语的真相很残酷，并不是因为没有努力，你确实学到了知识，但却是完全不同的知识。</p>\n"},{"title":"第04期：分而治之","date":"2020-02-11T10:04:00.000Z","_content":"我们可以同时应用多个运动类知识，譬如某人可以边走路边聊天。 但意识在某一刻只能专注一个思考类问题，因此，在某一刻若无法从脑中搜索到能直接从输入得到输出的知识，问题就无法解决。\n\n![](001.png)\n\n![](002.png)\n\n然而我们所掌握的知识又是有限的，这种直接从输入得到输出的知识往往会超过我们的知识范围。应对办法可以是学习更多的知识。 但还有一个简单，却又无比强大的办法就是**分而治之**。\n\n> 将问题拆分成，脑中存有的，能直接从输入得到输出的小问题来解决。 \n\n你一定听过这个方法，但恐怕你并不知道它为什么如此强大。 \n\n原因在于，它可以将原本需要你掌握指数级知识量才能解决的问题，变成用线性级知识量就可以解决。\n\n假设你只掌握了 3 种知识，不考虑顺序，单从组合来看，就可以形成 7 种新知识。如果不拆分问题，你需要掌握 7 种知识才能做解决这些问题。 而有 20 种知识的时候，二者的差别就是 20 对 1048575。\n\n![](003.png)\n\n在编程时，所用到的知识远不止 20 个。但其实人类天生习惯于搜索能直接从输入得到输出的知识，这也是新人在面对编程问题常常束手无策的原因，因为根本搜索不到。\n\n该原则适用于所有思考类知识，不管是写文章，答数学题，还是解决工作中所面临的困难。它直接决定了一个人解决问题的能力。\n","source":"_posts/学习观/第04期：分而治之.md","raw":"---\ntitle: 第04期：分而治之\ncategories:\n- 学习观\n\ntags:\n- 学习观\n- 分而治之\n\ndate: 2020-02-11 18:04\n---\n我们可以同时应用多个运动类知识，譬如某人可以边走路边聊天。 但意识在某一刻只能专注一个思考类问题，因此，在某一刻若无法从脑中搜索到能直接从输入得到输出的知识，问题就无法解决。\n\n![](001.png)\n\n![](002.png)\n\n然而我们所掌握的知识又是有限的，这种直接从输入得到输出的知识往往会超过我们的知识范围。应对办法可以是学习更多的知识。 但还有一个简单，却又无比强大的办法就是**分而治之**。\n\n> 将问题拆分成，脑中存有的，能直接从输入得到输出的小问题来解决。 \n\n你一定听过这个方法，但恐怕你并不知道它为什么如此强大。 \n\n原因在于，它可以将原本需要你掌握指数级知识量才能解决的问题，变成用线性级知识量就可以解决。\n\n假设你只掌握了 3 种知识，不考虑顺序，单从组合来看，就可以形成 7 种新知识。如果不拆分问题，你需要掌握 7 种知识才能做解决这些问题。 而有 20 种知识的时候，二者的差别就是 20 对 1048575。\n\n![](003.png)\n\n在编程时，所用到的知识远不止 20 个。但其实人类天生习惯于搜索能直接从输入得到输出的知识，这也是新人在面对编程问题常常束手无策的原因，因为根本搜索不到。\n\n该原则适用于所有思考类知识，不管是写文章，答数学题，还是解决工作中所面临的困难。它直接决定了一个人解决问题的能力。\n","slug":"学习观/第04期：分而治之","published":1,"updated":"2020-04-12T08:28:29.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m89006tm33p1148uk0k","content":"<p>我们可以同时应用多个运动类知识，譬如某人可以边走路边聊天。 但意识在某一刻只能专注一个思考类问题，因此，在某一刻若无法从脑中搜索到能直接从输入得到输出的知识，问题就无法解决。</p>\n<p><img src=\"001.png\" alt=\"\"></p>\n<p><img src=\"002.png\" alt=\"\"></p>\n<p>然而我们所掌握的知识又是有限的，这种直接从输入得到输出的知识往往会超过我们的知识范围。应对办法可以是学习更多的知识。 但还有一个简单，却又无比强大的办法就是<strong>分而治之</strong>。</p>\n<blockquote>\n<p>将问题拆分成，脑中存有的，能直接从输入得到输出的小问题来解决。 </p>\n</blockquote>\n<p>你一定听过这个方法，但恐怕你并不知道它为什么如此强大。 </p>\n<p>原因在于，它可以将原本需要你掌握指数级知识量才能解决的问题，变成用线性级知识量就可以解决。</p>\n<p>假设你只掌握了 3 种知识，不考虑顺序，单从组合来看，就可以形成 7 种新知识。如果不拆分问题，你需要掌握 7 种知识才能做解决这些问题。 而有 20 种知识的时候，二者的差别就是 20 对 1048575。</p>\n<p><img src=\"003.png\" alt=\"\"></p>\n<p>在编程时，所用到的知识远不止 20 个。但其实人类天生习惯于搜索能直接从输入得到输出的知识，这也是新人在面对编程问题常常束手无策的原因，因为根本搜索不到。</p>\n<p>该原则适用于所有思考类知识，不管是写文章，答数学题，还是解决工作中所面临的困难。它直接决定了一个人解决问题的能力。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>我们可以同时应用多个运动类知识，譬如某人可以边走路边聊天。 但意识在某一刻只能专注一个思考类问题，因此，在某一刻若无法从脑中搜索到能直接从输入得到输出的知识，问题就无法解决。</p>\n<p><img src=\"001.png\" alt=\"\"></p>\n<p><img src=\"002.png\" alt=\"\"></p>\n<p>然而我们所掌握的知识又是有限的，这种直接从输入得到输出的知识往往会超过我们的知识范围。应对办法可以是学习更多的知识。 但还有一个简单，却又无比强大的办法就是<strong>分而治之</strong>。</p>\n<blockquote>\n<p>将问题拆分成，脑中存有的，能直接从输入得到输出的小问题来解决。 </p>\n</blockquote>\n<p>你一定听过这个方法，但恐怕你并不知道它为什么如此强大。 </p>\n<p>原因在于，它可以将原本需要你掌握指数级知识量才能解决的问题，变成用线性级知识量就可以解决。</p>\n<p>假设你只掌握了 3 种知识，不考虑顺序，单从组合来看，就可以形成 7 种新知识。如果不拆分问题，你需要掌握 7 种知识才能做解决这些问题。 而有 20 种知识的时候，二者的差别就是 20 对 1048575。</p>\n<p><img src=\"003.png\" alt=\"\"></p>\n<p>在编程时，所用到的知识远不止 20 个。但其实人类天生习惯于搜索能直接从输入得到输出的知识，这也是新人在面对编程问题常常束手无策的原因，因为根本搜索不到。</p>\n<p>该原则适用于所有思考类知识，不管是写文章，答数学题，还是解决工作中所面临的困难。它直接决定了一个人解决问题的能力。</p>\n"},{"title":"第05期：思维导图","date":"2020-02-11T10:05:00.000Z","_content":"学习观前面的视频只提到了学习的定义和原则，但并没有涉及任何具体的学习方法。而思维导图就是我想介绍的第一个学习方法。\n\n![](001.png)\n\n它的强大不在于帮助你记忆，而在于帮助你克服学习和应用中的误区。\n\n## 从没有人教过我们怎么学习\n多数人的学习方法往往是阅读某个知识的描述，搞清意思，不断重复，并希望记住它。但这一过程只是在应用人脑的阅读和记忆能力，产生的学会了的错觉，实际是能看懂的感觉，并没有在学习。尤其是在读理科书的时候，你会觉得，每个词你都认识，就是看不懂，因为理科书在描述的关系。看小说容易是因为小说传达的并不是知识，而是具体的例子，需要你自己从中提取道理。\n\n## 如果能记忆，那就不需要学习了\n而使用思维导图时，你不再只是记忆知识的描述和无限的例子。是先写出一个关键词。然后你会问自己它是什么，从而不断的联想起很多例子。你会强迫自己用这一个关键词描述所有的例子。也就是说，你在压缩信息。进而不得不分析这些例子的共同输入和输出，找出规律。\n\n而当问自己它的作用或目的时，你实际上在思考输入是怎样变成输出的。因为输入和输出可代表一类事物中任何一个情况，因此被称为变量。而这里的变成指的是从输入到输出的一种变换关系，也就是函数。从输入变成输出的情况是无限的，但都可以被这一个函数所描述。要学习的知识正是这种不变的关系，而不是可变的具体情况。因为你永远都没办法见到所有的情况。只能从有限的例子中找出规律，用来预测你从未见过的情况。毕竟若要解决的问题是已知问题，直接上网搜索就可以了，也就不需要学习了。人生需要你解决就是那些谁都没见过的情况。\n\n在思考这些问题的过程中，你的大脑连接被这些例子所改变了，最终关联到一个关键词上，便完成了一次学习过程。\n\n![](002.png)\n\n## 名字根本不重要\n随后你会用一个更好的关键词来代表你找出的关系，一种是动宾结构，因为它描述了输入和函数，输出也随之确定了。\n\n不过当人们开始传播该知识时，动宾结构会名词化，譬如以发现者的名字命名物理定律。一个知识可以有很多名字，但名字并不重要，重要的是从输入到输出的这种关系。不幸的是很多人只是记住了最不重要的名字。\n\n还有一种知识本身就是名词，也会让你觉得它并没输出，但这种知识的输出是分类任务中的类型，描述它的句子是主谓结构，谓语被导图的连线所代替了。\n\n## 知识与智慧\n然而这并非思维导图的全部，它最强大的地方在于对知识的拆分。\n\n而若将要学习的知识拆分小知识的组合的话，你需要的例子就从指数量级变成了线性量级。并且所拆分出的小知识中，很多都是你已经学过的，可直接用于该次知识的构建。知识网络的好处就在于知识的重用性上。这正是为什么有人可以快速掌握一项新知识的秘密。\n\n思维导图的核心在于知识的拆分上，因此它既可以在学习未掌握的知识时用来拆分，也可以在应用已掌握的知识时用来拆分，也就是分而治之的具体操作方法。\n\n但拆分知识的能力也是一种需要学习的知识，并且是一种比较特殊的二阶知识。不同点在于：一般的知识是描述信息与信息之间的关系，而二阶知识是描述知识与知识之间的关系。比如，多次重复一个知识，组合某些知识来产生新知识。\n\n在拆分一个大知识时，若从大知识向小知识来拆分，则是正向思维；若从小知识向大知识来拆分，则是逆向思维。 \n\n知识的拆分只有一项终极原则，所拆分的知识之间要尽可能的彼此独立，这样才可以减少学习所需要的例子的数量。\n\n![](003.png)\n\n## 可以把思维导图扔了\n而当你回顾我所提到的，学习需要：\n1. 明确输入输出\n2. 将信息压缩成知识\n3. 用例子重塑大脑连接\n4. 用二阶知识来分而治之\n\n你会发现当正确思维导图时，你在不经意间做到了以上的所有要素。\n\n然而它之所以好用是在于满足了这些要素，不在于思维导图这个名字。若没能在使用中满足要素，即使用了思维导图也没用。但若能满足这些要素，即使什么都不用，也能让你真正学习。\n\n","source":"_posts/学习观/第05期：思维导图.md","raw":"---\ntitle: 第05期：思维导图\ncategories:\n- 学习观\n\ntags:\n- 学习观\n- 思维导图\n\ndate: 2020-02-11 18:05\n---\n学习观前面的视频只提到了学习的定义和原则，但并没有涉及任何具体的学习方法。而思维导图就是我想介绍的第一个学习方法。\n\n![](001.png)\n\n它的强大不在于帮助你记忆，而在于帮助你克服学习和应用中的误区。\n\n## 从没有人教过我们怎么学习\n多数人的学习方法往往是阅读某个知识的描述，搞清意思，不断重复，并希望记住它。但这一过程只是在应用人脑的阅读和记忆能力，产生的学会了的错觉，实际是能看懂的感觉，并没有在学习。尤其是在读理科书的时候，你会觉得，每个词你都认识，就是看不懂，因为理科书在描述的关系。看小说容易是因为小说传达的并不是知识，而是具体的例子，需要你自己从中提取道理。\n\n## 如果能记忆，那就不需要学习了\n而使用思维导图时，你不再只是记忆知识的描述和无限的例子。是先写出一个关键词。然后你会问自己它是什么，从而不断的联想起很多例子。你会强迫自己用这一个关键词描述所有的例子。也就是说，你在压缩信息。进而不得不分析这些例子的共同输入和输出，找出规律。\n\n而当问自己它的作用或目的时，你实际上在思考输入是怎样变成输出的。因为输入和输出可代表一类事物中任何一个情况，因此被称为变量。而这里的变成指的是从输入到输出的一种变换关系，也就是函数。从输入变成输出的情况是无限的，但都可以被这一个函数所描述。要学习的知识正是这种不变的关系，而不是可变的具体情况。因为你永远都没办法见到所有的情况。只能从有限的例子中找出规律，用来预测你从未见过的情况。毕竟若要解决的问题是已知问题，直接上网搜索就可以了，也就不需要学习了。人生需要你解决就是那些谁都没见过的情况。\n\n在思考这些问题的过程中，你的大脑连接被这些例子所改变了，最终关联到一个关键词上，便完成了一次学习过程。\n\n![](002.png)\n\n## 名字根本不重要\n随后你会用一个更好的关键词来代表你找出的关系，一种是动宾结构，因为它描述了输入和函数，输出也随之确定了。\n\n不过当人们开始传播该知识时，动宾结构会名词化，譬如以发现者的名字命名物理定律。一个知识可以有很多名字，但名字并不重要，重要的是从输入到输出的这种关系。不幸的是很多人只是记住了最不重要的名字。\n\n还有一种知识本身就是名词，也会让你觉得它并没输出，但这种知识的输出是分类任务中的类型，描述它的句子是主谓结构，谓语被导图的连线所代替了。\n\n## 知识与智慧\n然而这并非思维导图的全部，它最强大的地方在于对知识的拆分。\n\n而若将要学习的知识拆分小知识的组合的话，你需要的例子就从指数量级变成了线性量级。并且所拆分出的小知识中，很多都是你已经学过的，可直接用于该次知识的构建。知识网络的好处就在于知识的重用性上。这正是为什么有人可以快速掌握一项新知识的秘密。\n\n思维导图的核心在于知识的拆分上，因此它既可以在学习未掌握的知识时用来拆分，也可以在应用已掌握的知识时用来拆分，也就是分而治之的具体操作方法。\n\n但拆分知识的能力也是一种需要学习的知识，并且是一种比较特殊的二阶知识。不同点在于：一般的知识是描述信息与信息之间的关系，而二阶知识是描述知识与知识之间的关系。比如，多次重复一个知识，组合某些知识来产生新知识。\n\n在拆分一个大知识时，若从大知识向小知识来拆分，则是正向思维；若从小知识向大知识来拆分，则是逆向思维。 \n\n知识的拆分只有一项终极原则，所拆分的知识之间要尽可能的彼此独立，这样才可以减少学习所需要的例子的数量。\n\n![](003.png)\n\n## 可以把思维导图扔了\n而当你回顾我所提到的，学习需要：\n1. 明确输入输出\n2. 将信息压缩成知识\n3. 用例子重塑大脑连接\n4. 用二阶知识来分而治之\n\n你会发现当正确思维导图时，你在不经意间做到了以上的所有要素。\n\n然而它之所以好用是在于满足了这些要素，不在于思维导图这个名字。若没能在使用中满足要素，即使用了思维导图也没用。但若能满足这些要素，即使什么都不用，也能让你真正学习。\n\n","slug":"学习观/第05期：思维导图","published":1,"updated":"2020-04-12T08:28:29.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8b006xm33p2drvdffb","content":"<p>学习观前面的视频只提到了学习的定义和原则，但并没有涉及任何具体的学习方法。而思维导图就是我想介绍的第一个学习方法。</p>\n<p><img src=\"001.png\" alt=\"\"></p>\n<p>它的强大不在于帮助你记忆，而在于帮助你克服学习和应用中的误区。</p>\n<h2 id=\"从没有人教过我们怎么学习\"><a href=\"#从没有人教过我们怎么学习\" class=\"headerlink\" title=\"从没有人教过我们怎么学习\"></a>从没有人教过我们怎么学习</h2><p>多数人的学习方法往往是阅读某个知识的描述，搞清意思，不断重复，并希望记住它。但这一过程只是在应用人脑的阅读和记忆能力，产生的学会了的错觉，实际是能看懂的感觉，并没有在学习。尤其是在读理科书的时候，你会觉得，每个词你都认识，就是看不懂，因为理科书在描述的关系。看小说容易是因为小说传达的并不是知识，而是具体的例子，需要你自己从中提取道理。</p>\n<h2 id=\"如果能记忆，那就不需要学习了\"><a href=\"#如果能记忆，那就不需要学习了\" class=\"headerlink\" title=\"如果能记忆，那就不需要学习了\"></a>如果能记忆，那就不需要学习了</h2><p>而使用思维导图时，你不再只是记忆知识的描述和无限的例子。是先写出一个关键词。然后你会问自己它是什么，从而不断的联想起很多例子。你会强迫自己用这一个关键词描述所有的例子。也就是说，你在压缩信息。进而不得不分析这些例子的共同输入和输出，找出规律。</p>\n<p>而当问自己它的作用或目的时，你实际上在思考输入是怎样变成输出的。因为输入和输出可代表一类事物中任何一个情况，因此被称为变量。而这里的变成指的是从输入到输出的一种变换关系，也就是函数。从输入变成输出的情况是无限的，但都可以被这一个函数所描述。要学习的知识正是这种不变的关系，而不是可变的具体情况。因为你永远都没办法见到所有的情况。只能从有限的例子中找出规律，用来预测你从未见过的情况。毕竟若要解决的问题是已知问题，直接上网搜索就可以了，也就不需要学习了。人生需要你解决就是那些谁都没见过的情况。</p>\n<p>在思考这些问题的过程中，你的大脑连接被这些例子所改变了，最终关联到一个关键词上，便完成了一次学习过程。</p>\n<p><img src=\"002.png\" alt=\"\"></p>\n<h2 id=\"名字根本不重要\"><a href=\"#名字根本不重要\" class=\"headerlink\" title=\"名字根本不重要\"></a>名字根本不重要</h2><p>随后你会用一个更好的关键词来代表你找出的关系，一种是动宾结构，因为它描述了输入和函数，输出也随之确定了。</p>\n<p>不过当人们开始传播该知识时，动宾结构会名词化，譬如以发现者的名字命名物理定律。一个知识可以有很多名字，但名字并不重要，重要的是从输入到输出的这种关系。不幸的是很多人只是记住了最不重要的名字。</p>\n<p>还有一种知识本身就是名词，也会让你觉得它并没输出，但这种知识的输出是分类任务中的类型，描述它的句子是主谓结构，谓语被导图的连线所代替了。</p>\n<h2 id=\"知识与智慧\"><a href=\"#知识与智慧\" class=\"headerlink\" title=\"知识与智慧\"></a>知识与智慧</h2><p>然而这并非思维导图的全部，它最强大的地方在于对知识的拆分。</p>\n<p>而若将要学习的知识拆分小知识的组合的话，你需要的例子就从指数量级变成了线性量级。并且所拆分出的小知识中，很多都是你已经学过的，可直接用于该次知识的构建。知识网络的好处就在于知识的重用性上。这正是为什么有人可以快速掌握一项新知识的秘密。</p>\n<p>思维导图的核心在于知识的拆分上，因此它既可以在学习未掌握的知识时用来拆分，也可以在应用已掌握的知识时用来拆分，也就是分而治之的具体操作方法。</p>\n<p>但拆分知识的能力也是一种需要学习的知识，并且是一种比较特殊的二阶知识。不同点在于：一般的知识是描述信息与信息之间的关系，而二阶知识是描述知识与知识之间的关系。比如，多次重复一个知识，组合某些知识来产生新知识。</p>\n<p>在拆分一个大知识时，若从大知识向小知识来拆分，则是正向思维；若从小知识向大知识来拆分，则是逆向思维。 </p>\n<p>知识的拆分只有一项终极原则，所拆分的知识之间要尽可能的彼此独立，这样才可以减少学习所需要的例子的数量。</p>\n<p><img src=\"003.png\" alt=\"\"></p>\n<h2 id=\"可以把思维导图扔了\"><a href=\"#可以把思维导图扔了\" class=\"headerlink\" title=\"可以把思维导图扔了\"></a>可以把思维导图扔了</h2><p>而当你回顾我所提到的，学习需要：</p>\n<ol>\n<li>明确输入输出</li>\n<li>将信息压缩成知识</li>\n<li>用例子重塑大脑连接</li>\n<li>用二阶知识来分而治之</li>\n</ol>\n<p>你会发现当正确思维导图时，你在不经意间做到了以上的所有要素。</p>\n<p>然而它之所以好用是在于满足了这些要素，不在于思维导图这个名字。若没能在使用中满足要素，即使用了思维导图也没用。但若能满足这些要素，即使什么都不用，也能让你真正学习。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>学习观前面的视频只提到了学习的定义和原则，但并没有涉及任何具体的学习方法。而思维导图就是我想介绍的第一个学习方法。</p>\n<p><img src=\"001.png\" alt=\"\"></p>\n<p>它的强大不在于帮助你记忆，而在于帮助你克服学习和应用中的误区。</p>\n<h2 id=\"从没有人教过我们怎么学习\"><a href=\"#从没有人教过我们怎么学习\" class=\"headerlink\" title=\"从没有人教过我们怎么学习\"></a>从没有人教过我们怎么学习</h2><p>多数人的学习方法往往是阅读某个知识的描述，搞清意思，不断重复，并希望记住它。但这一过程只是在应用人脑的阅读和记忆能力，产生的学会了的错觉，实际是能看懂的感觉，并没有在学习。尤其是在读理科书的时候，你会觉得，每个词你都认识，就是看不懂，因为理科书在描述的关系。看小说容易是因为小说传达的并不是知识，而是具体的例子，需要你自己从中提取道理。</p>\n<h2 id=\"如果能记忆，那就不需要学习了\"><a href=\"#如果能记忆，那就不需要学习了\" class=\"headerlink\" title=\"如果能记忆，那就不需要学习了\"></a>如果能记忆，那就不需要学习了</h2><p>而使用思维导图时，你不再只是记忆知识的描述和无限的例子。是先写出一个关键词。然后你会问自己它是什么，从而不断的联想起很多例子。你会强迫自己用这一个关键词描述所有的例子。也就是说，你在压缩信息。进而不得不分析这些例子的共同输入和输出，找出规律。</p>\n<p>而当问自己它的作用或目的时，你实际上在思考输入是怎样变成输出的。因为输入和输出可代表一类事物中任何一个情况，因此被称为变量。而这里的变成指的是从输入到输出的一种变换关系，也就是函数。从输入变成输出的情况是无限的，但都可以被这一个函数所描述。要学习的知识正是这种不变的关系，而不是可变的具体情况。因为你永远都没办法见到所有的情况。只能从有限的例子中找出规律，用来预测你从未见过的情况。毕竟若要解决的问题是已知问题，直接上网搜索就可以了，也就不需要学习了。人生需要你解决就是那些谁都没见过的情况。</p>\n<p>在思考这些问题的过程中，你的大脑连接被这些例子所改变了，最终关联到一个关键词上，便完成了一次学习过程。</p>\n<p><img src=\"002.png\" alt=\"\"></p>\n<h2 id=\"名字根本不重要\"><a href=\"#名字根本不重要\" class=\"headerlink\" title=\"名字根本不重要\"></a>名字根本不重要</h2><p>随后你会用一个更好的关键词来代表你找出的关系，一种是动宾结构，因为它描述了输入和函数，输出也随之确定了。</p>\n<p>不过当人们开始传播该知识时，动宾结构会名词化，譬如以发现者的名字命名物理定律。一个知识可以有很多名字，但名字并不重要，重要的是从输入到输出的这种关系。不幸的是很多人只是记住了最不重要的名字。</p>\n<p>还有一种知识本身就是名词，也会让你觉得它并没输出，但这种知识的输出是分类任务中的类型，描述它的句子是主谓结构，谓语被导图的连线所代替了。</p>\n<h2 id=\"知识与智慧\"><a href=\"#知识与智慧\" class=\"headerlink\" title=\"知识与智慧\"></a>知识与智慧</h2><p>然而这并非思维导图的全部，它最强大的地方在于对知识的拆分。</p>\n<p>而若将要学习的知识拆分小知识的组合的话，你需要的例子就从指数量级变成了线性量级。并且所拆分出的小知识中，很多都是你已经学过的，可直接用于该次知识的构建。知识网络的好处就在于知识的重用性上。这正是为什么有人可以快速掌握一项新知识的秘密。</p>\n<p>思维导图的核心在于知识的拆分上，因此它既可以在学习未掌握的知识时用来拆分，也可以在应用已掌握的知识时用来拆分，也就是分而治之的具体操作方法。</p>\n<p>但拆分知识的能力也是一种需要学习的知识，并且是一种比较特殊的二阶知识。不同点在于：一般的知识是描述信息与信息之间的关系，而二阶知识是描述知识与知识之间的关系。比如，多次重复一个知识，组合某些知识来产生新知识。</p>\n<p>在拆分一个大知识时，若从大知识向小知识来拆分，则是正向思维；若从小知识向大知识来拆分，则是逆向思维。 </p>\n<p>知识的拆分只有一项终极原则，所拆分的知识之间要尽可能的彼此独立，这样才可以减少学习所需要的例子的数量。</p>\n<p><img src=\"003.png\" alt=\"\"></p>\n<h2 id=\"可以把思维导图扔了\"><a href=\"#可以把思维导图扔了\" class=\"headerlink\" title=\"可以把思维导图扔了\"></a>可以把思维导图扔了</h2><p>而当你回顾我所提到的，学习需要：</p>\n<ol>\n<li>明确输入输出</li>\n<li>将信息压缩成知识</li>\n<li>用例子重塑大脑连接</li>\n<li>用二阶知识来分而治之</li>\n</ol>\n<p>你会发现当正确思维导图时，你在不经意间做到了以上的所有要素。</p>\n<p>然而它之所以好用是在于满足了这些要素，不在于思维导图这个名字。若没能在使用中满足要素，即使用了思维导图也没用。但若能满足这些要素，即使什么都不用，也能让你真正学习。</p>\n"},{"title":"第06期：导图步骤","date":"2020-02-11T10:06:00.000Z","_content":"在解释完思维导图如何能够满足学习的要素后。就来思考该怎么设计画思维导图的步骤。\n\n## 没有什么是固定的\n依据是如何能满足这四个要素，而不是对思维导图的信仰。你可以根据不同的需求来设计：\n1. 要明确输入输出和任务\n2. 要将信息压缩成知识\n3. 要用例子重塑大脑连接\n4. 要用二阶知识来分而治之\n\n在设计步骤的过程中，我也会使用这些步骤来画步骤的导图。\n\n## 无米之炊\n先看第3条，要用例子重塑大脑连接。\n\n所以，第一步就是搜集例子。可以把搜集例子按渠道来拆分成脑中现有的和借助外力的。头脑风暴和上网调查。\n\n头脑风暴最主要的作用就是搜集所有相关例子。而上网搜索，其实就是研究生们每天做研究的做法。\n\n## 自我提问与质疑\n再看第1条，需要明确输入输出和任务。\n\n所以，第二步就是自我提问。\n\n问列出的关键词是什么，比如问思维导图是什么。这实际上是在学习分类，输入是一个事物，输出是它是否是思维导图。可以上网搜到无数个例子，一辈子都没有办法记住这么多例子。\n\n而且，我大脑中可以回想起的不重复的例子也是有限的，无法穷举所有不同的情况。就是学习观 01 提到的，记忆的容量有限和难以集齐。所以需要找出这些例子的共性，就是第2条，找出规律，将信息压缩成知识。\n\n我会不断的问为什么这个例子是思维导图，也在不断的质疑自己，反驳自己，也就是在寻找分类的边界，上个视频我把边界定成了能把杂乱信息拆分成知识网络的工具。这个知识是判断一个事物是不是思维导图。\n\n## 不要忘记目的\n但我的目的是什么？是为了以后自己可以画出任何情况的思维导图，包括我从来没见过，这些例子中没有的情况。\n\n这时的输入和输出就不一样了，输入是杂乱信息，输出是知识网络，要学习的知识是输入是怎样变成输出的。\n\n这就是为什么一定要明确要学习的规律是什么，以免学错规律，或半天都不知道自己在干什么。\n\n问：它是什么，为什么是，  是分类的自我提问。问：它的目的，如何达成，  是回归的自我提问。\n\n## 分而治之不是鸡汤\n还有第4条，拆分任务，也是自我提问。问的是子知识与子知识的关系。\n\n拆分成组合关系时，会问，它有什么。\n\n拆分成执行步骤时，会问先后顺序，还有条件循环。\n\n这个自我提问便是循环，而循环的停止条件是把大知识拆分成自己已知的知识为止。\n\n## 视角创造不同\n还有一点是视角。比如人可以拆分成 男女，再拆分成老少，还可以先老少，后男女。也就是视角不同了。一个是侧重性别，一个是侧重年龄。\n\n上个视频中思维导图其实是在侧重原理，问的问题是它有什么属性特点来考虑组合关系。而这里我问的是先后顺序，来考虑画导图的步骤。\n\n你会发现我的所有知识都是已有的知识，最大的不同就是视角。\n\n## 习惯也是在压缩信息\n这里可以再把提问细分一下，分成问变量与变量之间关系的一阶知识，和问知识与知识之间关系二阶知识。\n\n之前提到了怎么命名，如果是分类的话，句式是什么是什么的主语谓语结构，但谓语被连线代替了。所以就只有主语。\n\n比如，“分类属于一阶知识“这个知识是名词。\n\n如果是回归的话，就是像搜集例子这样的动词和宾语的结构。\n\n## 勿忘初衷\n最后列出一些误区来提醒自己：\n1. 因为是压缩信息，我如果把所有东西都写上去的话，就失去意义了\n2. 拆分的信息之间要独立。你可以看到独立与不独立对于信息的压缩能力的区别\n3. 又因为重要的是整个过程对我大脑的重塑，所以看别人的导图也没意义\n4. 最后是画完导图也要不断的验证自己构建的知识网，当有了新例子和体会后要更新导图\n5. 还有一点是不要去画完全没有规律的信息的导图\n\n![](001.jpeg)","source":"_posts/学习观/第06期：导图步骤.md","raw":"---\ntitle: 第06期：导图步骤\ncategories:\n- 学习观\n\ntags:\n- 学习观\n- 导图步骤\n\ndate: 2020-02-11 18:06\n---\n在解释完思维导图如何能够满足学习的要素后。就来思考该怎么设计画思维导图的步骤。\n\n## 没有什么是固定的\n依据是如何能满足这四个要素，而不是对思维导图的信仰。你可以根据不同的需求来设计：\n1. 要明确输入输出和任务\n2. 要将信息压缩成知识\n3. 要用例子重塑大脑连接\n4. 要用二阶知识来分而治之\n\n在设计步骤的过程中，我也会使用这些步骤来画步骤的导图。\n\n## 无米之炊\n先看第3条，要用例子重塑大脑连接。\n\n所以，第一步就是搜集例子。可以把搜集例子按渠道来拆分成脑中现有的和借助外力的。头脑风暴和上网调查。\n\n头脑风暴最主要的作用就是搜集所有相关例子。而上网搜索，其实就是研究生们每天做研究的做法。\n\n## 自我提问与质疑\n再看第1条，需要明确输入输出和任务。\n\n所以，第二步就是自我提问。\n\n问列出的关键词是什么，比如问思维导图是什么。这实际上是在学习分类，输入是一个事物，输出是它是否是思维导图。可以上网搜到无数个例子，一辈子都没有办法记住这么多例子。\n\n而且，我大脑中可以回想起的不重复的例子也是有限的，无法穷举所有不同的情况。就是学习观 01 提到的，记忆的容量有限和难以集齐。所以需要找出这些例子的共性，就是第2条，找出规律，将信息压缩成知识。\n\n我会不断的问为什么这个例子是思维导图，也在不断的质疑自己，反驳自己，也就是在寻找分类的边界，上个视频我把边界定成了能把杂乱信息拆分成知识网络的工具。这个知识是判断一个事物是不是思维导图。\n\n## 不要忘记目的\n但我的目的是什么？是为了以后自己可以画出任何情况的思维导图，包括我从来没见过，这些例子中没有的情况。\n\n这时的输入和输出就不一样了，输入是杂乱信息，输出是知识网络，要学习的知识是输入是怎样变成输出的。\n\n这就是为什么一定要明确要学习的规律是什么，以免学错规律，或半天都不知道自己在干什么。\n\n问：它是什么，为什么是，  是分类的自我提问。问：它的目的，如何达成，  是回归的自我提问。\n\n## 分而治之不是鸡汤\n还有第4条，拆分任务，也是自我提问。问的是子知识与子知识的关系。\n\n拆分成组合关系时，会问，它有什么。\n\n拆分成执行步骤时，会问先后顺序，还有条件循环。\n\n这个自我提问便是循环，而循环的停止条件是把大知识拆分成自己已知的知识为止。\n\n## 视角创造不同\n还有一点是视角。比如人可以拆分成 男女，再拆分成老少，还可以先老少，后男女。也就是视角不同了。一个是侧重性别，一个是侧重年龄。\n\n上个视频中思维导图其实是在侧重原理，问的问题是它有什么属性特点来考虑组合关系。而这里我问的是先后顺序，来考虑画导图的步骤。\n\n你会发现我的所有知识都是已有的知识，最大的不同就是视角。\n\n## 习惯也是在压缩信息\n这里可以再把提问细分一下，分成问变量与变量之间关系的一阶知识，和问知识与知识之间关系二阶知识。\n\n之前提到了怎么命名，如果是分类的话，句式是什么是什么的主语谓语结构，但谓语被连线代替了。所以就只有主语。\n\n比如，“分类属于一阶知识“这个知识是名词。\n\n如果是回归的话，就是像搜集例子这样的动词和宾语的结构。\n\n## 勿忘初衷\n最后列出一些误区来提醒自己：\n1. 因为是压缩信息，我如果把所有东西都写上去的话，就失去意义了\n2. 拆分的信息之间要独立。你可以看到独立与不独立对于信息的压缩能力的区别\n3. 又因为重要的是整个过程对我大脑的重塑，所以看别人的导图也没意义\n4. 最后是画完导图也要不断的验证自己构建的知识网，当有了新例子和体会后要更新导图\n5. 还有一点是不要去画完全没有规律的信息的导图\n\n![](001.jpeg)","slug":"学习观/第06期：导图步骤","published":1,"updated":"2020-04-12T08:28:29.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8d006zm33p1sdgju15","content":"<p>在解释完思维导图如何能够满足学习的要素后。就来思考该怎么设计画思维导图的步骤。</p>\n<h2 id=\"没有什么是固定的\"><a href=\"#没有什么是固定的\" class=\"headerlink\" title=\"没有什么是固定的\"></a>没有什么是固定的</h2><p>依据是如何能满足这四个要素，而不是对思维导图的信仰。你可以根据不同的需求来设计：</p>\n<ol>\n<li>要明确输入输出和任务</li>\n<li>要将信息压缩成知识</li>\n<li>要用例子重塑大脑连接</li>\n<li>要用二阶知识来分而治之</li>\n</ol>\n<p>在设计步骤的过程中，我也会使用这些步骤来画步骤的导图。</p>\n<h2 id=\"无米之炊\"><a href=\"#无米之炊\" class=\"headerlink\" title=\"无米之炊\"></a>无米之炊</h2><p>先看第3条，要用例子重塑大脑连接。</p>\n<p>所以，第一步就是搜集例子。可以把搜集例子按渠道来拆分成脑中现有的和借助外力的。头脑风暴和上网调查。</p>\n<p>头脑风暴最主要的作用就是搜集所有相关例子。而上网搜索，其实就是研究生们每天做研究的做法。</p>\n<h2 id=\"自我提问与质疑\"><a href=\"#自我提问与质疑\" class=\"headerlink\" title=\"自我提问与质疑\"></a>自我提问与质疑</h2><p>再看第1条，需要明确输入输出和任务。</p>\n<p>所以，第二步就是自我提问。</p>\n<p>问列出的关键词是什么，比如问思维导图是什么。这实际上是在学习分类，输入是一个事物，输出是它是否是思维导图。可以上网搜到无数个例子，一辈子都没有办法记住这么多例子。</p>\n<p>而且，我大脑中可以回想起的不重复的例子也是有限的，无法穷举所有不同的情况。就是学习观 01 提到的，记忆的容量有限和难以集齐。所以需要找出这些例子的共性，就是第2条，找出规律，将信息压缩成知识。</p>\n<p>我会不断的问为什么这个例子是思维导图，也在不断的质疑自己，反驳自己，也就是在寻找分类的边界，上个视频我把边界定成了能把杂乱信息拆分成知识网络的工具。这个知识是判断一个事物是不是思维导图。</p>\n<h2 id=\"不要忘记目的\"><a href=\"#不要忘记目的\" class=\"headerlink\" title=\"不要忘记目的\"></a>不要忘记目的</h2><p>但我的目的是什么？是为了以后自己可以画出任何情况的思维导图，包括我从来没见过，这些例子中没有的情况。</p>\n<p>这时的输入和输出就不一样了，输入是杂乱信息，输出是知识网络，要学习的知识是输入是怎样变成输出的。</p>\n<p>这就是为什么一定要明确要学习的规律是什么，以免学错规律，或半天都不知道自己在干什么。</p>\n<p>问：它是什么，为什么是，  是分类的自我提问。问：它的目的，如何达成，  是回归的自我提问。</p>\n<h2 id=\"分而治之不是鸡汤\"><a href=\"#分而治之不是鸡汤\" class=\"headerlink\" title=\"分而治之不是鸡汤\"></a>分而治之不是鸡汤</h2><p>还有第4条，拆分任务，也是自我提问。问的是子知识与子知识的关系。</p>\n<p>拆分成组合关系时，会问，它有什么。</p>\n<p>拆分成执行步骤时，会问先后顺序，还有条件循环。</p>\n<p>这个自我提问便是循环，而循环的停止条件是把大知识拆分成自己已知的知识为止。</p>\n<h2 id=\"视角创造不同\"><a href=\"#视角创造不同\" class=\"headerlink\" title=\"视角创造不同\"></a>视角创造不同</h2><p>还有一点是视角。比如人可以拆分成 男女，再拆分成老少，还可以先老少，后男女。也就是视角不同了。一个是侧重性别，一个是侧重年龄。</p>\n<p>上个视频中思维导图其实是在侧重原理，问的问题是它有什么属性特点来考虑组合关系。而这里我问的是先后顺序，来考虑画导图的步骤。</p>\n<p>你会发现我的所有知识都是已有的知识，最大的不同就是视角。</p>\n<h2 id=\"习惯也是在压缩信息\"><a href=\"#习惯也是在压缩信息\" class=\"headerlink\" title=\"习惯也是在压缩信息\"></a>习惯也是在压缩信息</h2><p>这里可以再把提问细分一下，分成问变量与变量之间关系的一阶知识，和问知识与知识之间关系二阶知识。</p>\n<p>之前提到了怎么命名，如果是分类的话，句式是什么是什么的主语谓语结构，但谓语被连线代替了。所以就只有主语。</p>\n<p>比如，“分类属于一阶知识“这个知识是名词。</p>\n<p>如果是回归的话，就是像搜集例子这样的动词和宾语的结构。</p>\n<h2 id=\"勿忘初衷\"><a href=\"#勿忘初衷\" class=\"headerlink\" title=\"勿忘初衷\"></a>勿忘初衷</h2><p>最后列出一些误区来提醒自己：</p>\n<ol>\n<li>因为是压缩信息，我如果把所有东西都写上去的话，就失去意义了</li>\n<li>拆分的信息之间要独立。你可以看到独立与不独立对于信息的压缩能力的区别</li>\n<li>又因为重要的是整个过程对我大脑的重塑，所以看别人的导图也没意义</li>\n<li>最后是画完导图也要不断的验证自己构建的知识网，当有了新例子和体会后要更新导图</li>\n<li>还有一点是不要去画完全没有规律的信息的导图</li>\n</ol>\n<p><img src=\"001.jpeg\" alt=\"\"></p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>在解释完思维导图如何能够满足学习的要素后。就来思考该怎么设计画思维导图的步骤。</p>\n<h2 id=\"没有什么是固定的\"><a href=\"#没有什么是固定的\" class=\"headerlink\" title=\"没有什么是固定的\"></a>没有什么是固定的</h2><p>依据是如何能满足这四个要素，而不是对思维导图的信仰。你可以根据不同的需求来设计：</p>\n<ol>\n<li>要明确输入输出和任务</li>\n<li>要将信息压缩成知识</li>\n<li>要用例子重塑大脑连接</li>\n<li>要用二阶知识来分而治之</li>\n</ol>\n<p>在设计步骤的过程中，我也会使用这些步骤来画步骤的导图。</p>\n<h2 id=\"无米之炊\"><a href=\"#无米之炊\" class=\"headerlink\" title=\"无米之炊\"></a>无米之炊</h2><p>先看第3条，要用例子重塑大脑连接。</p>\n<p>所以，第一步就是搜集例子。可以把搜集例子按渠道来拆分成脑中现有的和借助外力的。头脑风暴和上网调查。</p>\n<p>头脑风暴最主要的作用就是搜集所有相关例子。而上网搜索，其实就是研究生们每天做研究的做法。</p>\n<h2 id=\"自我提问与质疑\"><a href=\"#自我提问与质疑\" class=\"headerlink\" title=\"自我提问与质疑\"></a>自我提问与质疑</h2><p>再看第1条，需要明确输入输出和任务。</p>\n<p>所以，第二步就是自我提问。</p>\n<p>问列出的关键词是什么，比如问思维导图是什么。这实际上是在学习分类，输入是一个事物，输出是它是否是思维导图。可以上网搜到无数个例子，一辈子都没有办法记住这么多例子。</p>\n<p>而且，我大脑中可以回想起的不重复的例子也是有限的，无法穷举所有不同的情况。就是学习观 01 提到的，记忆的容量有限和难以集齐。所以需要找出这些例子的共性，就是第2条，找出规律，将信息压缩成知识。</p>\n<p>我会不断的问为什么这个例子是思维导图，也在不断的质疑自己，反驳自己，也就是在寻找分类的边界，上个视频我把边界定成了能把杂乱信息拆分成知识网络的工具。这个知识是判断一个事物是不是思维导图。</p>\n<h2 id=\"不要忘记目的\"><a href=\"#不要忘记目的\" class=\"headerlink\" title=\"不要忘记目的\"></a>不要忘记目的</h2><p>但我的目的是什么？是为了以后自己可以画出任何情况的思维导图，包括我从来没见过，这些例子中没有的情况。</p>\n<p>这时的输入和输出就不一样了，输入是杂乱信息，输出是知识网络，要学习的知识是输入是怎样变成输出的。</p>\n<p>这就是为什么一定要明确要学习的规律是什么，以免学错规律，或半天都不知道自己在干什么。</p>\n<p>问：它是什么，为什么是，  是分类的自我提问。问：它的目的，如何达成，  是回归的自我提问。</p>\n<h2 id=\"分而治之不是鸡汤\"><a href=\"#分而治之不是鸡汤\" class=\"headerlink\" title=\"分而治之不是鸡汤\"></a>分而治之不是鸡汤</h2><p>还有第4条，拆分任务，也是自我提问。问的是子知识与子知识的关系。</p>\n<p>拆分成组合关系时，会问，它有什么。</p>\n<p>拆分成执行步骤时，会问先后顺序，还有条件循环。</p>\n<p>这个自我提问便是循环，而循环的停止条件是把大知识拆分成自己已知的知识为止。</p>\n<h2 id=\"视角创造不同\"><a href=\"#视角创造不同\" class=\"headerlink\" title=\"视角创造不同\"></a>视角创造不同</h2><p>还有一点是视角。比如人可以拆分成 男女，再拆分成老少，还可以先老少，后男女。也就是视角不同了。一个是侧重性别，一个是侧重年龄。</p>\n<p>上个视频中思维导图其实是在侧重原理，问的问题是它有什么属性特点来考虑组合关系。而这里我问的是先后顺序，来考虑画导图的步骤。</p>\n<p>你会发现我的所有知识都是已有的知识，最大的不同就是视角。</p>\n<h2 id=\"习惯也是在压缩信息\"><a href=\"#习惯也是在压缩信息\" class=\"headerlink\" title=\"习惯也是在压缩信息\"></a>习惯也是在压缩信息</h2><p>这里可以再把提问细分一下，分成问变量与变量之间关系的一阶知识，和问知识与知识之间关系二阶知识。</p>\n<p>之前提到了怎么命名，如果是分类的话，句式是什么是什么的主语谓语结构，但谓语被连线代替了。所以就只有主语。</p>\n<p>比如，“分类属于一阶知识“这个知识是名词。</p>\n<p>如果是回归的话，就是像搜集例子这样的动词和宾语的结构。</p>\n<h2 id=\"勿忘初衷\"><a href=\"#勿忘初衷\" class=\"headerlink\" title=\"勿忘初衷\"></a>勿忘初衷</h2><p>最后列出一些误区来提醒自己：</p>\n<ol>\n<li>因为是压缩信息，我如果把所有东西都写上去的话，就失去意义了</li>\n<li>拆分的信息之间要独立。你可以看到独立与不独立对于信息的压缩能力的区别</li>\n<li>又因为重要的是整个过程对我大脑的重塑，所以看别人的导图也没意义</li>\n<li>最后是画完导图也要不断的验证自己构建的知识网，当有了新例子和体会后要更新导图</li>\n<li>还有一点是不要去画完全没有规律的信息的导图</li>\n</ol>\n<p><img src=\"001.jpeg\" alt=\"\"></p>\n"},{"title":"第07期：费曼技巧","date":"2020-02-11T10:07:00.000Z","_content":"可网上对费曼技巧原理的解释却是玄之又玄，大量不知道从哪里得来的“心理学”理论强行解释。和推崇思维导图时一样，把工具当成了某种仪式步骤来执行，希望可以产生魔力。\n\n![](001.png)\n\n## 手段可以选择，目的才是核心\n费曼技巧只有两步：第一步是学习，第二步是解释。学习时可以使用思维导图的所有技巧。可为什么只多了一步解释却有如此大的作用？在解释的过程中到底达成了哪些目的？\n\n## 条条大路通罗马\n想想一下我们是如何向某人解释一个知识的？可能我们看了很多的例子与知识描述，但我们不能将这些重复给对方听，只能浓缩信息，挑核心的规律来解释。浓缩后的规律会被转化成一个个句子，每个句子都包含主语谓语和关系。当将概念转化为语言时，同时做到了三件事：明确了复合知识的输入和输出，描述了所拆分出的子知识的输入输出及关系，最终理清了所要解释的知识。这些目的在使用思维导图时就可以达成，费曼技巧也和思维导图一样，只是工具。\n\n![](002.png)\n\n## 有效验证\n要说解释最关键的作用，就在于：验证二字。\n\n使用思维导图时，可能你画完导图，却仍感觉什么都没学会。该如何验证自己已学会某项知识呢？\n\n学习是用有限的例子归纳知识来压缩信息，所压缩的信息包括从来都没见过的情况。因为我们正是要用知识来解决未见过的问题，对于已见过的例子，记住答案或上网搜索就好了。\n\n然而记住某些内容，只能重述这些内容，却无法解释新情况。与学习时不同，解释时所用的不再是学习时的例子，是对方所面对情况的输入和输出，要帮助对方来理清关系。\n\n如果对方无法理解，则需要举新的例子，若还无法理解，则需要换新的视角。这些都是当初你在学习时从未遇到的情况，而当你可以生成并解释这些新情况时，也就验证了你的学习。\n\n![](003.png)\n\n下面 6 个词的关系是：\n\n学习 --> 理解 --> 解释\n\n记忆 --> 记住 --> 重述\n\n![](004.png)\n\n## 思维导图与费曼技巧\n思维导图是以过程为主导的学习方法，核心在于拆分知识，而费曼技巧是以目的为导向的学习方法，核心在于验证知识。但不要认为你只能使用一个。\n\n对于拆分知识，费曼技巧并不如思维导图清晰。\n\n对于验证知识，思维导图在新例子与视角上不如费曼技巧。\n\n可以在费曼技巧的学习步骤时使用思维导图，也可以在思维导图的复习时用新例子验证。\n\n## 温故而知新，可以为师矣\n所有无限推崇费曼技巧的人真的理解费曼技巧？我称其为费曼技巧源于我对费曼先生的喜爱和敬佩，我有去了解了先生的生平，可我在很多人的文字里却看不到这份喜爱。所有人也都没有提到孔子。\n\n但如果真的将该技巧追溯于某人，恐怕至少要到春秋末期。我国的教育家思想家孔子在两千年前就将该技巧应用在了教学中。我们初一（上）的论语十则中的「温故而知新，可以为师矣」记载的就是费曼技巧。\n\n这里的「故」是学习时的例子，而「新」是未见过的例子当可以从有限的例子中提取知识来解释新的情况时，就意味着你真正的学会了它，便可将知识教授他人。\n\n稍微有些讽刺不是吗？人们苦苦追寻的终极方法却每天清晨都传荡在中学的走廊。","source":"_posts/学习观/第07期：费曼技巧.md","raw":"---\ntitle: 第07期：费曼技巧\ncategories:\n- 学习观\n\ntags:\n- 学习观\n- 费曼技巧\n\ndate: 2020-02-11 18:07\n---\n可网上对费曼技巧原理的解释却是玄之又玄，大量不知道从哪里得来的“心理学”理论强行解释。和推崇思维导图时一样，把工具当成了某种仪式步骤来执行，希望可以产生魔力。\n\n![](001.png)\n\n## 手段可以选择，目的才是核心\n费曼技巧只有两步：第一步是学习，第二步是解释。学习时可以使用思维导图的所有技巧。可为什么只多了一步解释却有如此大的作用？在解释的过程中到底达成了哪些目的？\n\n## 条条大路通罗马\n想想一下我们是如何向某人解释一个知识的？可能我们看了很多的例子与知识描述，但我们不能将这些重复给对方听，只能浓缩信息，挑核心的规律来解释。浓缩后的规律会被转化成一个个句子，每个句子都包含主语谓语和关系。当将概念转化为语言时，同时做到了三件事：明确了复合知识的输入和输出，描述了所拆分出的子知识的输入输出及关系，最终理清了所要解释的知识。这些目的在使用思维导图时就可以达成，费曼技巧也和思维导图一样，只是工具。\n\n![](002.png)\n\n## 有效验证\n要说解释最关键的作用，就在于：验证二字。\n\n使用思维导图时，可能你画完导图，却仍感觉什么都没学会。该如何验证自己已学会某项知识呢？\n\n学习是用有限的例子归纳知识来压缩信息，所压缩的信息包括从来都没见过的情况。因为我们正是要用知识来解决未见过的问题，对于已见过的例子，记住答案或上网搜索就好了。\n\n然而记住某些内容，只能重述这些内容，却无法解释新情况。与学习时不同，解释时所用的不再是学习时的例子，是对方所面对情况的输入和输出，要帮助对方来理清关系。\n\n如果对方无法理解，则需要举新的例子，若还无法理解，则需要换新的视角。这些都是当初你在学习时从未遇到的情况，而当你可以生成并解释这些新情况时，也就验证了你的学习。\n\n![](003.png)\n\n下面 6 个词的关系是：\n\n学习 --> 理解 --> 解释\n\n记忆 --> 记住 --> 重述\n\n![](004.png)\n\n## 思维导图与费曼技巧\n思维导图是以过程为主导的学习方法，核心在于拆分知识，而费曼技巧是以目的为导向的学习方法，核心在于验证知识。但不要认为你只能使用一个。\n\n对于拆分知识，费曼技巧并不如思维导图清晰。\n\n对于验证知识，思维导图在新例子与视角上不如费曼技巧。\n\n可以在费曼技巧的学习步骤时使用思维导图，也可以在思维导图的复习时用新例子验证。\n\n## 温故而知新，可以为师矣\n所有无限推崇费曼技巧的人真的理解费曼技巧？我称其为费曼技巧源于我对费曼先生的喜爱和敬佩，我有去了解了先生的生平，可我在很多人的文字里却看不到这份喜爱。所有人也都没有提到孔子。\n\n但如果真的将该技巧追溯于某人，恐怕至少要到春秋末期。我国的教育家思想家孔子在两千年前就将该技巧应用在了教学中。我们初一（上）的论语十则中的「温故而知新，可以为师矣」记载的就是费曼技巧。\n\n这里的「故」是学习时的例子，而「新」是未见过的例子当可以从有限的例子中提取知识来解释新的情况时，就意味着你真正的学会了它，便可将知识教授他人。\n\n稍微有些讽刺不是吗？人们苦苦追寻的终极方法却每天清晨都传荡在中学的走廊。","slug":"学习观/第07期：费曼技巧","published":1,"updated":"2020-04-12T08:28:29.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8g0074m33p57em17st","content":"<p>可网上对费曼技巧原理的解释却是玄之又玄，大量不知道从哪里得来的“心理学”理论强行解释。和推崇思维导图时一样，把工具当成了某种仪式步骤来执行，希望可以产生魔力。</p>\n<p><img src=\"001.png\" alt=\"\"></p>\n<h2 id=\"手段可以选择，目的才是核心\"><a href=\"#手段可以选择，目的才是核心\" class=\"headerlink\" title=\"手段可以选择，目的才是核心\"></a>手段可以选择，目的才是核心</h2><p>费曼技巧只有两步：第一步是学习，第二步是解释。学习时可以使用思维导图的所有技巧。可为什么只多了一步解释却有如此大的作用？在解释的过程中到底达成了哪些目的？</p>\n<h2 id=\"条条大路通罗马\"><a href=\"#条条大路通罗马\" class=\"headerlink\" title=\"条条大路通罗马\"></a>条条大路通罗马</h2><p>想想一下我们是如何向某人解释一个知识的？可能我们看了很多的例子与知识描述，但我们不能将这些重复给对方听，只能浓缩信息，挑核心的规律来解释。浓缩后的规律会被转化成一个个句子，每个句子都包含主语谓语和关系。当将概念转化为语言时，同时做到了三件事：明确了复合知识的输入和输出，描述了所拆分出的子知识的输入输出及关系，最终理清了所要解释的知识。这些目的在使用思维导图时就可以达成，费曼技巧也和思维导图一样，只是工具。</p>\n<p><img src=\"002.png\" alt=\"\"></p>\n<h2 id=\"有效验证\"><a href=\"#有效验证\" class=\"headerlink\" title=\"有效验证\"></a>有效验证</h2><p>要说解释最关键的作用，就在于：验证二字。</p>\n<p>使用思维导图时，可能你画完导图，却仍感觉什么都没学会。该如何验证自己已学会某项知识呢？</p>\n<p>学习是用有限的例子归纳知识来压缩信息，所压缩的信息包括从来都没见过的情况。因为我们正是要用知识来解决未见过的问题，对于已见过的例子，记住答案或上网搜索就好了。</p>\n<p>然而记住某些内容，只能重述这些内容，却无法解释新情况。与学习时不同，解释时所用的不再是学习时的例子，是对方所面对情况的输入和输出，要帮助对方来理清关系。</p>\n<p>如果对方无法理解，则需要举新的例子，若还无法理解，则需要换新的视角。这些都是当初你在学习时从未遇到的情况，而当你可以生成并解释这些新情况时，也就验证了你的学习。</p>\n<p><img src=\"003.png\" alt=\"\"></p>\n<p>下面 6 个词的关系是：</p>\n<p>学习 —&gt; 理解 —&gt; 解释</p>\n<p>记忆 —&gt; 记住 —&gt; 重述</p>\n<p><img src=\"004.png\" alt=\"\"></p>\n<h2 id=\"思维导图与费曼技巧\"><a href=\"#思维导图与费曼技巧\" class=\"headerlink\" title=\"思维导图与费曼技巧\"></a>思维导图与费曼技巧</h2><p>思维导图是以过程为主导的学习方法，核心在于拆分知识，而费曼技巧是以目的为导向的学习方法，核心在于验证知识。但不要认为你只能使用一个。</p>\n<p>对于拆分知识，费曼技巧并不如思维导图清晰。</p>\n<p>对于验证知识，思维导图在新例子与视角上不如费曼技巧。</p>\n<p>可以在费曼技巧的学习步骤时使用思维导图，也可以在思维导图的复习时用新例子验证。</p>\n<h2 id=\"温故而知新，可以为师矣\"><a href=\"#温故而知新，可以为师矣\" class=\"headerlink\" title=\"温故而知新，可以为师矣\"></a>温故而知新，可以为师矣</h2><p>所有无限推崇费曼技巧的人真的理解费曼技巧？我称其为费曼技巧源于我对费曼先生的喜爱和敬佩，我有去了解了先生的生平，可我在很多人的文字里却看不到这份喜爱。所有人也都没有提到孔子。</p>\n<p>但如果真的将该技巧追溯于某人，恐怕至少要到春秋末期。我国的教育家思想家孔子在两千年前就将该技巧应用在了教学中。我们初一（上）的论语十则中的「温故而知新，可以为师矣」记载的就是费曼技巧。</p>\n<p>这里的「故」是学习时的例子，而「新」是未见过的例子当可以从有限的例子中提取知识来解释新的情况时，就意味着你真正的学会了它，便可将知识教授他人。</p>\n<p>稍微有些讽刺不是吗？人们苦苦追寻的终极方法却每天清晨都传荡在中学的走廊。</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>可网上对费曼技巧原理的解释却是玄之又玄，大量不知道从哪里得来的“心理学”理论强行解释。和推崇思维导图时一样，把工具当成了某种仪式步骤来执行，希望可以产生魔力。</p>\n<p><img src=\"001.png\" alt=\"\"></p>\n<h2 id=\"手段可以选择，目的才是核心\"><a href=\"#手段可以选择，目的才是核心\" class=\"headerlink\" title=\"手段可以选择，目的才是核心\"></a>手段可以选择，目的才是核心</h2><p>费曼技巧只有两步：第一步是学习，第二步是解释。学习时可以使用思维导图的所有技巧。可为什么只多了一步解释却有如此大的作用？在解释的过程中到底达成了哪些目的？</p>\n<h2 id=\"条条大路通罗马\"><a href=\"#条条大路通罗马\" class=\"headerlink\" title=\"条条大路通罗马\"></a>条条大路通罗马</h2><p>想想一下我们是如何向某人解释一个知识的？可能我们看了很多的例子与知识描述，但我们不能将这些重复给对方听，只能浓缩信息，挑核心的规律来解释。浓缩后的规律会被转化成一个个句子，每个句子都包含主语谓语和关系。当将概念转化为语言时，同时做到了三件事：明确了复合知识的输入和输出，描述了所拆分出的子知识的输入输出及关系，最终理清了所要解释的知识。这些目的在使用思维导图时就可以达成，费曼技巧也和思维导图一样，只是工具。</p>\n<p><img src=\"002.png\" alt=\"\"></p>\n<h2 id=\"有效验证\"><a href=\"#有效验证\" class=\"headerlink\" title=\"有效验证\"></a>有效验证</h2><p>要说解释最关键的作用，就在于：验证二字。</p>\n<p>使用思维导图时，可能你画完导图，却仍感觉什么都没学会。该如何验证自己已学会某项知识呢？</p>\n<p>学习是用有限的例子归纳知识来压缩信息，所压缩的信息包括从来都没见过的情况。因为我们正是要用知识来解决未见过的问题，对于已见过的例子，记住答案或上网搜索就好了。</p>\n<p>然而记住某些内容，只能重述这些内容，却无法解释新情况。与学习时不同，解释时所用的不再是学习时的例子，是对方所面对情况的输入和输出，要帮助对方来理清关系。</p>\n<p>如果对方无法理解，则需要举新的例子，若还无法理解，则需要换新的视角。这些都是当初你在学习时从未遇到的情况，而当你可以生成并解释这些新情况时，也就验证了你的学习。</p>\n<p><img src=\"003.png\" alt=\"\"></p>\n<p>下面 6 个词的关系是：</p>\n<p>学习 —&gt; 理解 —&gt; 解释</p>\n<p>记忆 —&gt; 记住 —&gt; 重述</p>\n<p><img src=\"004.png\" alt=\"\"></p>\n<h2 id=\"思维导图与费曼技巧\"><a href=\"#思维导图与费曼技巧\" class=\"headerlink\" title=\"思维导图与费曼技巧\"></a>思维导图与费曼技巧</h2><p>思维导图是以过程为主导的学习方法，核心在于拆分知识，而费曼技巧是以目的为导向的学习方法，核心在于验证知识。但不要认为你只能使用一个。</p>\n<p>对于拆分知识，费曼技巧并不如思维导图清晰。</p>\n<p>对于验证知识，思维导图在新例子与视角上不如费曼技巧。</p>\n<p>可以在费曼技巧的学习步骤时使用思维导图，也可以在思维导图的复习时用新例子验证。</p>\n<h2 id=\"温故而知新，可以为师矣\"><a href=\"#温故而知新，可以为师矣\" class=\"headerlink\" title=\"温故而知新，可以为师矣\"></a>温故而知新，可以为师矣</h2><p>所有无限推崇费曼技巧的人真的理解费曼技巧？我称其为费曼技巧源于我对费曼先生的喜爱和敬佩，我有去了解了先生的生平，可我在很多人的文字里却看不到这份喜爱。所有人也都没有提到孔子。</p>\n<p>但如果真的将该技巧追溯于某人，恐怕至少要到春秋末期。我国的教育家思想家孔子在两千年前就将该技巧应用在了教学中。我们初一（上）的论语十则中的「温故而知新，可以为师矣」记载的就是费曼技巧。</p>\n<p>这里的「故」是学习时的例子，而「新」是未见过的例子当可以从有限的例子中提取知识来解释新的情况时，就意味着你真正的学会了它，便可将知识教授他人。</p>\n<p>稍微有些讽刺不是吗？人们苦苦追寻的终极方法却每天清晨都传荡在中学的走廊。</p>\n"},{"title":"常用正则表达式","date":"2020-02-19T16:00:00.000Z","_content":"#### 概念\n1. 正数：比0大的数\n1. 负数：比0小的数\n1. 整数：没有小数点的数\n1. 实数：是有理数和无理数的总称\n\n## 校验数字\n#### 数字\n```\n^\\d+$\n```\n```\n^[0-9]+$\n```\n#### n位数字\n```\n^\\d{n}$\n```\n```\n^[0-9]{n}$\n```\n\n#### 至少n位数字\n```\n^\\d{n,}$\n```\n```\n^[0-9]{n,}$\n```\n#### m-n位的数字\n```\n^\\d{m, n}$\n\n```\n```\n^[0-9]{m, n}$\n```\n\n#### 0和1开头的数字\n```\n^(0|1)\\d+$\n```\n```\n^(0|1)[0-9]+$\n```\n#### 非0开头的，最多带两位小数的数字\n```\n^[1-9]\\d+(.\\d{1,2})?$\n```\n?\n```\n^([1-9][0-9]+)+(.[0-9]{1,2})?$\n```\n#### 带1-2位小数的正数或负数\n```\n# 不能用\\d* 因为*表示匹配0次或多次\n^(-|)\\d+.\\d{1,2}$\n```\n```\n^(\\-)?\\d+(\\.\\d{1,2})?$\n```\n\n#### 正数、负数、和小数\n```\n^(-|)\\d+(.\\d+)?$\n```\n\n```\n^(\\-|\\+)?\\d+(\\.\\d+)?$\n```\n\n#### 有2位小数的正实数\n1.12 +1.12\n\n```\n^\\d+.\\d{2}$\n```\n\n```\n^[0-9]+(.[0-9]{2})?$\n```\n\n#### 有1~3位小数的正实数\n-1.123 0.1 1.123 +1.123\n\n```\n^\\d+.\\d{1,3}$\n```\n\n```\n^[0-9]+(.[0-9]{1,3})?$\n```\n\n#### 非零的正整数\n1, +1\n\n```\n^[1-9]\\d*$\n```\n\n```\n^([1-9][0-9]*){1,}$\n```\n\n```\n^\\+?[1-9][0-9]*$\n```\n\n#### 非零的负整数\n-1 -2\n\n```\n^-[1-9]\\d*$\n```\n\n```\n^\\-[1-9][0-9]*$\n```\n\n#### 非负整数\n0, 1, +1\n\n```\n^\\d+$\n```\n\n```\n^[1-9]\\d*|0$\n```\n\n#### 非正整数\n0, -1\n\n```\n^-[1-9]\\d*|0$\n```\n\n```\n^((-\\d+)|(0+))$\n```\n\n#### 非负浮点数\n0.1 1.1 +1.1\n\n```\n^(+)?\\d+$(.\\d+)$\n```\n\n```\n^\\d+(\\.\\d+)?$\n```\n\n```\n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$\n```\n\n#### 非正浮点数\n0.1 -1.1\n\n```\n^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$\n```\n\n```\n^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$\n```\n\n#### 正浮点数\n1.1 +1.1\n\n```\n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$\n```\n\n```\n^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n```\n\n#### 负浮点数\n-1.24345\n\n```\n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$\n```\n\n```\n^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n```\n\n#### 浮点数\n-1.1 0.1 1.1\n\n```\n^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n\n## 校验字符\n\n## 特需场景","source":"_posts/正则表达式/常用正则表达式.md","raw":"---\ntitle: 常用正则表达式\ncategories:\n- 正则表达式\n\ntags:\n- 正则表达式\ndate: 2020-02-20\n---\n#### 概念\n1. 正数：比0大的数\n1. 负数：比0小的数\n1. 整数：没有小数点的数\n1. 实数：是有理数和无理数的总称\n\n## 校验数字\n#### 数字\n```\n^\\d+$\n```\n```\n^[0-9]+$\n```\n#### n位数字\n```\n^\\d{n}$\n```\n```\n^[0-9]{n}$\n```\n\n#### 至少n位数字\n```\n^\\d{n,}$\n```\n```\n^[0-9]{n,}$\n```\n#### m-n位的数字\n```\n^\\d{m, n}$\n\n```\n```\n^[0-9]{m, n}$\n```\n\n#### 0和1开头的数字\n```\n^(0|1)\\d+$\n```\n```\n^(0|1)[0-9]+$\n```\n#### 非0开头的，最多带两位小数的数字\n```\n^[1-9]\\d+(.\\d{1,2})?$\n```\n?\n```\n^([1-9][0-9]+)+(.[0-9]{1,2})?$\n```\n#### 带1-2位小数的正数或负数\n```\n# 不能用\\d* 因为*表示匹配0次或多次\n^(-|)\\d+.\\d{1,2}$\n```\n```\n^(\\-)?\\d+(\\.\\d{1,2})?$\n```\n\n#### 正数、负数、和小数\n```\n^(-|)\\d+(.\\d+)?$\n```\n\n```\n^(\\-|\\+)?\\d+(\\.\\d+)?$\n```\n\n#### 有2位小数的正实数\n1.12 +1.12\n\n```\n^\\d+.\\d{2}$\n```\n\n```\n^[0-9]+(.[0-9]{2})?$\n```\n\n#### 有1~3位小数的正实数\n-1.123 0.1 1.123 +1.123\n\n```\n^\\d+.\\d{1,3}$\n```\n\n```\n^[0-9]+(.[0-9]{1,3})?$\n```\n\n#### 非零的正整数\n1, +1\n\n```\n^[1-9]\\d*$\n```\n\n```\n^([1-9][0-9]*){1,}$\n```\n\n```\n^\\+?[1-9][0-9]*$\n```\n\n#### 非零的负整数\n-1 -2\n\n```\n^-[1-9]\\d*$\n```\n\n```\n^\\-[1-9][0-9]*$\n```\n\n#### 非负整数\n0, 1, +1\n\n```\n^\\d+$\n```\n\n```\n^[1-9]\\d*|0$\n```\n\n#### 非正整数\n0, -1\n\n```\n^-[1-9]\\d*|0$\n```\n\n```\n^((-\\d+)|(0+))$\n```\n\n#### 非负浮点数\n0.1 1.1 +1.1\n\n```\n^(+)?\\d+$(.\\d+)$\n```\n\n```\n^\\d+(\\.\\d+)?$\n```\n\n```\n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$\n```\n\n#### 非正浮点数\n0.1 -1.1\n\n```\n^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$\n```\n\n```\n^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$\n```\n\n#### 正浮点数\n1.1 +1.1\n\n```\n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$\n```\n\n```\n^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n```\n\n#### 负浮点数\n-1.24345\n\n```\n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$\n```\n\n```\n^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n```\n\n#### 浮点数\n-1.1 0.1 1.1\n\n```\n^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n\n## 校验字符\n\n## 特需场景","slug":"正则表达式/常用正则表达式","published":1,"updated":"2020-04-12T08:28:29.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8i0075m33paibb5wg8","content":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><ol>\n<li>正数：比0大的数</li>\n<li>负数：比0小的数</li>\n<li>整数：没有小数点的数</li>\n<li>实数：是有理数和无理数的总称</li>\n</ol>\n<h2 id=\"校验数字\"><a href=\"#校验数字\" class=\"headerlink\" title=\"校验数字\"></a>校验数字</h2><h4 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]+$</span><br></pre></td></tr></table></figure>\n<h4 id=\"n位数字\"><a href=\"#n位数字\" class=\"headerlink\" title=\"n位数字\"></a>n位数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;n&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]&#123;n&#125;$</span><br></pre></td></tr></table></figure>\n<h4 id=\"至少n位数字\"><a href=\"#至少n位数字\" class=\"headerlink\" title=\"至少n位数字\"></a>至少n位数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;n,&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]&#123;n,&#125;$</span><br></pre></td></tr></table></figure>\n<h4 id=\"m-n位的数字\"><a href=\"#m-n位的数字\" class=\"headerlink\" title=\"m-n位的数字\"></a>m-n位的数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;m, n&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]&#123;m, n&#125;$</span><br></pre></td></tr></table></figure>\n<h4 id=\"0和1开头的数字\"><a href=\"#0和1开头的数字\" class=\"headerlink\" title=\"0和1开头的数字\"></a>0和1开头的数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(0|1)\\d+$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(0|1)[0-9]+$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非0开头的，最多带两位小数的数字\"><a href=\"#非0开头的，最多带两位小数的数字\" class=\"headerlink\" title=\"非0开头的，最多带两位小数的数字\"></a>非0开头的，最多带两位小数的数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[1-9]\\d+(.\\d&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure>\n<p>?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^([1-9][0-9]+)+(.[0-9]&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"带1-2位小数的正数或负数\"><a href=\"#带1-2位小数的正数或负数\" class=\"headerlink\" title=\"带1-2位小数的正数或负数\"></a>带1-2位小数的正数或负数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不能用\\d* 因为*表示匹配0次或多次</span><br><span class=\"line\">^(-|)\\d+.\\d&#123;1,2&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure>\n<h4 id=\"正数、负数、和小数\"><a href=\"#正数、负数、和小数\" class=\"headerlink\" title=\"正数、负数、和小数\"></a>正数、负数、和小数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-|)\\d+(.\\d+)?$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(\\-|\\+)?\\d+(\\.\\d+)?$</span><br></pre></td></tr></table></figure>\n<h4 id=\"有2位小数的正实数\"><a href=\"#有2位小数的正实数\" class=\"headerlink\" title=\"有2位小数的正实数\"></a>有2位小数的正实数</h4><p>1.12 +1.12</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+.\\d&#123;2&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br></pre></td></tr></table></figure>\n<h4 id=\"有1-3位小数的正实数\"><a href=\"#有1-3位小数的正实数\" class=\"headerlink\" title=\"有1~3位小数的正实数\"></a>有1~3位小数的正实数</h4><p>-1.123 0.1 1.123 +1.123</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+.\\d&#123;1,3&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非零的正整数\"><a href=\"#非零的正整数\" class=\"headerlink\" title=\"非零的正整数\"></a>非零的正整数</h4><p>1, +1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[1-9]\\d*$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^([1-9][0-9]*)&#123;1,&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\+?[1-9][0-9]*$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非零的负整数\"><a href=\"#非零的负整数\" class=\"headerlink\" title=\"非零的负整数\"></a>非零的负整数</h4><p>-1 -2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^-[1-9]\\d*$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\-[1-9][0-9]*$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非负整数\"><a href=\"#非负整数\" class=\"headerlink\" title=\"非负整数\"></a>非负整数</h4><p>0, 1, +1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[1-9]\\d*|0$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非正整数\"><a href=\"#非正整数\" class=\"headerlink\" title=\"非正整数\"></a>非正整数</h4><p>0, -1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^-[1-9]\\d*|0$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^((-\\d+)|(0+))$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非负浮点数\"><a href=\"#非负浮点数\" class=\"headerlink\" title=\"非负浮点数\"></a>非负浮点数</h4><p>0.1 1.1 +1.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(+)?\\d+$(.\\d+)$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+(\\.\\d+)?$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非正浮点数\"><a href=\"#非正浮点数\" class=\"headerlink\" title=\"非正浮点数\"></a>非正浮点数</h4><p>0.1 -1.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$</span><br></pre></td></tr></table></figure>\n<h4 id=\"正浮点数\"><a href=\"#正浮点数\" class=\"headerlink\" title=\"正浮点数\"></a>正浮点数</h4><p>1.1 +1.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br></pre></td></tr></table></figure>\n<h4 id=\"负浮点数\"><a href=\"#负浮点数\" class=\"headerlink\" title=\"负浮点数\"></a>负浮点数</h4><p>-1.24345</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br></pre></td></tr></table></figure>\n<h4 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h4><p>-1.1 0.1 1.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$</span><br></pre></td></tr></table></figure>\n<h2 id=\"校验字符\"><a href=\"#校验字符\" class=\"headerlink\" title=\"校验字符\"></a>校验字符</h2><h2 id=\"特需场景\"><a href=\"#特需场景\" class=\"headerlink\" title=\"特需场景\"></a>特需场景</h2>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><ol>\n<li>正数：比0大的数</li>\n<li>负数：比0小的数</li>\n<li>整数：没有小数点的数</li>\n<li>实数：是有理数和无理数的总称</li>\n</ol>\n<h2 id=\"校验数字\"><a href=\"#校验数字\" class=\"headerlink\" title=\"校验数字\"></a>校验数字</h2><h4 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]+$</span><br></pre></td></tr></table></figure>\n<h4 id=\"n位数字\"><a href=\"#n位数字\" class=\"headerlink\" title=\"n位数字\"></a>n位数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;n&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]&#123;n&#125;$</span><br></pre></td></tr></table></figure>\n<h4 id=\"至少n位数字\"><a href=\"#至少n位数字\" class=\"headerlink\" title=\"至少n位数字\"></a>至少n位数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;n,&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]&#123;n,&#125;$</span><br></pre></td></tr></table></figure>\n<h4 id=\"m-n位的数字\"><a href=\"#m-n位的数字\" class=\"headerlink\" title=\"m-n位的数字\"></a>m-n位的数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;m, n&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]&#123;m, n&#125;$</span><br></pre></td></tr></table></figure>\n<h4 id=\"0和1开头的数字\"><a href=\"#0和1开头的数字\" class=\"headerlink\" title=\"0和1开头的数字\"></a>0和1开头的数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(0|1)\\d+$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(0|1)[0-9]+$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非0开头的，最多带两位小数的数字\"><a href=\"#非0开头的，最多带两位小数的数字\" class=\"headerlink\" title=\"非0开头的，最多带两位小数的数字\"></a>非0开头的，最多带两位小数的数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[1-9]\\d+(.\\d&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure>\n<p>?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^([1-9][0-9]+)+(.[0-9]&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"带1-2位小数的正数或负数\"><a href=\"#带1-2位小数的正数或负数\" class=\"headerlink\" title=\"带1-2位小数的正数或负数\"></a>带1-2位小数的正数或负数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不能用\\d* 因为*表示匹配0次或多次</span><br><span class=\"line\">^(-|)\\d+.\\d&#123;1,2&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure>\n<h4 id=\"正数、负数、和小数\"><a href=\"#正数、负数、和小数\" class=\"headerlink\" title=\"正数、负数、和小数\"></a>正数、负数、和小数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-|)\\d+(.\\d+)?$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(\\-|\\+)?\\d+(\\.\\d+)?$</span><br></pre></td></tr></table></figure>\n<h4 id=\"有2位小数的正实数\"><a href=\"#有2位小数的正实数\" class=\"headerlink\" title=\"有2位小数的正实数\"></a>有2位小数的正实数</h4><p>1.12 +1.12</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+.\\d&#123;2&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br></pre></td></tr></table></figure>\n<h4 id=\"有1-3位小数的正实数\"><a href=\"#有1-3位小数的正实数\" class=\"headerlink\" title=\"有1~3位小数的正实数\"></a>有1~3位小数的正实数</h4><p>-1.123 0.1 1.123 +1.123</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+.\\d&#123;1,3&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非零的正整数\"><a href=\"#非零的正整数\" class=\"headerlink\" title=\"非零的正整数\"></a>非零的正整数</h4><p>1, +1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[1-9]\\d*$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^([1-9][0-9]*)&#123;1,&#125;$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\+?[1-9][0-9]*$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非零的负整数\"><a href=\"#非零的负整数\" class=\"headerlink\" title=\"非零的负整数\"></a>非零的负整数</h4><p>-1 -2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^-[1-9]\\d*$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\-[1-9][0-9]*$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非负整数\"><a href=\"#非负整数\" class=\"headerlink\" title=\"非负整数\"></a>非负整数</h4><p>0, 1, +1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[1-9]\\d*|0$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非正整数\"><a href=\"#非正整数\" class=\"headerlink\" title=\"非正整数\"></a>非正整数</h4><p>0, -1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^-[1-9]\\d*|0$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^((-\\d+)|(0+))$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非负浮点数\"><a href=\"#非负浮点数\" class=\"headerlink\" title=\"非负浮点数\"></a>非负浮点数</h4><p>0.1 1.1 +1.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(+)?\\d+$(.\\d+)$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+(\\.\\d+)?$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$</span><br></pre></td></tr></table></figure>\n<h4 id=\"非正浮点数\"><a href=\"#非正浮点数\" class=\"headerlink\" title=\"非正浮点数\"></a>非正浮点数</h4><p>0.1 -1.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$</span><br></pre></td></tr></table></figure>\n<h4 id=\"正浮点数\"><a href=\"#正浮点数\" class=\"headerlink\" title=\"正浮点数\"></a>正浮点数</h4><p>1.1 +1.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br></pre></td></tr></table></figure>\n<h4 id=\"负浮点数\"><a href=\"#负浮点数\" class=\"headerlink\" title=\"负浮点数\"></a>负浮点数</h4><p>-1.24345</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br></pre></td></tr></table></figure>\n<h4 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h4><p>-1.1 0.1 1.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$</span><br></pre></td></tr></table></figure>\n<h2 id=\"校验字符\"><a href=\"#校验字符\" class=\"headerlink\" title=\"校验字符\"></a>校验字符</h2><h2 id=\"特需场景\"><a href=\"#特需场景\" class=\"headerlink\" title=\"特需场景\"></a>特需场景</h2>"},{"title":"1. 什么是JVM","date":"2020-01-19T16:00:00.000Z","_content":"\n### Java的执行过程\n```mermaid\ngraph LR\n    A[Hello.java] --> B[Hello.class] --> C[JVM]\n```\n\n### 跨平台的语言\n```mermaid\ngraph LR\n    \n    A[Hello.class]\n    B[JVM for Window]\n    C[Jvm for Linux]\n    D[Jvm for Mac]\n\n    A --> B\n    A --> C\n    A --> D\n\n    subgraph Window\n    B\n    end\n   \n    subgraph Linux\n    C\n    end\n\n    subgraph Mac\n    D\n    end\n```\n\n### 跨语言的平台\n```mermaid\ngraph RL\n    \n    A[class]\n    B1[Java]\n    B2[Kotlin]\n    B3[Scala]\n    B4[Jruby]\n\n    B1 --> A\n    B2 --> A\n    B3 --> A\n    B4 --> A\n\n    subgraph JVM\n    A\n    end\n```\n\n### Java体系\nJava体系非常的庞大，其中最重要的要属于Java语言本身以及Java虚拟机。\n\n![Java 体系架构](001.png)\n\n## 类的加载机制\n```mermaid\ngraph LR\n    A[class]\n    B[JVM]\n    C[running data area]\n    D[GC]\n\n    A -->|Load link initialize| B\n    B -->|Run engine| C\n    C --> D\n```\n\n## 运行时数据区\n```mermaid\ngraph TB\n    A[Program Counter]\n    B[JVM Stacks]\n    C[Native Method Stacks]\n    D[Heap]\n    E[Method Area]\n    F[Run-Time Constant Pool]\n\n    E -->|has| F\n```\n\n1. Program Counter (线程独有)\n    - Each Java Virtual Machine thread has its **own** pc (Program counter) register\n    - At any point, each Java Virtual Machine thread is excuting the code of a single method, namely the current method for that thread\n    - If that method is not native, the pc register constains the address of the Java Virtual Machine instruction currently being executed\n1. JVM Stacks (线程独有)\n    - Each Java Virtual Machine thread has a **private** Java Virtual Machine stack, created at the same time as the thread\n    - A Java Virtual Machine stack stores frames\n1. Native Method Stacks (线程独有，访问本地方法诸如C、C++时才用到)\n    - An implementation of the Java Virtual Machine may use conventional (常规的) stacks called native method stacks\n1. Heap (线程共享)\n    - The Java Virtual Machine has a heap that is **shared** among all Java Virtual Machine threads\n    - The heap is the run-time data area from which memory for all class instances and arrays is allocated\n1. Method Area (线程共享)\n    - The Java Virtual Machine has a method area tha is **shared** among all Java Virtual Machine threads\n    - It stores pre-class structures\n1. Run-Time Constant Pool (线程共享)\n    - A run-time constant pool is a pre-class or per-interface run-time representation (表现)of the constant_pool table in a class file\n    - run-time constant pool is belong to Method Area\n\n## Frame\nA frame is used to store data and partial results, as well as to perform dynamic linking, return values for methods, and dispatch exceptions.\n\n```mermaid\ngraph TB\n    subgraph Frame\n        A[Local Variables]\n        B[Operand Stacks]\n        C[Dynamic linking]\n        D[Return address]\n    end\n```\n\n1. Each method, a frame\n1. \n\n### How to see frame in Idea\nidea to install **jclasslib** plugin.\n\n## Return\n\n## 问题\n### 为什么需要记录当前线程的执行地址？\n\n```mermaid\ngraph TB\n\n    subgraph Thread 1\n        A1[PC] -.- A2[VMS] -.- A3[NMS]\n    end\n\n    subgraph Thread 2\n        B1[PC] -.- B2[VMS] -.- B3[NMS]\n    end\n\n    subgraph Thread 3\n        C1[PC] === C2[VMS] -.- C3[NMS]\n    end\n\n    H[Head]\n    M[Method Area]\n\n    A3 --> H\n    B3 --> H\n    C3 --> H\n\n    A3 --> M\n    B3 --> M\n    C3 --> M\n\n```","source":"_posts/深入浅出JVM/1. 什么是JVM.md","raw":"---\ntitle: 1. 什么是JVM\n\ncategories:\n- 深入浅出JVM\n\ntags:\n- JVM\n\ndate: 2020-01-20\n---\n\n### Java的执行过程\n```mermaid\ngraph LR\n    A[Hello.java] --> B[Hello.class] --> C[JVM]\n```\n\n### 跨平台的语言\n```mermaid\ngraph LR\n    \n    A[Hello.class]\n    B[JVM for Window]\n    C[Jvm for Linux]\n    D[Jvm for Mac]\n\n    A --> B\n    A --> C\n    A --> D\n\n    subgraph Window\n    B\n    end\n   \n    subgraph Linux\n    C\n    end\n\n    subgraph Mac\n    D\n    end\n```\n\n### 跨语言的平台\n```mermaid\ngraph RL\n    \n    A[class]\n    B1[Java]\n    B2[Kotlin]\n    B3[Scala]\n    B4[Jruby]\n\n    B1 --> A\n    B2 --> A\n    B3 --> A\n    B4 --> A\n\n    subgraph JVM\n    A\n    end\n```\n\n### Java体系\nJava体系非常的庞大，其中最重要的要属于Java语言本身以及Java虚拟机。\n\n![Java 体系架构](001.png)\n\n## 类的加载机制\n```mermaid\ngraph LR\n    A[class]\n    B[JVM]\n    C[running data area]\n    D[GC]\n\n    A -->|Load link initialize| B\n    B -->|Run engine| C\n    C --> D\n```\n\n## 运行时数据区\n```mermaid\ngraph TB\n    A[Program Counter]\n    B[JVM Stacks]\n    C[Native Method Stacks]\n    D[Heap]\n    E[Method Area]\n    F[Run-Time Constant Pool]\n\n    E -->|has| F\n```\n\n1. Program Counter (线程独有)\n    - Each Java Virtual Machine thread has its **own** pc (Program counter) register\n    - At any point, each Java Virtual Machine thread is excuting the code of a single method, namely the current method for that thread\n    - If that method is not native, the pc register constains the address of the Java Virtual Machine instruction currently being executed\n1. JVM Stacks (线程独有)\n    - Each Java Virtual Machine thread has a **private** Java Virtual Machine stack, created at the same time as the thread\n    - A Java Virtual Machine stack stores frames\n1. Native Method Stacks (线程独有，访问本地方法诸如C、C++时才用到)\n    - An implementation of the Java Virtual Machine may use conventional (常规的) stacks called native method stacks\n1. Heap (线程共享)\n    - The Java Virtual Machine has a heap that is **shared** among all Java Virtual Machine threads\n    - The heap is the run-time data area from which memory for all class instances and arrays is allocated\n1. Method Area (线程共享)\n    - The Java Virtual Machine has a method area tha is **shared** among all Java Virtual Machine threads\n    - It stores pre-class structures\n1. Run-Time Constant Pool (线程共享)\n    - A run-time constant pool is a pre-class or per-interface run-time representation (表现)of the constant_pool table in a class file\n    - run-time constant pool is belong to Method Area\n\n## Frame\nA frame is used to store data and partial results, as well as to perform dynamic linking, return values for methods, and dispatch exceptions.\n\n```mermaid\ngraph TB\n    subgraph Frame\n        A[Local Variables]\n        B[Operand Stacks]\n        C[Dynamic linking]\n        D[Return address]\n    end\n```\n\n1. Each method, a frame\n1. \n\n### How to see frame in Idea\nidea to install **jclasslib** plugin.\n\n## Return\n\n## 问题\n### 为什么需要记录当前线程的执行地址？\n\n```mermaid\ngraph TB\n\n    subgraph Thread 1\n        A1[PC] -.- A2[VMS] -.- A3[NMS]\n    end\n\n    subgraph Thread 2\n        B1[PC] -.- B2[VMS] -.- B3[NMS]\n    end\n\n    subgraph Thread 3\n        C1[PC] === C2[VMS] -.- C3[NMS]\n    end\n\n    H[Head]\n    M[Method Area]\n\n    A3 --> H\n    B3 --> H\n    C3 --> H\n\n    A3 --> M\n    B3 --> M\n    C3 --> M\n\n```","slug":"深入浅出JVM/1. 什么是JVM","published":1,"updated":"2020-04-12T08:28:29.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8j0077m33pp3s555rb","content":"<h3 id=\"Java的执行过程\"><a href=\"#Java的执行过程\" class=\"headerlink\" title=\"Java的执行过程\"></a>Java的执行过程</h3><pre class=\"mermaid\">graph LR\n    A[Hello.java] --> B[Hello.class] --> C[JVM]</pre>\n\n<h3 id=\"跨平台的语言\"><a href=\"#跨平台的语言\" class=\"headerlink\" title=\"跨平台的语言\"></a>跨平台的语言</h3><pre class=\"mermaid\">graph LR\n\n    A[Hello.class]\n    B[JVM for Window]\n    C[Jvm for Linux]\n    D[Jvm for Mac]\n\n    A --> B\n    A --> C\n    A --> D\n\n    subgraph Window\n    B\n    end\n\n    subgraph Linux\n    C\n    end\n\n    subgraph Mac\n    D\n    end</pre>\n\n<h3 id=\"跨语言的平台\"><a href=\"#跨语言的平台\" class=\"headerlink\" title=\"跨语言的平台\"></a>跨语言的平台</h3><pre class=\"mermaid\">graph RL\n\n    A[class]\n    B1[Java]\n    B2[Kotlin]\n    B3[Scala]\n    B4[Jruby]\n\n    B1 --> A\n    B2 --> A\n    B3 --> A\n    B4 --> A\n\n    subgraph JVM\n    A\n    end</pre>\n\n<h3 id=\"Java体系\"><a href=\"#Java体系\" class=\"headerlink\" title=\"Java体系\"></a>Java体系</h3><p>Java体系非常的庞大，其中最重要的要属于Java语言本身以及Java虚拟机。</p>\n<p><img src=\"001.png\" alt=\"Java 体系架构\"></p>\n<h2 id=\"类的加载机制\"><a href=\"#类的加载机制\" class=\"headerlink\" title=\"类的加载机制\"></a>类的加载机制</h2><pre class=\"mermaid\">graph LR\n    A[class]\n    B[JVM]\n    C[running data area]\n    D[GC]\n\n    A -->|Load link initialize| B\n    B -->|Run engine| C\n    C --> D</pre>\n\n<h2 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h2><pre class=\"mermaid\">graph TB\n    A[Program Counter]\n    B[JVM Stacks]\n    C[Native Method Stacks]\n    D[Heap]\n    E[Method Area]\n    F[Run-Time Constant Pool]\n\n    E -->|has| F</pre>\n\n<ol>\n<li>Program Counter (线程独有)<ul>\n<li>Each Java Virtual Machine thread has its <strong>own</strong> pc (Program counter) register</li>\n<li>At any point, each Java Virtual Machine thread is excuting the code of a single method, namely the current method for that thread</li>\n<li>If that method is not native, the pc register constains the address of the Java Virtual Machine instruction currently being executed</li>\n</ul>\n</li>\n<li>JVM Stacks (线程独有)<ul>\n<li>Each Java Virtual Machine thread has a <strong>private</strong> Java Virtual Machine stack, created at the same time as the thread</li>\n<li>A Java Virtual Machine stack stores frames</li>\n</ul>\n</li>\n<li>Native Method Stacks (线程独有，访问本地方法诸如C、C++时才用到)<ul>\n<li>An implementation of the Java Virtual Machine may use conventional (常规的) stacks called native method stacks</li>\n</ul>\n</li>\n<li>Heap (线程共享)<ul>\n<li>The Java Virtual Machine has a heap that is <strong>shared</strong> among all Java Virtual Machine threads</li>\n<li>The heap is the run-time data area from which memory for all class instances and arrays is allocated</li>\n</ul>\n</li>\n<li>Method Area (线程共享)<ul>\n<li>The Java Virtual Machine has a method area tha is <strong>shared</strong> among all Java Virtual Machine threads</li>\n<li>It stores pre-class structures</li>\n</ul>\n</li>\n<li>Run-Time Constant Pool (线程共享)<ul>\n<li>A run-time constant pool is a pre-class or per-interface run-time representation (表现)of the constant_pool table in a class file</li>\n<li>run-time constant pool is belong to Method Area</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Frame\"><a href=\"#Frame\" class=\"headerlink\" title=\"Frame\"></a>Frame</h2><p>A frame is used to store data and partial results, as well as to perform dynamic linking, return values for methods, and dispatch exceptions.</p>\n<pre class=\"mermaid\">graph TB\n    subgraph Frame\n        A[Local Variables]\n        B[Operand Stacks]\n        C[Dynamic linking]\n        D[Return address]\n    end</pre>\n\n<ol>\n<li>Each method, a frame</li>\n<li></li>\n</ol>\n<h3 id=\"How-to-see-frame-in-Idea\"><a href=\"#How-to-see-frame-in-Idea\" class=\"headerlink\" title=\"How to see frame in Idea\"></a>How to see frame in Idea</h3><p>idea to install <strong>jclasslib</strong> plugin.</p>\n<h2 id=\"Return\"><a href=\"#Return\" class=\"headerlink\" title=\"Return\"></a>Return</h2><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"为什么需要记录当前线程的执行地址？\"><a href=\"#为什么需要记录当前线程的执行地址？\" class=\"headerlink\" title=\"为什么需要记录当前线程的执行地址？\"></a>为什么需要记录当前线程的执行地址？</h3><pre class=\"mermaid\">graph TB\n\n    subgraph Thread 1\n        A1[PC] -.- A2[VMS] -.- A3[NMS]\n    end\n\n    subgraph Thread 2\n        B1[PC] -.- B2[VMS] -.- B3[NMS]\n    end\n\n    subgraph Thread 3\n        C1[PC] === C2[VMS] -.- C3[NMS]\n    end\n\n    H[Head]\n    M[Method Area]\n\n    A3 --> H\n    B3 --> H\n    C3 --> H\n\n    A3 --> M\n    B3 --> M\n    C3 --> M</pre>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h3 id=\"Java的执行过程\"><a href=\"#Java的执行过程\" class=\"headerlink\" title=\"Java的执行过程\"></a>Java的执行过程</h3><pre class=\"mermaid\">graph LR\n    A[Hello.java] --> B[Hello.class] --> C[JVM]</pre>\n\n<h3 id=\"跨平台的语言\"><a href=\"#跨平台的语言\" class=\"headerlink\" title=\"跨平台的语言\"></a>跨平台的语言</h3><pre class=\"mermaid\">graph LR\n\n    A[Hello.class]\n    B[JVM for Window]\n    C[Jvm for Linux]\n    D[Jvm for Mac]\n\n    A --> B\n    A --> C\n    A --> D\n\n    subgraph Window\n    B\n    end\n\n    subgraph Linux\n    C\n    end\n\n    subgraph Mac\n    D\n    end</pre>\n\n<h3 id=\"跨语言的平台\"><a href=\"#跨语言的平台\" class=\"headerlink\" title=\"跨语言的平台\"></a>跨语言的平台</h3><pre class=\"mermaid\">graph RL\n\n    A[class]\n    B1[Java]\n    B2[Kotlin]\n    B3[Scala]\n    B4[Jruby]\n\n    B1 --> A\n    B2 --> A\n    B3 --> A\n    B4 --> A\n\n    subgraph JVM\n    A\n    end</pre>\n\n<h3 id=\"Java体系\"><a href=\"#Java体系\" class=\"headerlink\" title=\"Java体系\"></a>Java体系</h3><p>Java体系非常的庞大，其中最重要的要属于Java语言本身以及Java虚拟机。</p>\n<p><img src=\"001.png\" alt=\"Java 体系架构\"></p>\n<h2 id=\"类的加载机制\"><a href=\"#类的加载机制\" class=\"headerlink\" title=\"类的加载机制\"></a>类的加载机制</h2><pre class=\"mermaid\">graph LR\n    A[class]\n    B[JVM]\n    C[running data area]\n    D[GC]\n\n    A -->|Load link initialize| B\n    B -->|Run engine| C\n    C --> D</pre>\n\n<h2 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h2><pre class=\"mermaid\">graph TB\n    A[Program Counter]\n    B[JVM Stacks]\n    C[Native Method Stacks]\n    D[Heap]\n    E[Method Area]\n    F[Run-Time Constant Pool]\n\n    E -->|has| F</pre>\n\n<ol>\n<li>Program Counter (线程独有)<ul>\n<li>Each Java Virtual Machine thread has its <strong>own</strong> pc (Program counter) register</li>\n<li>At any point, each Java Virtual Machine thread is excuting the code of a single method, namely the current method for that thread</li>\n<li>If that method is not native, the pc register constains the address of the Java Virtual Machine instruction currently being executed</li>\n</ul>\n</li>\n<li>JVM Stacks (线程独有)<ul>\n<li>Each Java Virtual Machine thread has a <strong>private</strong> Java Virtual Machine stack, created at the same time as the thread</li>\n<li>A Java Virtual Machine stack stores frames</li>\n</ul>\n</li>\n<li>Native Method Stacks (线程独有，访问本地方法诸如C、C++时才用到)<ul>\n<li>An implementation of the Java Virtual Machine may use conventional (常规的) stacks called native method stacks</li>\n</ul>\n</li>\n<li>Heap (线程共享)<ul>\n<li>The Java Virtual Machine has a heap that is <strong>shared</strong> among all Java Virtual Machine threads</li>\n<li>The heap is the run-time data area from which memory for all class instances and arrays is allocated</li>\n</ul>\n</li>\n<li>Method Area (线程共享)<ul>\n<li>The Java Virtual Machine has a method area tha is <strong>shared</strong> among all Java Virtual Machine threads</li>\n<li>It stores pre-class structures</li>\n</ul>\n</li>\n<li>Run-Time Constant Pool (线程共享)<ul>\n<li>A run-time constant pool is a pre-class or per-interface run-time representation (表现)of the constant_pool table in a class file</li>\n<li>run-time constant pool is belong to Method Area</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Frame\"><a href=\"#Frame\" class=\"headerlink\" title=\"Frame\"></a>Frame</h2><p>A frame is used to store data and partial results, as well as to perform dynamic linking, return values for methods, and dispatch exceptions.</p>\n<pre class=\"mermaid\">graph TB\n    subgraph Frame\n        A[Local Variables]\n        B[Operand Stacks]\n        C[Dynamic linking]\n        D[Return address]\n    end</pre>\n\n<ol>\n<li>Each method, a frame</li>\n<li></li>\n</ol>\n<h3 id=\"How-to-see-frame-in-Idea\"><a href=\"#How-to-see-frame-in-Idea\" class=\"headerlink\" title=\"How to see frame in Idea\"></a>How to see frame in Idea</h3><p>idea to install <strong>jclasslib</strong> plugin.</p>\n<h2 id=\"Return\"><a href=\"#Return\" class=\"headerlink\" title=\"Return\"></a>Return</h2><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"为什么需要记录当前线程的执行地址？\"><a href=\"#为什么需要记录当前线程的执行地址？\" class=\"headerlink\" title=\"为什么需要记录当前线程的执行地址？\"></a>为什么需要记录当前线程的执行地址？</h3><pre class=\"mermaid\">graph TB\n\n    subgraph Thread 1\n        A1[PC] -.- A2[VMS] -.- A3[NMS]\n    end\n\n    subgraph Thread 2\n        B1[PC] -.- B2[VMS] -.- B3[NMS]\n    end\n\n    subgraph Thread 3\n        C1[PC] === C2[VMS] -.- C3[NMS]\n    end\n\n    H[Head]\n    M[Method Area]\n\n    A3 --> H\n    B3 --> H\n    C3 --> H\n\n    A3 --> M\n    B3 --> M\n    C3 --> M</pre>"},{"title":"2. JVM Stacks","date":"2020-01-20T16:00:00.000Z","_content":"\n## What is JVM Stacks\n\n## The struct of JVM Stacks\n\n## JVM Stacks Analysis\n","source":"_posts/深入浅出JVM/2. JVM Stacks.md","raw":"---\ntitle: 2. JVM Stacks\n\ncategories:\n- 深入浅出JVM\n\ntags:\n- JVM\n\ndate: 2020-01-21\n---\n\n## What is JVM Stacks\n\n## The struct of JVM Stacks\n\n## JVM Stacks Analysis\n","slug":"深入浅出JVM/2. JVM Stacks","published":1,"updated":"2020-04-12T08:28:29.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8m007bm33p56w2lyzb","content":"<h2 id=\"What-is-JVM-Stacks\"><a href=\"#What-is-JVM-Stacks\" class=\"headerlink\" title=\"What is JVM Stacks\"></a>What is JVM Stacks</h2><h2 id=\"The-struct-of-JVM-Stacks\"><a href=\"#The-struct-of-JVM-Stacks\" class=\"headerlink\" title=\"The struct of JVM Stacks\"></a>The struct of JVM Stacks</h2><h2 id=\"JVM-Stacks-Analysis\"><a href=\"#JVM-Stacks-Analysis\" class=\"headerlink\" title=\"JVM Stacks Analysis\"></a>JVM Stacks Analysis</h2>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"What-is-JVM-Stacks\"><a href=\"#What-is-JVM-Stacks\" class=\"headerlink\" title=\"What is JVM Stacks\"></a>What is JVM Stacks</h2><h2 id=\"The-struct-of-JVM-Stacks\"><a href=\"#The-struct-of-JVM-Stacks\" class=\"headerlink\" title=\"The struct of JVM Stacks\"></a>The struct of JVM Stacks</h2><h2 id=\"JVM-Stacks-Analysis\"><a href=\"#JVM-Stacks-Analysis\" class=\"headerlink\" title=\"JVM Stacks Analysis\"></a>JVM Stacks Analysis</h2>"},{"title":"3. Heap","date":"2020-01-20T16:00:00.000Z","_content":"\n## Heap Structs\n\n## Sequence\n\n## Garbage Collector\n### What is a 'garbage' instance?\nA instance which is never used in the future\n\n### How to find it?\n- Reference Counting (引用计数)\n    References in a loop -> memory leak\n    缺点，循环引用，永远无法回收\n- Root Searching (根搜索，正向可达)\n    Searching from the root instances. The roots includes JVM Stacks, Native Method Stack, Run-Time Constance Pool, static references In Method Area, Class etc...\n\n## GC Algorithms\n### Mark-Sweep (标记清除)\n### Copying (拷贝算法)\n### Mark-Compact (标记压缩)\n\n## Garbage Collector In HotSpot\n### Serial\n### Parallel\n### Concurrent Mark Sweep\n### G1\n\n## Problems\n### Why not use References Counting?\n### Which instances are roots? \n","source":"_posts/深入浅出JVM/3. Heap.md","raw":"---\ntitle: 3. Heap\n\ncategories:\n- 深入浅出JVM\n\ntags:\n- JVM\n\ndate: 2020-01-21\n---\n\n## Heap Structs\n\n## Sequence\n\n## Garbage Collector\n### What is a 'garbage' instance?\nA instance which is never used in the future\n\n### How to find it?\n- Reference Counting (引用计数)\n    References in a loop -> memory leak\n    缺点，循环引用，永远无法回收\n- Root Searching (根搜索，正向可达)\n    Searching from the root instances. The roots includes JVM Stacks, Native Method Stack, Run-Time Constance Pool, static references In Method Area, Class etc...\n\n## GC Algorithms\n### Mark-Sweep (标记清除)\n### Copying (拷贝算法)\n### Mark-Compact (标记压缩)\n\n## Garbage Collector In HotSpot\n### Serial\n### Parallel\n### Concurrent Mark Sweep\n### G1\n\n## Problems\n### Why not use References Counting?\n### Which instances are roots? \n","slug":"深入浅出JVM/3. Heap","published":1,"updated":"2020-04-12T08:28:29.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8p007dm33puf4vpdti","content":"<h2 id=\"Heap-Structs\"><a href=\"#Heap-Structs\" class=\"headerlink\" title=\"Heap Structs\"></a>Heap Structs</h2><h2 id=\"Sequence\"><a href=\"#Sequence\" class=\"headerlink\" title=\"Sequence\"></a>Sequence</h2><h2 id=\"Garbage-Collector\"><a href=\"#Garbage-Collector\" class=\"headerlink\" title=\"Garbage Collector\"></a>Garbage Collector</h2><h3 id=\"What-is-a-‘garbage’-instance\"><a href=\"#What-is-a-‘garbage’-instance\" class=\"headerlink\" title=\"What is a ‘garbage’ instance?\"></a>What is a ‘garbage’ instance?</h3><p>A instance which is never used in the future</p>\n<h3 id=\"How-to-find-it\"><a href=\"#How-to-find-it\" class=\"headerlink\" title=\"How to find it?\"></a>How to find it?</h3><ul>\n<li>Reference Counting (引用计数)<br>  References in a loop -&gt; memory leak<br>  缺点，循环引用，永远无法回收</li>\n<li>Root Searching (根搜索，正向可达)<br>  Searching from the root instances. The roots includes JVM Stacks, Native Method Stack, Run-Time Constance Pool, static references In Method Area, Class etc…</li>\n</ul>\n<h2 id=\"GC-Algorithms\"><a href=\"#GC-Algorithms\" class=\"headerlink\" title=\"GC Algorithms\"></a>GC Algorithms</h2><h3 id=\"Mark-Sweep-标记清除\"><a href=\"#Mark-Sweep-标记清除\" class=\"headerlink\" title=\"Mark-Sweep (标记清除)\"></a>Mark-Sweep (标记清除)</h3><h3 id=\"Copying-拷贝算法\"><a href=\"#Copying-拷贝算法\" class=\"headerlink\" title=\"Copying (拷贝算法)\"></a>Copying (拷贝算法)</h3><h3 id=\"Mark-Compact-标记压缩\"><a href=\"#Mark-Compact-标记压缩\" class=\"headerlink\" title=\"Mark-Compact (标记压缩)\"></a>Mark-Compact (标记压缩)</h3><h2 id=\"Garbage-Collector-In-HotSpot\"><a href=\"#Garbage-Collector-In-HotSpot\" class=\"headerlink\" title=\"Garbage Collector In HotSpot\"></a>Garbage Collector In HotSpot</h2><h3 id=\"Serial\"><a href=\"#Serial\" class=\"headerlink\" title=\"Serial\"></a>Serial</h3><h3 id=\"Parallel\"><a href=\"#Parallel\" class=\"headerlink\" title=\"Parallel\"></a>Parallel</h3><h3 id=\"Concurrent-Mark-Sweep\"><a href=\"#Concurrent-Mark-Sweep\" class=\"headerlink\" title=\"Concurrent Mark Sweep\"></a>Concurrent Mark Sweep</h3><h3 id=\"G1\"><a href=\"#G1\" class=\"headerlink\" title=\"G1\"></a>G1</h3><h2 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h2><h3 id=\"Why-not-use-References-Counting\"><a href=\"#Why-not-use-References-Counting\" class=\"headerlink\" title=\"Why not use References Counting?\"></a>Why not use References Counting?</h3><h3 id=\"Which-instances-are-roots\"><a href=\"#Which-instances-are-roots\" class=\"headerlink\" title=\"Which instances are roots?\"></a>Which instances are roots?</h3>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"Heap-Structs\"><a href=\"#Heap-Structs\" class=\"headerlink\" title=\"Heap Structs\"></a>Heap Structs</h2><h2 id=\"Sequence\"><a href=\"#Sequence\" class=\"headerlink\" title=\"Sequence\"></a>Sequence</h2><h2 id=\"Garbage-Collector\"><a href=\"#Garbage-Collector\" class=\"headerlink\" title=\"Garbage Collector\"></a>Garbage Collector</h2><h3 id=\"What-is-a-‘garbage’-instance\"><a href=\"#What-is-a-‘garbage’-instance\" class=\"headerlink\" title=\"What is a ‘garbage’ instance?\"></a>What is a ‘garbage’ instance?</h3><p>A instance which is never used in the future</p>\n<h3 id=\"How-to-find-it\"><a href=\"#How-to-find-it\" class=\"headerlink\" title=\"How to find it?\"></a>How to find it?</h3><ul>\n<li>Reference Counting (引用计数)<br>  References in a loop -&gt; memory leak<br>  缺点，循环引用，永远无法回收</li>\n<li>Root Searching (根搜索，正向可达)<br>  Searching from the root instances. The roots includes JVM Stacks, Native Method Stack, Run-Time Constance Pool, static references In Method Area, Class etc…</li>\n</ul>\n<h2 id=\"GC-Algorithms\"><a href=\"#GC-Algorithms\" class=\"headerlink\" title=\"GC Algorithms\"></a>GC Algorithms</h2><h3 id=\"Mark-Sweep-标记清除\"><a href=\"#Mark-Sweep-标记清除\" class=\"headerlink\" title=\"Mark-Sweep (标记清除)\"></a>Mark-Sweep (标记清除)</h3><h3 id=\"Copying-拷贝算法\"><a href=\"#Copying-拷贝算法\" class=\"headerlink\" title=\"Copying (拷贝算法)\"></a>Copying (拷贝算法)</h3><h3 id=\"Mark-Compact-标记压缩\"><a href=\"#Mark-Compact-标记压缩\" class=\"headerlink\" title=\"Mark-Compact (标记压缩)\"></a>Mark-Compact (标记压缩)</h3><h2 id=\"Garbage-Collector-In-HotSpot\"><a href=\"#Garbage-Collector-In-HotSpot\" class=\"headerlink\" title=\"Garbage Collector In HotSpot\"></a>Garbage Collector In HotSpot</h2><h3 id=\"Serial\"><a href=\"#Serial\" class=\"headerlink\" title=\"Serial\"></a>Serial</h3><h3 id=\"Parallel\"><a href=\"#Parallel\" class=\"headerlink\" title=\"Parallel\"></a>Parallel</h3><h3 id=\"Concurrent-Mark-Sweep\"><a href=\"#Concurrent-Mark-Sweep\" class=\"headerlink\" title=\"Concurrent Mark Sweep\"></a>Concurrent Mark Sweep</h3><h3 id=\"G1\"><a href=\"#G1\" class=\"headerlink\" title=\"G1\"></a>G1</h3><h2 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h2><h3 id=\"Why-not-use-References-Counting\"><a href=\"#Why-not-use-References-Counting\" class=\"headerlink\" title=\"Why not use References Counting?\"></a>Why not use References Counting?</h3><h3 id=\"Which-instances-are-roots\"><a href=\"#Which-instances-are-roots\" class=\"headerlink\" title=\"Which instances are roots?\"></a>Which instances are roots?</h3>"},{"title":"5. JVM Tuning","date":"2020-01-20T16:00:00.000Z","_content":"\n## Java Object Allacation\n### 栈上分配\n### Thread Local Allocation Buffer\n### 老年代\n### Eden","source":"_posts/深入浅出JVM/5. Other.md","raw":"---\ntitle: 5. JVM Tuning\n\ncategories:\n- 深入浅出JVM\n\ntags:\n- JVM\n\ndate: 2020-01-21\n---\n\n## Java Object Allacation\n### 栈上分配\n### Thread Local Allocation Buffer\n### 老年代\n### Eden","slug":"深入浅出JVM/5. Other","published":1,"updated":"2020-04-12T08:28:29.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8r007hm33pssklrark","content":"<h2 id=\"Java-Object-Allacation\"><a href=\"#Java-Object-Allacation\" class=\"headerlink\" title=\"Java Object Allacation\"></a>Java Object Allacation</h2><h3 id=\"栈上分配\"><a href=\"#栈上分配\" class=\"headerlink\" title=\"栈上分配\"></a>栈上分配</h3><h3 id=\"Thread-Local-Allocation-Buffer\"><a href=\"#Thread-Local-Allocation-Buffer\" class=\"headerlink\" title=\"Thread Local Allocation Buffer\"></a>Thread Local Allocation Buffer</h3><h3 id=\"老年代\"><a href=\"#老年代\" class=\"headerlink\" title=\"老年代\"></a>老年代</h3><h3 id=\"Eden\"><a href=\"#Eden\" class=\"headerlink\" title=\"Eden\"></a>Eden</h3>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h2 id=\"Java-Object-Allacation\"><a href=\"#Java-Object-Allacation\" class=\"headerlink\" title=\"Java Object Allacation\"></a>Java Object Allacation</h2><h3 id=\"栈上分配\"><a href=\"#栈上分配\" class=\"headerlink\" title=\"栈上分配\"></a>栈上分配</h3><h3 id=\"Thread-Local-Allocation-Buffer\"><a href=\"#Thread-Local-Allocation-Buffer\" class=\"headerlink\" title=\"Thread Local Allocation Buffer\"></a>Thread Local Allocation Buffer</h3><h3 id=\"老年代\"><a href=\"#老年代\" class=\"headerlink\" title=\"老年代\"></a>老年代</h3><h3 id=\"Eden\"><a href=\"#Eden\" class=\"headerlink\" title=\"Eden\"></a>Eden</h3>"},{"title":"Questions","date":"2020-01-20T16:00:00.000Z","_content":"\n#### 如果对象的引用被置为`null`，垃圾收集器是否会立即释放对象占用的内存？\n\n#### `finalize`方法的工作原理\n\n#### Java 8的内存分代改进\n\n#### 分别写出堆内存溢出与栈内存溢出的程序\n```java\n// 栈溢出\npublic void f() {\n    f();\n}\n\n// 堆溢出\npublic void testd() {\n    List<String> list = new ArrayList<>();\n    int i = 0;\n\n    while (true) {\n        list.add(new String(i + \"\"));\n        i++;\n    }\n}\n```\n\n#### JDK是什么？JRE又是什么？它们是什么关系\n\n![a conceptual diagram of Oracle's Java SE products](001.png)\n\n#### Java中的对象访问是如何进行的\n\n## 运行时数据区\n#### 运行时数据区包含哪些\n\n### 堆\n#### 为什么要将堆内存分区\n\n#### 堆内存分为哪几块\n\n### 桢\n\n#### 反射中，`Class.forName()`和`ClassLoader.loadClass()`区别是什么\n\n#### 说说强引用、软引用、弱引用、虚引用以及他们之间和GC的关系\n\n#### JVM 垃圾回收机制，何时触发 MinorGC 等操作\n\n#### 对象如何晋升到老年代\n\n#### Eden和Survivor的比例分配等\n\n#### 什么是类加载器的双亲委派模型\n\n#### 什么是指令重排序、内存屏障与先行发生原则\n\n#### `volatile`的语义，它修饰的变量一定线程安全吗\n\n#### 堆和栈有什么区别\n\n#### 堆内存中到底存在着什么东西\n\n#### 类变量是否在JVM启动时就初始化好的\n\n#### Java 的方法（函数）到底是传值还是传址\n\n#### `OutOfMemory`错误分几种\n\n#### 为什么会产生`StackOverflowError`\n\n#### 一个机器上可以有多个JVM吗\n\n#### JVM之间可以互访吗\n\n#### JVM中到底哪些区域是共享的\n\n#### JVM有哪些调整参数\n\n\n## GC\n#### 如何判断对象是否死去\n#### 有哪些垃圾收集算法\n#### Minor GC和Full CG有什么区分\n\n## 优化\n####  一个线程默认占多少内存\n\n#### 一台机器可以创建多少个线程\n\n#### 线程切换消耗一般是多少","source":"_posts/深入浅出JVM/Questions.md","raw":"---\ntitle: Questions\n\ncategories:\n- Java Virtual Machine Specification\n\ntags:\n- JVM\n- questions\n\ndate: 2020-01-21\n---\n\n#### 如果对象的引用被置为`null`，垃圾收集器是否会立即释放对象占用的内存？\n\n#### `finalize`方法的工作原理\n\n#### Java 8的内存分代改进\n\n#### 分别写出堆内存溢出与栈内存溢出的程序\n```java\n// 栈溢出\npublic void f() {\n    f();\n}\n\n// 堆溢出\npublic void testd() {\n    List<String> list = new ArrayList<>();\n    int i = 0;\n\n    while (true) {\n        list.add(new String(i + \"\"));\n        i++;\n    }\n}\n```\n\n#### JDK是什么？JRE又是什么？它们是什么关系\n\n![a conceptual diagram of Oracle's Java SE products](001.png)\n\n#### Java中的对象访问是如何进行的\n\n## 运行时数据区\n#### 运行时数据区包含哪些\n\n### 堆\n#### 为什么要将堆内存分区\n\n#### 堆内存分为哪几块\n\n### 桢\n\n#### 反射中，`Class.forName()`和`ClassLoader.loadClass()`区别是什么\n\n#### 说说强引用、软引用、弱引用、虚引用以及他们之间和GC的关系\n\n#### JVM 垃圾回收机制，何时触发 MinorGC 等操作\n\n#### 对象如何晋升到老年代\n\n#### Eden和Survivor的比例分配等\n\n#### 什么是类加载器的双亲委派模型\n\n#### 什么是指令重排序、内存屏障与先行发生原则\n\n#### `volatile`的语义，它修饰的变量一定线程安全吗\n\n#### 堆和栈有什么区别\n\n#### 堆内存中到底存在着什么东西\n\n#### 类变量是否在JVM启动时就初始化好的\n\n#### Java 的方法（函数）到底是传值还是传址\n\n#### `OutOfMemory`错误分几种\n\n#### 为什么会产生`StackOverflowError`\n\n#### 一个机器上可以有多个JVM吗\n\n#### JVM之间可以互访吗\n\n#### JVM中到底哪些区域是共享的\n\n#### JVM有哪些调整参数\n\n\n## GC\n#### 如何判断对象是否死去\n#### 有哪些垃圾收集算法\n#### Minor GC和Full CG有什么区分\n\n## 优化\n####  一个线程默认占多少内存\n\n#### 一台机器可以创建多少个线程\n\n#### 线程切换消耗一般是多少","slug":"深入浅出JVM/Questions","published":1,"updated":"2020-04-12T08:28:29.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8v007im33pu1edi3m6","content":"<h4 id=\"如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？\"><a href=\"#如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？\" class=\"headerlink\" title=\"如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？\"></a>如果对象的引用被置为<code>null</code>，垃圾收集器是否会立即释放对象占用的内存？</h4><h4 id=\"finalize方法的工作原理\"><a href=\"#finalize方法的工作原理\" class=\"headerlink\" title=\"finalize方法的工作原理\"></a><code>finalize</code>方法的工作原理</h4><h4 id=\"Java-8的内存分代改进\"><a href=\"#Java-8的内存分代改进\" class=\"headerlink\" title=\"Java 8的内存分代改进\"></a>Java 8的内存分代改进</h4><h4 id=\"分别写出堆内存溢出与栈内存溢出的程序\"><a href=\"#分别写出堆内存溢出与栈内存溢出的程序\" class=\"headerlink\" title=\"分别写出堆内存溢出与栈内存溢出的程序\"></a>分别写出堆内存溢出与栈内存溢出的程序</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 栈溢出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堆溢出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> String(i + <span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"JDK是什么？JRE又是什么？它们是什么关系\"><a href=\"#JDK是什么？JRE又是什么？它们是什么关系\" class=\"headerlink\" title=\"JDK是什么？JRE又是什么？它们是什么关系\"></a>JDK是什么？JRE又是什么？它们是什么关系</h4><p><img src=\"001.png\" alt=\"a conceptual diagram of Oracle&#39;s Java SE products\"></p>\n<h4 id=\"Java中的对象访问是如何进行的\"><a href=\"#Java中的对象访问是如何进行的\" class=\"headerlink\" title=\"Java中的对象访问是如何进行的\"></a>Java中的对象访问是如何进行的</h4><h2 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h2><h4 id=\"运行时数据区包含哪些\"><a href=\"#运行时数据区包含哪些\" class=\"headerlink\" title=\"运行时数据区包含哪些\"></a>运行时数据区包含哪些</h4><h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><h4 id=\"为什么要将堆内存分区\"><a href=\"#为什么要将堆内存分区\" class=\"headerlink\" title=\"为什么要将堆内存分区\"></a>为什么要将堆内存分区</h4><h4 id=\"堆内存分为哪几块\"><a href=\"#堆内存分为哪几块\" class=\"headerlink\" title=\"堆内存分为哪几块\"></a>堆内存分为哪几块</h4><h3 id=\"桢\"><a href=\"#桢\" class=\"headerlink\" title=\"桢\"></a>桢</h3><h4 id=\"反射中，Class-forName-和ClassLoader-loadClass-区别是什么\"><a href=\"#反射中，Class-forName-和ClassLoader-loadClass-区别是什么\" class=\"headerlink\" title=\"反射中，Class.forName()和ClassLoader.loadClass()区别是什么\"></a>反射中，<code>Class.forName()</code>和<code>ClassLoader.loadClass()</code>区别是什么</h4><h4 id=\"说说强引用、软引用、弱引用、虚引用以及他们之间和GC的关系\"><a href=\"#说说强引用、软引用、弱引用、虚引用以及他们之间和GC的关系\" class=\"headerlink\" title=\"说说强引用、软引用、弱引用、虚引用以及他们之间和GC的关系\"></a>说说强引用、软引用、弱引用、虚引用以及他们之间和GC的关系</h4><h4 id=\"JVM-垃圾回收机制，何时触发-MinorGC-等操作\"><a href=\"#JVM-垃圾回收机制，何时触发-MinorGC-等操作\" class=\"headerlink\" title=\"JVM 垃圾回收机制，何时触发 MinorGC 等操作\"></a>JVM 垃圾回收机制，何时触发 MinorGC 等操作</h4><h4 id=\"对象如何晋升到老年代\"><a href=\"#对象如何晋升到老年代\" class=\"headerlink\" title=\"对象如何晋升到老年代\"></a>对象如何晋升到老年代</h4><h4 id=\"Eden和Survivor的比例分配等\"><a href=\"#Eden和Survivor的比例分配等\" class=\"headerlink\" title=\"Eden和Survivor的比例分配等\"></a>Eden和Survivor的比例分配等</h4><h4 id=\"什么是类加载器的双亲委派模型\"><a href=\"#什么是类加载器的双亲委派模型\" class=\"headerlink\" title=\"什么是类加载器的双亲委派模型\"></a>什么是类加载器的双亲委派模型</h4><h4 id=\"什么是指令重排序、内存屏障与先行发生原则\"><a href=\"#什么是指令重排序、内存屏障与先行发生原则\" class=\"headerlink\" title=\"什么是指令重排序、内存屏障与先行发生原则\"></a>什么是指令重排序、内存屏障与先行发生原则</h4><h4 id=\"volatile的语义，它修饰的变量一定线程安全吗\"><a href=\"#volatile的语义，它修饰的变量一定线程安全吗\" class=\"headerlink\" title=\"volatile的语义，它修饰的变量一定线程安全吗\"></a><code>volatile</code>的语义，它修饰的变量一定线程安全吗</h4><h4 id=\"堆和栈有什么区别\"><a href=\"#堆和栈有什么区别\" class=\"headerlink\" title=\"堆和栈有什么区别\"></a>堆和栈有什么区别</h4><h4 id=\"堆内存中到底存在着什么东西\"><a href=\"#堆内存中到底存在着什么东西\" class=\"headerlink\" title=\"堆内存中到底存在着什么东西\"></a>堆内存中到底存在着什么东西</h4><h4 id=\"类变量是否在JVM启动时就初始化好的\"><a href=\"#类变量是否在JVM启动时就初始化好的\" class=\"headerlink\" title=\"类变量是否在JVM启动时就初始化好的\"></a>类变量是否在JVM启动时就初始化好的</h4><h4 id=\"Java-的方法（函数）到底是传值还是传址\"><a href=\"#Java-的方法（函数）到底是传值还是传址\" class=\"headerlink\" title=\"Java 的方法（函数）到底是传值还是传址\"></a>Java 的方法（函数）到底是传值还是传址</h4><h4 id=\"OutOfMemory错误分几种\"><a href=\"#OutOfMemory错误分几种\" class=\"headerlink\" title=\"OutOfMemory错误分几种\"></a><code>OutOfMemory</code>错误分几种</h4><h4 id=\"为什么会产生StackOverflowError\"><a href=\"#为什么会产生StackOverflowError\" class=\"headerlink\" title=\"为什么会产生StackOverflowError\"></a>为什么会产生<code>StackOverflowError</code></h4><h4 id=\"一个机器上可以有多个JVM吗\"><a href=\"#一个机器上可以有多个JVM吗\" class=\"headerlink\" title=\"一个机器上可以有多个JVM吗\"></a>一个机器上可以有多个JVM吗</h4><h4 id=\"JVM之间可以互访吗\"><a href=\"#JVM之间可以互访吗\" class=\"headerlink\" title=\"JVM之间可以互访吗\"></a>JVM之间可以互访吗</h4><h4 id=\"JVM中到底哪些区域是共享的\"><a href=\"#JVM中到底哪些区域是共享的\" class=\"headerlink\" title=\"JVM中到底哪些区域是共享的\"></a>JVM中到底哪些区域是共享的</h4><h4 id=\"JVM有哪些调整参数\"><a href=\"#JVM有哪些调整参数\" class=\"headerlink\" title=\"JVM有哪些调整参数\"></a>JVM有哪些调整参数</h4><h2 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h2><h4 id=\"如何判断对象是否死去\"><a href=\"#如何判断对象是否死去\" class=\"headerlink\" title=\"如何判断对象是否死去\"></a>如何判断对象是否死去</h4><h4 id=\"有哪些垃圾收集算法\"><a href=\"#有哪些垃圾收集算法\" class=\"headerlink\" title=\"有哪些垃圾收集算法\"></a>有哪些垃圾收集算法</h4><h4 id=\"Minor-GC和Full-CG有什么区分\"><a href=\"#Minor-GC和Full-CG有什么区分\" class=\"headerlink\" title=\"Minor GC和Full CG有什么区分\"></a>Minor GC和Full CG有什么区分</h4><h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><h4 id=\"一个线程默认占多少内存\"><a href=\"#一个线程默认占多少内存\" class=\"headerlink\" title=\"一个线程默认占多少内存\"></a>一个线程默认占多少内存</h4><h4 id=\"一台机器可以创建多少个线程\"><a href=\"#一台机器可以创建多少个线程\" class=\"headerlink\" title=\"一台机器可以创建多少个线程\"></a>一台机器可以创建多少个线程</h4><h4 id=\"线程切换消耗一般是多少\"><a href=\"#线程切换消耗一般是多少\" class=\"headerlink\" title=\"线程切换消耗一般是多少\"></a>线程切换消耗一般是多少</h4>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h4 id=\"如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？\"><a href=\"#如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？\" class=\"headerlink\" title=\"如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？\"></a>如果对象的引用被置为<code>null</code>，垃圾收集器是否会立即释放对象占用的内存？</h4><h4 id=\"finalize方法的工作原理\"><a href=\"#finalize方法的工作原理\" class=\"headerlink\" title=\"finalize方法的工作原理\"></a><code>finalize</code>方法的工作原理</h4><h4 id=\"Java-8的内存分代改进\"><a href=\"#Java-8的内存分代改进\" class=\"headerlink\" title=\"Java 8的内存分代改进\"></a>Java 8的内存分代改进</h4><h4 id=\"分别写出堆内存溢出与栈内存溢出的程序\"><a href=\"#分别写出堆内存溢出与栈内存溢出的程序\" class=\"headerlink\" title=\"分别写出堆内存溢出与栈内存溢出的程序\"></a>分别写出堆内存溢出与栈内存溢出的程序</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 栈溢出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堆溢出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> String(i + <span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"JDK是什么？JRE又是什么？它们是什么关系\"><a href=\"#JDK是什么？JRE又是什么？它们是什么关系\" class=\"headerlink\" title=\"JDK是什么？JRE又是什么？它们是什么关系\"></a>JDK是什么？JRE又是什么？它们是什么关系</h4><p><img src=\"001.png\" alt=\"a conceptual diagram of Oracle&#39;s Java SE products\"></p>\n<h4 id=\"Java中的对象访问是如何进行的\"><a href=\"#Java中的对象访问是如何进行的\" class=\"headerlink\" title=\"Java中的对象访问是如何进行的\"></a>Java中的对象访问是如何进行的</h4><h2 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h2><h4 id=\"运行时数据区包含哪些\"><a href=\"#运行时数据区包含哪些\" class=\"headerlink\" title=\"运行时数据区包含哪些\"></a>运行时数据区包含哪些</h4><h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><h4 id=\"为什么要将堆内存分区\"><a href=\"#为什么要将堆内存分区\" class=\"headerlink\" title=\"为什么要将堆内存分区\"></a>为什么要将堆内存分区</h4><h4 id=\"堆内存分为哪几块\"><a href=\"#堆内存分为哪几块\" class=\"headerlink\" title=\"堆内存分为哪几块\"></a>堆内存分为哪几块</h4><h3 id=\"桢\"><a href=\"#桢\" class=\"headerlink\" title=\"桢\"></a>桢</h3><h4 id=\"反射中，Class-forName-和ClassLoader-loadClass-区别是什么\"><a href=\"#反射中，Class-forName-和ClassLoader-loadClass-区别是什么\" class=\"headerlink\" title=\"反射中，Class.forName()和ClassLoader.loadClass()区别是什么\"></a>反射中，<code>Class.forName()</code>和<code>ClassLoader.loadClass()</code>区别是什么</h4><h4 id=\"说说强引用、软引用、弱引用、虚引用以及他们之间和GC的关系\"><a href=\"#说说强引用、软引用、弱引用、虚引用以及他们之间和GC的关系\" class=\"headerlink\" title=\"说说强引用、软引用、弱引用、虚引用以及他们之间和GC的关系\"></a>说说强引用、软引用、弱引用、虚引用以及他们之间和GC的关系</h4><h4 id=\"JVM-垃圾回收机制，何时触发-MinorGC-等操作\"><a href=\"#JVM-垃圾回收机制，何时触发-MinorGC-等操作\" class=\"headerlink\" title=\"JVM 垃圾回收机制，何时触发 MinorGC 等操作\"></a>JVM 垃圾回收机制，何时触发 MinorGC 等操作</h4><h4 id=\"对象如何晋升到老年代\"><a href=\"#对象如何晋升到老年代\" class=\"headerlink\" title=\"对象如何晋升到老年代\"></a>对象如何晋升到老年代</h4><h4 id=\"Eden和Survivor的比例分配等\"><a href=\"#Eden和Survivor的比例分配等\" class=\"headerlink\" title=\"Eden和Survivor的比例分配等\"></a>Eden和Survivor的比例分配等</h4><h4 id=\"什么是类加载器的双亲委派模型\"><a href=\"#什么是类加载器的双亲委派模型\" class=\"headerlink\" title=\"什么是类加载器的双亲委派模型\"></a>什么是类加载器的双亲委派模型</h4><h4 id=\"什么是指令重排序、内存屏障与先行发生原则\"><a href=\"#什么是指令重排序、内存屏障与先行发生原则\" class=\"headerlink\" title=\"什么是指令重排序、内存屏障与先行发生原则\"></a>什么是指令重排序、内存屏障与先行发生原则</h4><h4 id=\"volatile的语义，它修饰的变量一定线程安全吗\"><a href=\"#volatile的语义，它修饰的变量一定线程安全吗\" class=\"headerlink\" title=\"volatile的语义，它修饰的变量一定线程安全吗\"></a><code>volatile</code>的语义，它修饰的变量一定线程安全吗</h4><h4 id=\"堆和栈有什么区别\"><a href=\"#堆和栈有什么区别\" class=\"headerlink\" title=\"堆和栈有什么区别\"></a>堆和栈有什么区别</h4><h4 id=\"堆内存中到底存在着什么东西\"><a href=\"#堆内存中到底存在着什么东西\" class=\"headerlink\" title=\"堆内存中到底存在着什么东西\"></a>堆内存中到底存在着什么东西</h4><h4 id=\"类变量是否在JVM启动时就初始化好的\"><a href=\"#类变量是否在JVM启动时就初始化好的\" class=\"headerlink\" title=\"类变量是否在JVM启动时就初始化好的\"></a>类变量是否在JVM启动时就初始化好的</h4><h4 id=\"Java-的方法（函数）到底是传值还是传址\"><a href=\"#Java-的方法（函数）到底是传值还是传址\" class=\"headerlink\" title=\"Java 的方法（函数）到底是传值还是传址\"></a>Java 的方法（函数）到底是传值还是传址</h4><h4 id=\"OutOfMemory错误分几种\"><a href=\"#OutOfMemory错误分几种\" class=\"headerlink\" title=\"OutOfMemory错误分几种\"></a><code>OutOfMemory</code>错误分几种</h4><h4 id=\"为什么会产生StackOverflowError\"><a href=\"#为什么会产生StackOverflowError\" class=\"headerlink\" title=\"为什么会产生StackOverflowError\"></a>为什么会产生<code>StackOverflowError</code></h4><h4 id=\"一个机器上可以有多个JVM吗\"><a href=\"#一个机器上可以有多个JVM吗\" class=\"headerlink\" title=\"一个机器上可以有多个JVM吗\"></a>一个机器上可以有多个JVM吗</h4><h4 id=\"JVM之间可以互访吗\"><a href=\"#JVM之间可以互访吗\" class=\"headerlink\" title=\"JVM之间可以互访吗\"></a>JVM之间可以互访吗</h4><h4 id=\"JVM中到底哪些区域是共享的\"><a href=\"#JVM中到底哪些区域是共享的\" class=\"headerlink\" title=\"JVM中到底哪些区域是共享的\"></a>JVM中到底哪些区域是共享的</h4><h4 id=\"JVM有哪些调整参数\"><a href=\"#JVM有哪些调整参数\" class=\"headerlink\" title=\"JVM有哪些调整参数\"></a>JVM有哪些调整参数</h4><h2 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h2><h4 id=\"如何判断对象是否死去\"><a href=\"#如何判断对象是否死去\" class=\"headerlink\" title=\"如何判断对象是否死去\"></a>如何判断对象是否死去</h4><h4 id=\"有哪些垃圾收集算法\"><a href=\"#有哪些垃圾收集算法\" class=\"headerlink\" title=\"有哪些垃圾收集算法\"></a>有哪些垃圾收集算法</h4><h4 id=\"Minor-GC和Full-CG有什么区分\"><a href=\"#Minor-GC和Full-CG有什么区分\" class=\"headerlink\" title=\"Minor GC和Full CG有什么区分\"></a>Minor GC和Full CG有什么区分</h4><h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><h4 id=\"一个线程默认占多少内存\"><a href=\"#一个线程默认占多少内存\" class=\"headerlink\" title=\"一个线程默认占多少内存\"></a>一个线程默认占多少内存</h4><h4 id=\"一台机器可以创建多少个线程\"><a href=\"#一台机器可以创建多少个线程\" class=\"headerlink\" title=\"一台机器可以创建多少个线程\"></a>一台机器可以创建多少个线程</h4><h4 id=\"线程切换消耗一般是多少\"><a href=\"#线程切换消耗一般是多少\" class=\"headerlink\" title=\"线程切换消耗一般是多少\"></a>线程切换消耗一般是多少</h4>"},{"title":"5. Pie chart diagrams","date":"2020-01-19T16:00:00.000Z","_content":"\n- A pie char (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate (解释) numerical proportion (比例). In a pie chart, the arc length of each slice (and consequently (因此) its central angle and area), is proportional to the quantity it represents. While it is named for its resemblance (相似) to a pie which has been sliced, there are variations on the way it can be presented. The earliest known pie chart is generally credited to William Playfair's Statistical Breviary of 1801 -Wikipedia\n\nMermaid can render Pie Chart diagrams.\n\n```\npie\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n```\n\n```mermaid\npie\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n```\n\n## Syntax\nDrawing a pie chart is really simple in mermaid.\n1. Start with `pie` keyword to begin the diagram\n1. Followed by `title` and its value in string to give a title to the pie-chart. This is *OPTIONA*\n1. Followed by dataSet\n    - `label` for a section in the pie diagram within `\" \"` quotes\n    - Followed by `:` semi-colon as separator\n    - Followed by positive numberic value (supproted upto tow decimal places)","source":"_posts/绘图插件mermaid/5. Pie chart diagrams.md","raw":"---\ntitle: 5. Pie chart diagrams\n\ntags:\n- mermaid\n\ncategories:\n- 绘图插件 mermaid\n\ndate: 2020-01-20\n---\n\n- A pie char (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate (解释) numerical proportion (比例). In a pie chart, the arc length of each slice (and consequently (因此) its central angle and area), is proportional to the quantity it represents. While it is named for its resemblance (相似) to a pie which has been sliced, there are variations on the way it can be presented. The earliest known pie chart is generally credited to William Playfair's Statistical Breviary of 1801 -Wikipedia\n\nMermaid can render Pie Chart diagrams.\n\n```\npie\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n```\n\n```mermaid\npie\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n```\n\n## Syntax\nDrawing a pie chart is really simple in mermaid.\n1. Start with `pie` keyword to begin the diagram\n1. Followed by `title` and its value in string to give a title to the pie-chart. This is *OPTIONA*\n1. Followed by dataSet\n    - `label` for a section in the pie diagram within `\" \"` quotes\n    - Followed by `:` semi-colon as separator\n    - Followed by positive numberic value (supproted upto tow decimal places)","slug":"绘图插件mermaid/5. Pie chart diagrams","published":1,"updated":"2020-04-12T08:28:29.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8x007mm33pq25qcs8i","content":"<ul>\n<li>A pie char (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate (解释) numerical proportion (比例). In a pie chart, the arc length of each slice (and consequently (因此) its central angle and area), is proportional to the quantity it represents. While it is named for its resemblance (相似) to a pie which has been sliced, there are variations on the way it can be presented. The earliest known pie chart is generally credited to William Playfair’s Statistical Breviary of 1801 -Wikipedia</li>\n</ul>\n<p>Mermaid can render Pie Chart diagrams.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">    title Key elements in Product X</span><br><span class=\"line\">    &quot;Calcium&quot; : 42.96</span><br><span class=\"line\">    &quot;Potassium&quot; : 50.05</span><br><span class=\"line\">    &quot;Magnesium&quot; : 10.01</span><br><span class=\"line\">    &quot;Iron&quot; :  5</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">pie\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5</pre>\n\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><p>Drawing a pie chart is really simple in mermaid.</p>\n<ol>\n<li>Start with <code>pie</code> keyword to begin the diagram</li>\n<li>Followed by <code>title</code> and its value in string to give a title to the pie-chart. This is <em>OPTIONA</em></li>\n<li>Followed by dataSet<ul>\n<li><code>label</code> for a section in the pie diagram within <code>&quot; &quot;</code> quotes</li>\n<li>Followed by <code>:</code> semi-colon as separator</li>\n<li>Followed by positive numberic value (supproted upto tow decimal places)</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<ul>\n<li>A pie char (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate (解释) numerical proportion (比例). In a pie chart, the arc length of each slice (and consequently (因此) its central angle and area), is proportional to the quantity it represents. While it is named for its resemblance (相似) to a pie which has been sliced, there are variations on the way it can be presented. The earliest known pie chart is generally credited to William Playfair’s Statistical Breviary of 1801 -Wikipedia</li>\n</ul>\n<p>Mermaid can render Pie Chart diagrams.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">    title Key elements in Product X</span><br><span class=\"line\">    &quot;Calcium&quot; : 42.96</span><br><span class=\"line\">    &quot;Potassium&quot; : 50.05</span><br><span class=\"line\">    &quot;Magnesium&quot; : 10.01</span><br><span class=\"line\">    &quot;Iron&quot; :  5</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">pie\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5</pre>\n\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><p>Drawing a pie chart is really simple in mermaid.</p>\n<ol>\n<li>Start with <code>pie</code> keyword to begin the diagram</li>\n<li>Followed by <code>title</code> and its value in string to give a title to the pie-chart. This is <em>OPTIONA</em></li>\n<li>Followed by dataSet<ul>\n<li><code>label</code> for a section in the pie diagram within <code>&quot; &quot;</code> quotes</li>\n<li>Followed by <code>:</code> semi-colon as separator</li>\n<li>Followed by positive numberic value (supproted upto tow decimal places)</li>\n</ul>\n</li>\n</ol>\n"},{"_content":"/*mermaid限制高度，居中*/\n.mermaid {\n  text-align: center;\n}\n\n/*表格沾满行*/\nbody table {\n  display: table !important;\n}\n\n","source":"_posts/绘图插件mermaid/custom.styl","raw":"/*mermaid限制高度，居中*/\n.mermaid {\n  text-align: center;\n}\n\n/*表格沾满行*/\nbody table {\n  display: table !important;\n}\n\n","slug":"绘图插件mermaid/custom","published":1,"date":"2020-04-12T08:28:29.379Z","updated":"2020-04-12T08:28:29.380Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m8y007om33pmv4zyfzl","content":"/*mermaid限制高度，居中*/\n.mermaid {\n  text-align: center;\n}\n/*表格沾满行*/\nbody table {\n  display: table !important;\n}\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"/*mermaid限制高度，居中*/\n.mermaid {\n  text-align: center;\n}\n/*表格沾满行*/\nbody table {\n  display: table !important;\n}\n"},{"title":"1. mermaid 简介","_content":"\nddg","source":"_posts/绘图插件mermaid/第 1 章 - mermaid简介.md","raw":"---\ntitle: 1. mermaid 简介\ntags:\n- mermaid\n\ncategories:\n- 绘图插件 mermaid\n---\n\nddg","slug":"绘图插件mermaid/第 1 章 - mermaid简介","published":1,"date":"2020-04-12T08:28:29.380Z","updated":"2020-04-12T08:28:29.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m91007tm33pho1oxtk7","content":"<p>ddg</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>ddg</p>\n"},{"title":"3. 流程图","_content":"\nddg","source":"_posts/绘图插件mermaid/第 3 章 - 流程图.md","raw":"---\ntitle: 3. 流程图\n\ntags:\n- mermaid\n\ncategories:\n- 绘图插件 mermaid\n---\n\nddg","slug":"绘图插件mermaid/第 3 章 - 流程图","published":1,"date":"2020-04-12T08:28:29.381Z","updated":"2020-04-12T08:28:29.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m92007um33pdmdgjutd","content":"<p>ddg</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>ddg</p>\n"},{"title":"2. Hexo 与 mermaid 集成","_content":"\nddg","source":"_posts/绘图插件mermaid/第 2 章 - Hexo 与 mermaid 集成.md","raw":"---\ntitle: 2. Hexo 与 mermaid 集成\ntags:\n- mermaid\n\ncategories:\n- 绘图插件 mermaid\n---\n\nddg","slug":"绘图插件mermaid/第 2 章 - Hexo 与 mermaid 集成","published":1,"date":"2020-04-12T08:28:29.380Z","updated":"2020-04-12T08:28:29.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3m94007ym33pjesfov01","content":"<p>ddg</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>ddg</p>\n"},{"title":"Doubly-linked lists and circular-linked lists, and their algorithms","mathjax":true,"date":"2020-04-05T16:00:06.000Z","_content":"While singly-linked lists have many uses, they also present some restrictions (限制). For one thing, singly-linked lists restrict node traversal (遍历) to a single direction: you can't traverse a singly-linked list backward unless you first reverse its node links, which takes time. If you do a reverse traversal and need to restore node-traversal to the original direction, you will have to repeat the inversion, which takes more time. Singly-linked lists also restrict node deletion. In this type of list, you cannot delete an arbitary node without access to the node's predecessor (前任).\n\nFortunately, Java offers serveral types of list that you can use to search and sort sorted data in your Java programs. This final tutorial in the Data structures and algorithms series introduces searching and sorting with double-linked lists and circular-linked lists. As you'll see, these two data structure categories build on single-linked lists to offer a wider range of searching and sorting behavior in your Java programs.\n\n## Doubly-linked lists\nA doubly-linked list is a linked list of nodes where each node has a pair of link fields. One link field lets you traverse the list in a forward direction, whereas the other node lets you traverse the list in a backward direction. For the forward direction, a reference variable holds a reference to the first node. Each ndoe links to the next node via the \"next\" link field, except for the last node, whose \"next\" link field contains the null reference to signify the list's end (in the forward direction). The backward direction works similalry. A reference variable holds a reference to the forward direction's last node, which you interpret as the first node. Each node links to the previous node via the \"previous\" link field. The first node's \"previous\" link field contains null to signify the list's end.\n\nTry to think of a doubly-linked list  as a pair of singly-linked lists, each interconnecting the same nodes. The diagram in Figure1 shows topForward-referenced and topBackward-referenced singly-linked lists.\n\n![Figure 1. Traversing a doubly-linked list forward and backward](001.jpg)\n\n## CRUD operations in double-linked lists\nCreating, inserting, and deleting nodes are all common operations in a doubly-linked list. They're similar to the operations you learned for singly-linked lists. (Remember that a doubly-linked list is just a pair of singly-linked lists that interconnect the same nodes.) The following pseudocode demonstrates the creation and insertion of nodes into the doubly-linked list shown in Figure 1. The pseudocode also demonstrates node deletion:\n```\nDECLARE CLASS Node\n   DECLARE STRING name\n   DECLARE Node next\n   DECLARE Node prev\nEND DECLARE\nDECLARE Node topForward\nDECLARE Node temp\nDECLARE Node topBackward\ntopForward = NEW Node\ntopForward.name = \"A\"\ntemp = NEW Node\ntemp.name = \"B\"\ntopBackward = NEW Node\ntopBackward.name = \"C\"\n// Create forward singly-linked list\ntopForward.next = temp\ntemp.next = topBackward\ntopBackward.next = NULL\n// Create backward singly-linked list\ntopBackward.prev = temp\ntemp.prev = topForward\ntopForward.prev = NULL\n// Delete Node B.\ntemp.prev.next = temp.next; // Bypass Node B in the forward singly-linked list.\ntemp.next.prev = temp.prev; // Bypass Node B in the backward singly-linked list.\nEND\n```\n\n## Example application: CRUD in a doubly-linked list\nThe example Java application DLLDemo demonstrates how to create, insert, and delete nodes in a doubly-linked list. THe application's source code is show in Listing 1.\n\n### Listing 1. A Java application demonstracting CRUD in a doubly-linked list\n```java\npublic final class DLLDemo\n{\n   private static class Node\n   {\n      String name;\n      Node next;\n      Node prev;\n   }\n\n   public static void main(String[] args)\n   {\n      // Build a doubly-linked list.\n\n      Node topForward = new Node();\n      topForward.name = \"A\";\n      Node temp = new Node();\n      temp.name = \"B\";\n      Node topBackward = new Node();\n      topBackward.name = \"C\";\n      topForward.next = temp;\n      temp.next = topBackward;\n      topBackward.next = null;\n      topBackward.prev = temp;\n      temp.prev = topForward;\n      topForward.prev = null;\n\n      // Dump forward singly-linked list.\n\n      System.out.print(\"Forward singly-linked list: \");\n      temp = topForward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.next;\n      }\n      System.out.println();\n\n      // Dump backward singly-linked list.\n\n      System.out.print(\"Backward singly-linked list: \");\n      temp = topBackward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.prev;\n      }\n      System.out.println();\n\n      // Reference node B.\n\n      temp = topForward.next;\n\n      // Delete node B.\n\n      temp.prev.next = temp.next;\n      temp.next.prev = temp.prev;\n\n      // Dump forward singly-linked list.\n\n      System.out.print(\"Forward singly-linked list (after deletion): \");\n      temp = topForward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.next;\n      }\n      System.out.println();\n\n      // Dump backward singly-linked list.\n\n      System.out.print(\"Backward singly-linked list (after deletion): \");\n      temp = topBackward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.prev;\n      }\n      System.out.println();\n   }\n}\n```\n\nCompile Listing 4 as follows:\n```bash\njavac DLLDemo.java\n```\n\nRun the resulting application as follows:\n```bash\njava DLLDemo\n```\n\nYou should observe the following output:\n```\nForward singly-linked list: ABC\nBackward singly-linked list: CBA\nForward singly-linked list (after deletion): AC\nBackward singly-linked list (after deletion): CA\n```\n\n## Shuffling in double-linked lists\nThe Java Collections Framework includes a Collections class of utility methods, which is part of the java.util package. This class includes a `void shuffle(List<?> list)` method that \"randomly permutes the specified list using a default source of randomness\". For example, you might use this method to shuffle (搅乱) a deck of cards expressed as a double-linked list (the java.util.LinkedList class is an example). In the pseudocode below, you can see how the Shuffle algorithm migth shuffle a doubly-linked list:\n```\nDECLARE RANDOM rnd = new RANDOM\nDECLARE INTEGER i\nFOR i = 3 DOWNTO 2\n   swap(topForward, i - 1, rnd.nextInt(i))\nEND FOR\nFUNCTION swap(Node top, int i, int j)\n   DECLARE Node nodei, nodej\n   DECLARE INTEGER k\n   // Locate ith node.\n   Node nodei = top\n   FOR k = 0 TO i - 1\n      nodei = nodei.next\n   END FOR\n   // Locate jth node.\n   Node nodej = top\n   FOR k = 0 TO i - 1\n      nodej = nodej.next\n   END FOR\n   // Perform the swap.\n   DECLARE STRING namei = nodei.name\n   DECLARE STRING namej = nodej.name\n   nodej.name = namei\n   nodei.name = namej\nEND FUNCTION\nEND\n```\n\nThe Shuffle algorithm obtains a source of randomness and then traverse the list backward, from the last node up to the second. It repeatedly swaps a randomly selected node (which is actually just  the name field) into the \"current position\". Nodes are randomly selected from the  portion of the list that runs from the first ndoe to the current position, inclusive. Note that this algorithm is roughly excerpted from `void shuffle(List<?> list)`'s source code.\n\nThe shuffle algorithm pseudocode is lazy because it focuses only on the forward-traversing singly-linked list. It's reasonable  design decision, but we pay a price for it in time complexity. The time complexity is $O(n^2)$. First, we have the $O(n)$ loop that calls `swap()`. Second, within `swap()`, we have the two sequential $O(n)$ loops. Recall the following rule from Part 1:\n```\nIf f1(n) = O(g(n)) and f2(n) = O(h(n)) then\n\n(a) f1(n)+f2(n) = max(O(g(n)), O(h(n)))\n(b) f1(n)*f2(n) = O(g(n)*h(n)).\n```\n\nPart (a) deals with sequential algorithms. Here, we have two $O(n)$ loops. According to the rule, the resulting time complexity would be $O(n)$. Part (b) deals with nested algorithms. In this case, we have $O(n)$ multiplied by $O(n)$, resulting in $O(n^2)$.\n\nNote that Shuffle's space complexity is $O(1), resulting from the helper variables that are declared.\n\nThe Shuffle application in Listing 2 is a demonstration of the Shuffle algorithm.\n\n### Listing 2. The Shuffle algorithm in Java\n```java\nimport java.util.Random;\n\npublic final class Shuffle\n{\n   private static class Node\n   {\n      String name;\n      Node next;\n      Node prev;\n   }\n\n   public static void main(String[] args)\n   {\n      // Build a doubly-linked list.\n\n      Node topForward = new Node();\n      topForward.name = \"A\";\n      Node temp = new Node();\n      temp.name = \"B\";\n      Node topBackward = new Node();\n      topBackward.name = \"C\";\n      topForward.next = temp;\n      temp.next = topBackward;\n      topBackward.next = null;\n      topBackward.prev = temp;\n      temp.prev = topForward;\n      topForward.prev = null;\n\n      // Dump forward singly-linked list.\n\n      System.out.print(\"Forward singly-linked list: \");\n      temp = topForward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.next;\n      }\n      System.out.println();\n\n      // Dump backward singly-linked list.\n\n      System.out.print(\"Backward singly-linked list: \");\n      temp = topBackward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.prev;\n      }\n      System.out.println();\n\n      // Shuffle list.\n\n      Random rnd = new Random();\n      for (int i = 3; i > 1; i--)\n         swap(topForward, i - 1, rnd.nextInt(i));\n\n      // Dump forward singly-linked list.\n\n      System.out.print(\"Forward singly-linked list: \");\n      temp = topForward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.next;\n      }\n      System.out.println();\n\n      // Dump backward singly-linked list.\n\n      System.out.print(\"Backward singly-linked list: \");\n      temp = topBackward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.prev;\n      }\n      System.out.println();\n   }\n\n   public static void swap(Node top, int i, int j)\n   {\n      // Locate ith node.\n\n      Node nodei = top;\n      for (int k = 0; k < i; k++)\n         nodei = nodei.next;\n\n      // Locate jth node.\n\n      Node nodej = top;\n      for (int k = 0; k < j; k++)\n         nodej = nodej.next;\n\n      String namei = nodei.name;\n      String namej = nodej.name;\n      nodej.name = namei;\n      nodei.name = namej;\n   }\n}\n```\n\nCompile Listing 5 as follows:\n```bash\njavac Shuffle.java\n```\n\nRun the resulting application as follows:\n```bash\njava Shuffle\n```\n\nYou should observe the following output from on run:\n```\nForward singly-linked list: ABC\nBackward singly-linked list: CBA\nForward singly-linked list: BAC\nBackward singly-linked list: CAB\n```\n\n## Circular linked lists\nThe link field in the last node of a singly-linked list contains a null link. This is also true in a doubly-linked list, which contains the link fields in the last nodes of the forward and backward singly-linked list. Suppose, instead, that the last nodes contained links to the first nodes. In this situation, you would end up with a circular-linked list, which is shown in Figure 2.\n\n![Figure 2. A circular-linked list connects the last node to the first node](002.jpg)\n\nCircular-linked lists, also known as circular buffers or circular queues, have many uses. For example, they're used by operating system interrupt handlers to buffer keystrokes. Multimedia applications use circular-linked lists to buffer data (for example, buffering data being written to a sound card). This technique is also used by the LZ77 family of lossless data comperssion algorithms.\n\n## Linked lists versus array\nThroughout this series on data structures and algorithms, we've considered the strengths and weaknesses of different data structures. Since we've focused on arrays and linked lists, you might have questions about these types specifically. What advantages adn disadvantages do linked lists and array offer? When do you use a linked list and when do you use an array? Can data structures from both categories be integrated into a useful hybird data structure? I'll try to answer these questions below.\n\nLinked lists offer the following advantages over arrays:\n- They don't require extra memory to support expansion. In contrast, arrays require extra memory when expansion is necessary. (One all elements contain data items, no new data items can be appended to an array.)\n- They offer faster node insertion/deletion than equivalent array-based operations. Only links need to be updated after identifying the insert/delete position. From an array perspective, data item insertion requires the movement of all other data items to create an emptry element. Similarly, deletion of an existing data item requires the movement of all other data items to remove an emptry element. All data item movement takes time\n\nIn contrast, arrays offer the following advantages over linked lists:\n- Array elements occupy less memory than nodes because elements don't require link fields\n- Arrays offer faster access to data items, via integer-based indexes\n\nIm summary, linked lists are most appropriate when dealing with dynamic data, meaning programs where insertions and deletions are frequent. In contrast, arrays are most appropriate fro programs where data is static, meaning it's rare to insert or delete new data items. (Recall that if you run out of room when adding data items to an array, you must create a larger array, copy the original array's data items to the larger array, and dipose of the original. This take time, which affects performance-especially when done repeatedly.)\n\nYou might think that merging a singly-linked list with a one-dimensional array to access nodes via array indexes would accomplish nothing. You would waste memory because you need array elements plus nodes, and you would waste time because you need to move the array's data items whenever you insert or delete a node. In fact, it can be beneficial to integrate an array with a linked list to create a hybrid! While it's out of the scope of this series, the hash table is a great example of array/linked list cooperation.\n\n## Tutorial series conclusion\nThis tutorial series has introduced the fundamentals of data structures and algorithms. I've focused on two data structure categories, Java array and linked lists, which are the basis of more complex  data structures such as stacks, queues, trees, graphs, dictionaries/maps, and sets. I encourage you to keep exploring and learning about data structures, and algorithms. As a starting point, Java Collections Framework includes many useful data structures and algorithms you could explore.","source":"_posts/JavaWorld/Doubly-linked lists and circular-linked lists, and their algorithms.md","raw":"---\ntitle: Doubly-linked lists and circular-linked lists, and their algorithms\n\ntag:\n- Data structures and algorithms in Java\ncategories:\n- JavaWorld\n\nmathjax: true\n\ndate: 2020-04-06 00:00:06\n---\nWhile singly-linked lists have many uses, they also present some restrictions (限制). For one thing, singly-linked lists restrict node traversal (遍历) to a single direction: you can't traverse a singly-linked list backward unless you first reverse its node links, which takes time. If you do a reverse traversal and need to restore node-traversal to the original direction, you will have to repeat the inversion, which takes more time. Singly-linked lists also restrict node deletion. In this type of list, you cannot delete an arbitary node without access to the node's predecessor (前任).\n\nFortunately, Java offers serveral types of list that you can use to search and sort sorted data in your Java programs. This final tutorial in the Data structures and algorithms series introduces searching and sorting with double-linked lists and circular-linked lists. As you'll see, these two data structure categories build on single-linked lists to offer a wider range of searching and sorting behavior in your Java programs.\n\n## Doubly-linked lists\nA doubly-linked list is a linked list of nodes where each node has a pair of link fields. One link field lets you traverse the list in a forward direction, whereas the other node lets you traverse the list in a backward direction. For the forward direction, a reference variable holds a reference to the first node. Each ndoe links to the next node via the \"next\" link field, except for the last node, whose \"next\" link field contains the null reference to signify the list's end (in the forward direction). The backward direction works similalry. A reference variable holds a reference to the forward direction's last node, which you interpret as the first node. Each node links to the previous node via the \"previous\" link field. The first node's \"previous\" link field contains null to signify the list's end.\n\nTry to think of a doubly-linked list  as a pair of singly-linked lists, each interconnecting the same nodes. The diagram in Figure1 shows topForward-referenced and topBackward-referenced singly-linked lists.\n\n![Figure 1. Traversing a doubly-linked list forward and backward](001.jpg)\n\n## CRUD operations in double-linked lists\nCreating, inserting, and deleting nodes are all common operations in a doubly-linked list. They're similar to the operations you learned for singly-linked lists. (Remember that a doubly-linked list is just a pair of singly-linked lists that interconnect the same nodes.) The following pseudocode demonstrates the creation and insertion of nodes into the doubly-linked list shown in Figure 1. The pseudocode also demonstrates node deletion:\n```\nDECLARE CLASS Node\n   DECLARE STRING name\n   DECLARE Node next\n   DECLARE Node prev\nEND DECLARE\nDECLARE Node topForward\nDECLARE Node temp\nDECLARE Node topBackward\ntopForward = NEW Node\ntopForward.name = \"A\"\ntemp = NEW Node\ntemp.name = \"B\"\ntopBackward = NEW Node\ntopBackward.name = \"C\"\n// Create forward singly-linked list\ntopForward.next = temp\ntemp.next = topBackward\ntopBackward.next = NULL\n// Create backward singly-linked list\ntopBackward.prev = temp\ntemp.prev = topForward\ntopForward.prev = NULL\n// Delete Node B.\ntemp.prev.next = temp.next; // Bypass Node B in the forward singly-linked list.\ntemp.next.prev = temp.prev; // Bypass Node B in the backward singly-linked list.\nEND\n```\n\n## Example application: CRUD in a doubly-linked list\nThe example Java application DLLDemo demonstrates how to create, insert, and delete nodes in a doubly-linked list. THe application's source code is show in Listing 1.\n\n### Listing 1. A Java application demonstracting CRUD in a doubly-linked list\n```java\npublic final class DLLDemo\n{\n   private static class Node\n   {\n      String name;\n      Node next;\n      Node prev;\n   }\n\n   public static void main(String[] args)\n   {\n      // Build a doubly-linked list.\n\n      Node topForward = new Node();\n      topForward.name = \"A\";\n      Node temp = new Node();\n      temp.name = \"B\";\n      Node topBackward = new Node();\n      topBackward.name = \"C\";\n      topForward.next = temp;\n      temp.next = topBackward;\n      topBackward.next = null;\n      topBackward.prev = temp;\n      temp.prev = topForward;\n      topForward.prev = null;\n\n      // Dump forward singly-linked list.\n\n      System.out.print(\"Forward singly-linked list: \");\n      temp = topForward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.next;\n      }\n      System.out.println();\n\n      // Dump backward singly-linked list.\n\n      System.out.print(\"Backward singly-linked list: \");\n      temp = topBackward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.prev;\n      }\n      System.out.println();\n\n      // Reference node B.\n\n      temp = topForward.next;\n\n      // Delete node B.\n\n      temp.prev.next = temp.next;\n      temp.next.prev = temp.prev;\n\n      // Dump forward singly-linked list.\n\n      System.out.print(\"Forward singly-linked list (after deletion): \");\n      temp = topForward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.next;\n      }\n      System.out.println();\n\n      // Dump backward singly-linked list.\n\n      System.out.print(\"Backward singly-linked list (after deletion): \");\n      temp = topBackward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.prev;\n      }\n      System.out.println();\n   }\n}\n```\n\nCompile Listing 4 as follows:\n```bash\njavac DLLDemo.java\n```\n\nRun the resulting application as follows:\n```bash\njava DLLDemo\n```\n\nYou should observe the following output:\n```\nForward singly-linked list: ABC\nBackward singly-linked list: CBA\nForward singly-linked list (after deletion): AC\nBackward singly-linked list (after deletion): CA\n```\n\n## Shuffling in double-linked lists\nThe Java Collections Framework includes a Collections class of utility methods, which is part of the java.util package. This class includes a `void shuffle(List<?> list)` method that \"randomly permutes the specified list using a default source of randomness\". For example, you might use this method to shuffle (搅乱) a deck of cards expressed as a double-linked list (the java.util.LinkedList class is an example). In the pseudocode below, you can see how the Shuffle algorithm migth shuffle a doubly-linked list:\n```\nDECLARE RANDOM rnd = new RANDOM\nDECLARE INTEGER i\nFOR i = 3 DOWNTO 2\n   swap(topForward, i - 1, rnd.nextInt(i))\nEND FOR\nFUNCTION swap(Node top, int i, int j)\n   DECLARE Node nodei, nodej\n   DECLARE INTEGER k\n   // Locate ith node.\n   Node nodei = top\n   FOR k = 0 TO i - 1\n      nodei = nodei.next\n   END FOR\n   // Locate jth node.\n   Node nodej = top\n   FOR k = 0 TO i - 1\n      nodej = nodej.next\n   END FOR\n   // Perform the swap.\n   DECLARE STRING namei = nodei.name\n   DECLARE STRING namej = nodej.name\n   nodej.name = namei\n   nodei.name = namej\nEND FUNCTION\nEND\n```\n\nThe Shuffle algorithm obtains a source of randomness and then traverse the list backward, from the last node up to the second. It repeatedly swaps a randomly selected node (which is actually just  the name field) into the \"current position\". Nodes are randomly selected from the  portion of the list that runs from the first ndoe to the current position, inclusive. Note that this algorithm is roughly excerpted from `void shuffle(List<?> list)`'s source code.\n\nThe shuffle algorithm pseudocode is lazy because it focuses only on the forward-traversing singly-linked list. It's reasonable  design decision, but we pay a price for it in time complexity. The time complexity is $O(n^2)$. First, we have the $O(n)$ loop that calls `swap()`. Second, within `swap()`, we have the two sequential $O(n)$ loops. Recall the following rule from Part 1:\n```\nIf f1(n) = O(g(n)) and f2(n) = O(h(n)) then\n\n(a) f1(n)+f2(n) = max(O(g(n)), O(h(n)))\n(b) f1(n)*f2(n) = O(g(n)*h(n)).\n```\n\nPart (a) deals with sequential algorithms. Here, we have two $O(n)$ loops. According to the rule, the resulting time complexity would be $O(n)$. Part (b) deals with nested algorithms. In this case, we have $O(n)$ multiplied by $O(n)$, resulting in $O(n^2)$.\n\nNote that Shuffle's space complexity is $O(1), resulting from the helper variables that are declared.\n\nThe Shuffle application in Listing 2 is a demonstration of the Shuffle algorithm.\n\n### Listing 2. The Shuffle algorithm in Java\n```java\nimport java.util.Random;\n\npublic final class Shuffle\n{\n   private static class Node\n   {\n      String name;\n      Node next;\n      Node prev;\n   }\n\n   public static void main(String[] args)\n   {\n      // Build a doubly-linked list.\n\n      Node topForward = new Node();\n      topForward.name = \"A\";\n      Node temp = new Node();\n      temp.name = \"B\";\n      Node topBackward = new Node();\n      topBackward.name = \"C\";\n      topForward.next = temp;\n      temp.next = topBackward;\n      topBackward.next = null;\n      topBackward.prev = temp;\n      temp.prev = topForward;\n      topForward.prev = null;\n\n      // Dump forward singly-linked list.\n\n      System.out.print(\"Forward singly-linked list: \");\n      temp = topForward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.next;\n      }\n      System.out.println();\n\n      // Dump backward singly-linked list.\n\n      System.out.print(\"Backward singly-linked list: \");\n      temp = topBackward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.prev;\n      }\n      System.out.println();\n\n      // Shuffle list.\n\n      Random rnd = new Random();\n      for (int i = 3; i > 1; i--)\n         swap(topForward, i - 1, rnd.nextInt(i));\n\n      // Dump forward singly-linked list.\n\n      System.out.print(\"Forward singly-linked list: \");\n      temp = topForward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.next;\n      }\n      System.out.println();\n\n      // Dump backward singly-linked list.\n\n      System.out.print(\"Backward singly-linked list: \");\n      temp = topBackward;\n      while (temp != null)\n      {\n         System.out.print(temp.name);\n         temp = temp.prev;\n      }\n      System.out.println();\n   }\n\n   public static void swap(Node top, int i, int j)\n   {\n      // Locate ith node.\n\n      Node nodei = top;\n      for (int k = 0; k < i; k++)\n         nodei = nodei.next;\n\n      // Locate jth node.\n\n      Node nodej = top;\n      for (int k = 0; k < j; k++)\n         nodej = nodej.next;\n\n      String namei = nodei.name;\n      String namej = nodej.name;\n      nodej.name = namei;\n      nodei.name = namej;\n   }\n}\n```\n\nCompile Listing 5 as follows:\n```bash\njavac Shuffle.java\n```\n\nRun the resulting application as follows:\n```bash\njava Shuffle\n```\n\nYou should observe the following output from on run:\n```\nForward singly-linked list: ABC\nBackward singly-linked list: CBA\nForward singly-linked list: BAC\nBackward singly-linked list: CAB\n```\n\n## Circular linked lists\nThe link field in the last node of a singly-linked list contains a null link. This is also true in a doubly-linked list, which contains the link fields in the last nodes of the forward and backward singly-linked list. Suppose, instead, that the last nodes contained links to the first nodes. In this situation, you would end up with a circular-linked list, which is shown in Figure 2.\n\n![Figure 2. A circular-linked list connects the last node to the first node](002.jpg)\n\nCircular-linked lists, also known as circular buffers or circular queues, have many uses. For example, they're used by operating system interrupt handlers to buffer keystrokes. Multimedia applications use circular-linked lists to buffer data (for example, buffering data being written to a sound card). This technique is also used by the LZ77 family of lossless data comperssion algorithms.\n\n## Linked lists versus array\nThroughout this series on data structures and algorithms, we've considered the strengths and weaknesses of different data structures. Since we've focused on arrays and linked lists, you might have questions about these types specifically. What advantages adn disadvantages do linked lists and array offer? When do you use a linked list and when do you use an array? Can data structures from both categories be integrated into a useful hybird data structure? I'll try to answer these questions below.\n\nLinked lists offer the following advantages over arrays:\n- They don't require extra memory to support expansion. In contrast, arrays require extra memory when expansion is necessary. (One all elements contain data items, no new data items can be appended to an array.)\n- They offer faster node insertion/deletion than equivalent array-based operations. Only links need to be updated after identifying the insert/delete position. From an array perspective, data item insertion requires the movement of all other data items to create an emptry element. Similarly, deletion of an existing data item requires the movement of all other data items to remove an emptry element. All data item movement takes time\n\nIn contrast, arrays offer the following advantages over linked lists:\n- Array elements occupy less memory than nodes because elements don't require link fields\n- Arrays offer faster access to data items, via integer-based indexes\n\nIm summary, linked lists are most appropriate when dealing with dynamic data, meaning programs where insertions and deletions are frequent. In contrast, arrays are most appropriate fro programs where data is static, meaning it's rare to insert or delete new data items. (Recall that if you run out of room when adding data items to an array, you must create a larger array, copy the original array's data items to the larger array, and dipose of the original. This take time, which affects performance-especially when done repeatedly.)\n\nYou might think that merging a singly-linked list with a one-dimensional array to access nodes via array indexes would accomplish nothing. You would waste memory because you need array elements plus nodes, and you would waste time because you need to move the array's data items whenever you insert or delete a node. In fact, it can be beneficial to integrate an array with a linked list to create a hybrid! While it's out of the scope of this series, the hash table is a great example of array/linked list cooperation.\n\n## Tutorial series conclusion\nThis tutorial series has introduced the fundamentals of data structures and algorithms. I've focused on two data structure categories, Java array and linked lists, which are the basis of more complex  data structures such as stacks, queues, trees, graphs, dictionaries/maps, and sets. I encourage you to keep exploring and learning about data structures, and algorithms. As a starting point, Java Collections Framework includes many useful data structures and algorithms you could explore.","slug":"JavaWorld/Doubly-linked lists and circular-linked lists, and their algorithms","published":1,"updated":"2020-04-19T06:40:26.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mb300bim33pvf5uuq7v","content":"<p>While singly-linked lists have many uses, they also present some restrictions (限制). For one thing, singly-linked lists restrict node traversal (遍历) to a single direction: you can’t traverse a singly-linked list backward unless you first reverse its node links, which takes time. If you do a reverse traversal and need to restore node-traversal to the original direction, you will have to repeat the inversion, which takes more time. Singly-linked lists also restrict node deletion. In this type of list, you cannot delete an arbitary node without access to the node’s predecessor (前任).</p>\n<p>Fortunately, Java offers serveral types of list that you can use to search and sort sorted data in your Java programs. This final tutorial in the Data structures and algorithms series introduces searching and sorting with double-linked lists and circular-linked lists. As you’ll see, these two data structure categories build on single-linked lists to offer a wider range of searching and sorting behavior in your Java programs.</p>\n<h2 id=\"Doubly-linked-lists\"><a href=\"#Doubly-linked-lists\" class=\"headerlink\" title=\"Doubly-linked lists\"></a>Doubly-linked lists</h2><p>A doubly-linked list is a linked list of nodes where each node has a pair of link fields. One link field lets you traverse the list in a forward direction, whereas the other node lets you traverse the list in a backward direction. For the forward direction, a reference variable holds a reference to the first node. Each ndoe links to the next node via the “next” link field, except for the last node, whose “next” link field contains the null reference to signify the list’s end (in the forward direction). The backward direction works similalry. A reference variable holds a reference to the forward direction’s last node, which you interpret as the first node. Each node links to the previous node via the “previous” link field. The first node’s “previous” link field contains null to signify the list’s end.</p>\n<p>Try to think of a doubly-linked list  as a pair of singly-linked lists, each interconnecting the same nodes. The diagram in Figure1 shows topForward-referenced and topBackward-referenced singly-linked lists.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. Traversing a doubly-linked list forward and backward\"></p>\n<h2 id=\"CRUD-operations-in-double-linked-lists\"><a href=\"#CRUD-operations-in-double-linked-lists\" class=\"headerlink\" title=\"CRUD operations in double-linked lists\"></a>CRUD operations in double-linked lists</h2><p>Creating, inserting, and deleting nodes are all common operations in a doubly-linked list. They’re similar to the operations you learned for singly-linked lists. (Remember that a doubly-linked list is just a pair of singly-linked lists that interconnect the same nodes.) The following pseudocode demonstrates the creation and insertion of nodes into the doubly-linked list shown in Figure 1. The pseudocode also demonstrates node deletion:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE CLASS Node</span><br><span class=\"line\">   DECLARE STRING name</span><br><span class=\"line\">   DECLARE Node next</span><br><span class=\"line\">   DECLARE Node prev</span><br><span class=\"line\">END DECLARE</span><br><span class=\"line\">DECLARE Node topForward</span><br><span class=\"line\">DECLARE Node temp</span><br><span class=\"line\">DECLARE Node topBackward</span><br><span class=\"line\">topForward = NEW Node</span><br><span class=\"line\">topForward.name = &quot;A&quot;</span><br><span class=\"line\">temp = NEW Node</span><br><span class=\"line\">temp.name = &quot;B&quot;</span><br><span class=\"line\">topBackward = NEW Node</span><br><span class=\"line\">topBackward.name = &quot;C&quot;</span><br><span class=\"line\">// Create forward singly-linked list</span><br><span class=\"line\">topForward.next = temp</span><br><span class=\"line\">temp.next = topBackward</span><br><span class=\"line\">topBackward.next = NULL</span><br><span class=\"line\">// Create backward singly-linked list</span><br><span class=\"line\">topBackward.prev = temp</span><br><span class=\"line\">temp.prev = topForward</span><br><span class=\"line\">topForward.prev = NULL</span><br><span class=\"line\">// Delete Node B.</span><br><span class=\"line\">temp.prev.next = temp.next; // Bypass Node B in the forward singly-linked list.</span><br><span class=\"line\">temp.next.prev = temp.prev; // Bypass Node B in the backward singly-linked list.</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Example-application-CRUD-in-a-doubly-linked-list\"><a href=\"#Example-application-CRUD-in-a-doubly-linked-list\" class=\"headerlink\" title=\"Example application: CRUD in a doubly-linked list\"></a>Example application: CRUD in a doubly-linked list</h2><p>The example Java application DLLDemo demonstrates how to create, insert, and delete nodes in a doubly-linked list. THe application’s source code is show in Listing 1.</p>\n<h3 id=\"Listing-1-A-Java-application-demonstracting-CRUD-in-a-doubly-linked-list\"><a href=\"#Listing-1-A-Java-application-demonstracting-CRUD-in-a-doubly-linked-list\" class=\"headerlink\" title=\"Listing 1. A Java application demonstracting CRUD in a doubly-linked list\"></a>Listing 1. A Java application demonstracting CRUD in a doubly-linked list</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DLLDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      String name;</span><br><span class=\"line\">      Node next;</span><br><span class=\"line\">      Node prev;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Build a doubly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Node topForward = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      topForward.name = <span class=\"string\">\"A\"</span>;</span><br><span class=\"line\">      Node temp = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      temp.name = <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">      Node topBackward = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      topBackward.name = <span class=\"string\">\"C\"</span>;</span><br><span class=\"line\">      topForward.next = temp;</span><br><span class=\"line\">      temp.next = topBackward;</span><br><span class=\"line\">      topBackward.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      topBackward.prev = temp;</span><br><span class=\"line\">      temp.prev = topForward;</span><br><span class=\"line\">      topForward.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump forward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Forward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topForward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump backward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Backward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topBackward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.prev;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Reference node B.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      temp = topForward.next;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Delete node B.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      temp.prev.next = temp.next;</span><br><span class=\"line\">      temp.next.prev = temp.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump forward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Forward singly-linked list (after deletion): \"</span>);</span><br><span class=\"line\">      temp = topForward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump backward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Backward singly-linked list (after deletion): \"</span>);</span><br><span class=\"line\">      temp = topBackward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.prev;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Compile Listing 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac DLLDemo.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java DLLDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Forward singly-linked list: ABC</span><br><span class=\"line\">Backward singly-linked list: CBA</span><br><span class=\"line\">Forward singly-linked list (after deletion): AC</span><br><span class=\"line\">Backward singly-linked list (after deletion): CA</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Shuffling-in-double-linked-lists\"><a href=\"#Shuffling-in-double-linked-lists\" class=\"headerlink\" title=\"Shuffling in double-linked lists\"></a>Shuffling in double-linked lists</h2><p>The Java Collections Framework includes a Collections class of utility methods, which is part of the java.util package. This class includes a <code>void shuffle(List&lt;?&gt; list)</code> method that “randomly permutes the specified list using a default source of randomness”. For example, you might use this method to shuffle (搅乱) a deck of cards expressed as a double-linked list (the java.util.LinkedList class is an example). In the pseudocode below, you can see how the Shuffle algorithm migth shuffle a doubly-linked list:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE RANDOM rnd = new RANDOM</span><br><span class=\"line\">DECLARE INTEGER i</span><br><span class=\"line\">FOR i = 3 DOWNTO 2</span><br><span class=\"line\">   swap(topForward, i - 1, rnd.nextInt(i))</span><br><span class=\"line\">END FOR</span><br><span class=\"line\">FUNCTION swap(Node top, int i, int j)</span><br><span class=\"line\">   DECLARE Node nodei, nodej</span><br><span class=\"line\">   DECLARE INTEGER k</span><br><span class=\"line\">   // Locate ith node.</span><br><span class=\"line\">   Node nodei = top</span><br><span class=\"line\">   FOR k = 0 TO i - 1</span><br><span class=\"line\">      nodei = nodei.next</span><br><span class=\"line\">   END FOR</span><br><span class=\"line\">   // Locate jth node.</span><br><span class=\"line\">   Node nodej = top</span><br><span class=\"line\">   FOR k = 0 TO i - 1</span><br><span class=\"line\">      nodej = nodej.next</span><br><span class=\"line\">   END FOR</span><br><span class=\"line\">   // Perform the swap.</span><br><span class=\"line\">   DECLARE STRING namei = nodei.name</span><br><span class=\"line\">   DECLARE STRING namej = nodej.name</span><br><span class=\"line\">   nodej.name = namei</span><br><span class=\"line\">   nodei.name = namej</span><br><span class=\"line\">END FUNCTION</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>The Shuffle algorithm obtains a source of randomness and then traverse the list backward, from the last node up to the second. It repeatedly swaps a randomly selected node (which is actually just  the name field) into the “current position”. Nodes are randomly selected from the  portion of the list that runs from the first ndoe to the current position, inclusive. Note that this algorithm is roughly excerpted from <code>void shuffle(List&lt;?&gt; list)</code>‘s source code.</p>\n<p>The shuffle algorithm pseudocode is lazy because it focuses only on the forward-traversing singly-linked list. It’s reasonable  design decision, but we pay a price for it in time complexity. The time complexity is $O(n^2)$. First, we have the $O(n)$ loop that calls <code>swap()</code>. Second, within <code>swap()</code>, we have the two sequential $O(n)$ loops. Recall the following rule from Part 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If f1(n) = O(g(n)) and f2(n) = O(h(n)) then</span><br><span class=\"line\"></span><br><span class=\"line\">(a) f1(n)+f2(n) = max(O(g(n)), O(h(n)))</span><br><span class=\"line\">(b) f1(n)*f2(n) = O(g(n)*h(n)).</span><br></pre></td></tr></table></figure></p>\n<p>Part (a) deals with sequential algorithms. Here, we have two $O(n)$ loops. According to the rule, the resulting time complexity would be $O(n)$. Part (b) deals with nested algorithms. In this case, we have $O(n)$ multiplied by $O(n)$, resulting in $O(n^2)$.</p>\n<p>Note that Shuffle’s space complexity is $O(1), resulting from the helper variables that are declared.</p>\n<p>The Shuffle application in Listing 2 is a demonstration of the Shuffle algorithm.</p>\n<h3 id=\"Listing-2-The-Shuffle-algorithm-in-Java\"><a href=\"#Listing-2-The-Shuffle-algorithm-in-Java\" class=\"headerlink\" title=\"Listing 2. The Shuffle algorithm in Java\"></a>Listing 2. The Shuffle algorithm in Java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shuffle</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      String name;</span><br><span class=\"line\">      Node next;</span><br><span class=\"line\">      Node prev;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Build a doubly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Node topForward = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      topForward.name = <span class=\"string\">\"A\"</span>;</span><br><span class=\"line\">      Node temp = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      temp.name = <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">      Node topBackward = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      topBackward.name = <span class=\"string\">\"C\"</span>;</span><br><span class=\"line\">      topForward.next = temp;</span><br><span class=\"line\">      temp.next = topBackward;</span><br><span class=\"line\">      topBackward.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      topBackward.prev = temp;</span><br><span class=\"line\">      temp.prev = topForward;</span><br><span class=\"line\">      topForward.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump forward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Forward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topForward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump backward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Backward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topBackward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.prev;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Shuffle list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Random rnd = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &gt; <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">         swap(topForward, i - <span class=\"number\">1</span>, rnd.nextInt(i));</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump forward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Forward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topForward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump backward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Backward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topBackward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.prev;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Node top, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Locate ith node.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Node nodei = top;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++)</span><br><span class=\"line\">         nodei = nodei.next;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Locate jth node.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Node nodej = top;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; j; k++)</span><br><span class=\"line\">         nodej = nodej.next;</span><br><span class=\"line\"></span><br><span class=\"line\">      String namei = nodei.name;</span><br><span class=\"line\">      String namej = nodej.name;</span><br><span class=\"line\">      nodej.name = namei;</span><br><span class=\"line\">      nodei.name = namej;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Compile Listing 5 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac Shuffle.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java Shuffle</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output from on run:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Forward singly-linked list: ABC</span><br><span class=\"line\">Backward singly-linked list: CBA</span><br><span class=\"line\">Forward singly-linked list: BAC</span><br><span class=\"line\">Backward singly-linked list: CAB</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Circular-linked-lists\"><a href=\"#Circular-linked-lists\" class=\"headerlink\" title=\"Circular linked lists\"></a>Circular linked lists</h2><p>The link field in the last node of a singly-linked list contains a null link. This is also true in a doubly-linked list, which contains the link fields in the last nodes of the forward and backward singly-linked list. Suppose, instead, that the last nodes contained links to the first nodes. In this situation, you would end up with a circular-linked list, which is shown in Figure 2.</p>\n<p><img src=\"002.jpg\" alt=\"Figure 2. A circular-linked list connects the last node to the first node\"></p>\n<p>Circular-linked lists, also known as circular buffers or circular queues, have many uses. For example, they’re used by operating system interrupt handlers to buffer keystrokes. Multimedia applications use circular-linked lists to buffer data (for example, buffering data being written to a sound card). This technique is also used by the LZ77 family of lossless data comperssion algorithms.</p>\n<h2 id=\"Linked-lists-versus-array\"><a href=\"#Linked-lists-versus-array\" class=\"headerlink\" title=\"Linked lists versus array\"></a>Linked lists versus array</h2><p>Throughout this series on data structures and algorithms, we’ve considered the strengths and weaknesses of different data structures. Since we’ve focused on arrays and linked lists, you might have questions about these types specifically. What advantages adn disadvantages do linked lists and array offer? When do you use a linked list and when do you use an array? Can data structures from both categories be integrated into a useful hybird data structure? I’ll try to answer these questions below.</p>\n<p>Linked lists offer the following advantages over arrays:</p>\n<ul>\n<li>They don’t require extra memory to support expansion. In contrast, arrays require extra memory when expansion is necessary. (One all elements contain data items, no new data items can be appended to an array.)</li>\n<li>They offer faster node insertion/deletion than equivalent array-based operations. Only links need to be updated after identifying the insert/delete position. From an array perspective, data item insertion requires the movement of all other data items to create an emptry element. Similarly, deletion of an existing data item requires the movement of all other data items to remove an emptry element. All data item movement takes time</li>\n</ul>\n<p>In contrast, arrays offer the following advantages over linked lists:</p>\n<ul>\n<li>Array elements occupy less memory than nodes because elements don’t require link fields</li>\n<li>Arrays offer faster access to data items, via integer-based indexes</li>\n</ul>\n<p>Im summary, linked lists are most appropriate when dealing with dynamic data, meaning programs where insertions and deletions are frequent. In contrast, arrays are most appropriate fro programs where data is static, meaning it’s rare to insert or delete new data items. (Recall that if you run out of room when adding data items to an array, you must create a larger array, copy the original array’s data items to the larger array, and dipose of the original. This take time, which affects performance-especially when done repeatedly.)</p>\n<p>You might think that merging a singly-linked list with a one-dimensional array to access nodes via array indexes would accomplish nothing. You would waste memory because you need array elements plus nodes, and you would waste time because you need to move the array’s data items whenever you insert or delete a node. In fact, it can be beneficial to integrate an array with a linked list to create a hybrid! While it’s out of the scope of this series, the hash table is a great example of array/linked list cooperation.</p>\n<h2 id=\"Tutorial-series-conclusion\"><a href=\"#Tutorial-series-conclusion\" class=\"headerlink\" title=\"Tutorial series conclusion\"></a>Tutorial series conclusion</h2><p>This tutorial series has introduced the fundamentals of data structures and algorithms. I’ve focused on two data structure categories, Java array and linked lists, which are the basis of more complex  data structures such as stacks, queues, trees, graphs, dictionaries/maps, and sets. I encourage you to keep exploring and learning about data structures, and algorithms. As a starting point, Java Collections Framework includes many useful data structures and algorithms you could explore.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>While singly-linked lists have many uses, they also present some restrictions (限制). For one thing, singly-linked lists restrict node traversal (遍历) to a single direction: you can’t traverse a singly-linked list backward unless you first reverse its node links, which takes time. If you do a reverse traversal and need to restore node-traversal to the original direction, you will have to repeat the inversion, which takes more time. Singly-linked lists also restrict node deletion. In this type of list, you cannot delete an arbitary node without access to the node’s predecessor (前任).</p>\n<p>Fortunately, Java offers serveral types of list that you can use to search and sort sorted data in your Java programs. This final tutorial in the Data structures and algorithms series introduces searching and sorting with double-linked lists and circular-linked lists. As you’ll see, these two data structure categories build on single-linked lists to offer a wider range of searching and sorting behavior in your Java programs.</p>\n<h2 id=\"Doubly-linked-lists\"><a href=\"#Doubly-linked-lists\" class=\"headerlink\" title=\"Doubly-linked lists\"></a>Doubly-linked lists</h2><p>A doubly-linked list is a linked list of nodes where each node has a pair of link fields. One link field lets you traverse the list in a forward direction, whereas the other node lets you traverse the list in a backward direction. For the forward direction, a reference variable holds a reference to the first node. Each ndoe links to the next node via the “next” link field, except for the last node, whose “next” link field contains the null reference to signify the list’s end (in the forward direction). The backward direction works similalry. A reference variable holds a reference to the forward direction’s last node, which you interpret as the first node. Each node links to the previous node via the “previous” link field. The first node’s “previous” link field contains null to signify the list’s end.</p>\n<p>Try to think of a doubly-linked list  as a pair of singly-linked lists, each interconnecting the same nodes. The diagram in Figure1 shows topForward-referenced and topBackward-referenced singly-linked lists.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. Traversing a doubly-linked list forward and backward\"></p>\n<h2 id=\"CRUD-operations-in-double-linked-lists\"><a href=\"#CRUD-operations-in-double-linked-lists\" class=\"headerlink\" title=\"CRUD operations in double-linked lists\"></a>CRUD operations in double-linked lists</h2><p>Creating, inserting, and deleting nodes are all common operations in a doubly-linked list. They’re similar to the operations you learned for singly-linked lists. (Remember that a doubly-linked list is just a pair of singly-linked lists that interconnect the same nodes.) The following pseudocode demonstrates the creation and insertion of nodes into the doubly-linked list shown in Figure 1. The pseudocode also demonstrates node deletion:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE CLASS Node</span><br><span class=\"line\">   DECLARE STRING name</span><br><span class=\"line\">   DECLARE Node next</span><br><span class=\"line\">   DECLARE Node prev</span><br><span class=\"line\">END DECLARE</span><br><span class=\"line\">DECLARE Node topForward</span><br><span class=\"line\">DECLARE Node temp</span><br><span class=\"line\">DECLARE Node topBackward</span><br><span class=\"line\">topForward = NEW Node</span><br><span class=\"line\">topForward.name = &quot;A&quot;</span><br><span class=\"line\">temp = NEW Node</span><br><span class=\"line\">temp.name = &quot;B&quot;</span><br><span class=\"line\">topBackward = NEW Node</span><br><span class=\"line\">topBackward.name = &quot;C&quot;</span><br><span class=\"line\">// Create forward singly-linked list</span><br><span class=\"line\">topForward.next = temp</span><br><span class=\"line\">temp.next = topBackward</span><br><span class=\"line\">topBackward.next = NULL</span><br><span class=\"line\">// Create backward singly-linked list</span><br><span class=\"line\">topBackward.prev = temp</span><br><span class=\"line\">temp.prev = topForward</span><br><span class=\"line\">topForward.prev = NULL</span><br><span class=\"line\">// Delete Node B.</span><br><span class=\"line\">temp.prev.next = temp.next; // Bypass Node B in the forward singly-linked list.</span><br><span class=\"line\">temp.next.prev = temp.prev; // Bypass Node B in the backward singly-linked list.</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Example-application-CRUD-in-a-doubly-linked-list\"><a href=\"#Example-application-CRUD-in-a-doubly-linked-list\" class=\"headerlink\" title=\"Example application: CRUD in a doubly-linked list\"></a>Example application: CRUD in a doubly-linked list</h2><p>The example Java application DLLDemo demonstrates how to create, insert, and delete nodes in a doubly-linked list. THe application’s source code is show in Listing 1.</p>\n<h3 id=\"Listing-1-A-Java-application-demonstracting-CRUD-in-a-doubly-linked-list\"><a href=\"#Listing-1-A-Java-application-demonstracting-CRUD-in-a-doubly-linked-list\" class=\"headerlink\" title=\"Listing 1. A Java application demonstracting CRUD in a doubly-linked list\"></a>Listing 1. A Java application demonstracting CRUD in a doubly-linked list</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DLLDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      String name;</span><br><span class=\"line\">      Node next;</span><br><span class=\"line\">      Node prev;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Build a doubly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Node topForward = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      topForward.name = <span class=\"string\">\"A\"</span>;</span><br><span class=\"line\">      Node temp = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      temp.name = <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">      Node topBackward = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      topBackward.name = <span class=\"string\">\"C\"</span>;</span><br><span class=\"line\">      topForward.next = temp;</span><br><span class=\"line\">      temp.next = topBackward;</span><br><span class=\"line\">      topBackward.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      topBackward.prev = temp;</span><br><span class=\"line\">      temp.prev = topForward;</span><br><span class=\"line\">      topForward.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump forward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Forward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topForward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump backward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Backward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topBackward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.prev;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Reference node B.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      temp = topForward.next;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Delete node B.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      temp.prev.next = temp.next;</span><br><span class=\"line\">      temp.next.prev = temp.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump forward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Forward singly-linked list (after deletion): \"</span>);</span><br><span class=\"line\">      temp = topForward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump backward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Backward singly-linked list (after deletion): \"</span>);</span><br><span class=\"line\">      temp = topBackward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.prev;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Compile Listing 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac DLLDemo.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java DLLDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Forward singly-linked list: ABC</span><br><span class=\"line\">Backward singly-linked list: CBA</span><br><span class=\"line\">Forward singly-linked list (after deletion): AC</span><br><span class=\"line\">Backward singly-linked list (after deletion): CA</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Shuffling-in-double-linked-lists\"><a href=\"#Shuffling-in-double-linked-lists\" class=\"headerlink\" title=\"Shuffling in double-linked lists\"></a>Shuffling in double-linked lists</h2><p>The Java Collections Framework includes a Collections class of utility methods, which is part of the java.util package. This class includes a <code>void shuffle(List&lt;?&gt; list)</code> method that “randomly permutes the specified list using a default source of randomness”. For example, you might use this method to shuffle (搅乱) a deck of cards expressed as a double-linked list (the java.util.LinkedList class is an example). In the pseudocode below, you can see how the Shuffle algorithm migth shuffle a doubly-linked list:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE RANDOM rnd = new RANDOM</span><br><span class=\"line\">DECLARE INTEGER i</span><br><span class=\"line\">FOR i = 3 DOWNTO 2</span><br><span class=\"line\">   swap(topForward, i - 1, rnd.nextInt(i))</span><br><span class=\"line\">END FOR</span><br><span class=\"line\">FUNCTION swap(Node top, int i, int j)</span><br><span class=\"line\">   DECLARE Node nodei, nodej</span><br><span class=\"line\">   DECLARE INTEGER k</span><br><span class=\"line\">   // Locate ith node.</span><br><span class=\"line\">   Node nodei = top</span><br><span class=\"line\">   FOR k = 0 TO i - 1</span><br><span class=\"line\">      nodei = nodei.next</span><br><span class=\"line\">   END FOR</span><br><span class=\"line\">   // Locate jth node.</span><br><span class=\"line\">   Node nodej = top</span><br><span class=\"line\">   FOR k = 0 TO i - 1</span><br><span class=\"line\">      nodej = nodej.next</span><br><span class=\"line\">   END FOR</span><br><span class=\"line\">   // Perform the swap.</span><br><span class=\"line\">   DECLARE STRING namei = nodei.name</span><br><span class=\"line\">   DECLARE STRING namej = nodej.name</span><br><span class=\"line\">   nodej.name = namei</span><br><span class=\"line\">   nodei.name = namej</span><br><span class=\"line\">END FUNCTION</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>The Shuffle algorithm obtains a source of randomness and then traverse the list backward, from the last node up to the second. It repeatedly swaps a randomly selected node (which is actually just  the name field) into the “current position”. Nodes are randomly selected from the  portion of the list that runs from the first ndoe to the current position, inclusive. Note that this algorithm is roughly excerpted from <code>void shuffle(List&lt;?&gt; list)</code>‘s source code.</p>\n<p>The shuffle algorithm pseudocode is lazy because it focuses only on the forward-traversing singly-linked list. It’s reasonable  design decision, but we pay a price for it in time complexity. The time complexity is $O(n^2)$. First, we have the $O(n)$ loop that calls <code>swap()</code>. Second, within <code>swap()</code>, we have the two sequential $O(n)$ loops. Recall the following rule from Part 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If f1(n) = O(g(n)) and f2(n) = O(h(n)) then</span><br><span class=\"line\"></span><br><span class=\"line\">(a) f1(n)+f2(n) = max(O(g(n)), O(h(n)))</span><br><span class=\"line\">(b) f1(n)*f2(n) = O(g(n)*h(n)).</span><br></pre></td></tr></table></figure></p>\n<p>Part (a) deals with sequential algorithms. Here, we have two $O(n)$ loops. According to the rule, the resulting time complexity would be $O(n)$. Part (b) deals with nested algorithms. In this case, we have $O(n)$ multiplied by $O(n)$, resulting in $O(n^2)$.</p>\n<p>Note that Shuffle’s space complexity is $O(1), resulting from the helper variables that are declared.</p>\n<p>The Shuffle application in Listing 2 is a demonstration of the Shuffle algorithm.</p>\n<h3 id=\"Listing-2-The-Shuffle-algorithm-in-Java\"><a href=\"#Listing-2-The-Shuffle-algorithm-in-Java\" class=\"headerlink\" title=\"Listing 2. The Shuffle algorithm in Java\"></a>Listing 2. The Shuffle algorithm in Java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shuffle</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      String name;</span><br><span class=\"line\">      Node next;</span><br><span class=\"line\">      Node prev;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Build a doubly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Node topForward = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      topForward.name = <span class=\"string\">\"A\"</span>;</span><br><span class=\"line\">      Node temp = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      temp.name = <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">      Node topBackward = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">      topBackward.name = <span class=\"string\">\"C\"</span>;</span><br><span class=\"line\">      topForward.next = temp;</span><br><span class=\"line\">      temp.next = topBackward;</span><br><span class=\"line\">      topBackward.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      topBackward.prev = temp;</span><br><span class=\"line\">      temp.prev = topForward;</span><br><span class=\"line\">      topForward.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump forward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Forward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topForward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump backward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Backward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topBackward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.prev;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Shuffle list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Random rnd = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &gt; <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">         swap(topForward, i - <span class=\"number\">1</span>, rnd.nextInt(i));</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump forward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Forward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topForward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump backward singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"Backward singly-linked list: \"</span>);</span><br><span class=\"line\">      temp = topBackward;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.print(temp.name);</span><br><span class=\"line\">         temp = temp.prev;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Node top, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Locate ith node.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Node nodei = top;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++)</span><br><span class=\"line\">         nodei = nodei.next;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Locate jth node.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Node nodej = top;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; j; k++)</span><br><span class=\"line\">         nodej = nodej.next;</span><br><span class=\"line\"></span><br><span class=\"line\">      String namei = nodei.name;</span><br><span class=\"line\">      String namej = nodej.name;</span><br><span class=\"line\">      nodej.name = namei;</span><br><span class=\"line\">      nodei.name = namej;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Compile Listing 5 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac Shuffle.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java Shuffle</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output from on run:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Forward singly-linked list: ABC</span><br><span class=\"line\">Backward singly-linked list: CBA</span><br><span class=\"line\">Forward singly-linked list: BAC</span><br><span class=\"line\">Backward singly-linked list: CAB</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Circular-linked-lists\"><a href=\"#Circular-linked-lists\" class=\"headerlink\" title=\"Circular linked lists\"></a>Circular linked lists</h2><p>The link field in the last node of a singly-linked list contains a null link. This is also true in a doubly-linked list, which contains the link fields in the last nodes of the forward and backward singly-linked list. Suppose, instead, that the last nodes contained links to the first nodes. In this situation, you would end up with a circular-linked list, which is shown in Figure 2.</p>\n<p><img src=\"002.jpg\" alt=\"Figure 2. A circular-linked list connects the last node to the first node\"></p>\n<p>Circular-linked lists, also known as circular buffers or circular queues, have many uses. For example, they’re used by operating system interrupt handlers to buffer keystrokes. Multimedia applications use circular-linked lists to buffer data (for example, buffering data being written to a sound card). This technique is also used by the LZ77 family of lossless data comperssion algorithms.</p>\n<h2 id=\"Linked-lists-versus-array\"><a href=\"#Linked-lists-versus-array\" class=\"headerlink\" title=\"Linked lists versus array\"></a>Linked lists versus array</h2><p>Throughout this series on data structures and algorithms, we’ve considered the strengths and weaknesses of different data structures. Since we’ve focused on arrays and linked lists, you might have questions about these types specifically. What advantages adn disadvantages do linked lists and array offer? When do you use a linked list and when do you use an array? Can data structures from both categories be integrated into a useful hybird data structure? I’ll try to answer these questions below.</p>\n<p>Linked lists offer the following advantages over arrays:</p>\n<ul>\n<li>They don’t require extra memory to support expansion. In contrast, arrays require extra memory when expansion is necessary. (One all elements contain data items, no new data items can be appended to an array.)</li>\n<li>They offer faster node insertion/deletion than equivalent array-based operations. Only links need to be updated after identifying the insert/delete position. From an array perspective, data item insertion requires the movement of all other data items to create an emptry element. Similarly, deletion of an existing data item requires the movement of all other data items to remove an emptry element. All data item movement takes time</li>\n</ul>\n<p>In contrast, arrays offer the following advantages over linked lists:</p>\n<ul>\n<li>Array elements occupy less memory than nodes because elements don’t require link fields</li>\n<li>Arrays offer faster access to data items, via integer-based indexes</li>\n</ul>\n<p>Im summary, linked lists are most appropriate when dealing with dynamic data, meaning programs where insertions and deletions are frequent. In contrast, arrays are most appropriate fro programs where data is static, meaning it’s rare to insert or delete new data items. (Recall that if you run out of room when adding data items to an array, you must create a larger array, copy the original array’s data items to the larger array, and dipose of the original. This take time, which affects performance-especially when done repeatedly.)</p>\n<p>You might think that merging a singly-linked list with a one-dimensional array to access nodes via array indexes would accomplish nothing. You would waste memory because you need array elements plus nodes, and you would waste time because you need to move the array’s data items whenever you insert or delete a node. In fact, it can be beneficial to integrate an array with a linked list to create a hybrid! While it’s out of the scope of this series, the hash table is a great example of array/linked list cooperation.</p>\n<h2 id=\"Tutorial-series-conclusion\"><a href=\"#Tutorial-series-conclusion\" class=\"headerlink\" title=\"Tutorial series conclusion\"></a>Tutorial series conclusion</h2><p>This tutorial series has introduced the fundamentals of data structures and algorithms. I’ve focused on two data structure categories, Java array and linked lists, which are the basis of more complex  data structures such as stacks, queues, trees, graphs, dictionaries/maps, and sets. I encourage you to keep exploring and learning about data structures, and algorithms. As a starting point, Java Collections Framework includes many useful data structures and algorithms you could explore.</p>\n"},{"title":"How to store data in Java Ojbects","date":"2020-02-14T16:00:00.000Z","_content":"Although the snooze (午睡) button is probably the most commoly used button on an alarm clock, even a simple `AlarmClock` class needs a few more features. For instance, you might want to control how long the alarm clock will stay in snooze mode. In order to add such a feature, you need to understand how Java controls data.\n\nDeveLopers use variables in Java to hold data, with all variables having a data type and a name. The data type determines the values that a variable can hold. in this tutorial, you'll learn how integral (整体) types hold whole numbers, floating point types hold real numbers, and string types hold character strings. Then you'll get started with using instance varialbes in you Java classes.\n\n## Varialbes and primitive (原始的) types\nCalled *primitive types*, integral and floating point types are the simplest data types in Java. The following program illustrates (举例) the integral type, which can hold both positive and negative whole numbers. This program also illustrates comments, which document your code but don't affect the program in any way.\n\n```java\n/**\n * This is also a comment. The complier ignores everything from \n * the first /* until a \"star slash\" whith ends the comment.\n *\n * Here's the \"star slash\" that ends the comment. \n */\npublic class IntegerTest {\n    public static void main(String[] args) {\n        // Here's the declaration of an int variable called anInteger,\n        // which you given an initial value of 100.\n        int anInteger = 100;            // Declare and initialize anInteger\n        System.out.println(anInteger);  // Outputs 100\n        \n        // You can also do arithmetic with primitvie types, using the\n        // standard arithmetic operators.\n        anInteger = 100 + 100;           \n        System.out.println(anInteger);  // Outputs 200\n    }\n}\n```\n\nJava also uses floating point types, which can hold real numbers, meaning numbers that include a decimal place. Here's an example program.\n\n```java\npublic class DoubleTest {\n    public static void main(String[] args) {\n        // Here's the declaration of a double variable called aDouble.\n        // You also give aDouble an initial value of 5.76.\n        double aDouble = 5.76;          // Declare an initialize aDouble\n        System.out.println(aDouble);    // Outputs 5.76\n\n        // You can also do arithmetic with floating point types.\n        aDouble = 5.76 + 1.45;\n        System.out.println(aDouble);    // outputs 7.21\n    }\n}\n```\n\nTry running the programs above. Remember, you have to compile before you can run them.\n\n```bash\njavac *.java\njava IntegerTest\njava DoubleTest\n```\n\nJava uses four integral types and two floating point types, which both hold different ranges of numbers and take up varying amounts of storage space, as shown in the tables below.\n\n|TYPE|CATE|SIZE(bits)|RANGE|\n|:--|:--|:--|:--|\n|Byte|Integral Type|8|-128 to 227|\n|Short|Integral Type|16|-32,768 to 32,767|\n|Int|Integral Type|32|-2,147,483,648 to 2,147,483,647|\n|Long|Integral Type|64|-2^63 to 2^63-1|\n|Float|Floating point types (IEEE 754 format)|32|+/-1.18  \\* 10^-38 to +/-3.4 \\* 10^38|\n|Double|Floating point types (IEEE 754 format)|64|+/-2.23 \\* 10^-308 to +/-1.8 \\* 10^308|\n\nA string type holds strings, and handles them differently from the way integral and floating point types handle numbers. The Java language includes a `String` class to represent strings. You declare a string using the type `String`, and initialize it with a quoted (引号) string, a sequence of characters contained within double quotes, as shown below. You can also combine two strings using the `+` operator.\n\n```java\n// Code fragment\n// Declaration of variable s of type String.\n// and initialization with quoted string \"Hello\".\nString s = \"Hello\";\n\n// Concatenation of string in s with quoted string \" World\"\nString t = t + \" World\";\nSystem.out.println(t); // Outputs Hello World\n```\n\n## Variable scope\nIn addition to type, scope is also an important characteristic of a variable. Scope establishes (确定) when a variable is created and destroyed and where a developer can access the variable within a program. The place in your program where you declare the variable determines its scope.\n\nSo far, I've discussed local variables, which hold temporary data that you use within a method. You declare local varialbes inside methods, and you can access them only from those methods. This means that you can retrieve (检索) only local variables `anInteger`, which you used in `IntegerTest.java`, and `aDouble`, which you used in `DoubleTest.java`, from the main method in which they were declared and nowhere (没有…的地方) else.\n\nYou can declare local variables within any method. The example code below declares a local variable in the `AlarmClock.snooze()` method:\n```java\npublic class AlarmClock {\n    public void snooze() {\n        // Snooze time in millisecond = 5 secs\n        long snoozeInterval = 5000;\n        System.out.println(\"ZZZZZ for: \" + snoozeInterval);\n    }\n}\n```\n\nYou acn get to `snoozeInterval` only from the `snooze()` method, which is where you declared `snoozeInterval`, as shown here:\n```java\npublic class AlarmClockTest{\n    public static void main(String[] args) {\n        AlarmClock aClock = new AlarmClock();\n        aClock.snooze();    // This is still fine.\n        // The next line of code is an ERROR.\n        // You can't access snoozeInterval outside the snooze method.\n        snoozeInterval = 10000;\n    }\n}\n```\n\n## Method parameters\nA method parameter, which has a scope similar to a local variable, is another type of variable. Method parameters pass arguments into methods. When you declare the method, you specify its arguments in a parameter list. You pass the arguments when you call the method. Method parameters function similarly to local variables in that they lie within the scope of the method to which they are linked, and can be used throughout the method. However, unlike local variables, method parameters obtain (取得) a value from the caller when it calls a method. Here's a modification of the alarm clock that allows you to pass in the `snoozeInterval`.\n\n```java\npublic class AlarmClock {\n    public void sooze(long snoozeInterval) {\n        System.out.println(\"ZZZZZ for: \" + snoozeInterval);\n    }\n}\n\npublic class AlarmClockTest {\n    public static void main(String[] args) {\n        AlarmClock aClock = new AlarmClock();\n        // Pass in the snooze interval when you call the method.\n        aClock.snooze(10000); // Snooze for 100000 msecs.\n    } \n}\n```\n\n## Member variables\nLocal variables are useful, but because the provice only temporary storage, their value is limited. Since their lifetimes span the length of the method in which they are declared, local variables compare to a notepad that appears every time you receive a telephone call, but disappears when you hang up. That setup can be useful for jotting (略记) down notes, but sometimes you need something more permanent, What's a programmer to do? Enter `member variables`.\n\n## Variable scope an lifetime\nDevelopers implement instance variable (实例变量) to contain data useful to a class. An instance variable differs from a local variable in the nature of its scope and its lifetime. The entire class makes up the scope of an instance variable, not the method in which it was declared. In other words, developers can access instance variables anywhere in the class. In addition, the lifetime of an instance variable does not depend on any particular method of the class; that is, its lifetime is the lifetime of the instance that contains it.\n\nInstances are the actual objects that you create from the blueprint you design in the class definition. You declare instance variables in the class definition, affecting each instance you create from the blueprint. Each instance contains those instance variables, and data held within the variables can vary (不同) from instance to instance.\n\nConsider the `AlaremClock` class. Passing the `snoozeInterval` into the `snooze()` method isn't a great design. Imagine having to type in a snooze interval on your alarm clock each time you fumbled for the snooze button. Instead, just give the whold alarm clock a `snoozeInterval`. You complete this with an instance variable in the `AlarmClock` class, as shown below:\n```java\npublic class AlarmClock {\n    // You declare snoozeInterval here. This makes it an instance variable.\n    // You can also initialize it here.\n    long m_snoozeInterval = 5000;   // Snooze time in millisecond = 5 secs.\n\n    public void snooze() {\n        // You can still get to m_snoozeInterval in an AlarmClock method \n        // because you are within the scope of the class.\n        System.out.println(m_snooozeInterval);\n    }\n}\n```\n\nYou can access instance variables almost anywhere within the class that declares them. To be technical about it, you declare the instance variable within the class scope, and you can retrieve it from almost anywhere within that scope. Practically speaking, you can access the variable anywhere between the first curly bracket (花括号) that starts the class and the closing bracket. Since you also declare methods within the class scope. they too can access the instance variables.\n\nYou can also access instance variables from outside the class, as long sa an instance exists, and you have a variable that references the instance. To retrieve an instance variable through an instance, you use the *dot*(`.`) operator together with the instance. That may not be the ideal way to access the variable, but for now, complete it this way for illustrative (说明的) purposes (目的):\n```java\npublic class AlarmClockTest {\n    public static void main(String[] args) {\n        // Create two clocks. Each has its own m_snoozeInterval\n        AlarmClock aClock1 = new AlarmClock();\n        AlarmClock aClock2 = new AlarmClock();\n\n        // Change aCLock2\n        // You'll soon see that are much better ways to do this.\n        aClock2.m_snoozedInterval = 100000;\n        aClock1.snooze();   // Snooze with aClock1's interval\n        aClock2.snooze();   // Snooze with aClock2's interval\n    }\n}\n```\n\nTry this program out, and you'll see that `aClock1` still ha its interval of 5000 while `aClock2` has an interval of 10000. Again, each instance has its own instance data.\n\nDon't forget, the class definition is only a blueprint, so the instance variables don't actually exist until you create instances from the blueprint. Each instance of a class has it own copy of the instance variables, and the blueprint defines what those instance variables will be.\n\n## Encapsulation\nEncapsulation (封装) is one of the foundations of object-oriented programming. When using encapsulation, the user interacts (交互) with the type through the exposed (暴露的) behavior, not directly with the internal implementation. Through encapsulation, you hide the details of a type's implementation. In Java, encapsulation basically translates to this simple guideline: \"Don't access your object's data directly; use its methods.\"\n\nThat is an elementary (简单的) idea, but it eases our lives as programmers. Imagine, for example, that you wanted to instruct a `Person` object to stand up. Without encapsulation, your commands could go something like this: \"Well, I guess you'd need to tighten (绷紧) this muscle (肌肉) here at the front of the leg, loosen (放松) this muscle here at the back of the leg. Hmmm -- need to bend at (弯曲) the waist (腰部) too. Which muscles spark (触发) that movement? Need to tighten these, loosen those. Whoops! Forgot the other leg. Darn. Watch it -- don't top over...\" You get the idea. With encapsulation, you would just need to invoke the `stanUp()` method, Pretty easy, yes?\n\nSome advantages to encapsulation:\n- Abstraction of detail: The user interacts with a type at a higher level. If you use the `standUp` method, you no longer need to know all the muscles required to initiate that motion.\n- Isolation (隔离) from changes: Changes in internal implementation don't affect the users. If a person sprains (扭伤) an ankle (踝关节), and depends on a create for a while, the users still invoke only the `standUp()` method.\n- Correctness (正确性): Users can't arbitraily ()任意 change the insiders of an object. The can only complete what you allow them to do in the methods you write.\n\nHere's a short example in which encapsulation clearly hepls in a program's accuracy (准确度):\n```java\n// Bad -- doesn't use encapsulation\npublic class Person {\n    int m_age;\n}\n\npublic class PersonTest {\n    public static void main(String[] args) {\n        Person p = new Person();\n        p.m_age = -5; // Hey -- how can someone be minus 5 years old?\n    }\n}\n\n// Better -- uses encapsulation\npublic class Person {\n    int m_age;\n\n    public void setAge(int age) {\n        // Check to make sure age is greater than 0. I'll talk more about\n        // if statements at another time.\n        if (age > 0) {\n            m_age = age;\n        }\n    }\n}\n\npublic class PersonTest {\n    public static void main(String[] args) {\n        Person p = new Person();\n        p.setAge(-5);   // Won't have any effect now.\n    }\n}\n```\n\nEven that simple program shows how you can slip into trouble if you directly access the internal data of classes. The larger and more complex the program, the more important encapsulation becomes. Also remember that many programs start out small and then grow to last indefinitely (无限地). so it's essential that you design them correctly, right from the beginning. To apply encapsulation to `AlarmClock`, you can just create methods to manipulate (操纵) the snooze interval.\n\n> A note about methods\n> Methods can return values that the caller users. To return a value, declare a nonvoid return type, and use a `return` statement.\n\n## Write the program\nOkay -- you're ready to manipulate the snooze interval. You do this by adding get and set methods for the snooze interval. When you have an instance variable like `snoozeInterval`, you will regularly call the get and set methods `getSnoozeInterval()` and `setSnoozeInterval()`.\n\n```java\npublic class AlarmClock {\n    long m_snoozeInterval = 5000;    // Snooze time in millisecond\n\n    // Set method for m_snoozeInterval.\n    public void setSnoozeInterval(long snoozeInterval) {\n        m_snoozeInterval = snoozeInterval;\n    }\n\n    // Get method for m_snoozeInterval.\n    // Note that you are returning a value of type long here.\n    public long getSnoozeInterval() {\n        // Here's the line that returns the value.\n        return m_snoozeInterval;\n    }\n\n    public void snooze() {\n        // You can still get to m_snoozeInterval in an AlarmClock method\n        // because you are within the scope of the class.\n        System.out.println(\"ZZZZZ for: \" + m_snoozeInterval);\n    }\n}\n```\n\n```java\npublic class AlarmClockTest {\n\n    public static void main(String[] args) {\n        // Create two clocks. Each has its own m_snoozeInterval.\n        AlarmClock aClock1 = new AlarmClock();\n        AlarmClock aClock2 = new AlarmClock();\n        // Change aClock2. You use the set method.\n        aClock2.setSnoozeInterval(10000);\n        aClock1.snooze();    // Snooze with aClock1's interval.\n        aClock2.snooze();    // Snooze with aClock2's interval.\n    }\n}\n```\n\nDefined now are tow methods to manipulate the snooze interval. One is used to get the snooze interval, and the other is used to set it. That may seem trivial (琐碎的), but then, `AlarmClock` is a trivial class.\n\n## Conclusion\nIn this quick tutorial you've looked at how manipulate primitive types like `int` and `double`. You examined local variables, method parameters, and variable scope. You learned how to add data to classes using instance variables, and how that data is contained in each instance. Finally, you explored encapsulation and how it leads to better code.","source":"_posts/JavaWorld/How to store data in Java Objects.md","raw":"---\ntitle: How to store data in Java Ojbects\n\ncategories:\n- JavaWorld\n\ndate: 2020-02-15\n---\nAlthough the snooze (午睡) button is probably the most commoly used button on an alarm clock, even a simple `AlarmClock` class needs a few more features. For instance, you might want to control how long the alarm clock will stay in snooze mode. In order to add such a feature, you need to understand how Java controls data.\n\nDeveLopers use variables in Java to hold data, with all variables having a data type and a name. The data type determines the values that a variable can hold. in this tutorial, you'll learn how integral (整体) types hold whole numbers, floating point types hold real numbers, and string types hold character strings. Then you'll get started with using instance varialbes in you Java classes.\n\n## Varialbes and primitive (原始的) types\nCalled *primitive types*, integral and floating point types are the simplest data types in Java. The following program illustrates (举例) the integral type, which can hold both positive and negative whole numbers. This program also illustrates comments, which document your code but don't affect the program in any way.\n\n```java\n/**\n * This is also a comment. The complier ignores everything from \n * the first /* until a \"star slash\" whith ends the comment.\n *\n * Here's the \"star slash\" that ends the comment. \n */\npublic class IntegerTest {\n    public static void main(String[] args) {\n        // Here's the declaration of an int variable called anInteger,\n        // which you given an initial value of 100.\n        int anInteger = 100;            // Declare and initialize anInteger\n        System.out.println(anInteger);  // Outputs 100\n        \n        // You can also do arithmetic with primitvie types, using the\n        // standard arithmetic operators.\n        anInteger = 100 + 100;           \n        System.out.println(anInteger);  // Outputs 200\n    }\n}\n```\n\nJava also uses floating point types, which can hold real numbers, meaning numbers that include a decimal place. Here's an example program.\n\n```java\npublic class DoubleTest {\n    public static void main(String[] args) {\n        // Here's the declaration of a double variable called aDouble.\n        // You also give aDouble an initial value of 5.76.\n        double aDouble = 5.76;          // Declare an initialize aDouble\n        System.out.println(aDouble);    // Outputs 5.76\n\n        // You can also do arithmetic with floating point types.\n        aDouble = 5.76 + 1.45;\n        System.out.println(aDouble);    // outputs 7.21\n    }\n}\n```\n\nTry running the programs above. Remember, you have to compile before you can run them.\n\n```bash\njavac *.java\njava IntegerTest\njava DoubleTest\n```\n\nJava uses four integral types and two floating point types, which both hold different ranges of numbers and take up varying amounts of storage space, as shown in the tables below.\n\n|TYPE|CATE|SIZE(bits)|RANGE|\n|:--|:--|:--|:--|\n|Byte|Integral Type|8|-128 to 227|\n|Short|Integral Type|16|-32,768 to 32,767|\n|Int|Integral Type|32|-2,147,483,648 to 2,147,483,647|\n|Long|Integral Type|64|-2^63 to 2^63-1|\n|Float|Floating point types (IEEE 754 format)|32|+/-1.18  \\* 10^-38 to +/-3.4 \\* 10^38|\n|Double|Floating point types (IEEE 754 format)|64|+/-2.23 \\* 10^-308 to +/-1.8 \\* 10^308|\n\nA string type holds strings, and handles them differently from the way integral and floating point types handle numbers. The Java language includes a `String` class to represent strings. You declare a string using the type `String`, and initialize it with a quoted (引号) string, a sequence of characters contained within double quotes, as shown below. You can also combine two strings using the `+` operator.\n\n```java\n// Code fragment\n// Declaration of variable s of type String.\n// and initialization with quoted string \"Hello\".\nString s = \"Hello\";\n\n// Concatenation of string in s with quoted string \" World\"\nString t = t + \" World\";\nSystem.out.println(t); // Outputs Hello World\n```\n\n## Variable scope\nIn addition to type, scope is also an important characteristic of a variable. Scope establishes (确定) when a variable is created and destroyed and where a developer can access the variable within a program. The place in your program where you declare the variable determines its scope.\n\nSo far, I've discussed local variables, which hold temporary data that you use within a method. You declare local varialbes inside methods, and you can access them only from those methods. This means that you can retrieve (检索) only local variables `anInteger`, which you used in `IntegerTest.java`, and `aDouble`, which you used in `DoubleTest.java`, from the main method in which they were declared and nowhere (没有…的地方) else.\n\nYou can declare local variables within any method. The example code below declares a local variable in the `AlarmClock.snooze()` method:\n```java\npublic class AlarmClock {\n    public void snooze() {\n        // Snooze time in millisecond = 5 secs\n        long snoozeInterval = 5000;\n        System.out.println(\"ZZZZZ for: \" + snoozeInterval);\n    }\n}\n```\n\nYou acn get to `snoozeInterval` only from the `snooze()` method, which is where you declared `snoozeInterval`, as shown here:\n```java\npublic class AlarmClockTest{\n    public static void main(String[] args) {\n        AlarmClock aClock = new AlarmClock();\n        aClock.snooze();    // This is still fine.\n        // The next line of code is an ERROR.\n        // You can't access snoozeInterval outside the snooze method.\n        snoozeInterval = 10000;\n    }\n}\n```\n\n## Method parameters\nA method parameter, which has a scope similar to a local variable, is another type of variable. Method parameters pass arguments into methods. When you declare the method, you specify its arguments in a parameter list. You pass the arguments when you call the method. Method parameters function similarly to local variables in that they lie within the scope of the method to which they are linked, and can be used throughout the method. However, unlike local variables, method parameters obtain (取得) a value from the caller when it calls a method. Here's a modification of the alarm clock that allows you to pass in the `snoozeInterval`.\n\n```java\npublic class AlarmClock {\n    public void sooze(long snoozeInterval) {\n        System.out.println(\"ZZZZZ for: \" + snoozeInterval);\n    }\n}\n\npublic class AlarmClockTest {\n    public static void main(String[] args) {\n        AlarmClock aClock = new AlarmClock();\n        // Pass in the snooze interval when you call the method.\n        aClock.snooze(10000); // Snooze for 100000 msecs.\n    } \n}\n```\n\n## Member variables\nLocal variables are useful, but because the provice only temporary storage, their value is limited. Since their lifetimes span the length of the method in which they are declared, local variables compare to a notepad that appears every time you receive a telephone call, but disappears when you hang up. That setup can be useful for jotting (略记) down notes, but sometimes you need something more permanent, What's a programmer to do? Enter `member variables`.\n\n## Variable scope an lifetime\nDevelopers implement instance variable (实例变量) to contain data useful to a class. An instance variable differs from a local variable in the nature of its scope and its lifetime. The entire class makes up the scope of an instance variable, not the method in which it was declared. In other words, developers can access instance variables anywhere in the class. In addition, the lifetime of an instance variable does not depend on any particular method of the class; that is, its lifetime is the lifetime of the instance that contains it.\n\nInstances are the actual objects that you create from the blueprint you design in the class definition. You declare instance variables in the class definition, affecting each instance you create from the blueprint. Each instance contains those instance variables, and data held within the variables can vary (不同) from instance to instance.\n\nConsider the `AlaremClock` class. Passing the `snoozeInterval` into the `snooze()` method isn't a great design. Imagine having to type in a snooze interval on your alarm clock each time you fumbled for the snooze button. Instead, just give the whold alarm clock a `snoozeInterval`. You complete this with an instance variable in the `AlarmClock` class, as shown below:\n```java\npublic class AlarmClock {\n    // You declare snoozeInterval here. This makes it an instance variable.\n    // You can also initialize it here.\n    long m_snoozeInterval = 5000;   // Snooze time in millisecond = 5 secs.\n\n    public void snooze() {\n        // You can still get to m_snoozeInterval in an AlarmClock method \n        // because you are within the scope of the class.\n        System.out.println(m_snooozeInterval);\n    }\n}\n```\n\nYou can access instance variables almost anywhere within the class that declares them. To be technical about it, you declare the instance variable within the class scope, and you can retrieve it from almost anywhere within that scope. Practically speaking, you can access the variable anywhere between the first curly bracket (花括号) that starts the class and the closing bracket. Since you also declare methods within the class scope. they too can access the instance variables.\n\nYou can also access instance variables from outside the class, as long sa an instance exists, and you have a variable that references the instance. To retrieve an instance variable through an instance, you use the *dot*(`.`) operator together with the instance. That may not be the ideal way to access the variable, but for now, complete it this way for illustrative (说明的) purposes (目的):\n```java\npublic class AlarmClockTest {\n    public static void main(String[] args) {\n        // Create two clocks. Each has its own m_snoozeInterval\n        AlarmClock aClock1 = new AlarmClock();\n        AlarmClock aClock2 = new AlarmClock();\n\n        // Change aCLock2\n        // You'll soon see that are much better ways to do this.\n        aClock2.m_snoozedInterval = 100000;\n        aClock1.snooze();   // Snooze with aClock1's interval\n        aClock2.snooze();   // Snooze with aClock2's interval\n    }\n}\n```\n\nTry this program out, and you'll see that `aClock1` still ha its interval of 5000 while `aClock2` has an interval of 10000. Again, each instance has its own instance data.\n\nDon't forget, the class definition is only a blueprint, so the instance variables don't actually exist until you create instances from the blueprint. Each instance of a class has it own copy of the instance variables, and the blueprint defines what those instance variables will be.\n\n## Encapsulation\nEncapsulation (封装) is one of the foundations of object-oriented programming. When using encapsulation, the user interacts (交互) with the type through the exposed (暴露的) behavior, not directly with the internal implementation. Through encapsulation, you hide the details of a type's implementation. In Java, encapsulation basically translates to this simple guideline: \"Don't access your object's data directly; use its methods.\"\n\nThat is an elementary (简单的) idea, but it eases our lives as programmers. Imagine, for example, that you wanted to instruct a `Person` object to stand up. Without encapsulation, your commands could go something like this: \"Well, I guess you'd need to tighten (绷紧) this muscle (肌肉) here at the front of the leg, loosen (放松) this muscle here at the back of the leg. Hmmm -- need to bend at (弯曲) the waist (腰部) too. Which muscles spark (触发) that movement? Need to tighten these, loosen those. Whoops! Forgot the other leg. Darn. Watch it -- don't top over...\" You get the idea. With encapsulation, you would just need to invoke the `stanUp()` method, Pretty easy, yes?\n\nSome advantages to encapsulation:\n- Abstraction of detail: The user interacts with a type at a higher level. If you use the `standUp` method, you no longer need to know all the muscles required to initiate that motion.\n- Isolation (隔离) from changes: Changes in internal implementation don't affect the users. If a person sprains (扭伤) an ankle (踝关节), and depends on a create for a while, the users still invoke only the `standUp()` method.\n- Correctness (正确性): Users can't arbitraily ()任意 change the insiders of an object. The can only complete what you allow them to do in the methods you write.\n\nHere's a short example in which encapsulation clearly hepls in a program's accuracy (准确度):\n```java\n// Bad -- doesn't use encapsulation\npublic class Person {\n    int m_age;\n}\n\npublic class PersonTest {\n    public static void main(String[] args) {\n        Person p = new Person();\n        p.m_age = -5; // Hey -- how can someone be minus 5 years old?\n    }\n}\n\n// Better -- uses encapsulation\npublic class Person {\n    int m_age;\n\n    public void setAge(int age) {\n        // Check to make sure age is greater than 0. I'll talk more about\n        // if statements at another time.\n        if (age > 0) {\n            m_age = age;\n        }\n    }\n}\n\npublic class PersonTest {\n    public static void main(String[] args) {\n        Person p = new Person();\n        p.setAge(-5);   // Won't have any effect now.\n    }\n}\n```\n\nEven that simple program shows how you can slip into trouble if you directly access the internal data of classes. The larger and more complex the program, the more important encapsulation becomes. Also remember that many programs start out small and then grow to last indefinitely (无限地). so it's essential that you design them correctly, right from the beginning. To apply encapsulation to `AlarmClock`, you can just create methods to manipulate (操纵) the snooze interval.\n\n> A note about methods\n> Methods can return values that the caller users. To return a value, declare a nonvoid return type, and use a `return` statement.\n\n## Write the program\nOkay -- you're ready to manipulate the snooze interval. You do this by adding get and set methods for the snooze interval. When you have an instance variable like `snoozeInterval`, you will regularly call the get and set methods `getSnoozeInterval()` and `setSnoozeInterval()`.\n\n```java\npublic class AlarmClock {\n    long m_snoozeInterval = 5000;    // Snooze time in millisecond\n\n    // Set method for m_snoozeInterval.\n    public void setSnoozeInterval(long snoozeInterval) {\n        m_snoozeInterval = snoozeInterval;\n    }\n\n    // Get method for m_snoozeInterval.\n    // Note that you are returning a value of type long here.\n    public long getSnoozeInterval() {\n        // Here's the line that returns the value.\n        return m_snoozeInterval;\n    }\n\n    public void snooze() {\n        // You can still get to m_snoozeInterval in an AlarmClock method\n        // because you are within the scope of the class.\n        System.out.println(\"ZZZZZ for: \" + m_snoozeInterval);\n    }\n}\n```\n\n```java\npublic class AlarmClockTest {\n\n    public static void main(String[] args) {\n        // Create two clocks. Each has its own m_snoozeInterval.\n        AlarmClock aClock1 = new AlarmClock();\n        AlarmClock aClock2 = new AlarmClock();\n        // Change aClock2. You use the set method.\n        aClock2.setSnoozeInterval(10000);\n        aClock1.snooze();    // Snooze with aClock1's interval.\n        aClock2.snooze();    // Snooze with aClock2's interval.\n    }\n}\n```\n\nDefined now are tow methods to manipulate the snooze interval. One is used to get the snooze interval, and the other is used to set it. That may seem trivial (琐碎的), but then, `AlarmClock` is a trivial class.\n\n## Conclusion\nIn this quick tutorial you've looked at how manipulate primitive types like `int` and `double`. You examined local variables, method parameters, and variable scope. You learned how to add data to classes using instance variables, and how that data is contained in each instance. Finally, you explored encapsulation and how it leads to better code.","slug":"JavaWorld/How to store data in Java Objects","published":1,"updated":"2020-04-12T08:28:29.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mb600bjm33pg9qi48gn","content":"<p>Although the snooze (午睡) button is probably the most commoly used button on an alarm clock, even a simple <code>AlarmClock</code> class needs a few more features. For instance, you might want to control how long the alarm clock will stay in snooze mode. In order to add such a feature, you need to understand how Java controls data.</p>\n<p>DeveLopers use variables in Java to hold data, with all variables having a data type and a name. The data type determines the values that a variable can hold. in this tutorial, you’ll learn how integral (整体) types hold whole numbers, floating point types hold real numbers, and string types hold character strings. Then you’ll get started with using instance varialbes in you Java classes.</p>\n<h2 id=\"Varialbes-and-primitive-原始的-types\"><a href=\"#Varialbes-and-primitive-原始的-types\" class=\"headerlink\" title=\"Varialbes and primitive (原始的) types\"></a>Varialbes and primitive (原始的) types</h2><p>Called <em>primitive types</em>, integral and floating point types are the simplest data types in Java. The following program illustrates (举例) the integral type, which can hold both positive and negative whole numbers. This program also illustrates comments, which document your code but don’t affect the program in any way.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This is also a comment. The complier ignores everything from </span></span><br><span class=\"line\"><span class=\"comment\"> * the first /* until a \"star slash\" whith ends the comment.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Here's the \"star slash\" that ends the comment. </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Here's the declaration of an int variable called anInteger,</span></span><br><span class=\"line\">        <span class=\"comment\">// which you given an initial value of 100.</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> anInteger = <span class=\"number\">100</span>;            <span class=\"comment\">// Declare and initialize anInteger</span></span><br><span class=\"line\">        System.out.println(anInteger);  <span class=\"comment\">// Outputs 100</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// You can also do arithmetic with primitvie types, using the</span></span><br><span class=\"line\">        <span class=\"comment\">// standard arithmetic operators.</span></span><br><span class=\"line\">        anInteger = <span class=\"number\">100</span> + <span class=\"number\">100</span>;           </span><br><span class=\"line\">        System.out.println(anInteger);  <span class=\"comment\">// Outputs 200</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Java also uses floating point types, which can hold real numbers, meaning numbers that include a decimal place. Here’s an example program.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Here's the declaration of a double variable called aDouble.</span></span><br><span class=\"line\">        <span class=\"comment\">// You also give aDouble an initial value of 5.76.</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> aDouble = <span class=\"number\">5.76</span>;          <span class=\"comment\">// Declare an initialize aDouble</span></span><br><span class=\"line\">        System.out.println(aDouble);    <span class=\"comment\">// Outputs 5.76</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// You can also do arithmetic with floating point types.</span></span><br><span class=\"line\">        aDouble = <span class=\"number\">5.76</span> + <span class=\"number\">1.45</span>;</span><br><span class=\"line\">        System.out.println(aDouble);    <span class=\"comment\">// outputs 7.21</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Try running the programs above. Remember, you have to compile before you can run them.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br><span class=\"line\">java IntegerTest</span><br><span class=\"line\">java DoubleTest</span><br></pre></td></tr></table></figure>\n<p>Java uses four integral types and two floating point types, which both hold different ranges of numbers and take up varying amounts of storage space, as shown in the tables below.</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">TYPE</th>\n<th style=\"text-align:left\">CATE</th>\n<th style=\"text-align:left\">SIZE(bits)</th>\n<th style=\"text-align:left\">RANGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Byte</td>\n<td style=\"text-align:left\">Integral Type</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">-128 to 227</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Short</td>\n<td style=\"text-align:left\">Integral Type</td>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\">-32,768 to 32,767</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Int</td>\n<td style=\"text-align:left\">Integral Type</td>\n<td style=\"text-align:left\">32</td>\n<td style=\"text-align:left\">-2,147,483,648 to 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Long</td>\n<td style=\"text-align:left\">Integral Type</td>\n<td style=\"text-align:left\">64</td>\n<td style=\"text-align:left\">-2^63 to 2^63-1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Float</td>\n<td style=\"text-align:left\">Floating point types (IEEE 754 format)</td>\n<td style=\"text-align:left\">32</td>\n<td style=\"text-align:left\">+/-1.18  * 10^-38 to +/-3.4 * 10^38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Double</td>\n<td style=\"text-align:left\">Floating point types (IEEE 754 format)</td>\n<td style=\"text-align:left\">64</td>\n<td style=\"text-align:left\">+/-2.23 * 10^-308 to +/-1.8 * 10^308</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>A string type holds strings, and handles them differently from the way integral and floating point types handle numbers. The Java language includes a <code>String</code> class to represent strings. You declare a string using the type <code>String</code>, and initialize it with a quoted (引号) string, a sequence of characters contained within double quotes, as shown below. You can also combine two strings using the <code>+</code> operator.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Code fragment</span></span><br><span class=\"line\"><span class=\"comment\">// Declaration of variable s of type String.</span></span><br><span class=\"line\"><span class=\"comment\">// and initialization with quoted string \"Hello\".</span></span><br><span class=\"line\">String s = <span class=\"string\">\"Hello\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Concatenation of string in s with quoted string \" World\"</span></span><br><span class=\"line\">String t = t + <span class=\"string\">\" World\"</span>;</span><br><span class=\"line\">System.out.println(t); <span class=\"comment\">// Outputs Hello World</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Variable-scope\"><a href=\"#Variable-scope\" class=\"headerlink\" title=\"Variable scope\"></a>Variable scope</h2><p>In addition to type, scope is also an important characteristic of a variable. Scope establishes (确定) when a variable is created and destroyed and where a developer can access the variable within a program. The place in your program where you declare the variable determines its scope.</p>\n<p>So far, I’ve discussed local variables, which hold temporary data that you use within a method. You declare local varialbes inside methods, and you can access them only from those methods. This means that you can retrieve (检索) only local variables <code>anInteger</code>, which you used in <code>IntegerTest.java</code>, and <code>aDouble</code>, which you used in <code>DoubleTest.java</code>, from the main method in which they were declared and nowhere (没有…的地方) else.</p>\n<p>You can declare local variables within any method. The example code below declares a local variable in the <code>AlarmClock.snooze()</code> method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">snooze</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Snooze time in millisecond = 5 secs</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> snoozeInterval = <span class=\"number\">5000</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ZZZZZ for: \"</span> + snoozeInterval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>You acn get to <code>snoozeInterval</code> only from the <code>snooze()</code> method, which is where you declared <code>snoozeInterval</code>, as shown here:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClockTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AlarmClock aClock = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\">        aClock.snooze();    <span class=\"comment\">// This is still fine.</span></span><br><span class=\"line\">        <span class=\"comment\">// The next line of code is an ERROR.</span></span><br><span class=\"line\">        <span class=\"comment\">// You can't access snoozeInterval outside the snooze method.</span></span><br><span class=\"line\">        snoozeInterval = <span class=\"number\">10000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Method-parameters\"><a href=\"#Method-parameters\" class=\"headerlink\" title=\"Method parameters\"></a>Method parameters</h2><p>A method parameter, which has a scope similar to a local variable, is another type of variable. Method parameters pass arguments into methods. When you declare the method, you specify its arguments in a parameter list. You pass the arguments when you call the method. Method parameters function similarly to local variables in that they lie within the scope of the method to which they are linked, and can be used throughout the method. However, unlike local variables, method parameters obtain (取得) a value from the caller when it calls a method. Here’s a modification of the alarm clock that allows you to pass in the <code>snoozeInterval</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sooze</span><span class=\"params\">(<span class=\"keyword\">long</span> snoozeInterval)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ZZZZZ for: \"</span> + snoozeInterval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClockTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AlarmClock aClock = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\">        <span class=\"comment\">// Pass in the snooze interval when you call the method.</span></span><br><span class=\"line\">        aClock.snooze(<span class=\"number\">10000</span>); <span class=\"comment\">// Snooze for 100000 msecs.</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Member-variables\"><a href=\"#Member-variables\" class=\"headerlink\" title=\"Member variables\"></a>Member variables</h2><p>Local variables are useful, but because the provice only temporary storage, their value is limited. Since their lifetimes span the length of the method in which they are declared, local variables compare to a notepad that appears every time you receive a telephone call, but disappears when you hang up. That setup can be useful for jotting (略记) down notes, but sometimes you need something more permanent, What’s a programmer to do? Enter <code>member variables</code>.</p>\n<h2 id=\"Variable-scope-an-lifetime\"><a href=\"#Variable-scope-an-lifetime\" class=\"headerlink\" title=\"Variable scope an lifetime\"></a>Variable scope an lifetime</h2><p>Developers implement instance variable (实例变量) to contain data useful to a class. An instance variable differs from a local variable in the nature of its scope and its lifetime. The entire class makes up the scope of an instance variable, not the method in which it was declared. In other words, developers can access instance variables anywhere in the class. In addition, the lifetime of an instance variable does not depend on any particular method of the class; that is, its lifetime is the lifetime of the instance that contains it.</p>\n<p>Instances are the actual objects that you create from the blueprint you design in the class definition. You declare instance variables in the class definition, affecting each instance you create from the blueprint. Each instance contains those instance variables, and data held within the variables can vary (不同) from instance to instance.</p>\n<p>Consider the <code>AlaremClock</code> class. Passing the <code>snoozeInterval</code> into the <code>snooze()</code> method isn’t a great design. Imagine having to type in a snooze interval on your alarm clock each time you fumbled for the snooze button. Instead, just give the whold alarm clock a <code>snoozeInterval</code>. You complete this with an instance variable in the <code>AlarmClock</code> class, as shown below:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// You declare snoozeInterval here. This makes it an instance variable.</span></span><br><span class=\"line\">    <span class=\"comment\">// You can also initialize it here.</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> m_snoozeInterval = <span class=\"number\">5000</span>;   <span class=\"comment\">// Snooze time in millisecond = 5 secs.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">snooze</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// You can still get to m_snoozeInterval in an AlarmClock method </span></span><br><span class=\"line\">        <span class=\"comment\">// because you are within the scope of the class.</span></span><br><span class=\"line\">        System.out.println(m_snooozeInterval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>You can access instance variables almost anywhere within the class that declares them. To be technical about it, you declare the instance variable within the class scope, and you can retrieve it from almost anywhere within that scope. Practically speaking, you can access the variable anywhere between the first curly bracket (花括号) that starts the class and the closing bracket. Since you also declare methods within the class scope. they too can access the instance variables.</p>\n<p>You can also access instance variables from outside the class, as long sa an instance exists, and you have a variable that references the instance. To retrieve an instance variable through an instance, you use the <em>dot</em>(<code>.</code>) operator together with the instance. That may not be the ideal way to access the variable, but for now, complete it this way for illustrative (说明的) purposes (目的):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClockTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Create two clocks. Each has its own m_snoozeInterval</span></span><br><span class=\"line\">        AlarmClock aClock1 = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\">        AlarmClock aClock2 = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Change aCLock2</span></span><br><span class=\"line\">        <span class=\"comment\">// You'll soon see that are much better ways to do this.</span></span><br><span class=\"line\">        aClock2.m_snoozedInterval = <span class=\"number\">100000</span>;</span><br><span class=\"line\">        aClock1.snooze();   <span class=\"comment\">// Snooze with aClock1's interval</span></span><br><span class=\"line\">        aClock2.snooze();   <span class=\"comment\">// Snooze with aClock2's interval</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Try this program out, and you’ll see that <code>aClock1</code> still ha its interval of 5000 while <code>aClock2</code> has an interval of 10000. Again, each instance has its own instance data.</p>\n<p>Don’t forget, the class definition is only a blueprint, so the instance variables don’t actually exist until you create instances from the blueprint. Each instance of a class has it own copy of the instance variables, and the blueprint defines what those instance variables will be.</p>\n<h2 id=\"Encapsulation\"><a href=\"#Encapsulation\" class=\"headerlink\" title=\"Encapsulation\"></a>Encapsulation</h2><p>Encapsulation (封装) is one of the foundations of object-oriented programming. When using encapsulation, the user interacts (交互) with the type through the exposed (暴露的) behavior, not directly with the internal implementation. Through encapsulation, you hide the details of a type’s implementation. In Java, encapsulation basically translates to this simple guideline: “Don’t access your object’s data directly; use its methods.”</p>\n<p>That is an elementary (简单的) idea, but it eases our lives as programmers. Imagine, for example, that you wanted to instruct a <code>Person</code> object to stand up. Without encapsulation, your commands could go something like this: “Well, I guess you’d need to tighten (绷紧) this muscle (肌肉) here at the front of the leg, loosen (放松) this muscle here at the back of the leg. Hmmm — need to bend at (弯曲) the waist (腰部) too. Which muscles spark (触发) that movement? Need to tighten these, loosen those. Whoops! Forgot the other leg. Darn. Watch it — don’t top over…” You get the idea. With encapsulation, you would just need to invoke the <code>stanUp()</code> method, Pretty easy, yes?</p>\n<p>Some advantages to encapsulation:</p>\n<ul>\n<li>Abstraction of detail: The user interacts with a type at a higher level. If you use the <code>standUp</code> method, you no longer need to know all the muscles required to initiate that motion.</li>\n<li>Isolation (隔离) from changes: Changes in internal implementation don’t affect the users. If a person sprains (扭伤) an ankle (踝关节), and depends on a create for a while, the users still invoke only the <code>standUp()</code> method.</li>\n<li>Correctness (正确性): Users can’t arbitraily ()任意 change the insiders of an object. The can only complete what you allow them to do in the methods you write.</li>\n</ul>\n<p>Here’s a short example in which encapsulation clearly hepls in a program’s accuracy (准确度):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Bad -- doesn't use encapsulation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        p.m_age = -<span class=\"number\">5</span>; <span class=\"comment\">// Hey -- how can someone be minus 5 years old?</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Better -- uses encapsulation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check to make sure age is greater than 0. I'll talk more about</span></span><br><span class=\"line\">        <span class=\"comment\">// if statements at another time.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            m_age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        p.setAge(-<span class=\"number\">5</span>);   <span class=\"comment\">// Won't have any effect now.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Even that simple program shows how you can slip into trouble if you directly access the internal data of classes. The larger and more complex the program, the more important encapsulation becomes. Also remember that many programs start out small and then grow to last indefinitely (无限地). so it’s essential that you design them correctly, right from the beginning. To apply encapsulation to <code>AlarmClock</code>, you can just create methods to manipulate (操纵) the snooze interval.</p>\n<blockquote>\n<p>A note about methods<br>Methods can return values that the caller users. To return a value, declare a nonvoid return type, and use a <code>return</code> statement.</p>\n</blockquote>\n<h2 id=\"Write-the-program\"><a href=\"#Write-the-program\" class=\"headerlink\" title=\"Write the program\"></a>Write the program</h2><p>Okay — you’re ready to manipulate the snooze interval. You do this by adding get and set methods for the snooze interval. When you have an instance variable like <code>snoozeInterval</code>, you will regularly call the get and set methods <code>getSnoozeInterval()</code> and <code>setSnoozeInterval()</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> m_snoozeInterval = <span class=\"number\">5000</span>;    <span class=\"comment\">// Snooze time in millisecond</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set method for m_snoozeInterval.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSnoozeInterval</span><span class=\"params\">(<span class=\"keyword\">long</span> snoozeInterval)</span> </span>&#123;</span><br><span class=\"line\">        m_snoozeInterval = snoozeInterval;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get method for m_snoozeInterval.</span></span><br><span class=\"line\">    <span class=\"comment\">// Note that you are returning a value of type long here.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getSnoozeInterval</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Here's the line that returns the value.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_snoozeInterval;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">snooze</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// You can still get to m_snoozeInterval in an AlarmClock method</span></span><br><span class=\"line\">        <span class=\"comment\">// because you are within the scope of the class.</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ZZZZZ for: \"</span> + m_snoozeInterval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClockTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Create two clocks. Each has its own m_snoozeInterval.</span></span><br><span class=\"line\">        AlarmClock aClock1 = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\">        AlarmClock aClock2 = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\">        <span class=\"comment\">// Change aClock2. You use the set method.</span></span><br><span class=\"line\">        aClock2.setSnoozeInterval(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        aClock1.snooze();    <span class=\"comment\">// Snooze with aClock1's interval.</span></span><br><span class=\"line\">        aClock2.snooze();    <span class=\"comment\">// Snooze with aClock2's interval.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Defined now are tow methods to manipulate the snooze interval. One is used to get the snooze interval, and the other is used to set it. That may seem trivial (琐碎的), but then, <code>AlarmClock</code> is a trivial class.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>In this quick tutorial you’ve looked at how manipulate primitive types like <code>int</code> and <code>double</code>. You examined local variables, method parameters, and variable scope. You learned how to add data to classes using instance variables, and how that data is contained in each instance. Finally, you explored encapsulation and how it leads to better code.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Although the snooze (午睡) button is probably the most commoly used button on an alarm clock, even a simple <code>AlarmClock</code> class needs a few more features. For instance, you might want to control how long the alarm clock will stay in snooze mode. In order to add such a feature, you need to understand how Java controls data.</p>\n<p>DeveLopers use variables in Java to hold data, with all variables having a data type and a name. The data type determines the values that a variable can hold. in this tutorial, you’ll learn how integral (整体) types hold whole numbers, floating point types hold real numbers, and string types hold character strings. Then you’ll get started with using instance varialbes in you Java classes.</p>\n<h2 id=\"Varialbes-and-primitive-原始的-types\"><a href=\"#Varialbes-and-primitive-原始的-types\" class=\"headerlink\" title=\"Varialbes and primitive (原始的) types\"></a>Varialbes and primitive (原始的) types</h2><p>Called <em>primitive types</em>, integral and floating point types are the simplest data types in Java. The following program illustrates (举例) the integral type, which can hold both positive and negative whole numbers. This program also illustrates comments, which document your code but don’t affect the program in any way.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This is also a comment. The complier ignores everything from </span></span><br><span class=\"line\"><span class=\"comment\"> * the first /* until a \"star slash\" whith ends the comment.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Here's the \"star slash\" that ends the comment. </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Here's the declaration of an int variable called anInteger,</span></span><br><span class=\"line\">        <span class=\"comment\">// which you given an initial value of 100.</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> anInteger = <span class=\"number\">100</span>;            <span class=\"comment\">// Declare and initialize anInteger</span></span><br><span class=\"line\">        System.out.println(anInteger);  <span class=\"comment\">// Outputs 100</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// You can also do arithmetic with primitvie types, using the</span></span><br><span class=\"line\">        <span class=\"comment\">// standard arithmetic operators.</span></span><br><span class=\"line\">        anInteger = <span class=\"number\">100</span> + <span class=\"number\">100</span>;           </span><br><span class=\"line\">        System.out.println(anInteger);  <span class=\"comment\">// Outputs 200</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Java also uses floating point types, which can hold real numbers, meaning numbers that include a decimal place. Here’s an example program.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Here's the declaration of a double variable called aDouble.</span></span><br><span class=\"line\">        <span class=\"comment\">// You also give aDouble an initial value of 5.76.</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> aDouble = <span class=\"number\">5.76</span>;          <span class=\"comment\">// Declare an initialize aDouble</span></span><br><span class=\"line\">        System.out.println(aDouble);    <span class=\"comment\">// Outputs 5.76</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// You can also do arithmetic with floating point types.</span></span><br><span class=\"line\">        aDouble = <span class=\"number\">5.76</span> + <span class=\"number\">1.45</span>;</span><br><span class=\"line\">        System.out.println(aDouble);    <span class=\"comment\">// outputs 7.21</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Try running the programs above. Remember, you have to compile before you can run them.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br><span class=\"line\">java IntegerTest</span><br><span class=\"line\">java DoubleTest</span><br></pre></td></tr></table></figure>\n<p>Java uses four integral types and two floating point types, which both hold different ranges of numbers and take up varying amounts of storage space, as shown in the tables below.</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">TYPE</th>\n<th style=\"text-align:left\">CATE</th>\n<th style=\"text-align:left\">SIZE(bits)</th>\n<th style=\"text-align:left\">RANGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Byte</td>\n<td style=\"text-align:left\">Integral Type</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">-128 to 227</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Short</td>\n<td style=\"text-align:left\">Integral Type</td>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\">-32,768 to 32,767</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Int</td>\n<td style=\"text-align:left\">Integral Type</td>\n<td style=\"text-align:left\">32</td>\n<td style=\"text-align:left\">-2,147,483,648 to 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Long</td>\n<td style=\"text-align:left\">Integral Type</td>\n<td style=\"text-align:left\">64</td>\n<td style=\"text-align:left\">-2^63 to 2^63-1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Float</td>\n<td style=\"text-align:left\">Floating point types (IEEE 754 format)</td>\n<td style=\"text-align:left\">32</td>\n<td style=\"text-align:left\">+/-1.18  * 10^-38 to +/-3.4 * 10^38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Double</td>\n<td style=\"text-align:left\">Floating point types (IEEE 754 format)</td>\n<td style=\"text-align:left\">64</td>\n<td style=\"text-align:left\">+/-2.23 * 10^-308 to +/-1.8 * 10^308</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>A string type holds strings, and handles them differently from the way integral and floating point types handle numbers. The Java language includes a <code>String</code> class to represent strings. You declare a string using the type <code>String</code>, and initialize it with a quoted (引号) string, a sequence of characters contained within double quotes, as shown below. You can also combine two strings using the <code>+</code> operator.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Code fragment</span></span><br><span class=\"line\"><span class=\"comment\">// Declaration of variable s of type String.</span></span><br><span class=\"line\"><span class=\"comment\">// and initialization with quoted string \"Hello\".</span></span><br><span class=\"line\">String s = <span class=\"string\">\"Hello\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Concatenation of string in s with quoted string \" World\"</span></span><br><span class=\"line\">String t = t + <span class=\"string\">\" World\"</span>;</span><br><span class=\"line\">System.out.println(t); <span class=\"comment\">// Outputs Hello World</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Variable-scope\"><a href=\"#Variable-scope\" class=\"headerlink\" title=\"Variable scope\"></a>Variable scope</h2><p>In addition to type, scope is also an important characteristic of a variable. Scope establishes (确定) when a variable is created and destroyed and where a developer can access the variable within a program. The place in your program where you declare the variable determines its scope.</p>\n<p>So far, I’ve discussed local variables, which hold temporary data that you use within a method. You declare local varialbes inside methods, and you can access them only from those methods. This means that you can retrieve (检索) only local variables <code>anInteger</code>, which you used in <code>IntegerTest.java</code>, and <code>aDouble</code>, which you used in <code>DoubleTest.java</code>, from the main method in which they were declared and nowhere (没有…的地方) else.</p>\n<p>You can declare local variables within any method. The example code below declares a local variable in the <code>AlarmClock.snooze()</code> method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">snooze</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Snooze time in millisecond = 5 secs</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> snoozeInterval = <span class=\"number\">5000</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ZZZZZ for: \"</span> + snoozeInterval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>You acn get to <code>snoozeInterval</code> only from the <code>snooze()</code> method, which is where you declared <code>snoozeInterval</code>, as shown here:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClockTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AlarmClock aClock = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\">        aClock.snooze();    <span class=\"comment\">// This is still fine.</span></span><br><span class=\"line\">        <span class=\"comment\">// The next line of code is an ERROR.</span></span><br><span class=\"line\">        <span class=\"comment\">// You can't access snoozeInterval outside the snooze method.</span></span><br><span class=\"line\">        snoozeInterval = <span class=\"number\">10000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Method-parameters\"><a href=\"#Method-parameters\" class=\"headerlink\" title=\"Method parameters\"></a>Method parameters</h2><p>A method parameter, which has a scope similar to a local variable, is another type of variable. Method parameters pass arguments into methods. When you declare the method, you specify its arguments in a parameter list. You pass the arguments when you call the method. Method parameters function similarly to local variables in that they lie within the scope of the method to which they are linked, and can be used throughout the method. However, unlike local variables, method parameters obtain (取得) a value from the caller when it calls a method. Here’s a modification of the alarm clock that allows you to pass in the <code>snoozeInterval</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sooze</span><span class=\"params\">(<span class=\"keyword\">long</span> snoozeInterval)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ZZZZZ for: \"</span> + snoozeInterval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClockTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AlarmClock aClock = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\">        <span class=\"comment\">// Pass in the snooze interval when you call the method.</span></span><br><span class=\"line\">        aClock.snooze(<span class=\"number\">10000</span>); <span class=\"comment\">// Snooze for 100000 msecs.</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Member-variables\"><a href=\"#Member-variables\" class=\"headerlink\" title=\"Member variables\"></a>Member variables</h2><p>Local variables are useful, but because the provice only temporary storage, their value is limited. Since their lifetimes span the length of the method in which they are declared, local variables compare to a notepad that appears every time you receive a telephone call, but disappears when you hang up. That setup can be useful for jotting (略记) down notes, but sometimes you need something more permanent, What’s a programmer to do? Enter <code>member variables</code>.</p>\n<h2 id=\"Variable-scope-an-lifetime\"><a href=\"#Variable-scope-an-lifetime\" class=\"headerlink\" title=\"Variable scope an lifetime\"></a>Variable scope an lifetime</h2><p>Developers implement instance variable (实例变量) to contain data useful to a class. An instance variable differs from a local variable in the nature of its scope and its lifetime. The entire class makes up the scope of an instance variable, not the method in which it was declared. In other words, developers can access instance variables anywhere in the class. In addition, the lifetime of an instance variable does not depend on any particular method of the class; that is, its lifetime is the lifetime of the instance that contains it.</p>\n<p>Instances are the actual objects that you create from the blueprint you design in the class definition. You declare instance variables in the class definition, affecting each instance you create from the blueprint. Each instance contains those instance variables, and data held within the variables can vary (不同) from instance to instance.</p>\n<p>Consider the <code>AlaremClock</code> class. Passing the <code>snoozeInterval</code> into the <code>snooze()</code> method isn’t a great design. Imagine having to type in a snooze interval on your alarm clock each time you fumbled for the snooze button. Instead, just give the whold alarm clock a <code>snoozeInterval</code>. You complete this with an instance variable in the <code>AlarmClock</code> class, as shown below:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// You declare snoozeInterval here. This makes it an instance variable.</span></span><br><span class=\"line\">    <span class=\"comment\">// You can also initialize it here.</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> m_snoozeInterval = <span class=\"number\">5000</span>;   <span class=\"comment\">// Snooze time in millisecond = 5 secs.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">snooze</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// You can still get to m_snoozeInterval in an AlarmClock method </span></span><br><span class=\"line\">        <span class=\"comment\">// because you are within the scope of the class.</span></span><br><span class=\"line\">        System.out.println(m_snooozeInterval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>You can access instance variables almost anywhere within the class that declares them. To be technical about it, you declare the instance variable within the class scope, and you can retrieve it from almost anywhere within that scope. Practically speaking, you can access the variable anywhere between the first curly bracket (花括号) that starts the class and the closing bracket. Since you also declare methods within the class scope. they too can access the instance variables.</p>\n<p>You can also access instance variables from outside the class, as long sa an instance exists, and you have a variable that references the instance. To retrieve an instance variable through an instance, you use the <em>dot</em>(<code>.</code>) operator together with the instance. That may not be the ideal way to access the variable, but for now, complete it this way for illustrative (说明的) purposes (目的):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClockTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Create two clocks. Each has its own m_snoozeInterval</span></span><br><span class=\"line\">        AlarmClock aClock1 = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\">        AlarmClock aClock2 = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Change aCLock2</span></span><br><span class=\"line\">        <span class=\"comment\">// You'll soon see that are much better ways to do this.</span></span><br><span class=\"line\">        aClock2.m_snoozedInterval = <span class=\"number\">100000</span>;</span><br><span class=\"line\">        aClock1.snooze();   <span class=\"comment\">// Snooze with aClock1's interval</span></span><br><span class=\"line\">        aClock2.snooze();   <span class=\"comment\">// Snooze with aClock2's interval</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Try this program out, and you’ll see that <code>aClock1</code> still ha its interval of 5000 while <code>aClock2</code> has an interval of 10000. Again, each instance has its own instance data.</p>\n<p>Don’t forget, the class definition is only a blueprint, so the instance variables don’t actually exist until you create instances from the blueprint. Each instance of a class has it own copy of the instance variables, and the blueprint defines what those instance variables will be.</p>\n<h2 id=\"Encapsulation\"><a href=\"#Encapsulation\" class=\"headerlink\" title=\"Encapsulation\"></a>Encapsulation</h2><p>Encapsulation (封装) is one of the foundations of object-oriented programming. When using encapsulation, the user interacts (交互) with the type through the exposed (暴露的) behavior, not directly with the internal implementation. Through encapsulation, you hide the details of a type’s implementation. In Java, encapsulation basically translates to this simple guideline: “Don’t access your object’s data directly; use its methods.”</p>\n<p>That is an elementary (简单的) idea, but it eases our lives as programmers. Imagine, for example, that you wanted to instruct a <code>Person</code> object to stand up. Without encapsulation, your commands could go something like this: “Well, I guess you’d need to tighten (绷紧) this muscle (肌肉) here at the front of the leg, loosen (放松) this muscle here at the back of the leg. Hmmm — need to bend at (弯曲) the waist (腰部) too. Which muscles spark (触发) that movement? Need to tighten these, loosen those. Whoops! Forgot the other leg. Darn. Watch it — don’t top over…” You get the idea. With encapsulation, you would just need to invoke the <code>stanUp()</code> method, Pretty easy, yes?</p>\n<p>Some advantages to encapsulation:</p>\n<ul>\n<li>Abstraction of detail: The user interacts with a type at a higher level. If you use the <code>standUp</code> method, you no longer need to know all the muscles required to initiate that motion.</li>\n<li>Isolation (隔离) from changes: Changes in internal implementation don’t affect the users. If a person sprains (扭伤) an ankle (踝关节), and depends on a create for a while, the users still invoke only the <code>standUp()</code> method.</li>\n<li>Correctness (正确性): Users can’t arbitraily ()任意 change the insiders of an object. The can only complete what you allow them to do in the methods you write.</li>\n</ul>\n<p>Here’s a short example in which encapsulation clearly hepls in a program’s accuracy (准确度):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Bad -- doesn't use encapsulation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        p.m_age = -<span class=\"number\">5</span>; <span class=\"comment\">// Hey -- how can someone be minus 5 years old?</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Better -- uses encapsulation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check to make sure age is greater than 0. I'll talk more about</span></span><br><span class=\"line\">        <span class=\"comment\">// if statements at another time.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            m_age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        p.setAge(-<span class=\"number\">5</span>);   <span class=\"comment\">// Won't have any effect now.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Even that simple program shows how you can slip into trouble if you directly access the internal data of classes. The larger and more complex the program, the more important encapsulation becomes. Also remember that many programs start out small and then grow to last indefinitely (无限地). so it’s essential that you design them correctly, right from the beginning. To apply encapsulation to <code>AlarmClock</code>, you can just create methods to manipulate (操纵) the snooze interval.</p>\n<blockquote>\n<p>A note about methods<br>Methods can return values that the caller users. To return a value, declare a nonvoid return type, and use a <code>return</code> statement.</p>\n</blockquote>\n<h2 id=\"Write-the-program\"><a href=\"#Write-the-program\" class=\"headerlink\" title=\"Write the program\"></a>Write the program</h2><p>Okay — you’re ready to manipulate the snooze interval. You do this by adding get and set methods for the snooze interval. When you have an instance variable like <code>snoozeInterval</code>, you will regularly call the get and set methods <code>getSnoozeInterval()</code> and <code>setSnoozeInterval()</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> m_snoozeInterval = <span class=\"number\">5000</span>;    <span class=\"comment\">// Snooze time in millisecond</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set method for m_snoozeInterval.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSnoozeInterval</span><span class=\"params\">(<span class=\"keyword\">long</span> snoozeInterval)</span> </span>&#123;</span><br><span class=\"line\">        m_snoozeInterval = snoozeInterval;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get method for m_snoozeInterval.</span></span><br><span class=\"line\">    <span class=\"comment\">// Note that you are returning a value of type long here.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getSnoozeInterval</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Here's the line that returns the value.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_snoozeInterval;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">snooze</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// You can still get to m_snoozeInterval in an AlarmClock method</span></span><br><span class=\"line\">        <span class=\"comment\">// because you are within the scope of the class.</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ZZZZZ for: \"</span> + m_snoozeInterval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmClockTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Create two clocks. Each has its own m_snoozeInterval.</span></span><br><span class=\"line\">        AlarmClock aClock1 = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\">        AlarmClock aClock2 = <span class=\"keyword\">new</span> AlarmClock();</span><br><span class=\"line\">        <span class=\"comment\">// Change aClock2. You use the set method.</span></span><br><span class=\"line\">        aClock2.setSnoozeInterval(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        aClock1.snooze();    <span class=\"comment\">// Snooze with aClock1's interval.</span></span><br><span class=\"line\">        aClock2.snooze();    <span class=\"comment\">// Snooze with aClock2's interval.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Defined now are tow methods to manipulate the snooze interval. One is used to get the snooze interval, and the other is used to set it. That may seem trivial (琐碎的), but then, <code>AlarmClock</code> is a trivial class.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>In this quick tutorial you’ve looked at how manipulate primitive types like <code>int</code> and <code>double</code>. You examined local variables, method parameters, and variable scope. You learned how to add data to classes using instance variables, and how that data is contained in each instance. Finally, you explored encapsulation and how it leads to better code.</p>\n"},{"title":"SSH原理与运用（一）：远程登录","date":"2019-08-28T16:00:00.000Z","_content":"\nSSH是每一台Linux电脑的标准配置。\n\n## 什么是SSH？\n简单说，SSH是一种网络协议，用于计算机之间的加密登录。\n\n如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。\n\n最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。\n\n需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。\n\n## 最基本的用法\nSSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。\n```bash\n$ ssh user@host\n```\n\n如果本地用户名与远程用户名一致，登录时可以省略用户名。\n```bash\n$ ssh host\n```\n\nSSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。\n```bash\n$ ssh -p 2222 user@host\n```\n\n上面这条命令表示，ssh直接连接远程主机的2222端口。\n\n## 中间人攻击\nSSH之所以能够保证安全，原因在于它采用了公钥加密。\n\n整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。\n\n这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。\n\n可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的\"中间人攻击\"（Man-in-the-middle attack）。\n\nSSH协议是如何应对的呢？\n\n## 口令登录\n如果你是第一次登录对方主机，系统会出现下面的提示：\n```\n$ ssh user@host\n\nThe authenticity of host 'host (12.18.429.21)' can't be established.\n\nRSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.\n\nAre you sure you want to continue connecting (yes/no)?\n```\n\n这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？\n\n所谓\"公钥指纹\"，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是`98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d`，再进行比较，就容易多了。\n\n很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。\n\n假定经过风险衡量以后，用户决定接受这个远程主机的公钥。\n\n```\nAre you sure you want to continue connecting (yes/no)? yes\n```\n\n系统会出现一句提示，表示host主机已经得到认可。\n\n```\nWarning: Permanently added 'host,12.18.429.21' (RSA) to the list of known hosts.\n```\n\n然后，会要求输入密码。\n\n```\nPassword: (enter password)\n```\n\n如果密码正确，就可以登录了。\n\n当远程主机的公钥被接受以后，它就会被保存在文件`$HOME/.ssh/known_hosts`之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。\n\n每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是`/etc/ssh/ssh_known_hosts`，保存一些对所有用户都可信赖的远程主机的公钥。\n\n## 公钥登录\n使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。\n\n所谓\"公钥登录\"，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。\n\n这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：\n\n```\n$ ssh-keygen\n```\n\n运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。\n\n运行结束以后，在`$HOME/.ssh/`目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。\n\n这时再输入下面的命令，将公钥传送到远程主机host上面：\n\n```\n$ ssh-copy-id user@host\n```\n\n好了，从此你再登录，就不需要输入密码了。\n\n如果还是不行，就打开远程主机的`/etc/ssh/sshd_config`这个文件，检查下面几行前面\"#\"注释是否取掉。\n\n```\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\n```\n\n然后，重启远程主机的ssh服务。\n\n```bash\n// ubuntu系统\nservice ssh restart\n\n// debian系统\n/etc/init.d/ssh restart\n```\n\n## authorized_keys文件\n远程主机将用户的公钥，保存在登录后的用户主目录的`$HOME/.ssh/authorized_keys`文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。\n\n这里不使用上面的`ssh-copy-id`命令，改用下面的命令，解释公钥的保存过程：\n\n```bash\n$ ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n\n这条命令由多个语句组成，依次分解开来看：\n1. `$ ssh user@host`，表示登录远程主机；\n1. 单引号中的`mkdir .ssh && cat >> .ssh/authorized_keys`，表示登录后在远程shell上执行的命令：\n1. `$ mkdir -p .ssh`的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；\n1. `cat >> .ssh/authorized_keys < ~/.ssh/id_rsa.pub`的作用是，将本地的公钥文件`~/.ssh/id_rsa.pub`，重定向追加到远程文件authorized_keys的末尾。\n\n写入authorized_keys文件后，公钥登录的设置就完成了。\n\n## 远程操作\nSSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。\n\n上一节的操作，就是一个例子：\n\n```\n$ ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n\n单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过SSH传向远程主机。\n\n这就是说，SSH可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过SSH来完成。\n\n下面看几个例子。\n\n【例1】\n\n将`$HOME/src/`目录下面的所有文件，复制到远程主机的`$HOME/src/`目录。\n\n```bash\n$ cd && tar czv src | ssh user@host 'tar xz'\n```\n\n【例2】\n\n将远程主机`$HOME/src/`目录下面的所有文件，复制到用户的当前目录。\n\n```bash\n$ ssh user@host 'tar cz src' | tar xzv\n```\n\n【例3】\n\n查看远程主机是否运行进程httpd。\n\n```bash\n$ ssh user@host 'ps ax | grep [h]ttpd'\n```\n\n## 绑定本地端口\n既然SSH可以传送数据，那么我们可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性。\n\n假定我们要让8080端口的数据，都通过SSH传向远程主机，命令就这样写：\n\n```bash\n$ ssh -D 8080 user@host\n```\n\n## ssh 账号密码连接\n\n\n\n## ssh 密钥连接","source":"_posts/Linux 教程/SSH原理与运用（一）：远程登录.md","raw":"---\ntitle: SSH原理与运用（一）：远程登录\n\ntags:\n- ssh\n- linux\n\ncategories:\n- Linux 系列\n\ndate: 2019-08-29\n---\n\nSSH是每一台Linux电脑的标准配置。\n\n## 什么是SSH？\n简单说，SSH是一种网络协议，用于计算机之间的加密登录。\n\n如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。\n\n最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。\n\n需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。\n\n## 最基本的用法\nSSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。\n```bash\n$ ssh user@host\n```\n\n如果本地用户名与远程用户名一致，登录时可以省略用户名。\n```bash\n$ ssh host\n```\n\nSSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。\n```bash\n$ ssh -p 2222 user@host\n```\n\n上面这条命令表示，ssh直接连接远程主机的2222端口。\n\n## 中间人攻击\nSSH之所以能够保证安全，原因在于它采用了公钥加密。\n\n整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。\n\n这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。\n\n可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的\"中间人攻击\"（Man-in-the-middle attack）。\n\nSSH协议是如何应对的呢？\n\n## 口令登录\n如果你是第一次登录对方主机，系统会出现下面的提示：\n```\n$ ssh user@host\n\nThe authenticity of host 'host (12.18.429.21)' can't be established.\n\nRSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.\n\nAre you sure you want to continue connecting (yes/no)?\n```\n\n这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？\n\n所谓\"公钥指纹\"，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是`98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d`，再进行比较，就容易多了。\n\n很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。\n\n假定经过风险衡量以后，用户决定接受这个远程主机的公钥。\n\n```\nAre you sure you want to continue connecting (yes/no)? yes\n```\n\n系统会出现一句提示，表示host主机已经得到认可。\n\n```\nWarning: Permanently added 'host,12.18.429.21' (RSA) to the list of known hosts.\n```\n\n然后，会要求输入密码。\n\n```\nPassword: (enter password)\n```\n\n如果密码正确，就可以登录了。\n\n当远程主机的公钥被接受以后，它就会被保存在文件`$HOME/.ssh/known_hosts`之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。\n\n每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是`/etc/ssh/ssh_known_hosts`，保存一些对所有用户都可信赖的远程主机的公钥。\n\n## 公钥登录\n使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。\n\n所谓\"公钥登录\"，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。\n\n这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：\n\n```\n$ ssh-keygen\n```\n\n运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。\n\n运行结束以后，在`$HOME/.ssh/`目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。\n\n这时再输入下面的命令，将公钥传送到远程主机host上面：\n\n```\n$ ssh-copy-id user@host\n```\n\n好了，从此你再登录，就不需要输入密码了。\n\n如果还是不行，就打开远程主机的`/etc/ssh/sshd_config`这个文件，检查下面几行前面\"#\"注释是否取掉。\n\n```\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\n```\n\n然后，重启远程主机的ssh服务。\n\n```bash\n// ubuntu系统\nservice ssh restart\n\n// debian系统\n/etc/init.d/ssh restart\n```\n\n## authorized_keys文件\n远程主机将用户的公钥，保存在登录后的用户主目录的`$HOME/.ssh/authorized_keys`文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。\n\n这里不使用上面的`ssh-copy-id`命令，改用下面的命令，解释公钥的保存过程：\n\n```bash\n$ ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n\n这条命令由多个语句组成，依次分解开来看：\n1. `$ ssh user@host`，表示登录远程主机；\n1. 单引号中的`mkdir .ssh && cat >> .ssh/authorized_keys`，表示登录后在远程shell上执行的命令：\n1. `$ mkdir -p .ssh`的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；\n1. `cat >> .ssh/authorized_keys < ~/.ssh/id_rsa.pub`的作用是，将本地的公钥文件`~/.ssh/id_rsa.pub`，重定向追加到远程文件authorized_keys的末尾。\n\n写入authorized_keys文件后，公钥登录的设置就完成了。\n\n## 远程操作\nSSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。\n\n上一节的操作，就是一个例子：\n\n```\n$ ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n\n单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过SSH传向远程主机。\n\n这就是说，SSH可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过SSH来完成。\n\n下面看几个例子。\n\n【例1】\n\n将`$HOME/src/`目录下面的所有文件，复制到远程主机的`$HOME/src/`目录。\n\n```bash\n$ cd && tar czv src | ssh user@host 'tar xz'\n```\n\n【例2】\n\n将远程主机`$HOME/src/`目录下面的所有文件，复制到用户的当前目录。\n\n```bash\n$ ssh user@host 'tar cz src' | tar xzv\n```\n\n【例3】\n\n查看远程主机是否运行进程httpd。\n\n```bash\n$ ssh user@host 'ps ax | grep [h]ttpd'\n```\n\n## 绑定本地端口\n既然SSH可以传送数据，那么我们可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性。\n\n假定我们要让8080端口的数据，都通过SSH传向远程主机，命令就这样写：\n\n```bash\n$ ssh -D 8080 user@host\n```\n\n## ssh 账号密码连接\n\n\n\n## ssh 密钥连接","slug":"Linux 教程/SSH原理与运用（一）：远程登录","published":1,"updated":"2020-04-12T08:28:29.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mb900blm33pec5wzdzx","content":"<p>SSH是每一台Linux电脑的标准配置。</p>\n<h2 id=\"什么是SSH？\"><a href=\"#什么是SSH？\" class=\"headerlink\" title=\"什么是SSH？\"></a>什么是SSH？</h2><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。</p>\n<p>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p>\n<p>最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p>\n<p>需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。</p>\n<h2 id=\"最基本的用法\"><a href=\"#最基本的用法\" class=\"headerlink\" title=\"最基本的用法\"></a>最基本的用法</h2><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br></pre></td></tr></table></figure></p>\n<p>如果本地用户名与远程用户名一致，登录时可以省略用户名。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh host</span><br></pre></td></tr></table></figure></p>\n<p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -p 2222 user@host</span><br></pre></td></tr></table></figure></p>\n<p>上面这条命令表示，ssh直接连接远程主机的2222端口。</p>\n<h2 id=\"中间人攻击\"><a href=\"#中间人攻击\" class=\"headerlink\" title=\"中间人攻击\"></a>中间人攻击</h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。</p>\n<p>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>\n<p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p>\n<p>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</p>\n<p>SSH协议是如何应对的呢？</p>\n<h2 id=\"口令登录\"><a href=\"#口令登录\" class=\"headerlink\" title=\"口令登录\"></a>口令登录</h2><p>如果你是第一次登录对方主机，系统会出现下面的提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br><span class=\"line\"></span><br><span class=\"line\">The authenticity of host &apos;host (12.18.429.21)&apos; can&apos;t be established.</span><br><span class=\"line\"></span><br><span class=\"line\">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span><br><span class=\"line\"></span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure></p>\n<p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</p>\n<p>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>，再进行比较，就容易多了。</p>\n<p>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p>\n<p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br></pre></td></tr></table></figure>\n<p>系统会出现一句提示，表示host主机已经得到认可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Permanently added &apos;host,12.18.429.21&apos; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure>\n<p>然后，会要求输入密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Password: (enter password)</span><br></pre></td></tr></table></figure>\n<p>如果密码正确，就可以登录了。</p>\n<p>当远程主机的公钥被接受以后，它就会被保存在文件<code>$HOME/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p>\n<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是<code>/etc/ssh/ssh_known_hosts</code>，保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<h2 id=\"公钥登录\"><a href=\"#公钥登录\" class=\"headerlink\" title=\"公钥登录\"></a>公钥登录</h2><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p>\n<p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p>\n<p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</p>\n<p>运行结束以后，在<code>$HOME/.ssh/</code>目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。</p>\n<p>这时再输入下面的命令，将公钥传送到远程主机host上面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-copy-id user@host</span><br></pre></td></tr></table></figure>\n<p>好了，从此你再登录，就不需要输入密码了。</p>\n<p>如果还是不行，就打开远程主机的<code>/etc/ssh/sshd_config</code>这个文件，检查下面几行前面”#”注释是否取掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>然后，重启远程主机的ssh服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ubuntu系统</span><br><span class=\"line\">service ssh restart</span><br><span class=\"line\"></span><br><span class=\"line\">// debian系统</span><br><span class=\"line\">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"authorized-keys文件\"><a href=\"#authorized-keys文件\" class=\"headerlink\" title=\"authorized_keys文件\"></a>authorized_keys文件</h2><p>远程主机将用户的公钥，保存在登录后的用户主目录的<code>$HOME/.ssh/authorized_keys</code>文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。</p>\n<p>这里不使用上面的<code>ssh-copy-id</code>命令，改用下面的命令，解释公钥的保存过程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host <span class=\"string\">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>这条命令由多个语句组成，依次分解开来看：</p>\n<ol>\n<li><code>$ ssh user@host</code>，表示登录远程主机；</li>\n<li>单引号中的<code>mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys</code>，表示登录后在远程shell上执行的命令：</li>\n<li><code>$ mkdir -p .ssh</code>的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；</li>\n<li><code>cat &gt;&gt; .ssh/authorized_keys &lt; ~/.ssh/id_rsa.pub</code>的作用是，将本地的公钥文件<code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件authorized_keys的末尾。</li>\n</ol>\n<p>写入authorized_keys文件后，公钥登录的设置就完成了。</p>\n<h2 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h2><p>SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。</p>\n<p>上一节的操作，就是一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host &apos;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&apos; &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过SSH传向远程主机。</p>\n<p>这就是说，SSH可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过SSH来完成。</p>\n<p>下面看几个例子。</p>\n<p>【例1】</p>\n<p>将<code>$HOME/src/</code>目录下面的所有文件，复制到远程主机的<code>$HOME/src/</code>目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &amp;&amp; tar czv src | ssh user@host <span class=\"string\">'tar xz'</span></span><br></pre></td></tr></table></figure>\n<p>【例2】</p>\n<p>将远程主机<code>$HOME/src/</code>目录下面的所有文件，复制到用户的当前目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host <span class=\"string\">'tar cz src'</span> | tar xzv</span><br></pre></td></tr></table></figure>\n<p>【例3】</p>\n<p>查看远程主机是否运行进程httpd。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host <span class=\"string\">'ps ax | grep [h]ttpd'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"绑定本地端口\"><a href=\"#绑定本地端口\" class=\"headerlink\" title=\"绑定本地端口\"></a>绑定本地端口</h2><p>既然SSH可以传送数据，那么我们可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性。</p>\n<p>假定我们要让8080端口的数据，都通过SSH传向远程主机，命令就这样写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -D 8080 user@host</span><br></pre></td></tr></table></figure>\n<h2 id=\"ssh-账号密码连接\"><a href=\"#ssh-账号密码连接\" class=\"headerlink\" title=\"ssh 账号密码连接\"></a>ssh 账号密码连接</h2><h2 id=\"ssh-密钥连接\"><a href=\"#ssh-密钥连接\" class=\"headerlink\" title=\"ssh 密钥连接\"></a>ssh 密钥连接</h2>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>SSH是每一台Linux电脑的标准配置。</p>\n<h2 id=\"什么是SSH？\"><a href=\"#什么是SSH？\" class=\"headerlink\" title=\"什么是SSH？\"></a>什么是SSH？</h2><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。</p>\n<p>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p>\n<p>最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p>\n<p>需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。</p>\n<h2 id=\"最基本的用法\"><a href=\"#最基本的用法\" class=\"headerlink\" title=\"最基本的用法\"></a>最基本的用法</h2><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br></pre></td></tr></table></figure></p>\n<p>如果本地用户名与远程用户名一致，登录时可以省略用户名。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh host</span><br></pre></td></tr></table></figure></p>\n<p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -p 2222 user@host</span><br></pre></td></tr></table></figure></p>\n<p>上面这条命令表示，ssh直接连接远程主机的2222端口。</p>\n<h2 id=\"中间人攻击\"><a href=\"#中间人攻击\" class=\"headerlink\" title=\"中间人攻击\"></a>中间人攻击</h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。</p>\n<p>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>\n<p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p>\n<p>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</p>\n<p>SSH协议是如何应对的呢？</p>\n<h2 id=\"口令登录\"><a href=\"#口令登录\" class=\"headerlink\" title=\"口令登录\"></a>口令登录</h2><p>如果你是第一次登录对方主机，系统会出现下面的提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br><span class=\"line\"></span><br><span class=\"line\">The authenticity of host &apos;host (12.18.429.21)&apos; can&apos;t be established.</span><br><span class=\"line\"></span><br><span class=\"line\">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span><br><span class=\"line\"></span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure></p>\n<p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</p>\n<p>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>，再进行比较，就容易多了。</p>\n<p>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p>\n<p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br></pre></td></tr></table></figure>\n<p>系统会出现一句提示，表示host主机已经得到认可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Permanently added &apos;host,12.18.429.21&apos; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure>\n<p>然后，会要求输入密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Password: (enter password)</span><br></pre></td></tr></table></figure>\n<p>如果密码正确，就可以登录了。</p>\n<p>当远程主机的公钥被接受以后，它就会被保存在文件<code>$HOME/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p>\n<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是<code>/etc/ssh/ssh_known_hosts</code>，保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<h2 id=\"公钥登录\"><a href=\"#公钥登录\" class=\"headerlink\" title=\"公钥登录\"></a>公钥登录</h2><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p>\n<p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p>\n<p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</p>\n<p>运行结束以后，在<code>$HOME/.ssh/</code>目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。</p>\n<p>这时再输入下面的命令，将公钥传送到远程主机host上面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-copy-id user@host</span><br></pre></td></tr></table></figure>\n<p>好了，从此你再登录，就不需要输入密码了。</p>\n<p>如果还是不行，就打开远程主机的<code>/etc/ssh/sshd_config</code>这个文件，检查下面几行前面”#”注释是否取掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>然后，重启远程主机的ssh服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ubuntu系统</span><br><span class=\"line\">service ssh restart</span><br><span class=\"line\"></span><br><span class=\"line\">// debian系统</span><br><span class=\"line\">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"authorized-keys文件\"><a href=\"#authorized-keys文件\" class=\"headerlink\" title=\"authorized_keys文件\"></a>authorized_keys文件</h2><p>远程主机将用户的公钥，保存在登录后的用户主目录的<code>$HOME/.ssh/authorized_keys</code>文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。</p>\n<p>这里不使用上面的<code>ssh-copy-id</code>命令，改用下面的命令，解释公钥的保存过程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host <span class=\"string\">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>这条命令由多个语句组成，依次分解开来看：</p>\n<ol>\n<li><code>$ ssh user@host</code>，表示登录远程主机；</li>\n<li>单引号中的<code>mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys</code>，表示登录后在远程shell上执行的命令：</li>\n<li><code>$ mkdir -p .ssh</code>的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；</li>\n<li><code>cat &gt;&gt; .ssh/authorized_keys &lt; ~/.ssh/id_rsa.pub</code>的作用是，将本地的公钥文件<code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件authorized_keys的末尾。</li>\n</ol>\n<p>写入authorized_keys文件后，公钥登录的设置就完成了。</p>\n<h2 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h2><p>SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。</p>\n<p>上一节的操作，就是一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host &apos;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&apos; &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过SSH传向远程主机。</p>\n<p>这就是说，SSH可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过SSH来完成。</p>\n<p>下面看几个例子。</p>\n<p>【例1】</p>\n<p>将<code>$HOME/src/</code>目录下面的所有文件，复制到远程主机的<code>$HOME/src/</code>目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &amp;&amp; tar czv src | ssh user@host <span class=\"string\">'tar xz'</span></span><br></pre></td></tr></table></figure>\n<p>【例2】</p>\n<p>将远程主机<code>$HOME/src/</code>目录下面的所有文件，复制到用户的当前目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host <span class=\"string\">'tar cz src'</span> | tar xzv</span><br></pre></td></tr></table></figure>\n<p>【例3】</p>\n<p>查看远程主机是否运行进程httpd。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host <span class=\"string\">'ps ax | grep [h]ttpd'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"绑定本地端口\"><a href=\"#绑定本地端口\" class=\"headerlink\" title=\"绑定本地端口\"></a>绑定本地端口</h2><p>既然SSH可以传送数据，那么我们可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性。</p>\n<p>假定我们要让8080端口的数据，都通过SSH传向远程主机，命令就这样写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -D 8080 user@host</span><br></pre></td></tr></table></figure>\n<h2 id=\"ssh-账号密码连接\"><a href=\"#ssh-账号密码连接\" class=\"headerlink\" title=\"ssh 账号密码连接\"></a>ssh 账号密码连接</h2><h2 id=\"ssh-密钥连接\"><a href=\"#ssh-密钥连接\" class=\"headerlink\" title=\"ssh 密钥连接\"></a>ssh 密钥连接</h2>"},{"title":"3.3 mysqldump方式","date":"2020-03-08T16:00:03.000Z","_content":"mysqldump是MySQL自带的逻辑备份工具。它的原理是，通过协议连接到MySQL数据库，将需要备份的数据查询出来转化成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句即可。\n\nmysqldump是一个客户端工具，所有当它连接数据库时，也会读取MySQL数据库的配置文件，加载跟客户端相关的配置。\n\n#### 尝试\n\n## 常用命令\n#### 将数据库aonitask备份信息输出到屏幕上（不带数据库）\n```bash\n[root@vultrguest mysql]# mysqldump -uroot aonitask -p\nEnter password: \n-- MySQL dump 10.13  Distrib 8.0.17, for Linux (x86_64)\n--\n-- Host: localhost    Database: aonitask\n-- ------------------------------------------------------\n-- Server version\t8.0.17\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!50503 SET NAMES utf8mb4 */;\n/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;\n/*!40103 SET TIME_ZONE='+00:00' */;\n/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;\n/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;\n\n--\n-- Table structure for table `po_banner`\n--\n\nDROP TABLE IF EXISTS `po_banner`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!50503 SET character_set_client = utf8mb4 */;\nCREATE TABLE `po_banner` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `creator` varchar(64) NOT NULL DEFAULT '[SYS]' COMMENT '创建者id',\n  `gmt_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `gmt_modified` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',\n  `is_deleted` char(1) NOT NULL DEFAULT 'n' COMMENT '是否已删除 y:已删除 n:未删除',\n  `modifier` varchar(64) NOT NULL DEFAULT '[SYS]' COMMENT '修改者id',\n  `image_key` varchar(64) NOT NULL COMMENT '图片Key',\n  `image_link` varchar(512) NOT NULL COMMENT '链接地址',\n  `release_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '发布时间',\n  `status` char(1) DEFAULT 'n' COMMENT '状态 n-下线 y-上线',\n  `title` varchar(64) NOT NULL COMMENT '标题',\n  PRIMARY KEY (`id`),\n  KEY `isDeleted` (`is_deleted`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='广告表';\n/*!40101 SET character_set_client = @saved_cs_client */;\n\n--\n-- Dumping data for table `po_banner`\n--\n\nLOCK TABLES `po_banner` WRITE;\n/*!40000 ALTER TABLE `po_banner` DISABLE KEYS */;\nINSERT INTO `po_banner` VALUES (1,'[SYS]','2020-03-08 18:39:10','2020-03-08 18:49:11','n','[SYS]','1','1','2020-03-08 18:39:10','n','123');\n/*!40000 ALTER TABLE `po_banner` ENABLE KEYS */;\nUNLOCK TABLES;\n/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;\n\n/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;\n/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;\n/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;\n\n-- Dump completed on 2020-03-08 19:15:37\n```\n\n#### 将数据库aonitask备份信息写入aonitask.sql脚本（不带数据库）\n```bash\n[root@vultrguest /]# mysqldump -uroot aonitask > /backup/aonitask.sql -p\nEnter password: \n[root@vultrguest /]# ll /backup\ntotal 4\n-rw-r--r--. 1 root root 2827 Mar  8 19:21 aonitask.sql\n```\n\n#### 将数据库aonitask备份信息写入aonitask.sql脚本（带数据库）\n使用--databases选项指定数据库时，即可在备份时生成创建数据库的语句。\n```bash\n[root@vultrguest /]# mysqldump -uroot --databases aonitask > /backup/aonitask.sql -p\nEnter password: \n[root@vultrguest /]# cat /backup/aonitask.sql \n-- MySQL dump 10.13  Distrib 8.0.17, for Linux (x86_64)\n...\n\n--\n-- Current Database: `aonitask`\n--\n\nCREATE DATABASE /*!32312 IF NOT EXISTS*/ `aonitask` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;\n\nUSE `aonitask`;\n\n--\n-- Table structure for table `po_banner`\n--\n...\n```\n\n#### 备份aonitask中的所有表，但不生成创建aonitask的语句\n```bash\n[root@vultrguest /]# mysqldump -uroot aonitask -p\nEnter password: \n```\n\n#### 备份aonitask中的所有表，同时生成创建aonitask的语句\n```bash\n[root@vultrguest /]# mysqldump -uroot --databases aonitask -p\nEnter password: \n```\n\n#### 备份aonitask中的t1、t2表，同时生成创建aonitask的语句\n```bash\n[root@vultrguest /]# mysqldump -uroot --databases aonitask t1 t2 -p\nEnter password: \n```\n\n#### 备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句\n```bash\n[root@vultrguest /]# mysqldump -uroot --databases aonitask1 aonitask2 -p\nEnter password: \n```\n\n#### 只备份表结构，不备份数据\n```bash\n[root@vultrguest /]# mysqldump -uroot --databases -d aonitask -p\nEnter password: \n```\n\n\n\n#### 备份所有的数据库\n```bash\n[root@vultrguest /]# mysqldump -uroot --all-databases -p\nEnter password: \n```\n\n#### 导出所有库\n```bash\nmysqldump -uusername -ppassword --all-databases > all.sql\n```\n\n#### 导入所有库\n```bash\nmysql>source all.sql;\n```\n\n#### 导出某些库\n```bash\nmysqldump -uusername -ppassword --databases db1 db2 > db1db2.sql\n```\n\n#### 导入某些库\n```bash\nmysql>source db1db2.sql;\n```\n\n#### 导入某个库\n```bash\nmysql>ource db1.sql;\n```\n\n#### 导出某些数据表\n```bash\nmysqldump -uusername -ppassword db1 table1 table2 > tb1tb2.sql\n```\n\n#### 导入某些数据表\n```bash\nmysql -uusername -ppassword db1 < tb1tb2.sql\n```\n\n或者MySQL命令行：\n```sql\nuser db1;\nsource tb1tb2.sql;\n```\n\n#### mysqldump字符集设置\n```bash\nmysqldump -uusername -ppassword --default-character-set=gb2312 db1 table1 > tb1.sql\n```\n\n## 常用选项\n#### --master-data\n--master-data可以记录备份日志的还原点，有3个选值：\n1. 0: 表示在备份时，不记录对应二进制日志文件的位置，和不使用此选项一样\n1. 1: 表示在备份时，在备份文件中生成对应的`CHANGE MASTER TO`语句，标明此次备份开始时二进制日志的前缀名以及其所处的position（位置）\n1. 3: 跟选项2一样，只不过此条语句是注释状态的\n\n```bash\n[root@vultrguest ~]# mysqldump -uroot --master-data=2 aonitask -p\nEnter password: \n-- MySQL dump 10.13  Distrib 8.0.17, for Linux (x86_64)\n...\n\n--\n-- Position to start replication or point-in-time recovery from\n--\n\n-- CHANGE MASTER TO MASTER_LOG_FILE='binlog.000002', MASTER_LOG_POS=2946;\n\n--\n-- Table structure for table `po_banner`\n--\n...\n```\n\n#### --fulsh-logs\n即生成新日志，例如当前二进制日志是binlog.000002，调用`mysqladmin flush-logs`后，即生成binlog.000003，后续的操作会写入binlog.000003中。所以我们可以每小时调用此命令以达到增量备份的效果。\n\n```bash\n# 生成备份，刷新二进制日志，并清空旧日志\n[root@vultrguest mysql]# mysqldump -uroot -p --flush-logs --delete-master-logs --all-databases\n```\n\n\n#### 其它常用选项\n在数据库中，还存在一些存储过程和存储函数，存在一些触发器、事件表，这些东西也需要备份以免最终的备份“不全”：\n- --events选项：表示备份时，事件表会被备份\n- --routines选项：表示备份时，存储过程和存储函数也会被备份\n- --triggers选项：表示备份时，触发器会被备份\n\n## 自动化脚本\n#### 备份脚本\n文件放置于/usr/local/script/backup_database.sh，确保mysqldump命令可用。\n\n```bash\n#!/bin/bash  \n#Shell Command For Backup MySQL Database Everyday Automatically By Crontab  \n#time 2015-5-20 \n    #name huxianglin \nUSER=root \nPASSWORD=1 \nDATABASE1=aonitask \nBACKUP_DIR=/data/backup/database/                       # 备份数据库文件的路径 \nLOGFILE=/data/backup/database/data_backup.log           # 备份数据库脚本的日志文件 \nDATE=`date +%Y%m%d-%H%M -d -3minute`                    # 获取当前系统时间-3分钟 \nDUMPFILE1=$DATE-zblog.sql                               # 需要备份的数据库名称 \nARCHIVE1=$DUMPFILE1-tar.gz                              # 备份的数据库压缩后的名称 \n\nif [ ! -d $BACKUP_DIR ];                                # 判断备份路径是否存在，若不存在则创建该路径 \nthen  \nmkdir -p \"$BACKUP_DIR\" \nfi  \n\necho -e \"\\n\" >> $LOGFILE   \necho \"------------------------------------\" >> $LOGFILE  \necho \"BACKUP DATE:$DATE\">> $LOGFILE  \necho \"------------------------------------\" >> $LOGFILE  \n\ncd $BACKUP_DIR                                          #跳到备份路径下 \nmysqldump -u$USER -p$PASSWORD $DATABASE1 > $DUMPFILE1   #使用mysqldump备份数据库 \nif [[ $? == 0 ]]; then \ntar czvf $ARCHIVE1 $DUMPFILE1 >> $LOGFILE 2>&1          #判断是否备份成功，若备份成功，则压缩备份数据库，否则将错误日志写入日志文件中去。 \necho \"$ARCHIVE1 BACKUP SUCCESSFUL!\" >> $LOGFILE  \nrm -f $DUMPFILE1 \nelse  \necho “$ARCHIVE1 Backup Fail!” >> $LOGFILE  \nfi \n```\n\n#### 删除过时备份脚本\n/usr/local/script/clean_database.sh\n\n```bash\n#!/bin/bash \n#time 2015-05-21 \n#name huxianglin \n\nBACKUPDIR=\"/data/backup/database/\"                                     #定义备份文件路径 \nKEEPTIME=7                                                             #定义需要删除的文件距离当前的天数 \nDELFILE=`find $BACKUPDIR -type f -mtime +$KEEPTIME -exec ls {} \\;`     #找到天数大于7天的文件 \nfor delfile in ${DELFILE}                                              #循环删除满足天数大于七天的文件 \ndo \nrm -f $delfile \ndone \n```\n\n#### 定时执行脚本\n/usr/local/script/crontab.sh\n\n```bash\nSHELL=/bin/bash \nPATH=/sbin:/bin:/usr/sbin:/usr/bin \nMAILTO=root \n# For details see man 4 crontabs \n# Example of job definition: \n# .---------------- minute (0 - 59) \n# |  .------------- hour (0 - 23) \n# |  |  .---------- day of month (1 - 31) \n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... \n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat \n# |  |  |  |  | \n# *  *  *  *  * user-name  command to be executed \n  01 00 * * * root /usr/local/script/backup_database.sh              #定义每天凌晨0点01分执行备份数据库脚本 \n  02 00 * * 0 root /usr/local/script/clean_database.sh               #定义每周日凌晨0点02分执行删除数据库备份文件 \n```\n\n## 实战\n在对数据库进行一次全量备份和N次增量备份后，删库删表，然后尝试恢复。\n\n#### 原始数据\n```bash\nmysql> select id, image_key, image_link, title from po_banner;\n+----+-----------+------------+-------+\n| id | image_key | image_link | title |\n+----+-----------+------------+-------+\n|  1 | 1         | 1          | 123   |\n|  2 | 111       | 222        | 333   |\n+----+-----------+------------+-------+\n2 rows in set (0.00 sec)\n```\n#### 全量备份\n```bash\n[root@vultrguest mysql]# mysqldump -uroot -p --single-transaction --master-data=2 --routines --flush-logs --all-databases > /backup/alldb.sql;\n```\n\n#### 增量备份\n```bash\n# change id = 1, image_key = 1_change > binlog.000002\n[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs\n\n# change id = 1, image_link = 1_change > binlog.000003\n[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs\n\n# change id = 1, title = 1_change > binlog.000004\n[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs\n\nmysql> select id, image_key, image_link, title from po_banner;\n+----+-----------+------------+----------+\n| id | image_key | image_link | title    |\n+----+-----------+------------+----------+\n|  1 | 1_change  | 1_change   | 1_change |\n|  2 | 111       | 222        | 333      |\n+----+-----------+------------+----------+\n2 rows in set (0.00 sec)\n```\n\n#### 模拟误删数据\n```bash\n# 将日志切换到binlog.000005\n[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs\n\n# 模拟误删数据...\n\n# 查看数据\nmysql> select id, image_key, image_link, title from po_banner;\n+----+-----------+------------+-------+\n| id | image_key | image_link | title |\n+----+-----------+------------+-------+\n|  2 | 111       | 222        | 333   |\n+----+-----------+------------+-------+\n1 row in set (0.00 sec)\n```\n\n#### 恢复全量数据\n恢复数据前先关闭数据写入。\n\n```bash\n[root@vultrguest mysql]# mysql -uroot -p1 -e 'source /backup/alldb.sql;'\nmysql: [Warning] Using a password on the command line interface can be insecure.\n\nmysql> select id, image_key, image_link, title from po_banner;\n+----+-----------+------------+-------+\n| id | image_key | image_link | title |\n+----+-----------+------------+-------+\n|  1 | 1         | 1          | 123   |\n|  2 | 111       | 222        | 333   |\n+----+-----------+------------+-------+\n2 rows in set (0.00 sec)\n```\n\n#### 恢复增量数据\n```bash\n[root@vultrguest mysql]# mysqlbinlog binlog.000002 binlog.000003 binlog.000004 | mysql -uroot -p1\nmysql: [Warning] Using a password on the command line interface can be insecure.\n\nmysql> select id, image_key, image_link, title from po_banner;\n+----+-----------+------------+----------+\n| id | image_key | image_link | title    |\n+----+-----------+------------+----------+\n|  1 | 1_change  | 1_change   | 1_change |\n|  2 | 111       | 222        | 333      |\n+----+-----------+------------+----------+\n2 rows in set (0.00 sec)\n```","source":"_posts/MySQL 教程/3.3 mysqldump方式.md","raw":"---\ntitle: 3.3 mysqldump方式\n\ncategories:\n- MySQL教程\n\ndate: 2020-03-09 00:00:03\n---\nmysqldump是MySQL自带的逻辑备份工具。它的原理是，通过协议连接到MySQL数据库，将需要备份的数据查询出来转化成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句即可。\n\nmysqldump是一个客户端工具，所有当它连接数据库时，也会读取MySQL数据库的配置文件，加载跟客户端相关的配置。\n\n#### 尝试\n\n## 常用命令\n#### 将数据库aonitask备份信息输出到屏幕上（不带数据库）\n```bash\n[root@vultrguest mysql]# mysqldump -uroot aonitask -p\nEnter password: \n-- MySQL dump 10.13  Distrib 8.0.17, for Linux (x86_64)\n--\n-- Host: localhost    Database: aonitask\n-- ------------------------------------------------------\n-- Server version\t8.0.17\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!50503 SET NAMES utf8mb4 */;\n/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;\n/*!40103 SET TIME_ZONE='+00:00' */;\n/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;\n/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;\n\n--\n-- Table structure for table `po_banner`\n--\n\nDROP TABLE IF EXISTS `po_banner`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!50503 SET character_set_client = utf8mb4 */;\nCREATE TABLE `po_banner` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `creator` varchar(64) NOT NULL DEFAULT '[SYS]' COMMENT '创建者id',\n  `gmt_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `gmt_modified` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',\n  `is_deleted` char(1) NOT NULL DEFAULT 'n' COMMENT '是否已删除 y:已删除 n:未删除',\n  `modifier` varchar(64) NOT NULL DEFAULT '[SYS]' COMMENT '修改者id',\n  `image_key` varchar(64) NOT NULL COMMENT '图片Key',\n  `image_link` varchar(512) NOT NULL COMMENT '链接地址',\n  `release_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '发布时间',\n  `status` char(1) DEFAULT 'n' COMMENT '状态 n-下线 y-上线',\n  `title` varchar(64) NOT NULL COMMENT '标题',\n  PRIMARY KEY (`id`),\n  KEY `isDeleted` (`is_deleted`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='广告表';\n/*!40101 SET character_set_client = @saved_cs_client */;\n\n--\n-- Dumping data for table `po_banner`\n--\n\nLOCK TABLES `po_banner` WRITE;\n/*!40000 ALTER TABLE `po_banner` DISABLE KEYS */;\nINSERT INTO `po_banner` VALUES (1,'[SYS]','2020-03-08 18:39:10','2020-03-08 18:49:11','n','[SYS]','1','1','2020-03-08 18:39:10','n','123');\n/*!40000 ALTER TABLE `po_banner` ENABLE KEYS */;\nUNLOCK TABLES;\n/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;\n\n/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;\n/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;\n/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;\n\n-- Dump completed on 2020-03-08 19:15:37\n```\n\n#### 将数据库aonitask备份信息写入aonitask.sql脚本（不带数据库）\n```bash\n[root@vultrguest /]# mysqldump -uroot aonitask > /backup/aonitask.sql -p\nEnter password: \n[root@vultrguest /]# ll /backup\ntotal 4\n-rw-r--r--. 1 root root 2827 Mar  8 19:21 aonitask.sql\n```\n\n#### 将数据库aonitask备份信息写入aonitask.sql脚本（带数据库）\n使用--databases选项指定数据库时，即可在备份时生成创建数据库的语句。\n```bash\n[root@vultrguest /]# mysqldump -uroot --databases aonitask > /backup/aonitask.sql -p\nEnter password: \n[root@vultrguest /]# cat /backup/aonitask.sql \n-- MySQL dump 10.13  Distrib 8.0.17, for Linux (x86_64)\n...\n\n--\n-- Current Database: `aonitask`\n--\n\nCREATE DATABASE /*!32312 IF NOT EXISTS*/ `aonitask` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;\n\nUSE `aonitask`;\n\n--\n-- Table structure for table `po_banner`\n--\n...\n```\n\n#### 备份aonitask中的所有表，但不生成创建aonitask的语句\n```bash\n[root@vultrguest /]# mysqldump -uroot aonitask -p\nEnter password: \n```\n\n#### 备份aonitask中的所有表，同时生成创建aonitask的语句\n```bash\n[root@vultrguest /]# mysqldump -uroot --databases aonitask -p\nEnter password: \n```\n\n#### 备份aonitask中的t1、t2表，同时生成创建aonitask的语句\n```bash\n[root@vultrguest /]# mysqldump -uroot --databases aonitask t1 t2 -p\nEnter password: \n```\n\n#### 备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句\n```bash\n[root@vultrguest /]# mysqldump -uroot --databases aonitask1 aonitask2 -p\nEnter password: \n```\n\n#### 只备份表结构，不备份数据\n```bash\n[root@vultrguest /]# mysqldump -uroot --databases -d aonitask -p\nEnter password: \n```\n\n\n\n#### 备份所有的数据库\n```bash\n[root@vultrguest /]# mysqldump -uroot --all-databases -p\nEnter password: \n```\n\n#### 导出所有库\n```bash\nmysqldump -uusername -ppassword --all-databases > all.sql\n```\n\n#### 导入所有库\n```bash\nmysql>source all.sql;\n```\n\n#### 导出某些库\n```bash\nmysqldump -uusername -ppassword --databases db1 db2 > db1db2.sql\n```\n\n#### 导入某些库\n```bash\nmysql>source db1db2.sql;\n```\n\n#### 导入某个库\n```bash\nmysql>ource db1.sql;\n```\n\n#### 导出某些数据表\n```bash\nmysqldump -uusername -ppassword db1 table1 table2 > tb1tb2.sql\n```\n\n#### 导入某些数据表\n```bash\nmysql -uusername -ppassword db1 < tb1tb2.sql\n```\n\n或者MySQL命令行：\n```sql\nuser db1;\nsource tb1tb2.sql;\n```\n\n#### mysqldump字符集设置\n```bash\nmysqldump -uusername -ppassword --default-character-set=gb2312 db1 table1 > tb1.sql\n```\n\n## 常用选项\n#### --master-data\n--master-data可以记录备份日志的还原点，有3个选值：\n1. 0: 表示在备份时，不记录对应二进制日志文件的位置，和不使用此选项一样\n1. 1: 表示在备份时，在备份文件中生成对应的`CHANGE MASTER TO`语句，标明此次备份开始时二进制日志的前缀名以及其所处的position（位置）\n1. 3: 跟选项2一样，只不过此条语句是注释状态的\n\n```bash\n[root@vultrguest ~]# mysqldump -uroot --master-data=2 aonitask -p\nEnter password: \n-- MySQL dump 10.13  Distrib 8.0.17, for Linux (x86_64)\n...\n\n--\n-- Position to start replication or point-in-time recovery from\n--\n\n-- CHANGE MASTER TO MASTER_LOG_FILE='binlog.000002', MASTER_LOG_POS=2946;\n\n--\n-- Table structure for table `po_banner`\n--\n...\n```\n\n#### --fulsh-logs\n即生成新日志，例如当前二进制日志是binlog.000002，调用`mysqladmin flush-logs`后，即生成binlog.000003，后续的操作会写入binlog.000003中。所以我们可以每小时调用此命令以达到增量备份的效果。\n\n```bash\n# 生成备份，刷新二进制日志，并清空旧日志\n[root@vultrguest mysql]# mysqldump -uroot -p --flush-logs --delete-master-logs --all-databases\n```\n\n\n#### 其它常用选项\n在数据库中，还存在一些存储过程和存储函数，存在一些触发器、事件表，这些东西也需要备份以免最终的备份“不全”：\n- --events选项：表示备份时，事件表会被备份\n- --routines选项：表示备份时，存储过程和存储函数也会被备份\n- --triggers选项：表示备份时，触发器会被备份\n\n## 自动化脚本\n#### 备份脚本\n文件放置于/usr/local/script/backup_database.sh，确保mysqldump命令可用。\n\n```bash\n#!/bin/bash  \n#Shell Command For Backup MySQL Database Everyday Automatically By Crontab  \n#time 2015-5-20 \n    #name huxianglin \nUSER=root \nPASSWORD=1 \nDATABASE1=aonitask \nBACKUP_DIR=/data/backup/database/                       # 备份数据库文件的路径 \nLOGFILE=/data/backup/database/data_backup.log           # 备份数据库脚本的日志文件 \nDATE=`date +%Y%m%d-%H%M -d -3minute`                    # 获取当前系统时间-3分钟 \nDUMPFILE1=$DATE-zblog.sql                               # 需要备份的数据库名称 \nARCHIVE1=$DUMPFILE1-tar.gz                              # 备份的数据库压缩后的名称 \n\nif [ ! -d $BACKUP_DIR ];                                # 判断备份路径是否存在，若不存在则创建该路径 \nthen  \nmkdir -p \"$BACKUP_DIR\" \nfi  \n\necho -e \"\\n\" >> $LOGFILE   \necho \"------------------------------------\" >> $LOGFILE  \necho \"BACKUP DATE:$DATE\">> $LOGFILE  \necho \"------------------------------------\" >> $LOGFILE  \n\ncd $BACKUP_DIR                                          #跳到备份路径下 \nmysqldump -u$USER -p$PASSWORD $DATABASE1 > $DUMPFILE1   #使用mysqldump备份数据库 \nif [[ $? == 0 ]]; then \ntar czvf $ARCHIVE1 $DUMPFILE1 >> $LOGFILE 2>&1          #判断是否备份成功，若备份成功，则压缩备份数据库，否则将错误日志写入日志文件中去。 \necho \"$ARCHIVE1 BACKUP SUCCESSFUL!\" >> $LOGFILE  \nrm -f $DUMPFILE1 \nelse  \necho “$ARCHIVE1 Backup Fail!” >> $LOGFILE  \nfi \n```\n\n#### 删除过时备份脚本\n/usr/local/script/clean_database.sh\n\n```bash\n#!/bin/bash \n#time 2015-05-21 \n#name huxianglin \n\nBACKUPDIR=\"/data/backup/database/\"                                     #定义备份文件路径 \nKEEPTIME=7                                                             #定义需要删除的文件距离当前的天数 \nDELFILE=`find $BACKUPDIR -type f -mtime +$KEEPTIME -exec ls {} \\;`     #找到天数大于7天的文件 \nfor delfile in ${DELFILE}                                              #循环删除满足天数大于七天的文件 \ndo \nrm -f $delfile \ndone \n```\n\n#### 定时执行脚本\n/usr/local/script/crontab.sh\n\n```bash\nSHELL=/bin/bash \nPATH=/sbin:/bin:/usr/sbin:/usr/bin \nMAILTO=root \n# For details see man 4 crontabs \n# Example of job definition: \n# .---------------- minute (0 - 59) \n# |  .------------- hour (0 - 23) \n# |  |  .---------- day of month (1 - 31) \n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... \n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat \n# |  |  |  |  | \n# *  *  *  *  * user-name  command to be executed \n  01 00 * * * root /usr/local/script/backup_database.sh              #定义每天凌晨0点01分执行备份数据库脚本 \n  02 00 * * 0 root /usr/local/script/clean_database.sh               #定义每周日凌晨0点02分执行删除数据库备份文件 \n```\n\n## 实战\n在对数据库进行一次全量备份和N次增量备份后，删库删表，然后尝试恢复。\n\n#### 原始数据\n```bash\nmysql> select id, image_key, image_link, title from po_banner;\n+----+-----------+------------+-------+\n| id | image_key | image_link | title |\n+----+-----------+------------+-------+\n|  1 | 1         | 1          | 123   |\n|  2 | 111       | 222        | 333   |\n+----+-----------+------------+-------+\n2 rows in set (0.00 sec)\n```\n#### 全量备份\n```bash\n[root@vultrguest mysql]# mysqldump -uroot -p --single-transaction --master-data=2 --routines --flush-logs --all-databases > /backup/alldb.sql;\n```\n\n#### 增量备份\n```bash\n# change id = 1, image_key = 1_change > binlog.000002\n[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs\n\n# change id = 1, image_link = 1_change > binlog.000003\n[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs\n\n# change id = 1, title = 1_change > binlog.000004\n[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs\n\nmysql> select id, image_key, image_link, title from po_banner;\n+----+-----------+------------+----------+\n| id | image_key | image_link | title    |\n+----+-----------+------------+----------+\n|  1 | 1_change  | 1_change   | 1_change |\n|  2 | 111       | 222        | 333      |\n+----+-----------+------------+----------+\n2 rows in set (0.00 sec)\n```\n\n#### 模拟误删数据\n```bash\n# 将日志切换到binlog.000005\n[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs\n\n# 模拟误删数据...\n\n# 查看数据\nmysql> select id, image_key, image_link, title from po_banner;\n+----+-----------+------------+-------+\n| id | image_key | image_link | title |\n+----+-----------+------------+-------+\n|  2 | 111       | 222        | 333   |\n+----+-----------+------------+-------+\n1 row in set (0.00 sec)\n```\n\n#### 恢复全量数据\n恢复数据前先关闭数据写入。\n\n```bash\n[root@vultrguest mysql]# mysql -uroot -p1 -e 'source /backup/alldb.sql;'\nmysql: [Warning] Using a password on the command line interface can be insecure.\n\nmysql> select id, image_key, image_link, title from po_banner;\n+----+-----------+------------+-------+\n| id | image_key | image_link | title |\n+----+-----------+------------+-------+\n|  1 | 1         | 1          | 123   |\n|  2 | 111       | 222        | 333   |\n+----+-----------+------------+-------+\n2 rows in set (0.00 sec)\n```\n\n#### 恢复增量数据\n```bash\n[root@vultrguest mysql]# mysqlbinlog binlog.000002 binlog.000003 binlog.000004 | mysql -uroot -p1\nmysql: [Warning] Using a password on the command line interface can be insecure.\n\nmysql> select id, image_key, image_link, title from po_banner;\n+----+-----------+------------+----------+\n| id | image_key | image_link | title    |\n+----+-----------+------------+----------+\n|  1 | 1_change  | 1_change   | 1_change |\n|  2 | 111       | 222        | 333      |\n+----+-----------+------------+----------+\n2 rows in set (0.00 sec)\n```","slug":"MySQL 教程/3.3 mysqldump方式","published":1,"updated":"2020-04-12T08:28:29.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mbb00bmm33pgageg645","content":"<p>mysqldump是MySQL自带的逻辑备份工具。它的原理是，通过协议连接到MySQL数据库，将需要备份的数据查询出来转化成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句即可。</p>\n<p>mysqldump是一个客户端工具，所有当它连接数据库时，也会读取MySQL数据库的配置文件，加载跟客户端相关的配置。</p>\n<h4 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h4><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h4 id=\"将数据库aonitask备份信息输出到屏幕上（不带数据库）\"><a href=\"#将数据库aonitask备份信息输出到屏幕上（不带数据库）\" class=\"headerlink\" title=\"将数据库aonitask备份信息输出到屏幕上（不带数据库）\"></a>将数据库aonitask备份信息输出到屏幕上（不带数据库）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqldump -uroot aonitask -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">-- MySQL dump 10.13  Distrib 8.0.17, <span class=\"keyword\">for</span> Linux (x86_64)</span><br><span class=\"line\">--</span><br><span class=\"line\">-- Host: localhost    Database: aonitask</span><br><span class=\"line\">-- ------------------------------------------------------</span><br><span class=\"line\">-- Server version\t8.0.17</span><br><span class=\"line\"></span><br><span class=\"line\">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;</span><br><span class=\"line\">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;</span><br><span class=\"line\">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;</span><br><span class=\"line\">/*!50503 SET NAMES utf8mb4 */;</span><br><span class=\"line\">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;</span><br><span class=\"line\">/*!40103 SET TIME_ZONE=<span class=\"string\">'+00:00'</span> */;</span><br><span class=\"line\">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;</span><br><span class=\"line\">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;</span><br><span class=\"line\">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=<span class=\"string\">'NO_AUTO_VALUE_ON_ZERO'</span> */;</span><br><span class=\"line\">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Table structure <span class=\"keyword\">for</span> table `po_banner`</span><br><span class=\"line\">--</span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `po_banner`;</span><br><span class=\"line\">/*!40101 SET @saved_cs_client     = @@character_set_client */;</span><br><span class=\"line\">/*!50503 SET character_set_client = utf8mb4 */;</span><br><span class=\"line\">CREATE TABLE `po_banner` (</span><br><span class=\"line\">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT <span class=\"string\">'主键'</span>,</span><br><span class=\"line\">  `creator` varchar(64) NOT NULL DEFAULT <span class=\"string\">'[SYS]'</span> COMMENT <span class=\"string\">'创建者id'</span>,</span><br><span class=\"line\">  `gmt_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT <span class=\"string\">'创建时间'</span>,</span><br><span class=\"line\">  `gmt_modified` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class=\"string\">'修改时间'</span>,</span><br><span class=\"line\">  `is_deleted` char(1) NOT NULL DEFAULT <span class=\"string\">'n'</span> COMMENT <span class=\"string\">'是否已删除 y:已删除 n:未删除'</span>,</span><br><span class=\"line\">  `modifier` varchar(64) NOT NULL DEFAULT <span class=\"string\">'[SYS]'</span> COMMENT <span class=\"string\">'修改者id'</span>,</span><br><span class=\"line\">  `image_key` varchar(64) NOT NULL COMMENT <span class=\"string\">'图片Key'</span>,</span><br><span class=\"line\">  `image_link` varchar(512) NOT NULL COMMENT <span class=\"string\">'链接地址'</span>,</span><br><span class=\"line\">  `release_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT <span class=\"string\">'发布时间'</span>,</span><br><span class=\"line\">  `status` char(1) DEFAULT <span class=\"string\">'n'</span> COMMENT <span class=\"string\">'状态 n-下线 y-上线'</span>,</span><br><span class=\"line\">  `title` varchar(64) NOT NULL COMMENT <span class=\"string\">'标题'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `isDeleted` (`is_deleted`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=<span class=\"string\">'广告表'</span>;</span><br><span class=\"line\">/*!40101 SET character_set_client = @saved_cs_client */;</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Dumping data <span class=\"keyword\">for</span> table `po_banner`</span><br><span class=\"line\">--</span><br><span class=\"line\"></span><br><span class=\"line\">LOCK TABLES `po_banner` WRITE;</span><br><span class=\"line\">/*!40000 ALTER TABLE `po_banner` DISABLE KEYS */;</span><br><span class=\"line\">INSERT INTO `po_banner` VALUES (1,<span class=\"string\">'[SYS]'</span>,<span class=\"string\">'2020-03-08 18:39:10'</span>,<span class=\"string\">'2020-03-08 18:49:11'</span>,<span class=\"string\">'n'</span>,<span class=\"string\">'[SYS]'</span>,<span class=\"string\">'1'</span>,<span class=\"string\">'1'</span>,<span class=\"string\">'2020-03-08 18:39:10'</span>,<span class=\"string\">'n'</span>,<span class=\"string\">'123'</span>);</span><br><span class=\"line\">/*!40000 ALTER TABLE `po_banner` ENABLE KEYS */;</span><br><span class=\"line\">UNLOCK TABLES;</span><br><span class=\"line\">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;</span><br><span class=\"line\"></span><br><span class=\"line\">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;</span><br><span class=\"line\">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;</span><br><span class=\"line\">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;</span><br><span class=\"line\">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;</span><br><span class=\"line\">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;</span><br><span class=\"line\">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;</span><br><span class=\"line\">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;</span><br><span class=\"line\"></span><br><span class=\"line\">-- Dump completed on 2020-03-08 19:15:37</span><br></pre></td></tr></table></figure>\n<h4 id=\"将数据库aonitask备份信息写入aonitask-sql脚本（不带数据库）\"><a href=\"#将数据库aonitask备份信息写入aonitask-sql脚本（不带数据库）\" class=\"headerlink\" title=\"将数据库aonitask备份信息写入aonitask.sql脚本（不带数据库）\"></a>将数据库aonitask备份信息写入aonitask.sql脚本（不带数据库）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot aonitask &gt; /backup/aonitask.sql -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># ll /backup</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r--. 1 root root 2827 Mar  8 19:21 aonitask.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"将数据库aonitask备份信息写入aonitask-sql脚本（带数据库）\"><a href=\"#将数据库aonitask备份信息写入aonitask-sql脚本（带数据库）\" class=\"headerlink\" title=\"将数据库aonitask备份信息写入aonitask.sql脚本（带数据库）\"></a>将数据库aonitask备份信息写入aonitask.sql脚本（带数据库）</h4><p>使用—databases选项指定数据库时，即可在备份时生成创建数据库的语句。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --databases aonitask &gt; /backup/aonitask.sql -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># cat /backup/aonitask.sql </span></span><br><span class=\"line\">-- MySQL dump 10.13  Distrib 8.0.17, <span class=\"keyword\">for</span> Linux (x86_64)</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Current Database: `aonitask`</span><br><span class=\"line\">--</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DATABASE /*!32312 IF NOT EXISTS*/ `aonitask` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION=<span class=\"string\">'N'</span> */;</span><br><span class=\"line\"></span><br><span class=\"line\">USE `aonitask`;</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Table structure <span class=\"keyword\">for</span> table `po_banner`</span><br><span class=\"line\">--</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"备份aonitask中的所有表，但不生成创建aonitask的语句\"><a href=\"#备份aonitask中的所有表，但不生成创建aonitask的语句\" class=\"headerlink\" title=\"备份aonitask中的所有表，但不生成创建aonitask的语句\"></a>备份aonitask中的所有表，但不生成创建aonitask的语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot aonitask -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份aonitask中的所有表，同时生成创建aonitask的语句\"><a href=\"#备份aonitask中的所有表，同时生成创建aonitask的语句\" class=\"headerlink\" title=\"备份aonitask中的所有表，同时生成创建aonitask的语句\"></a>备份aonitask中的所有表，同时生成创建aonitask的语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --databases aonitask -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份aonitask中的t1、t2表，同时生成创建aonitask的语句\"><a href=\"#备份aonitask中的t1、t2表，同时生成创建aonitask的语句\" class=\"headerlink\" title=\"备份aonitask中的t1、t2表，同时生成创建aonitask的语句\"></a>备份aonitask中的t1、t2表，同时生成创建aonitask的语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --databases aonitask t1 t2 -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句\"><a href=\"#备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句\" class=\"headerlink\" title=\"备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句\"></a>备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --databases aonitask1 aonitask2 -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"只备份表结构，不备份数据\"><a href=\"#只备份表结构，不备份数据\" class=\"headerlink\" title=\"只备份表结构，不备份数据\"></a>只备份表结构，不备份数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --databases -d aonitask -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份所有的数据库\"><a href=\"#备份所有的数据库\" class=\"headerlink\" title=\"备份所有的数据库\"></a>备份所有的数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --all-databases -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"导出所有库\"><a href=\"#导出所有库\" class=\"headerlink\" title=\"导出所有库\"></a>导出所有库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uusername -ppassword --all-databases &gt; all.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入所有库\"><a href=\"#导入所有库\" class=\"headerlink\" title=\"导入所有库\"></a>导入所有库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"built_in\">source</span> all.sql;</span><br></pre></td></tr></table></figure>\n<h4 id=\"导出某些库\"><a href=\"#导出某些库\" class=\"headerlink\" title=\"导出某些库\"></a>导出某些库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uusername -ppassword --databases db1 db2 &gt; db1db2.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入某些库\"><a href=\"#导入某些库\" class=\"headerlink\" title=\"导入某些库\"></a>导入某些库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"built_in\">source</span> db1db2.sql;</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入某个库\"><a href=\"#导入某个库\" class=\"headerlink\" title=\"导入某个库\"></a>导入某个库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;ource db1.sql;</span><br></pre></td></tr></table></figure>\n<h4 id=\"导出某些数据表\"><a href=\"#导出某些数据表\" class=\"headerlink\" title=\"导出某些数据表\"></a>导出某些数据表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uusername -ppassword db1 table1 table2 &gt; tb1tb2.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入某些数据表\"><a href=\"#导入某些数据表\" class=\"headerlink\" title=\"导入某些数据表\"></a>导入某些数据表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uusername -ppassword db1 &lt; tb1tb2.sql</span><br></pre></td></tr></table></figure>\n<p>或者MySQL命令行：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user db1;</span><br><span class=\"line\">source tb1tb2.sql;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"mysqldump字符集设置\"><a href=\"#mysqldump字符集设置\" class=\"headerlink\" title=\"mysqldump字符集设置\"></a>mysqldump字符集设置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uusername -ppassword --default-character-set=gb2312 db1 table1 &gt; tb1.sql</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h2><h4 id=\"—master-data\"><a href=\"#—master-data\" class=\"headerlink\" title=\"—master-data\"></a>—master-data</h4><p>—master-data可以记录备份日志的还原点，有3个选值：</p>\n<ol>\n<li>0: 表示在备份时，不记录对应二进制日志文件的位置，和不使用此选项一样</li>\n<li>1: 表示在备份时，在备份文件中生成对应的<code>CHANGE MASTER TO</code>语句，标明此次备份开始时二进制日志的前缀名以及其所处的position（位置）</li>\n<li>3: 跟选项2一样，只不过此条语句是注释状态的</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># mysqldump -uroot --master-data=2 aonitask -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">-- MySQL dump 10.13  Distrib 8.0.17, <span class=\"keyword\">for</span> Linux (x86_64)</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Position to start replication or point-in-time recovery from</span><br><span class=\"line\">--</span><br><span class=\"line\"></span><br><span class=\"line\">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class=\"string\">'binlog.000002'</span>, MASTER_LOG_POS=2946;</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Table structure <span class=\"keyword\">for</span> table `po_banner`</span><br><span class=\"line\">--</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"—fulsh-logs\"><a href=\"#—fulsh-logs\" class=\"headerlink\" title=\"—fulsh-logs\"></a>—fulsh-logs</h4><p>即生成新日志，例如当前二进制日志是binlog.000002，调用<code>mysqladmin flush-logs</code>后，即生成binlog.000003，后续的操作会写入binlog.000003中。所以我们可以每小时调用此命令以达到增量备份的效果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成备份，刷新二进制日志，并清空旧日志</span></span><br><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqldump -uroot -p --flush-logs --delete-master-logs --all-databases</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"其它常用选项\"><a href=\"#其它常用选项\" class=\"headerlink\" title=\"其它常用选项\"></a>其它常用选项</h4><p>在数据库中，还存在一些存储过程和存储函数，存在一些触发器、事件表，这些东西也需要备份以免最终的备份“不全”：</p>\n<ul>\n<li>—events选项：表示备份时，事件表会被备份</li>\n<li>—routines选项：表示备份时，存储过程和存储函数也会被备份</li>\n<li>—triggers选项：表示备份时，触发器会被备份</li>\n</ul>\n<h2 id=\"自动化脚本\"><a href=\"#自动化脚本\" class=\"headerlink\" title=\"自动化脚本\"></a>自动化脚本</h2><h4 id=\"备份脚本\"><a href=\"#备份脚本\" class=\"headerlink\" title=\"备份脚本\"></a>备份脚本</h4><p>文件放置于/usr/local/script/backup_database.sh，确保mysqldump命令可用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash  </span></span><br><span class=\"line\"><span class=\"comment\">#Shell Command For Backup MySQL Database Everyday Automatically By Crontab  </span></span><br><span class=\"line\"><span class=\"comment\">#time 2015-5-20 </span></span><br><span class=\"line\">    <span class=\"comment\">#name huxianglin </span></span><br><span class=\"line\">USER=root </span><br><span class=\"line\">PASSWORD=1 </span><br><span class=\"line\">DATABASE1=aonitask </span><br><span class=\"line\">BACKUP_DIR=/data/backup/database/                       <span class=\"comment\"># 备份数据库文件的路径 </span></span><br><span class=\"line\">LOGFILE=/data/backup/database/data_backup.log           <span class=\"comment\"># 备份数据库脚本的日志文件 </span></span><br><span class=\"line\">DATE=`date +%Y%m%d-%H%M -d -3minute`                    <span class=\"comment\"># 获取当前系统时间-3分钟 </span></span><br><span class=\"line\">DUMPFILE1=<span class=\"variable\">$DATE</span>-zblog.sql                               <span class=\"comment\"># 需要备份的数据库名称 </span></span><br><span class=\"line\">ARCHIVE1=<span class=\"variable\">$DUMPFILE1</span>-tar.gz                              <span class=\"comment\"># 备份的数据库压缩后的名称 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"variable\">$BACKUP_DIR</span> ];                                <span class=\"comment\"># 判断备份路径是否存在，若不存在则创建该路径 </span></span><br><span class=\"line\"><span class=\"keyword\">then</span>  </span><br><span class=\"line\">mkdir -p <span class=\"string\">\"<span class=\"variable\">$BACKUP_DIR</span>\"</span> </span><br><span class=\"line\"><span class=\"keyword\">fi</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\n\"</span> &gt;&gt; <span class=\"variable\">$LOGFILE</span>   </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"------------------------------------\"</span> &gt;&gt; <span class=\"variable\">$LOGFILE</span>  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"BACKUP DATE:<span class=\"variable\">$DATE</span>\"</span>&gt;&gt; <span class=\"variable\">$LOGFILE</span>  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"------------------------------------\"</span> &gt;&gt; <span class=\"variable\">$LOGFILE</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$BACKUP_DIR</span>                                          <span class=\"comment\">#跳到备份路径下 </span></span><br><span class=\"line\">mysqldump -u<span class=\"variable\">$USER</span> -p<span class=\"variable\">$PASSWORD</span> <span class=\"variable\">$DATABASE1</span> &gt; <span class=\"variable\">$DUMPFILE1</span>   <span class=\"comment\">#使用mysqldump备份数据库 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ $? == 0 ]]; <span class=\"keyword\">then</span> </span><br><span class=\"line\">tar czvf <span class=\"variable\">$ARCHIVE1</span> <span class=\"variable\">$DUMPFILE1</span> &gt;&gt; <span class=\"variable\">$LOGFILE</span> 2&gt;&amp;1          <span class=\"comment\">#判断是否备份成功，若备份成功，则压缩备份数据库，否则将错误日志写入日志文件中去。 </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$ARCHIVE1</span> BACKUP SUCCESSFUL!\"</span> &gt;&gt; <span class=\"variable\">$LOGFILE</span>  </span><br><span class=\"line\">rm -f <span class=\"variable\">$DUMPFILE1</span> </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> “<span class=\"variable\">$ARCHIVE1</span> Backup Fail!” &gt;&gt; <span class=\"variable\">$LOGFILE</span>  </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除过时备份脚本\"><a href=\"#删除过时备份脚本\" class=\"headerlink\" title=\"删除过时备份脚本\"></a>删除过时备份脚本</h4><p>/usr/local/script/clean_database.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash </span></span><br><span class=\"line\"><span class=\"comment\">#time 2015-05-21 </span></span><br><span class=\"line\"><span class=\"comment\">#name huxianglin </span></span><br><span class=\"line\"></span><br><span class=\"line\">BACKUPDIR=<span class=\"string\">\"/data/backup/database/\"</span>                                     <span class=\"comment\">#定义备份文件路径 </span></span><br><span class=\"line\">KEEPTIME=7                                                             <span class=\"comment\">#定义需要删除的文件距离当前的天数 </span></span><br><span class=\"line\">DELFILE=`find <span class=\"variable\">$BACKUPDIR</span> -<span class=\"built_in\">type</span> f -mtime +<span class=\"variable\">$KEEPTIME</span> -<span class=\"built_in\">exec</span> ls &#123;&#125; \\;`     <span class=\"comment\">#找到天数大于7天的文件 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> delfile <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;DELFILE&#125;</span>                                              <span class=\"comment\">#循环删除满足天数大于七天的文件 </span></span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">rm -f <span class=\"variable\">$delfile</span> </span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"定时执行脚本\"><a href=\"#定时执行脚本\" class=\"headerlink\" title=\"定时执行脚本\"></a>定时执行脚本</h4><p>/usr/local/script/crontab.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL=/bin/bash </span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin </span><br><span class=\"line\">MAILTO=root </span><br><span class=\"line\"><span class=\"comment\"># For details see man 4 crontabs </span></span><br><span class=\"line\"><span class=\"comment\"># Example of job definition: </span></span><br><span class=\"line\"><span class=\"comment\"># .---------------- minute (0 - 59) </span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23) </span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31) </span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... </span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat </span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  | </span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * user-name  command to be executed </span></span><br><span class=\"line\">  01 00 * * * root /usr/<span class=\"built_in\">local</span>/script/backup_database.sh              <span class=\"comment\">#定义每天凌晨0点01分执行备份数据库脚本 </span></span><br><span class=\"line\">  02 00 * * 0 root /usr/<span class=\"built_in\">local</span>/script/clean_database.sh               <span class=\"comment\">#定义每周日凌晨0点02分执行删除数据库备份文件</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>在对数据库进行一次全量备份和N次增量备份后，删库删表，然后尝试恢复。</p>\n<h4 id=\"原始数据\"><a href=\"#原始数据\" class=\"headerlink\" title=\"原始数据\"></a>原始数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">| id | image_key | image_link | title |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">|  1 | 1         | 1          | 123   |</span><br><span class=\"line\">|  2 | 111       | 222        | 333   |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h4 id=\"全量备份\"><a href=\"#全量备份\" class=\"headerlink\" title=\"全量备份\"></a>全量备份</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqldump -uroot -p --single-transaction --master-data=2 --routines --flush-logs --all-databases &gt; /backup/alldb.sql;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"增量备份\"><a href=\"#增量备份\" class=\"headerlink\" title=\"增量备份\"></a>增量备份</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># change id = 1, image_key = 1_change &gt; binlog.000002</span></span><br><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change id = 1, image_link = 1_change &gt; binlog.000003</span></span><br><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change id = 1, title = 1_change &gt; binlog.000004</span></span><br><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">| id | image_key | image_link | title    |</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">|  1 | 1_change  | 1_change   | 1_change |</span><br><span class=\"line\">|  2 | 111       | 222        | 333      |</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟误删数据\"><a href=\"#模拟误删数据\" class=\"headerlink\" title=\"模拟误删数据\"></a>模拟误删数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将日志切换到binlog.000005</span></span><br><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模拟误删数据...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看数据</span></span><br><span class=\"line\">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">| id | image_key | image_link | title |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">|  2 | 111       | 222        | 333   |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h4 id=\"恢复全量数据\"><a href=\"#恢复全量数据\" class=\"headerlink\" title=\"恢复全量数据\"></a>恢复全量数据</h4><p>恢复数据前先关闭数据写入。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysql -uroot -p1 -e 'source /backup/alldb.sql;'</span></span><br><span class=\"line\">mysql: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">| id | image_key | image_link | title |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">|  1 | 1         | 1          | 123   |</span><br><span class=\"line\">|  2 | 111       | 222        | 333   |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h4 id=\"恢复增量数据\"><a href=\"#恢复增量数据\" class=\"headerlink\" title=\"恢复增量数据\"></a>恢复增量数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqlbinlog binlog.000002 binlog.000003 binlog.000004 | mysql -uroot -p1</span></span><br><span class=\"line\">mysql: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">| id | image_key | image_link | title    |</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">|  1 | 1_change  | 1_change   | 1_change |</span><br><span class=\"line\">|  2 | 111       | 222        | 333      |</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>mysqldump是MySQL自带的逻辑备份工具。它的原理是，通过协议连接到MySQL数据库，将需要备份的数据查询出来转化成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句即可。</p>\n<p>mysqldump是一个客户端工具，所有当它连接数据库时，也会读取MySQL数据库的配置文件，加载跟客户端相关的配置。</p>\n<h4 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h4><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h4 id=\"将数据库aonitask备份信息输出到屏幕上（不带数据库）\"><a href=\"#将数据库aonitask备份信息输出到屏幕上（不带数据库）\" class=\"headerlink\" title=\"将数据库aonitask备份信息输出到屏幕上（不带数据库）\"></a>将数据库aonitask备份信息输出到屏幕上（不带数据库）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqldump -uroot aonitask -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">-- MySQL dump 10.13  Distrib 8.0.17, <span class=\"keyword\">for</span> Linux (x86_64)</span><br><span class=\"line\">--</span><br><span class=\"line\">-- Host: localhost    Database: aonitask</span><br><span class=\"line\">-- ------------------------------------------------------</span><br><span class=\"line\">-- Server version\t8.0.17</span><br><span class=\"line\"></span><br><span class=\"line\">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;</span><br><span class=\"line\">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;</span><br><span class=\"line\">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;</span><br><span class=\"line\">/*!50503 SET NAMES utf8mb4 */;</span><br><span class=\"line\">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;</span><br><span class=\"line\">/*!40103 SET TIME_ZONE=<span class=\"string\">'+00:00'</span> */;</span><br><span class=\"line\">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;</span><br><span class=\"line\">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;</span><br><span class=\"line\">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=<span class=\"string\">'NO_AUTO_VALUE_ON_ZERO'</span> */;</span><br><span class=\"line\">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Table structure <span class=\"keyword\">for</span> table `po_banner`</span><br><span class=\"line\">--</span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `po_banner`;</span><br><span class=\"line\">/*!40101 SET @saved_cs_client     = @@character_set_client */;</span><br><span class=\"line\">/*!50503 SET character_set_client = utf8mb4 */;</span><br><span class=\"line\">CREATE TABLE `po_banner` (</span><br><span class=\"line\">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT <span class=\"string\">'主键'</span>,</span><br><span class=\"line\">  `creator` varchar(64) NOT NULL DEFAULT <span class=\"string\">'[SYS]'</span> COMMENT <span class=\"string\">'创建者id'</span>,</span><br><span class=\"line\">  `gmt_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT <span class=\"string\">'创建时间'</span>,</span><br><span class=\"line\">  `gmt_modified` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class=\"string\">'修改时间'</span>,</span><br><span class=\"line\">  `is_deleted` char(1) NOT NULL DEFAULT <span class=\"string\">'n'</span> COMMENT <span class=\"string\">'是否已删除 y:已删除 n:未删除'</span>,</span><br><span class=\"line\">  `modifier` varchar(64) NOT NULL DEFAULT <span class=\"string\">'[SYS]'</span> COMMENT <span class=\"string\">'修改者id'</span>,</span><br><span class=\"line\">  `image_key` varchar(64) NOT NULL COMMENT <span class=\"string\">'图片Key'</span>,</span><br><span class=\"line\">  `image_link` varchar(512) NOT NULL COMMENT <span class=\"string\">'链接地址'</span>,</span><br><span class=\"line\">  `release_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT <span class=\"string\">'发布时间'</span>,</span><br><span class=\"line\">  `status` char(1) DEFAULT <span class=\"string\">'n'</span> COMMENT <span class=\"string\">'状态 n-下线 y-上线'</span>,</span><br><span class=\"line\">  `title` varchar(64) NOT NULL COMMENT <span class=\"string\">'标题'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `isDeleted` (`is_deleted`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=<span class=\"string\">'广告表'</span>;</span><br><span class=\"line\">/*!40101 SET character_set_client = @saved_cs_client */;</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Dumping data <span class=\"keyword\">for</span> table `po_banner`</span><br><span class=\"line\">--</span><br><span class=\"line\"></span><br><span class=\"line\">LOCK TABLES `po_banner` WRITE;</span><br><span class=\"line\">/*!40000 ALTER TABLE `po_banner` DISABLE KEYS */;</span><br><span class=\"line\">INSERT INTO `po_banner` VALUES (1,<span class=\"string\">'[SYS]'</span>,<span class=\"string\">'2020-03-08 18:39:10'</span>,<span class=\"string\">'2020-03-08 18:49:11'</span>,<span class=\"string\">'n'</span>,<span class=\"string\">'[SYS]'</span>,<span class=\"string\">'1'</span>,<span class=\"string\">'1'</span>,<span class=\"string\">'2020-03-08 18:39:10'</span>,<span class=\"string\">'n'</span>,<span class=\"string\">'123'</span>);</span><br><span class=\"line\">/*!40000 ALTER TABLE `po_banner` ENABLE KEYS */;</span><br><span class=\"line\">UNLOCK TABLES;</span><br><span class=\"line\">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;</span><br><span class=\"line\"></span><br><span class=\"line\">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;</span><br><span class=\"line\">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;</span><br><span class=\"line\">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;</span><br><span class=\"line\">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;</span><br><span class=\"line\">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;</span><br><span class=\"line\">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;</span><br><span class=\"line\">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;</span><br><span class=\"line\"></span><br><span class=\"line\">-- Dump completed on 2020-03-08 19:15:37</span><br></pre></td></tr></table></figure>\n<h4 id=\"将数据库aonitask备份信息写入aonitask-sql脚本（不带数据库）\"><a href=\"#将数据库aonitask备份信息写入aonitask-sql脚本（不带数据库）\" class=\"headerlink\" title=\"将数据库aonitask备份信息写入aonitask.sql脚本（不带数据库）\"></a>将数据库aonitask备份信息写入aonitask.sql脚本（不带数据库）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot aonitask &gt; /backup/aonitask.sql -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># ll /backup</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r--. 1 root root 2827 Mar  8 19:21 aonitask.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"将数据库aonitask备份信息写入aonitask-sql脚本（带数据库）\"><a href=\"#将数据库aonitask备份信息写入aonitask-sql脚本（带数据库）\" class=\"headerlink\" title=\"将数据库aonitask备份信息写入aonitask.sql脚本（带数据库）\"></a>将数据库aonitask备份信息写入aonitask.sql脚本（带数据库）</h4><p>使用—databases选项指定数据库时，即可在备份时生成创建数据库的语句。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --databases aonitask &gt; /backup/aonitask.sql -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># cat /backup/aonitask.sql </span></span><br><span class=\"line\">-- MySQL dump 10.13  Distrib 8.0.17, <span class=\"keyword\">for</span> Linux (x86_64)</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Current Database: `aonitask`</span><br><span class=\"line\">--</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DATABASE /*!32312 IF NOT EXISTS*/ `aonitask` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION=<span class=\"string\">'N'</span> */;</span><br><span class=\"line\"></span><br><span class=\"line\">USE `aonitask`;</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Table structure <span class=\"keyword\">for</span> table `po_banner`</span><br><span class=\"line\">--</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"备份aonitask中的所有表，但不生成创建aonitask的语句\"><a href=\"#备份aonitask中的所有表，但不生成创建aonitask的语句\" class=\"headerlink\" title=\"备份aonitask中的所有表，但不生成创建aonitask的语句\"></a>备份aonitask中的所有表，但不生成创建aonitask的语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot aonitask -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份aonitask中的所有表，同时生成创建aonitask的语句\"><a href=\"#备份aonitask中的所有表，同时生成创建aonitask的语句\" class=\"headerlink\" title=\"备份aonitask中的所有表，同时生成创建aonitask的语句\"></a>备份aonitask中的所有表，同时生成创建aonitask的语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --databases aonitask -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份aonitask中的t1、t2表，同时生成创建aonitask的语句\"><a href=\"#备份aonitask中的t1、t2表，同时生成创建aonitask的语句\" class=\"headerlink\" title=\"备份aonitask中的t1、t2表，同时生成创建aonitask的语句\"></a>备份aonitask中的t1、t2表，同时生成创建aonitask的语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --databases aonitask t1 t2 -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句\"><a href=\"#备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句\" class=\"headerlink\" title=\"备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句\"></a>备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --databases aonitask1 aonitask2 -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"只备份表结构，不备份数据\"><a href=\"#只备份表结构，不备份数据\" class=\"headerlink\" title=\"只备份表结构，不备份数据\"></a>只备份表结构，不备份数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --databases -d aonitask -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份所有的数据库\"><a href=\"#备份所有的数据库\" class=\"headerlink\" title=\"备份所有的数据库\"></a>备份所有的数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest /]<span class=\"comment\"># mysqldump -uroot --all-databases -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n<h4 id=\"导出所有库\"><a href=\"#导出所有库\" class=\"headerlink\" title=\"导出所有库\"></a>导出所有库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uusername -ppassword --all-databases &gt; all.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入所有库\"><a href=\"#导入所有库\" class=\"headerlink\" title=\"导入所有库\"></a>导入所有库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"built_in\">source</span> all.sql;</span><br></pre></td></tr></table></figure>\n<h4 id=\"导出某些库\"><a href=\"#导出某些库\" class=\"headerlink\" title=\"导出某些库\"></a>导出某些库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uusername -ppassword --databases db1 db2 &gt; db1db2.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入某些库\"><a href=\"#导入某些库\" class=\"headerlink\" title=\"导入某些库\"></a>导入某些库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"built_in\">source</span> db1db2.sql;</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入某个库\"><a href=\"#导入某个库\" class=\"headerlink\" title=\"导入某个库\"></a>导入某个库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;ource db1.sql;</span><br></pre></td></tr></table></figure>\n<h4 id=\"导出某些数据表\"><a href=\"#导出某些数据表\" class=\"headerlink\" title=\"导出某些数据表\"></a>导出某些数据表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uusername -ppassword db1 table1 table2 &gt; tb1tb2.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入某些数据表\"><a href=\"#导入某些数据表\" class=\"headerlink\" title=\"导入某些数据表\"></a>导入某些数据表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uusername -ppassword db1 &lt; tb1tb2.sql</span><br></pre></td></tr></table></figure>\n<p>或者MySQL命令行：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user db1;</span><br><span class=\"line\">source tb1tb2.sql;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"mysqldump字符集设置\"><a href=\"#mysqldump字符集设置\" class=\"headerlink\" title=\"mysqldump字符集设置\"></a>mysqldump字符集设置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uusername -ppassword --default-character-set=gb2312 db1 table1 &gt; tb1.sql</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h2><h4 id=\"—master-data\"><a href=\"#—master-data\" class=\"headerlink\" title=\"—master-data\"></a>—master-data</h4><p>—master-data可以记录备份日志的还原点，有3个选值：</p>\n<ol>\n<li>0: 表示在备份时，不记录对应二进制日志文件的位置，和不使用此选项一样</li>\n<li>1: 表示在备份时，在备份文件中生成对应的<code>CHANGE MASTER TO</code>语句，标明此次备份开始时二进制日志的前缀名以及其所处的position（位置）</li>\n<li>3: 跟选项2一样，只不过此条语句是注释状态的</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest ~]<span class=\"comment\"># mysqldump -uroot --master-data=2 aonitask -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">-- MySQL dump 10.13  Distrib 8.0.17, <span class=\"keyword\">for</span> Linux (x86_64)</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Position to start replication or point-in-time recovery from</span><br><span class=\"line\">--</span><br><span class=\"line\"></span><br><span class=\"line\">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class=\"string\">'binlog.000002'</span>, MASTER_LOG_POS=2946;</span><br><span class=\"line\"></span><br><span class=\"line\">--</span><br><span class=\"line\">-- Table structure <span class=\"keyword\">for</span> table `po_banner`</span><br><span class=\"line\">--</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"—fulsh-logs\"><a href=\"#—fulsh-logs\" class=\"headerlink\" title=\"—fulsh-logs\"></a>—fulsh-logs</h4><p>即生成新日志，例如当前二进制日志是binlog.000002，调用<code>mysqladmin flush-logs</code>后，即生成binlog.000003，后续的操作会写入binlog.000003中。所以我们可以每小时调用此命令以达到增量备份的效果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成备份，刷新二进制日志，并清空旧日志</span></span><br><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqldump -uroot -p --flush-logs --delete-master-logs --all-databases</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"其它常用选项\"><a href=\"#其它常用选项\" class=\"headerlink\" title=\"其它常用选项\"></a>其它常用选项</h4><p>在数据库中，还存在一些存储过程和存储函数，存在一些触发器、事件表，这些东西也需要备份以免最终的备份“不全”：</p>\n<ul>\n<li>—events选项：表示备份时，事件表会被备份</li>\n<li>—routines选项：表示备份时，存储过程和存储函数也会被备份</li>\n<li>—triggers选项：表示备份时，触发器会被备份</li>\n</ul>\n<h2 id=\"自动化脚本\"><a href=\"#自动化脚本\" class=\"headerlink\" title=\"自动化脚本\"></a>自动化脚本</h2><h4 id=\"备份脚本\"><a href=\"#备份脚本\" class=\"headerlink\" title=\"备份脚本\"></a>备份脚本</h4><p>文件放置于/usr/local/script/backup_database.sh，确保mysqldump命令可用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash  </span></span><br><span class=\"line\"><span class=\"comment\">#Shell Command For Backup MySQL Database Everyday Automatically By Crontab  </span></span><br><span class=\"line\"><span class=\"comment\">#time 2015-5-20 </span></span><br><span class=\"line\">    <span class=\"comment\">#name huxianglin </span></span><br><span class=\"line\">USER=root </span><br><span class=\"line\">PASSWORD=1 </span><br><span class=\"line\">DATABASE1=aonitask </span><br><span class=\"line\">BACKUP_DIR=/data/backup/database/                       <span class=\"comment\"># 备份数据库文件的路径 </span></span><br><span class=\"line\">LOGFILE=/data/backup/database/data_backup.log           <span class=\"comment\"># 备份数据库脚本的日志文件 </span></span><br><span class=\"line\">DATE=`date +%Y%m%d-%H%M -d -3minute`                    <span class=\"comment\"># 获取当前系统时间-3分钟 </span></span><br><span class=\"line\">DUMPFILE1=<span class=\"variable\">$DATE</span>-zblog.sql                               <span class=\"comment\"># 需要备份的数据库名称 </span></span><br><span class=\"line\">ARCHIVE1=<span class=\"variable\">$DUMPFILE1</span>-tar.gz                              <span class=\"comment\"># 备份的数据库压缩后的名称 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"variable\">$BACKUP_DIR</span> ];                                <span class=\"comment\"># 判断备份路径是否存在，若不存在则创建该路径 </span></span><br><span class=\"line\"><span class=\"keyword\">then</span>  </span><br><span class=\"line\">mkdir -p <span class=\"string\">\"<span class=\"variable\">$BACKUP_DIR</span>\"</span> </span><br><span class=\"line\"><span class=\"keyword\">fi</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\n\"</span> &gt;&gt; <span class=\"variable\">$LOGFILE</span>   </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"------------------------------------\"</span> &gt;&gt; <span class=\"variable\">$LOGFILE</span>  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"BACKUP DATE:<span class=\"variable\">$DATE</span>\"</span>&gt;&gt; <span class=\"variable\">$LOGFILE</span>  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"------------------------------------\"</span> &gt;&gt; <span class=\"variable\">$LOGFILE</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$BACKUP_DIR</span>                                          <span class=\"comment\">#跳到备份路径下 </span></span><br><span class=\"line\">mysqldump -u<span class=\"variable\">$USER</span> -p<span class=\"variable\">$PASSWORD</span> <span class=\"variable\">$DATABASE1</span> &gt; <span class=\"variable\">$DUMPFILE1</span>   <span class=\"comment\">#使用mysqldump备份数据库 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ $? == 0 ]]; <span class=\"keyword\">then</span> </span><br><span class=\"line\">tar czvf <span class=\"variable\">$ARCHIVE1</span> <span class=\"variable\">$DUMPFILE1</span> &gt;&gt; <span class=\"variable\">$LOGFILE</span> 2&gt;&amp;1          <span class=\"comment\">#判断是否备份成功，若备份成功，则压缩备份数据库，否则将错误日志写入日志文件中去。 </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$ARCHIVE1</span> BACKUP SUCCESSFUL!\"</span> &gt;&gt; <span class=\"variable\">$LOGFILE</span>  </span><br><span class=\"line\">rm -f <span class=\"variable\">$DUMPFILE1</span> </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> “<span class=\"variable\">$ARCHIVE1</span> Backup Fail!” &gt;&gt; <span class=\"variable\">$LOGFILE</span>  </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除过时备份脚本\"><a href=\"#删除过时备份脚本\" class=\"headerlink\" title=\"删除过时备份脚本\"></a>删除过时备份脚本</h4><p>/usr/local/script/clean_database.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash </span></span><br><span class=\"line\"><span class=\"comment\">#time 2015-05-21 </span></span><br><span class=\"line\"><span class=\"comment\">#name huxianglin </span></span><br><span class=\"line\"></span><br><span class=\"line\">BACKUPDIR=<span class=\"string\">\"/data/backup/database/\"</span>                                     <span class=\"comment\">#定义备份文件路径 </span></span><br><span class=\"line\">KEEPTIME=7                                                             <span class=\"comment\">#定义需要删除的文件距离当前的天数 </span></span><br><span class=\"line\">DELFILE=`find <span class=\"variable\">$BACKUPDIR</span> -<span class=\"built_in\">type</span> f -mtime +<span class=\"variable\">$KEEPTIME</span> -<span class=\"built_in\">exec</span> ls &#123;&#125; \\;`     <span class=\"comment\">#找到天数大于7天的文件 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> delfile <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;DELFILE&#125;</span>                                              <span class=\"comment\">#循环删除满足天数大于七天的文件 </span></span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">rm -f <span class=\"variable\">$delfile</span> </span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"定时执行脚本\"><a href=\"#定时执行脚本\" class=\"headerlink\" title=\"定时执行脚本\"></a>定时执行脚本</h4><p>/usr/local/script/crontab.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL=/bin/bash </span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin </span><br><span class=\"line\">MAILTO=root </span><br><span class=\"line\"><span class=\"comment\"># For details see man 4 crontabs </span></span><br><span class=\"line\"><span class=\"comment\"># Example of job definition: </span></span><br><span class=\"line\"><span class=\"comment\"># .---------------- minute (0 - 59) </span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23) </span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31) </span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... </span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat </span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  | </span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * user-name  command to be executed </span></span><br><span class=\"line\">  01 00 * * * root /usr/<span class=\"built_in\">local</span>/script/backup_database.sh              <span class=\"comment\">#定义每天凌晨0点01分执行备份数据库脚本 </span></span><br><span class=\"line\">  02 00 * * 0 root /usr/<span class=\"built_in\">local</span>/script/clean_database.sh               <span class=\"comment\">#定义每周日凌晨0点02分执行删除数据库备份文件</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>在对数据库进行一次全量备份和N次增量备份后，删库删表，然后尝试恢复。</p>\n<h4 id=\"原始数据\"><a href=\"#原始数据\" class=\"headerlink\" title=\"原始数据\"></a>原始数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">| id | image_key | image_link | title |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">|  1 | 1         | 1          | 123   |</span><br><span class=\"line\">|  2 | 111       | 222        | 333   |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h4 id=\"全量备份\"><a href=\"#全量备份\" class=\"headerlink\" title=\"全量备份\"></a>全量备份</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqldump -uroot -p --single-transaction --master-data=2 --routines --flush-logs --all-databases &gt; /backup/alldb.sql;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"增量备份\"><a href=\"#增量备份\" class=\"headerlink\" title=\"增量备份\"></a>增量备份</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># change id = 1, image_key = 1_change &gt; binlog.000002</span></span><br><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change id = 1, image_link = 1_change &gt; binlog.000003</span></span><br><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change id = 1, title = 1_change &gt; binlog.000004</span></span><br><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">| id | image_key | image_link | title    |</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">|  1 | 1_change  | 1_change   | 1_change |</span><br><span class=\"line\">|  2 | 111       | 222        | 333      |</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟误删数据\"><a href=\"#模拟误删数据\" class=\"headerlink\" title=\"模拟误删数据\"></a>模拟误删数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将日志切换到binlog.000005</span></span><br><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模拟误删数据...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看数据</span></span><br><span class=\"line\">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">| id | image_key | image_link | title |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">|  2 | 111       | 222        | 333   |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h4 id=\"恢复全量数据\"><a href=\"#恢复全量数据\" class=\"headerlink\" title=\"恢复全量数据\"></a>恢复全量数据</h4><p>恢复数据前先关闭数据写入。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysql -uroot -p1 -e 'source /backup/alldb.sql;'</span></span><br><span class=\"line\">mysql: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">| id | image_key | image_link | title |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">|  1 | 1         | 1          | 123   |</span><br><span class=\"line\">|  2 | 111       | 222        | 333   |</span><br><span class=\"line\">+----+-----------+------------+-------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h4 id=\"恢复增量数据\"><a href=\"#恢复增量数据\" class=\"headerlink\" title=\"恢复增量数据\"></a>恢复增量数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultrguest mysql]<span class=\"comment\"># mysqlbinlog binlog.000002 binlog.000003 binlog.000004 | mysql -uroot -p1</span></span><br><span class=\"line\">mysql: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">| id | image_key | image_link | title    |</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">|  1 | 1_change  | 1_change   | 1_change |</span><br><span class=\"line\">|  2 | 111       | 222        | 333      |</span><br><span class=\"line\">+----+-----------+------------+----------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>"},{"title":"5.1 Problems","date":"2020-02-21T16:00:00.000Z","_content":"#### 什么是进程，什么是线程\n1. 进程是一个独立的运行环境，它可以是一个程序或应用。\n1. 线程可以看作是一个轻量级进程，是进程中的一个执行任务。它仅需要较少的资源来创建和驻留在进程中，并且可以共享进程中的资源\n1. Java运行环境（单一man()方法）是一个包含了不同的类和程序的单一进程\n\n## 概念性问题\n#### 什么是用户线程，什么是守护线程\n1. 在Java中有2类线程：用户线程（User Thread）和守护线程（Daemon Thread）\n1. 守护线程是JVM中专门用于服务其它的线程，比如垃圾回收线程\n1. 用户线程就是用户在Java程序中创建的线程\n\n#### 守护线程的特点\n1. 守护线程中产生的新线程也是守护线程\n1. 守护线程随着JVM的退出而退出（当所有的用户线程都运行完毕时，JVM就自动退出）\n\n#### 为什么要用守护线程\n1. 从守护线程的定位（服务于其它线程）看，垃圾回收器就适合使用守护线程\n1. 我们希望定义些定时轮询的任务，这些任务只在程序运行间起作用，程序退出后自动退出。这种情况可以使用守护线程。因为如果用用户线程来运行这些任务，那么程序就一直结束不了（JVM只有在所有用户线程结束时才结束）\n1. Web应用的定时任务不需要守护线程，因为一般而言，Web应用是不需要关闭的\n\n#### 哪些地方不能用守护线程\n1. 读写操作或者计算逻辑等地方不能使用守护线程。因为守护线程会随着JVM的退出而退出，而不管它自己是否运行完毕\n\n#### 如何创建守护线程\n1. 使用Thread类的setDaemon(true)方法可以将线程设置为守护线程，需要注意的是，需要在调用start()方法前调用这个方法，否则会抛出IllegalThreadStateException异常\n\n```java\nThread daemonTread = new Thread();\n \n  // 设定 daemonThread 为 守护线程，default false(非守护线程)\ndaemonThread.setDaemon(true);\n \n // 验证当前线程是否为守护线程，返回 true 则为守护线程\ndaemonThread.isDaemon();\n```\n\n#### 什么是线程调度器和时间分片\n1. 线程调度器是一个操作系统服务，它负责为Runnable状态的线程分配CPU时间。一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现\n1. 时间分片是只将可用的CPU时间分配给可用的Runnable线程的过程。\n\n#### 线程直接是如何通信的\n1. 线程之间通过Object类的wait()、notify()、notifyAll()等方法进行通信\n\n#### 为什么线程之间通信的方法wait()、notify()、notifyAll()被定义在Object类里\n1. 线程中并没有可供任何对象使用的锁和同步器\n1. 每个对象中都有一个锁，wait()、notify()、notifyAll()等方法用于等待对象的锁或通知其它线程此对象可用\n\n#### 为什么wait()、notify()、notifyAll()等方法必须在同步方法或同步块中使用\n1. 线程在调用对象的wait()方法之间，必须拥有此对象的锁\n1. 线程在调用对象的wait()方法之后，就会释放此对象的锁方便其它线程时间并进入等待状态\n1. 其它线程获得了此对象的锁之后，执行完了自己的业务逻辑后，便可以调用notify/notifyAll()方法，通知所有在wait的线程，同时释放该对象的锁\n1. 由于所有的这些方法都需要线程持有对象的锁，所以只能够通过同步（同步方法或同步块）来实现。\n\n#### 什么是同步方法，什么是同步块\n1. 同步方法即synchronized关键字修饰的方法，由于Java每个对象都有一个内置锁，内置锁会保护整个方法。在调用该方法前，需要获取内置锁，否则就处于阻塞状态\n1. 同步块即sychronized关键字修饰的语句块，被该关键字修饰的语句块会自动被加上内置锁，从而实现同步\n1. sychronized也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个类\n\n#### 为什么Thread类的sleep()和yield()方法是静态的\n1. sleep()和yield()方法是在当前的线程上运行的，所有其它处于等待状态的线程上调用这些方法是没有意义的\n1. 将它们设置为静态的，可以避免程序员错误的认为可以在其它非运行线程调用这些方法\n\n```java\n// 错误用法，将t1线程睡眠1000ms\nThread t1 = new Thread();\nt1.sleep(1000);\n\n// 正确用法，将当前线程睡眠1000ms\nThread.sleep(1000);\n```\n\n#### 什么是ThreadLocal\n1. ThreadLocal用于创建线程的本地变量，每个线程都会拥有他们自己的ThreadLocal变量\n1. 我们知道一个对象的所有线程会共享它的全局变量，所以这些变量是不安全的，我们可以使用同步技术，或者ThreadLocal变量\n\n#### 什么是ThreadGroup\n\n#### 什么是死锁\n1. 死锁是指两个以上的线程永远阻塞的情况\n\n#### 如何分析和避免死锁\n\n#### 什么是Java Timer类，如果用它创建一个有特定时间间隔的线程\n\n#### 什么是线程的生命周期\n1. 新建状态\n    当程序使用new关键字创建一个线程之后，改线程就处于新建状态，此时仅有JVM为其分配内存，并初始化其成员变量\n1. 就绪状态\n    当线程对象调用了start()方法之后，该线程处理就绪状态JVM会为其创建方法调用栈和程序计数器，等待调度运行\n1. 运行状态\n    如果处于就绪状态的线程获取了CPU，开始执行run()方法的线程执行体，则该线程处于运行状态\n1. 阻塞状态\n    当处于运行状态的线程失去所占用资源之后，便处于阻塞状态\n1. 死亡状态\n    线程会以一以下3种方式结束，结束后就处于死亡状态：\n    1. run()或call()方法执行完毕，线程正常结束\n    1. 线程抛出一个未捕捉的Error或Exception\n    1. 直接调用该线程的stop()方法来，该方法容易导致死锁，不建议使用\n\n```mermaid\nsequenceDiagram\n    participant A as 新建\n    participant B as 就绪\n    participant C as 运行\n    participant E as 阻塞\n    participant D as 死亡\n    \n    A ->> B: 调用start()方法\n    B ->> C: 得到处理器资源\n\n    C ->> B: yield()或失去处理器资源\n\n    C ->> E: sleep()、suspend()、等待通知、等待同步锁、IO阻塞\n    \n    E ->> B: sleep()时间到、resume()、收到通知、获取同步锁、IO方法返回\n    \n    C ->> D: shop()、Error、Exception、run()\\call()执行完毕\n```\n\n#### 什么是线程优先级\n1. 每个线程都有它的优先级，优先级越高的线程在运行时会具有优先权，但这依赖于线程调度的实现，这个实现是和操作系统相关的\n1. 优先级是一个int变量（1-10），1代表最低，10代表最高。我们可以定义线程的优先级，但是不能保证最高优先级的线程先执行\n\n#### 在多线程中，什么是上下文切换\n1. 上下文切换是存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行\n1. 上下文切换是多任务操作系统的多线程环境的基本特征\n\n#### 什么是线程安全\n\n#### 什么是volatile关键字\n1. 一般情况下，所有的线程去读取一个变量时，会缓存这个变量的拷贝，以避免锁的问题，提高性能。但是同时如果有多个线程去修改这个变量（拷贝），则它们之间会产生冲突（一个线程将其设置为10，另一个线程将其设置为20）\n1. 如果用volatile修饰此变量，则所有线程之间读取此变量并且不缓存它，这就确保了线程读取到的变量在内存中是一致的\n\n#### 什么是线程池，如何创建一个线程池\n1. 一个线程池管理了一组工作线程，同时它还包括了一个用于存放等待执行的任务队列\n\n## 操作问题\n#### 如何创建一个线程\n\n#### 如何确保线程安全\n1. 使用同步锁\n1. 使用原子类实现并发锁\n1. 使用volatile关键字\n1. 使用不变类和线程安全类\n\n## 如何创建一个线程池\n1. 自定义创建\n1. Executors创建\n\n#### 可以直接调用Thread类的run()方法吗\n1. 可以，但是如果我们直接调用了run()方法，则它的行为和普通的方法调用一样，不会在新的线程执行\n1. 为了在新的线程中执行我们的代码，必须用Thread.start()方法\n\n#### 如何让正在运行的线程暂停一段时间\n1. 调用线程的sleep()方法可以让线程暂停一段时间\n\n#### 如何确保main()方法所在的线程是Java程序最后结束的线程\n1. 使用Thread类的join()方法来确保所有程序创建的线程在main()方法退出前结束\n\n```java\npublic static void main(String[] args) {\n    Thread t1 = new Thread(new MyRunnable(), \"t1\");\n    Thread t2 = new Thread(new MyRunnable(), \"t2\");\n    Thread t3 = new Thread(new MyRunnable(), \"t3\");\n    \n    t1.start();\n    t2.start();\n    t3.start();\n    \n   \n    t1.join();\n    t2.join();\n    t3.join();\n    \n    System.out.println(\"All threads are dead, exiting main thread\");\n}\n\n```\n\n## 对比问题\n\n#### 多线程编程的好处是什么\n1. IO密集型任务，多个线程并发执行任务效率要高，CPU不会因为某个线程需要等待资源而进入空闲状态\n1. 计算密集型任务，没有必要使用多线程，因为多线程上下文切换更耗资源\n\n#### 为什么要使用线程池\n1. 性能方面\n1. 复用方面\n1. 为了复用\n1. Java创建线程的消耗\n1. 数据库连接的消耗\n\n## 编程问题\n#### 写一个固定容量的同步容器，拥有put和get方法，以及getCount方法。能够支持2个生产者线程以及10个消费者线程的阻塞调用\n\n使用`wait`和`notify`或`notifyAll`来实现。\n\n```java\npublic class MyContainer<T> {\n\n    private int MAX = 10; // 最多10个元素\n\n    private int count = 0;\n\n    private final static LinkedList<T> list = new LinkedList<>();\n\n    public synchronized void put(T t) {\n        // 为什么用while不用if\n        while (lists.size == MAX) {\n            this.wait();\n        }\n\n        lists.add(t);\n        ++count;\n\n        // 通知消费者线程进行消费\n        // 为什么不用notify\n        this.notifyAll();\n    }\n\n    public synchronized T get() {\n        T t = null;\n        while (lists.size() == 0) {\n            this.wait();\n        }\n\n        t = lists.removeFirst();\n        count--;\n\n        // 通知生产者进行生产\n        this.notifyAll();\n        return t;\n    }\n\n    public static void main(String[] args) {\n        MyContainer<String> c = new MyContainer<>();\n        // 启动消费者线程\n        for (int i = 0; i < 10; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 5; j++) {\n                    System.out.println(c.get())\n                }\n            }, \"c\" + i).start();\n        }\n\n        TimeUnit.SECONDES.sleep(2);\n\n        // 启动生产者线程\n        for (int i = 0; i < 2; i++) {\n            new Thread(() -> {\n                for (int j = 0; i < 25; j++) {\n                    c.put(Thread.currentThread().getName() + \" \" + j);\n                }\n            }, \"p\" + i).start();\n        }\n    }\n}\n```\n\n为什么用`while`不用`if`呢？以消费者为例：\n1. 假如有25个线程去获取元素，但是这是元素数量为0，大家陷入等待状态，释放锁（因为方法是`synchronized`修饰的，释放锁表示其它线程也可以继续访问了，相当于25个线程都调了这个方法，都在等待）\n1. 生产者添加了一个元素，唤醒了所有的线程。\n","source":"_posts/多线程高并发编程/5.1 Problems.md","raw":"---\ntitle: 5.1 Problems\n\ncategories:\n- 多线程高并发编程\n\ntags:\n- thread\n\ndate: 2020-02-22\n---\n#### 什么是进程，什么是线程\n1. 进程是一个独立的运行环境，它可以是一个程序或应用。\n1. 线程可以看作是一个轻量级进程，是进程中的一个执行任务。它仅需要较少的资源来创建和驻留在进程中，并且可以共享进程中的资源\n1. Java运行环境（单一man()方法）是一个包含了不同的类和程序的单一进程\n\n## 概念性问题\n#### 什么是用户线程，什么是守护线程\n1. 在Java中有2类线程：用户线程（User Thread）和守护线程（Daemon Thread）\n1. 守护线程是JVM中专门用于服务其它的线程，比如垃圾回收线程\n1. 用户线程就是用户在Java程序中创建的线程\n\n#### 守护线程的特点\n1. 守护线程中产生的新线程也是守护线程\n1. 守护线程随着JVM的退出而退出（当所有的用户线程都运行完毕时，JVM就自动退出）\n\n#### 为什么要用守护线程\n1. 从守护线程的定位（服务于其它线程）看，垃圾回收器就适合使用守护线程\n1. 我们希望定义些定时轮询的任务，这些任务只在程序运行间起作用，程序退出后自动退出。这种情况可以使用守护线程。因为如果用用户线程来运行这些任务，那么程序就一直结束不了（JVM只有在所有用户线程结束时才结束）\n1. Web应用的定时任务不需要守护线程，因为一般而言，Web应用是不需要关闭的\n\n#### 哪些地方不能用守护线程\n1. 读写操作或者计算逻辑等地方不能使用守护线程。因为守护线程会随着JVM的退出而退出，而不管它自己是否运行完毕\n\n#### 如何创建守护线程\n1. 使用Thread类的setDaemon(true)方法可以将线程设置为守护线程，需要注意的是，需要在调用start()方法前调用这个方法，否则会抛出IllegalThreadStateException异常\n\n```java\nThread daemonTread = new Thread();\n \n  // 设定 daemonThread 为 守护线程，default false(非守护线程)\ndaemonThread.setDaemon(true);\n \n // 验证当前线程是否为守护线程，返回 true 则为守护线程\ndaemonThread.isDaemon();\n```\n\n#### 什么是线程调度器和时间分片\n1. 线程调度器是一个操作系统服务，它负责为Runnable状态的线程分配CPU时间。一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现\n1. 时间分片是只将可用的CPU时间分配给可用的Runnable线程的过程。\n\n#### 线程直接是如何通信的\n1. 线程之间通过Object类的wait()、notify()、notifyAll()等方法进行通信\n\n#### 为什么线程之间通信的方法wait()、notify()、notifyAll()被定义在Object类里\n1. 线程中并没有可供任何对象使用的锁和同步器\n1. 每个对象中都有一个锁，wait()、notify()、notifyAll()等方法用于等待对象的锁或通知其它线程此对象可用\n\n#### 为什么wait()、notify()、notifyAll()等方法必须在同步方法或同步块中使用\n1. 线程在调用对象的wait()方法之间，必须拥有此对象的锁\n1. 线程在调用对象的wait()方法之后，就会释放此对象的锁方便其它线程时间并进入等待状态\n1. 其它线程获得了此对象的锁之后，执行完了自己的业务逻辑后，便可以调用notify/notifyAll()方法，通知所有在wait的线程，同时释放该对象的锁\n1. 由于所有的这些方法都需要线程持有对象的锁，所以只能够通过同步（同步方法或同步块）来实现。\n\n#### 什么是同步方法，什么是同步块\n1. 同步方法即synchronized关键字修饰的方法，由于Java每个对象都有一个内置锁，内置锁会保护整个方法。在调用该方法前，需要获取内置锁，否则就处于阻塞状态\n1. 同步块即sychronized关键字修饰的语句块，被该关键字修饰的语句块会自动被加上内置锁，从而实现同步\n1. sychronized也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个类\n\n#### 为什么Thread类的sleep()和yield()方法是静态的\n1. sleep()和yield()方法是在当前的线程上运行的，所有其它处于等待状态的线程上调用这些方法是没有意义的\n1. 将它们设置为静态的，可以避免程序员错误的认为可以在其它非运行线程调用这些方法\n\n```java\n// 错误用法，将t1线程睡眠1000ms\nThread t1 = new Thread();\nt1.sleep(1000);\n\n// 正确用法，将当前线程睡眠1000ms\nThread.sleep(1000);\n```\n\n#### 什么是ThreadLocal\n1. ThreadLocal用于创建线程的本地变量，每个线程都会拥有他们自己的ThreadLocal变量\n1. 我们知道一个对象的所有线程会共享它的全局变量，所以这些变量是不安全的，我们可以使用同步技术，或者ThreadLocal变量\n\n#### 什么是ThreadGroup\n\n#### 什么是死锁\n1. 死锁是指两个以上的线程永远阻塞的情况\n\n#### 如何分析和避免死锁\n\n#### 什么是Java Timer类，如果用它创建一个有特定时间间隔的线程\n\n#### 什么是线程的生命周期\n1. 新建状态\n    当程序使用new关键字创建一个线程之后，改线程就处于新建状态，此时仅有JVM为其分配内存，并初始化其成员变量\n1. 就绪状态\n    当线程对象调用了start()方法之后，该线程处理就绪状态JVM会为其创建方法调用栈和程序计数器，等待调度运行\n1. 运行状态\n    如果处于就绪状态的线程获取了CPU，开始执行run()方法的线程执行体，则该线程处于运行状态\n1. 阻塞状态\n    当处于运行状态的线程失去所占用资源之后，便处于阻塞状态\n1. 死亡状态\n    线程会以一以下3种方式结束，结束后就处于死亡状态：\n    1. run()或call()方法执行完毕，线程正常结束\n    1. 线程抛出一个未捕捉的Error或Exception\n    1. 直接调用该线程的stop()方法来，该方法容易导致死锁，不建议使用\n\n```mermaid\nsequenceDiagram\n    participant A as 新建\n    participant B as 就绪\n    participant C as 运行\n    participant E as 阻塞\n    participant D as 死亡\n    \n    A ->> B: 调用start()方法\n    B ->> C: 得到处理器资源\n\n    C ->> B: yield()或失去处理器资源\n\n    C ->> E: sleep()、suspend()、等待通知、等待同步锁、IO阻塞\n    \n    E ->> B: sleep()时间到、resume()、收到通知、获取同步锁、IO方法返回\n    \n    C ->> D: shop()、Error、Exception、run()\\call()执行完毕\n```\n\n#### 什么是线程优先级\n1. 每个线程都有它的优先级，优先级越高的线程在运行时会具有优先权，但这依赖于线程调度的实现，这个实现是和操作系统相关的\n1. 优先级是一个int变量（1-10），1代表最低，10代表最高。我们可以定义线程的优先级，但是不能保证最高优先级的线程先执行\n\n#### 在多线程中，什么是上下文切换\n1. 上下文切换是存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行\n1. 上下文切换是多任务操作系统的多线程环境的基本特征\n\n#### 什么是线程安全\n\n#### 什么是volatile关键字\n1. 一般情况下，所有的线程去读取一个变量时，会缓存这个变量的拷贝，以避免锁的问题，提高性能。但是同时如果有多个线程去修改这个变量（拷贝），则它们之间会产生冲突（一个线程将其设置为10，另一个线程将其设置为20）\n1. 如果用volatile修饰此变量，则所有线程之间读取此变量并且不缓存它，这就确保了线程读取到的变量在内存中是一致的\n\n#### 什么是线程池，如何创建一个线程池\n1. 一个线程池管理了一组工作线程，同时它还包括了一个用于存放等待执行的任务队列\n\n## 操作问题\n#### 如何创建一个线程\n\n#### 如何确保线程安全\n1. 使用同步锁\n1. 使用原子类实现并发锁\n1. 使用volatile关键字\n1. 使用不变类和线程安全类\n\n## 如何创建一个线程池\n1. 自定义创建\n1. Executors创建\n\n#### 可以直接调用Thread类的run()方法吗\n1. 可以，但是如果我们直接调用了run()方法，则它的行为和普通的方法调用一样，不会在新的线程执行\n1. 为了在新的线程中执行我们的代码，必须用Thread.start()方法\n\n#### 如何让正在运行的线程暂停一段时间\n1. 调用线程的sleep()方法可以让线程暂停一段时间\n\n#### 如何确保main()方法所在的线程是Java程序最后结束的线程\n1. 使用Thread类的join()方法来确保所有程序创建的线程在main()方法退出前结束\n\n```java\npublic static void main(String[] args) {\n    Thread t1 = new Thread(new MyRunnable(), \"t1\");\n    Thread t2 = new Thread(new MyRunnable(), \"t2\");\n    Thread t3 = new Thread(new MyRunnable(), \"t3\");\n    \n    t1.start();\n    t2.start();\n    t3.start();\n    \n   \n    t1.join();\n    t2.join();\n    t3.join();\n    \n    System.out.println(\"All threads are dead, exiting main thread\");\n}\n\n```\n\n## 对比问题\n\n#### 多线程编程的好处是什么\n1. IO密集型任务，多个线程并发执行任务效率要高，CPU不会因为某个线程需要等待资源而进入空闲状态\n1. 计算密集型任务，没有必要使用多线程，因为多线程上下文切换更耗资源\n\n#### 为什么要使用线程池\n1. 性能方面\n1. 复用方面\n1. 为了复用\n1. Java创建线程的消耗\n1. 数据库连接的消耗\n\n## 编程问题\n#### 写一个固定容量的同步容器，拥有put和get方法，以及getCount方法。能够支持2个生产者线程以及10个消费者线程的阻塞调用\n\n使用`wait`和`notify`或`notifyAll`来实现。\n\n```java\npublic class MyContainer<T> {\n\n    private int MAX = 10; // 最多10个元素\n\n    private int count = 0;\n\n    private final static LinkedList<T> list = new LinkedList<>();\n\n    public synchronized void put(T t) {\n        // 为什么用while不用if\n        while (lists.size == MAX) {\n            this.wait();\n        }\n\n        lists.add(t);\n        ++count;\n\n        // 通知消费者线程进行消费\n        // 为什么不用notify\n        this.notifyAll();\n    }\n\n    public synchronized T get() {\n        T t = null;\n        while (lists.size() == 0) {\n            this.wait();\n        }\n\n        t = lists.removeFirst();\n        count--;\n\n        // 通知生产者进行生产\n        this.notifyAll();\n        return t;\n    }\n\n    public static void main(String[] args) {\n        MyContainer<String> c = new MyContainer<>();\n        // 启动消费者线程\n        for (int i = 0; i < 10; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 5; j++) {\n                    System.out.println(c.get())\n                }\n            }, \"c\" + i).start();\n        }\n\n        TimeUnit.SECONDES.sleep(2);\n\n        // 启动生产者线程\n        for (int i = 0; i < 2; i++) {\n            new Thread(() -> {\n                for (int j = 0; i < 25; j++) {\n                    c.put(Thread.currentThread().getName() + \" \" + j);\n                }\n            }, \"p\" + i).start();\n        }\n    }\n}\n```\n\n为什么用`while`不用`if`呢？以消费者为例：\n1. 假如有25个线程去获取元素，但是这是元素数量为0，大家陷入等待状态，释放锁（因为方法是`synchronized`修饰的，释放锁表示其它线程也可以继续访问了，相当于25个线程都调了这个方法，都在等待）\n1. 生产者添加了一个元素，唤醒了所有的线程。\n","slug":"多线程高并发编程/5.1 Problems","published":1,"updated":"2020-04-12T08:28:29.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mbd00bpm33p8f2rgbwz","content":"<h4 id=\"什么是进程，什么是线程\"><a href=\"#什么是进程，什么是线程\" class=\"headerlink\" title=\"什么是进程，什么是线程\"></a>什么是进程，什么是线程</h4><ol>\n<li>进程是一个独立的运行环境，它可以是一个程序或应用。</li>\n<li>线程可以看作是一个轻量级进程，是进程中的一个执行任务。它仅需要较少的资源来创建和驻留在进程中，并且可以共享进程中的资源</li>\n<li>Java运行环境（单一man()方法）是一个包含了不同的类和程序的单一进程</li>\n</ol>\n<h2 id=\"概念性问题\"><a href=\"#概念性问题\" class=\"headerlink\" title=\"概念性问题\"></a>概念性问题</h2><h4 id=\"什么是用户线程，什么是守护线程\"><a href=\"#什么是用户线程，什么是守护线程\" class=\"headerlink\" title=\"什么是用户线程，什么是守护线程\"></a>什么是用户线程，什么是守护线程</h4><ol>\n<li>在Java中有2类线程：用户线程（User Thread）和守护线程（Daemon Thread）</li>\n<li>守护线程是JVM中专门用于服务其它的线程，比如垃圾回收线程</li>\n<li>用户线程就是用户在Java程序中创建的线程</li>\n</ol>\n<h4 id=\"守护线程的特点\"><a href=\"#守护线程的特点\" class=\"headerlink\" title=\"守护线程的特点\"></a>守护线程的特点</h4><ol>\n<li>守护线程中产生的新线程也是守护线程</li>\n<li>守护线程随着JVM的退出而退出（当所有的用户线程都运行完毕时，JVM就自动退出）</li>\n</ol>\n<h4 id=\"为什么要用守护线程\"><a href=\"#为什么要用守护线程\" class=\"headerlink\" title=\"为什么要用守护线程\"></a>为什么要用守护线程</h4><ol>\n<li>从守护线程的定位（服务于其它线程）看，垃圾回收器就适合使用守护线程</li>\n<li>我们希望定义些定时轮询的任务，这些任务只在程序运行间起作用，程序退出后自动退出。这种情况可以使用守护线程。因为如果用用户线程来运行这些任务，那么程序就一直结束不了（JVM只有在所有用户线程结束时才结束）</li>\n<li>Web应用的定时任务不需要守护线程，因为一般而言，Web应用是不需要关闭的</li>\n</ol>\n<h4 id=\"哪些地方不能用守护线程\"><a href=\"#哪些地方不能用守护线程\" class=\"headerlink\" title=\"哪些地方不能用守护线程\"></a>哪些地方不能用守护线程</h4><ol>\n<li>读写操作或者计算逻辑等地方不能使用守护线程。因为守护线程会随着JVM的退出而退出，而不管它自己是否运行完毕</li>\n</ol>\n<h4 id=\"如何创建守护线程\"><a href=\"#如何创建守护线程\" class=\"headerlink\" title=\"如何创建守护线程\"></a>如何创建守护线程</h4><ol>\n<li>使用Thread类的setDaemon(true)方法可以将线程设置为守护线程，需要注意的是，需要在调用start()方法前调用这个方法，否则会抛出IllegalThreadStateException异常</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread daemonTread = <span class=\"keyword\">new</span> Thread();</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 设定 daemonThread 为 守护线程，default false(非守护线程)</span></span><br><span class=\"line\">daemonThread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 验证当前线程是否为守护线程，返回 true 则为守护线程</span></span><br><span class=\"line\">daemonThread.isDaemon();</span><br></pre></td></tr></table></figure>\n<h4 id=\"什么是线程调度器和时间分片\"><a href=\"#什么是线程调度器和时间分片\" class=\"headerlink\" title=\"什么是线程调度器和时间分片\"></a>什么是线程调度器和时间分片</h4><ol>\n<li>线程调度器是一个操作系统服务，它负责为Runnable状态的线程分配CPU时间。一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现</li>\n<li>时间分片是只将可用的CPU时间分配给可用的Runnable线程的过程。</li>\n</ol>\n<h4 id=\"线程直接是如何通信的\"><a href=\"#线程直接是如何通信的\" class=\"headerlink\" title=\"线程直接是如何通信的\"></a>线程直接是如何通信的</h4><ol>\n<li>线程之间通过Object类的wait()、notify()、notifyAll()等方法进行通信</li>\n</ol>\n<h4 id=\"为什么线程之间通信的方法wait-、notify-、notifyAll-被定义在Object类里\"><a href=\"#为什么线程之间通信的方法wait-、notify-、notifyAll-被定义在Object类里\" class=\"headerlink\" title=\"为什么线程之间通信的方法wait()、notify()、notifyAll()被定义在Object类里\"></a>为什么线程之间通信的方法wait()、notify()、notifyAll()被定义在Object类里</h4><ol>\n<li>线程中并没有可供任何对象使用的锁和同步器</li>\n<li>每个对象中都有一个锁，wait()、notify()、notifyAll()等方法用于等待对象的锁或通知其它线程此对象可用</li>\n</ol>\n<h4 id=\"为什么wait-、notify-、notifyAll-等方法必须在同步方法或同步块中使用\"><a href=\"#为什么wait-、notify-、notifyAll-等方法必须在同步方法或同步块中使用\" class=\"headerlink\" title=\"为什么wait()、notify()、notifyAll()等方法必须在同步方法或同步块中使用\"></a>为什么wait()、notify()、notifyAll()等方法必须在同步方法或同步块中使用</h4><ol>\n<li>线程在调用对象的wait()方法之间，必须拥有此对象的锁</li>\n<li>线程在调用对象的wait()方法之后，就会释放此对象的锁方便其它线程时间并进入等待状态</li>\n<li>其它线程获得了此对象的锁之后，执行完了自己的业务逻辑后，便可以调用notify/notifyAll()方法，通知所有在wait的线程，同时释放该对象的锁</li>\n<li>由于所有的这些方法都需要线程持有对象的锁，所以只能够通过同步（同步方法或同步块）来实现。</li>\n</ol>\n<h4 id=\"什么是同步方法，什么是同步块\"><a href=\"#什么是同步方法，什么是同步块\" class=\"headerlink\" title=\"什么是同步方法，什么是同步块\"></a>什么是同步方法，什么是同步块</h4><ol>\n<li>同步方法即synchronized关键字修饰的方法，由于Java每个对象都有一个内置锁，内置锁会保护整个方法。在调用该方法前，需要获取内置锁，否则就处于阻塞状态</li>\n<li>同步块即sychronized关键字修饰的语句块，被该关键字修饰的语句块会自动被加上内置锁，从而实现同步</li>\n<li>sychronized也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个类</li>\n</ol>\n<h4 id=\"为什么Thread类的sleep-和yield-方法是静态的\"><a href=\"#为什么Thread类的sleep-和yield-方法是静态的\" class=\"headerlink\" title=\"为什么Thread类的sleep()和yield()方法是静态的\"></a>为什么Thread类的sleep()和yield()方法是静态的</h4><ol>\n<li>sleep()和yield()方法是在当前的线程上运行的，所有其它处于等待状态的线程上调用这些方法是没有意义的</li>\n<li>将它们设置为静态的，可以避免程序员错误的认为可以在其它非运行线程调用这些方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误用法，将t1线程睡眠1000ms</span></span><br><span class=\"line\">Thread t1 = <span class=\"keyword\">new</span> Thread();</span><br><span class=\"line\">t1.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确用法，将当前线程睡眠1000ms</span></span><br><span class=\"line\">Thread.sleep(<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"什么是ThreadLocal\"><a href=\"#什么是ThreadLocal\" class=\"headerlink\" title=\"什么是ThreadLocal\"></a>什么是ThreadLocal</h4><ol>\n<li>ThreadLocal用于创建线程的本地变量，每个线程都会拥有他们自己的ThreadLocal变量</li>\n<li>我们知道一个对象的所有线程会共享它的全局变量，所以这些变量是不安全的，我们可以使用同步技术，或者ThreadLocal变量</li>\n</ol>\n<h4 id=\"什么是ThreadGroup\"><a href=\"#什么是ThreadGroup\" class=\"headerlink\" title=\"什么是ThreadGroup\"></a>什么是ThreadGroup</h4><h4 id=\"什么是死锁\"><a href=\"#什么是死锁\" class=\"headerlink\" title=\"什么是死锁\"></a>什么是死锁</h4><ol>\n<li>死锁是指两个以上的线程永远阻塞的情况</li>\n</ol>\n<h4 id=\"如何分析和避免死锁\"><a href=\"#如何分析和避免死锁\" class=\"headerlink\" title=\"如何分析和避免死锁\"></a>如何分析和避免死锁</h4><h4 id=\"什么是Java-Timer类，如果用它创建一个有特定时间间隔的线程\"><a href=\"#什么是Java-Timer类，如果用它创建一个有特定时间间隔的线程\" class=\"headerlink\" title=\"什么是Java Timer类，如果用它创建一个有特定时间间隔的线程\"></a>什么是Java Timer类，如果用它创建一个有特定时间间隔的线程</h4><h4 id=\"什么是线程的生命周期\"><a href=\"#什么是线程的生命周期\" class=\"headerlink\" title=\"什么是线程的生命周期\"></a>什么是线程的生命周期</h4><ol>\n<li>新建状态<br> 当程序使用new关键字创建一个线程之后，改线程就处于新建状态，此时仅有JVM为其分配内存，并初始化其成员变量</li>\n<li>就绪状态<br> 当线程对象调用了start()方法之后，该线程处理就绪状态JVM会为其创建方法调用栈和程序计数器，等待调度运行</li>\n<li>运行状态<br> 如果处于就绪状态的线程获取了CPU，开始执行run()方法的线程执行体，则该线程处于运行状态</li>\n<li>阻塞状态<br> 当处于运行状态的线程失去所占用资源之后，便处于阻塞状态</li>\n<li>死亡状态<br> 线程会以一以下3种方式结束，结束后就处于死亡状态：<ol>\n<li>run()或call()方法执行完毕，线程正常结束</li>\n<li>线程抛出一个未捕捉的Error或Exception</li>\n<li>直接调用该线程的stop()方法来，该方法容易导致死锁，不建议使用</li>\n</ol>\n</li>\n</ol>\n<pre class=\"mermaid\">sequenceDiagram\n    participant A as 新建\n    participant B as 就绪\n    participant C as 运行\n    participant E as 阻塞\n    participant D as 死亡\n\n    A ->> B: 调用start()方法\n    B ->> C: 得到处理器资源\n\n    C ->> B: yield()或失去处理器资源\n\n    C ->> E: sleep()、suspend()、等待通知、等待同步锁、IO阻塞\n\n    E ->> B: sleep()时间到、resume()、收到通知、获取同步锁、IO方法返回\n\n    C ->> D: shop()、Error、Exception、run()\\call()执行完毕</pre>\n\n<h4 id=\"什么是线程优先级\"><a href=\"#什么是线程优先级\" class=\"headerlink\" title=\"什么是线程优先级\"></a>什么是线程优先级</h4><ol>\n<li>每个线程都有它的优先级，优先级越高的线程在运行时会具有优先权，但这依赖于线程调度的实现，这个实现是和操作系统相关的</li>\n<li>优先级是一个int变量（1-10），1代表最低，10代表最高。我们可以定义线程的优先级，但是不能保证最高优先级的线程先执行</li>\n</ol>\n<h4 id=\"在多线程中，什么是上下文切换\"><a href=\"#在多线程中，什么是上下文切换\" class=\"headerlink\" title=\"在多线程中，什么是上下文切换\"></a>在多线程中，什么是上下文切换</h4><ol>\n<li>上下文切换是存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行</li>\n<li>上下文切换是多任务操作系统的多线程环境的基本特征</li>\n</ol>\n<h4 id=\"什么是线程安全\"><a href=\"#什么是线程安全\" class=\"headerlink\" title=\"什么是线程安全\"></a>什么是线程安全</h4><h4 id=\"什么是volatile关键字\"><a href=\"#什么是volatile关键字\" class=\"headerlink\" title=\"什么是volatile关键字\"></a>什么是volatile关键字</h4><ol>\n<li>一般情况下，所有的线程去读取一个变量时，会缓存这个变量的拷贝，以避免锁的问题，提高性能。但是同时如果有多个线程去修改这个变量（拷贝），则它们之间会产生冲突（一个线程将其设置为10，另一个线程将其设置为20）</li>\n<li>如果用volatile修饰此变量，则所有线程之间读取此变量并且不缓存它，这就确保了线程读取到的变量在内存中是一致的</li>\n</ol>\n<h4 id=\"什么是线程池，如何创建一个线程池\"><a href=\"#什么是线程池，如何创建一个线程池\" class=\"headerlink\" title=\"什么是线程池，如何创建一个线程池\"></a>什么是线程池，如何创建一个线程池</h4><ol>\n<li>一个线程池管理了一组工作线程，同时它还包括了一个用于存放等待执行的任务队列</li>\n</ol>\n<h2 id=\"操作问题\"><a href=\"#操作问题\" class=\"headerlink\" title=\"操作问题\"></a>操作问题</h2><h4 id=\"如何创建一个线程\"><a href=\"#如何创建一个线程\" class=\"headerlink\" title=\"如何创建一个线程\"></a>如何创建一个线程</h4><h4 id=\"如何确保线程安全\"><a href=\"#如何确保线程安全\" class=\"headerlink\" title=\"如何确保线程安全\"></a>如何确保线程安全</h4><ol>\n<li>使用同步锁</li>\n<li>使用原子类实现并发锁</li>\n<li>使用volatile关键字</li>\n<li>使用不变类和线程安全类</li>\n</ol>\n<h2 id=\"如何创建一个线程池\"><a href=\"#如何创建一个线程池\" class=\"headerlink\" title=\"如何创建一个线程池\"></a>如何创建一个线程池</h2><ol>\n<li>自定义创建</li>\n<li>Executors创建</li>\n</ol>\n<h4 id=\"可以直接调用Thread类的run-方法吗\"><a href=\"#可以直接调用Thread类的run-方法吗\" class=\"headerlink\" title=\"可以直接调用Thread类的run()方法吗\"></a>可以直接调用Thread类的run()方法吗</h4><ol>\n<li>可以，但是如果我们直接调用了run()方法，则它的行为和普通的方法调用一样，不会在新的线程执行</li>\n<li>为了在新的线程中执行我们的代码，必须用Thread.start()方法</li>\n</ol>\n<h4 id=\"如何让正在运行的线程暂停一段时间\"><a href=\"#如何让正在运行的线程暂停一段时间\" class=\"headerlink\" title=\"如何让正在运行的线程暂停一段时间\"></a>如何让正在运行的线程暂停一段时间</h4><ol>\n<li>调用线程的sleep()方法可以让线程暂停一段时间</li>\n</ol>\n<h4 id=\"如何确保main-方法所在的线程是Java程序最后结束的线程\"><a href=\"#如何确保main-方法所在的线程是Java程序最后结束的线程\" class=\"headerlink\" title=\"如何确保main()方法所在的线程是Java程序最后结束的线程\"></a>如何确保main()方法所在的线程是Java程序最后结束的线程</h4><ol>\n<li>使用Thread类的join()方法来确保所有程序创建的线程在main()方法退出前结束</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Thread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyRunnable(), <span class=\"string\">\"t1\"</span>);</span><br><span class=\"line\">    Thread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyRunnable(), <span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\">    Thread t3 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyRunnable(), <span class=\"string\">\"t3\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    t1.start();</span><br><span class=\"line\">    t2.start();</span><br><span class=\"line\">    t3.start();</span><br><span class=\"line\">    </span><br><span class=\"line\">   </span><br><span class=\"line\">    t1.join();</span><br><span class=\"line\">    t2.join();</span><br><span class=\"line\">    t3.join();</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"All threads are dead, exiting main thread\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对比问题\"><a href=\"#对比问题\" class=\"headerlink\" title=\"对比问题\"></a>对比问题</h2><h4 id=\"多线程编程的好处是什么\"><a href=\"#多线程编程的好处是什么\" class=\"headerlink\" title=\"多线程编程的好处是什么\"></a>多线程编程的好处是什么</h4><ol>\n<li>IO密集型任务，多个线程并发执行任务效率要高，CPU不会因为某个线程需要等待资源而进入空闲状态</li>\n<li>计算密集型任务，没有必要使用多线程，因为多线程上下文切换更耗资源</li>\n</ol>\n<h4 id=\"为什么要使用线程池\"><a href=\"#为什么要使用线程池\" class=\"headerlink\" title=\"为什么要使用线程池\"></a>为什么要使用线程池</h4><ol>\n<li>性能方面</li>\n<li>复用方面</li>\n<li>为了复用</li>\n<li>Java创建线程的消耗</li>\n<li>数据库连接的消耗</li>\n</ol>\n<h2 id=\"编程问题\"><a href=\"#编程问题\" class=\"headerlink\" title=\"编程问题\"></a>编程问题</h2><h4 id=\"写一个固定容量的同步容器，拥有put和get方法，以及getCount方法。能够支持2个生产者线程以及10个消费者线程的阻塞调用\"><a href=\"#写一个固定容量的同步容器，拥有put和get方法，以及getCount方法。能够支持2个生产者线程以及10个消费者线程的阻塞调用\" class=\"headerlink\" title=\"写一个固定容量的同步容器，拥有put和get方法，以及getCount方法。能够支持2个生产者线程以及10个消费者线程的阻塞调用\"></a>写一个固定容量的同步容器，拥有put和get方法，以及getCount方法。能够支持2个生产者线程以及10个消费者线程的阻塞调用</h4><p>使用<code>wait</code>和<code>notify</code>或<code>notifyAll</code>来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyContainer</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">10</span>; <span class=\"comment\">// 最多10个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> LinkedList&lt;T&gt; list = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为什么用while不用if</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lists.size == MAX) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        lists.add(t);</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通知消费者线程进行消费</span></span><br><span class=\"line\">        <span class=\"comment\">// 为什么不用notify</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        T t = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lists.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        t = lists.removeFirst();</span><br><span class=\"line\">        count--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通知生产者进行生产</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyContainer&lt;String&gt; c = <span class=\"keyword\">new</span> MyContainer&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 启动消费者线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++) &#123;</span><br><span class=\"line\">                    System.out.println(c.get())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"string\">\"c\"</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDES.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动生产者线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; i &lt; <span class=\"number\">25</span>; j++) &#123;</span><br><span class=\"line\">                    c.put(Thread.currentThread().getName() + <span class=\"string\">\" \"</span> + j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"string\">\"p\"</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么用<code>while</code>不用<code>if</code>呢？以消费者为例：</p>\n<ol>\n<li>假如有25个线程去获取元素，但是这是元素数量为0，大家陷入等待状态，释放锁（因为方法是<code>synchronized</code>修饰的，释放锁表示其它线程也可以继续访问了，相当于25个线程都调了这个方法，都在等待）</li>\n<li>生产者添加了一个元素，唤醒了所有的线程。</li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<h4 id=\"什么是进程，什么是线程\"><a href=\"#什么是进程，什么是线程\" class=\"headerlink\" title=\"什么是进程，什么是线程\"></a>什么是进程，什么是线程</h4><ol>\n<li>进程是一个独立的运行环境，它可以是一个程序或应用。</li>\n<li>线程可以看作是一个轻量级进程，是进程中的一个执行任务。它仅需要较少的资源来创建和驻留在进程中，并且可以共享进程中的资源</li>\n<li>Java运行环境（单一man()方法）是一个包含了不同的类和程序的单一进程</li>\n</ol>\n<h2 id=\"概念性问题\"><a href=\"#概念性问题\" class=\"headerlink\" title=\"概念性问题\"></a>概念性问题</h2><h4 id=\"什么是用户线程，什么是守护线程\"><a href=\"#什么是用户线程，什么是守护线程\" class=\"headerlink\" title=\"什么是用户线程，什么是守护线程\"></a>什么是用户线程，什么是守护线程</h4><ol>\n<li>在Java中有2类线程：用户线程（User Thread）和守护线程（Daemon Thread）</li>\n<li>守护线程是JVM中专门用于服务其它的线程，比如垃圾回收线程</li>\n<li>用户线程就是用户在Java程序中创建的线程</li>\n</ol>\n<h4 id=\"守护线程的特点\"><a href=\"#守护线程的特点\" class=\"headerlink\" title=\"守护线程的特点\"></a>守护线程的特点</h4><ol>\n<li>守护线程中产生的新线程也是守护线程</li>\n<li>守护线程随着JVM的退出而退出（当所有的用户线程都运行完毕时，JVM就自动退出）</li>\n</ol>\n<h4 id=\"为什么要用守护线程\"><a href=\"#为什么要用守护线程\" class=\"headerlink\" title=\"为什么要用守护线程\"></a>为什么要用守护线程</h4><ol>\n<li>从守护线程的定位（服务于其它线程）看，垃圾回收器就适合使用守护线程</li>\n<li>我们希望定义些定时轮询的任务，这些任务只在程序运行间起作用，程序退出后自动退出。这种情况可以使用守护线程。因为如果用用户线程来运行这些任务，那么程序就一直结束不了（JVM只有在所有用户线程结束时才结束）</li>\n<li>Web应用的定时任务不需要守护线程，因为一般而言，Web应用是不需要关闭的</li>\n</ol>\n<h4 id=\"哪些地方不能用守护线程\"><a href=\"#哪些地方不能用守护线程\" class=\"headerlink\" title=\"哪些地方不能用守护线程\"></a>哪些地方不能用守护线程</h4><ol>\n<li>读写操作或者计算逻辑等地方不能使用守护线程。因为守护线程会随着JVM的退出而退出，而不管它自己是否运行完毕</li>\n</ol>\n<h4 id=\"如何创建守护线程\"><a href=\"#如何创建守护线程\" class=\"headerlink\" title=\"如何创建守护线程\"></a>如何创建守护线程</h4><ol>\n<li>使用Thread类的setDaemon(true)方法可以将线程设置为守护线程，需要注意的是，需要在调用start()方法前调用这个方法，否则会抛出IllegalThreadStateException异常</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread daemonTread = <span class=\"keyword\">new</span> Thread();</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 设定 daemonThread 为 守护线程，default false(非守护线程)</span></span><br><span class=\"line\">daemonThread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 验证当前线程是否为守护线程，返回 true 则为守护线程</span></span><br><span class=\"line\">daemonThread.isDaemon();</span><br></pre></td></tr></table></figure>\n<h4 id=\"什么是线程调度器和时间分片\"><a href=\"#什么是线程调度器和时间分片\" class=\"headerlink\" title=\"什么是线程调度器和时间分片\"></a>什么是线程调度器和时间分片</h4><ol>\n<li>线程调度器是一个操作系统服务，它负责为Runnable状态的线程分配CPU时间。一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现</li>\n<li>时间分片是只将可用的CPU时间分配给可用的Runnable线程的过程。</li>\n</ol>\n<h4 id=\"线程直接是如何通信的\"><a href=\"#线程直接是如何通信的\" class=\"headerlink\" title=\"线程直接是如何通信的\"></a>线程直接是如何通信的</h4><ol>\n<li>线程之间通过Object类的wait()、notify()、notifyAll()等方法进行通信</li>\n</ol>\n<h4 id=\"为什么线程之间通信的方法wait-、notify-、notifyAll-被定义在Object类里\"><a href=\"#为什么线程之间通信的方法wait-、notify-、notifyAll-被定义在Object类里\" class=\"headerlink\" title=\"为什么线程之间通信的方法wait()、notify()、notifyAll()被定义在Object类里\"></a>为什么线程之间通信的方法wait()、notify()、notifyAll()被定义在Object类里</h4><ol>\n<li>线程中并没有可供任何对象使用的锁和同步器</li>\n<li>每个对象中都有一个锁，wait()、notify()、notifyAll()等方法用于等待对象的锁或通知其它线程此对象可用</li>\n</ol>\n<h4 id=\"为什么wait-、notify-、notifyAll-等方法必须在同步方法或同步块中使用\"><a href=\"#为什么wait-、notify-、notifyAll-等方法必须在同步方法或同步块中使用\" class=\"headerlink\" title=\"为什么wait()、notify()、notifyAll()等方法必须在同步方法或同步块中使用\"></a>为什么wait()、notify()、notifyAll()等方法必须在同步方法或同步块中使用</h4><ol>\n<li>线程在调用对象的wait()方法之间，必须拥有此对象的锁</li>\n<li>线程在调用对象的wait()方法之后，就会释放此对象的锁方便其它线程时间并进入等待状态</li>\n<li>其它线程获得了此对象的锁之后，执行完了自己的业务逻辑后，便可以调用notify/notifyAll()方法，通知所有在wait的线程，同时释放该对象的锁</li>\n<li>由于所有的这些方法都需要线程持有对象的锁，所以只能够通过同步（同步方法或同步块）来实现。</li>\n</ol>\n<h4 id=\"什么是同步方法，什么是同步块\"><a href=\"#什么是同步方法，什么是同步块\" class=\"headerlink\" title=\"什么是同步方法，什么是同步块\"></a>什么是同步方法，什么是同步块</h4><ol>\n<li>同步方法即synchronized关键字修饰的方法，由于Java每个对象都有一个内置锁，内置锁会保护整个方法。在调用该方法前，需要获取内置锁，否则就处于阻塞状态</li>\n<li>同步块即sychronized关键字修饰的语句块，被该关键字修饰的语句块会自动被加上内置锁，从而实现同步</li>\n<li>sychronized也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个类</li>\n</ol>\n<h4 id=\"为什么Thread类的sleep-和yield-方法是静态的\"><a href=\"#为什么Thread类的sleep-和yield-方法是静态的\" class=\"headerlink\" title=\"为什么Thread类的sleep()和yield()方法是静态的\"></a>为什么Thread类的sleep()和yield()方法是静态的</h4><ol>\n<li>sleep()和yield()方法是在当前的线程上运行的，所有其它处于等待状态的线程上调用这些方法是没有意义的</li>\n<li>将它们设置为静态的，可以避免程序员错误的认为可以在其它非运行线程调用这些方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误用法，将t1线程睡眠1000ms</span></span><br><span class=\"line\">Thread t1 = <span class=\"keyword\">new</span> Thread();</span><br><span class=\"line\">t1.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确用法，将当前线程睡眠1000ms</span></span><br><span class=\"line\">Thread.sleep(<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"什么是ThreadLocal\"><a href=\"#什么是ThreadLocal\" class=\"headerlink\" title=\"什么是ThreadLocal\"></a>什么是ThreadLocal</h4><ol>\n<li>ThreadLocal用于创建线程的本地变量，每个线程都会拥有他们自己的ThreadLocal变量</li>\n<li>我们知道一个对象的所有线程会共享它的全局变量，所以这些变量是不安全的，我们可以使用同步技术，或者ThreadLocal变量</li>\n</ol>\n<h4 id=\"什么是ThreadGroup\"><a href=\"#什么是ThreadGroup\" class=\"headerlink\" title=\"什么是ThreadGroup\"></a>什么是ThreadGroup</h4><h4 id=\"什么是死锁\"><a href=\"#什么是死锁\" class=\"headerlink\" title=\"什么是死锁\"></a>什么是死锁</h4><ol>\n<li>死锁是指两个以上的线程永远阻塞的情况</li>\n</ol>\n<h4 id=\"如何分析和避免死锁\"><a href=\"#如何分析和避免死锁\" class=\"headerlink\" title=\"如何分析和避免死锁\"></a>如何分析和避免死锁</h4><h4 id=\"什么是Java-Timer类，如果用它创建一个有特定时间间隔的线程\"><a href=\"#什么是Java-Timer类，如果用它创建一个有特定时间间隔的线程\" class=\"headerlink\" title=\"什么是Java Timer类，如果用它创建一个有特定时间间隔的线程\"></a>什么是Java Timer类，如果用它创建一个有特定时间间隔的线程</h4><h4 id=\"什么是线程的生命周期\"><a href=\"#什么是线程的生命周期\" class=\"headerlink\" title=\"什么是线程的生命周期\"></a>什么是线程的生命周期</h4><ol>\n<li>新建状态<br> 当程序使用new关键字创建一个线程之后，改线程就处于新建状态，此时仅有JVM为其分配内存，并初始化其成员变量</li>\n<li>就绪状态<br> 当线程对象调用了start()方法之后，该线程处理就绪状态JVM会为其创建方法调用栈和程序计数器，等待调度运行</li>\n<li>运行状态<br> 如果处于就绪状态的线程获取了CPU，开始执行run()方法的线程执行体，则该线程处于运行状态</li>\n<li>阻塞状态<br> 当处于运行状态的线程失去所占用资源之后，便处于阻塞状态</li>\n<li>死亡状态<br> 线程会以一以下3种方式结束，结束后就处于死亡状态：<ol>\n<li>run()或call()方法执行完毕，线程正常结束</li>\n<li>线程抛出一个未捕捉的Error或Exception</li>\n<li>直接调用该线程的stop()方法来，该方法容易导致死锁，不建议使用</li>\n</ol>\n</li>\n</ol>\n<pre class=\"mermaid\">sequenceDiagram\n    participant A as 新建\n    participant B as 就绪\n    participant C as 运行\n    participant E as 阻塞\n    participant D as 死亡\n\n    A ->> B: 调用start()方法\n    B ->> C: 得到处理器资源\n\n    C ->> B: yield()或失去处理器资源\n\n    C ->> E: sleep()、suspend()、等待通知、等待同步锁、IO阻塞\n\n    E ->> B: sleep()时间到、resume()、收到通知、获取同步锁、IO方法返回\n\n    C ->> D: shop()、Error、Exception、run()\\call()执行完毕</pre>\n\n<h4 id=\"什么是线程优先级\"><a href=\"#什么是线程优先级\" class=\"headerlink\" title=\"什么是线程优先级\"></a>什么是线程优先级</h4><ol>\n<li>每个线程都有它的优先级，优先级越高的线程在运行时会具有优先权，但这依赖于线程调度的实现，这个实现是和操作系统相关的</li>\n<li>优先级是一个int变量（1-10），1代表最低，10代表最高。我们可以定义线程的优先级，但是不能保证最高优先级的线程先执行</li>\n</ol>\n<h4 id=\"在多线程中，什么是上下文切换\"><a href=\"#在多线程中，什么是上下文切换\" class=\"headerlink\" title=\"在多线程中，什么是上下文切换\"></a>在多线程中，什么是上下文切换</h4><ol>\n<li>上下文切换是存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行</li>\n<li>上下文切换是多任务操作系统的多线程环境的基本特征</li>\n</ol>\n<h4 id=\"什么是线程安全\"><a href=\"#什么是线程安全\" class=\"headerlink\" title=\"什么是线程安全\"></a>什么是线程安全</h4><h4 id=\"什么是volatile关键字\"><a href=\"#什么是volatile关键字\" class=\"headerlink\" title=\"什么是volatile关键字\"></a>什么是volatile关键字</h4><ol>\n<li>一般情况下，所有的线程去读取一个变量时，会缓存这个变量的拷贝，以避免锁的问题，提高性能。但是同时如果有多个线程去修改这个变量（拷贝），则它们之间会产生冲突（一个线程将其设置为10，另一个线程将其设置为20）</li>\n<li>如果用volatile修饰此变量，则所有线程之间读取此变量并且不缓存它，这就确保了线程读取到的变量在内存中是一致的</li>\n</ol>\n<h4 id=\"什么是线程池，如何创建一个线程池\"><a href=\"#什么是线程池，如何创建一个线程池\" class=\"headerlink\" title=\"什么是线程池，如何创建一个线程池\"></a>什么是线程池，如何创建一个线程池</h4><ol>\n<li>一个线程池管理了一组工作线程，同时它还包括了一个用于存放等待执行的任务队列</li>\n</ol>\n<h2 id=\"操作问题\"><a href=\"#操作问题\" class=\"headerlink\" title=\"操作问题\"></a>操作问题</h2><h4 id=\"如何创建一个线程\"><a href=\"#如何创建一个线程\" class=\"headerlink\" title=\"如何创建一个线程\"></a>如何创建一个线程</h4><h4 id=\"如何确保线程安全\"><a href=\"#如何确保线程安全\" class=\"headerlink\" title=\"如何确保线程安全\"></a>如何确保线程安全</h4><ol>\n<li>使用同步锁</li>\n<li>使用原子类实现并发锁</li>\n<li>使用volatile关键字</li>\n<li>使用不变类和线程安全类</li>\n</ol>\n<h2 id=\"如何创建一个线程池\"><a href=\"#如何创建一个线程池\" class=\"headerlink\" title=\"如何创建一个线程池\"></a>如何创建一个线程池</h2><ol>\n<li>自定义创建</li>\n<li>Executors创建</li>\n</ol>\n<h4 id=\"可以直接调用Thread类的run-方法吗\"><a href=\"#可以直接调用Thread类的run-方法吗\" class=\"headerlink\" title=\"可以直接调用Thread类的run()方法吗\"></a>可以直接调用Thread类的run()方法吗</h4><ol>\n<li>可以，但是如果我们直接调用了run()方法，则它的行为和普通的方法调用一样，不会在新的线程执行</li>\n<li>为了在新的线程中执行我们的代码，必须用Thread.start()方法</li>\n</ol>\n<h4 id=\"如何让正在运行的线程暂停一段时间\"><a href=\"#如何让正在运行的线程暂停一段时间\" class=\"headerlink\" title=\"如何让正在运行的线程暂停一段时间\"></a>如何让正在运行的线程暂停一段时间</h4><ol>\n<li>调用线程的sleep()方法可以让线程暂停一段时间</li>\n</ol>\n<h4 id=\"如何确保main-方法所在的线程是Java程序最后结束的线程\"><a href=\"#如何确保main-方法所在的线程是Java程序最后结束的线程\" class=\"headerlink\" title=\"如何确保main()方法所在的线程是Java程序最后结束的线程\"></a>如何确保main()方法所在的线程是Java程序最后结束的线程</h4><ol>\n<li>使用Thread类的join()方法来确保所有程序创建的线程在main()方法退出前结束</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Thread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyRunnable(), <span class=\"string\">\"t1\"</span>);</span><br><span class=\"line\">    Thread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyRunnable(), <span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\">    Thread t3 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyRunnable(), <span class=\"string\">\"t3\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    t1.start();</span><br><span class=\"line\">    t2.start();</span><br><span class=\"line\">    t3.start();</span><br><span class=\"line\">    </span><br><span class=\"line\">   </span><br><span class=\"line\">    t1.join();</span><br><span class=\"line\">    t2.join();</span><br><span class=\"line\">    t3.join();</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"All threads are dead, exiting main thread\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对比问题\"><a href=\"#对比问题\" class=\"headerlink\" title=\"对比问题\"></a>对比问题</h2><h4 id=\"多线程编程的好处是什么\"><a href=\"#多线程编程的好处是什么\" class=\"headerlink\" title=\"多线程编程的好处是什么\"></a>多线程编程的好处是什么</h4><ol>\n<li>IO密集型任务，多个线程并发执行任务效率要高，CPU不会因为某个线程需要等待资源而进入空闲状态</li>\n<li>计算密集型任务，没有必要使用多线程，因为多线程上下文切换更耗资源</li>\n</ol>\n<h4 id=\"为什么要使用线程池\"><a href=\"#为什么要使用线程池\" class=\"headerlink\" title=\"为什么要使用线程池\"></a>为什么要使用线程池</h4><ol>\n<li>性能方面</li>\n<li>复用方面</li>\n<li>为了复用</li>\n<li>Java创建线程的消耗</li>\n<li>数据库连接的消耗</li>\n</ol>\n<h2 id=\"编程问题\"><a href=\"#编程问题\" class=\"headerlink\" title=\"编程问题\"></a>编程问题</h2><h4 id=\"写一个固定容量的同步容器，拥有put和get方法，以及getCount方法。能够支持2个生产者线程以及10个消费者线程的阻塞调用\"><a href=\"#写一个固定容量的同步容器，拥有put和get方法，以及getCount方法。能够支持2个生产者线程以及10个消费者线程的阻塞调用\" class=\"headerlink\" title=\"写一个固定容量的同步容器，拥有put和get方法，以及getCount方法。能够支持2个生产者线程以及10个消费者线程的阻塞调用\"></a>写一个固定容量的同步容器，拥有put和get方法，以及getCount方法。能够支持2个生产者线程以及10个消费者线程的阻塞调用</h4><p>使用<code>wait</code>和<code>notify</code>或<code>notifyAll</code>来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyContainer</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">10</span>; <span class=\"comment\">// 最多10个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> LinkedList&lt;T&gt; list = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为什么用while不用if</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lists.size == MAX) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        lists.add(t);</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通知消费者线程进行消费</span></span><br><span class=\"line\">        <span class=\"comment\">// 为什么不用notify</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        T t = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lists.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        t = lists.removeFirst();</span><br><span class=\"line\">        count--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通知生产者进行生产</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyContainer&lt;String&gt; c = <span class=\"keyword\">new</span> MyContainer&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 启动消费者线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++) &#123;</span><br><span class=\"line\">                    System.out.println(c.get())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"string\">\"c\"</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDES.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动生产者线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; i &lt; <span class=\"number\">25</span>; j++) &#123;</span><br><span class=\"line\">                    c.put(Thread.currentThread().getName() + <span class=\"string\">\" \"</span> + j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"string\">\"p\"</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么用<code>while</code>不用<code>if</code>呢？以消费者为例：</p>\n<ol>\n<li>假如有25个线程去获取元素，但是这是元素数量为0，大家陷入等待状态，释放锁（因为方法是<code>synchronized</code>修饰的，释放锁表示其它线程也可以继续访问了，相当于25个线程都调了这个方法，都在等待）</li>\n<li>生产者添加了一个元素，唤醒了所有的线程。</li>\n</ol>\n"},{"title":"Run-Time Data Areas","date":"2020-01-20T16:00:00.000Z","_content":"The Java Virtual Machine defines various (各种不同的) run-time data areas that are used during execution of a program. Some of these data areas are created on Java Virtual Machine start-up and are destroyed only when the Java Virtual Machine exits. Other data areas are per thread. Per-thread data areas are create when a thread is created and destroyed when the thread exits.\n\n\n\n## The PC Register\nThe Java Virtual Machine can support many threads of execution at once. Ecah Java Virtual Machine thread has it own PC (Program Counter) register. At any point, each Java Virtual Machine thread is executing the code of a single method, namley the current method for that thread. If that method is not *native*, the PC register contains the address of the Java Virtual Machine instruction (指令) currently being executed.\n\n## Stacks\nEach Java Virtual Machine thread has a **private** Java Virtual Machine stack, created at the same time as the thread. A Java Virutal Machine stack stores **frames**. A Java Virtual Machine stack is anaiogous (相似的) of the stack of a conventional (传统的) language such as C: it holds local variables and partial (部分) results, and plays a part in (用在参加某活动时，作为其中的一员，一部分) method invocation (调用) and return. Because the Java Virutal Machine stack is never manipulated (控制) directly except to push and pop frames, frames may be heap allocated. The memory for a Java Virtual Machine stack does not need to be contiguous (相邻的).\n\nThis specification (规范) permits (允许) Java Virtual Machine stacks either to be of a fixed size or to dynamically expand and contract (收缩) as required by the conputation. If the Java Virtual Machine stacks are of a fixed size, the size of each Java Virtual Machine stack may be chosen independently when that stack is created.\n\n> A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of Java Virtual Machine stacks, as well as, in the case of dynamically expanding or contracting Java Virtual Machine stacks, control over the maximum and minimum sizes.\n\nThe following exceptional (特殊的) conditions are associated (有关联) with Java Virtual Machine stacks:\n- If the computation in a thread requires a larger Java Virtual Machine stack than is permitted, the Java Virtual Machine throws a `StackOverflowError`.\n- If Java Virtual Machine stacks can be dynamically expanded, and expansion is attempted but in sufficient (不足的) memory can be made available to effect the expansion, or if insufficient memory can be make available to create the initial Java Virtual Machine stack for a new thread, the Java Virtual Machine throws an `OutOfMemoryError`.\n\n```mermaid\ngraph LR\n    A1(Stack Frame)\n    A2(Stack Frame)\n    A3(Stack Frame)\n    A4(Stack Frame)\n    A5(Stack Frame)\n\n    B1(Local Variables)\n    B2(Operand Stack)\n    B3(Reference to runtime constant pool)\n    B4(Return Address)\n    B5(附加信息)\n\n    subgraph Stacks\n        A1\n        A2\n        A3\n        A4\n        A5\n    end\n\n    subgraph Frame\n        B1\n        B2\n        B3\n        B4\n        B5\n    end\n\n    A2 --> B3\n```\n\n## Heap\nThe Java Virtual Machine has a heap that is **shared** among all Java Virtual Machine threads. The heap is the run-time data area from which memory for all classes instances and arrays is allocated.\n\nThe heap is created on virtual machine start-up. Heap stroage for objects is reclaimed (再生) by an automatic storage management (known as a garbage collector); objects are never explicitly (明确) deallocated (被释放). The Java Virtual Machine assumes (假定) no particular (特别的) type of automatic storage management sytem, and the storage management technique may be chosen according to the implementor's system requirements. The heap may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger heap becomes unnecessary. The memory for the heap dost not need to be contiguous (相接).\n\n> A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the mothod area, as well as, in the case of a varying-size method area, control over the maxinum and mininum method area size.\n\nThe following exceptional condition is associated with the heap:\n- If a computation requires more heap than can be make available by the automatic sorage managment system, the Java Virtual Machine throws an `OutOfMemoryError`.\n\n## Method Area\nThe Java Virtual Machine has a method area that is **shared** among all Java Virtual Machine threads. The method area is analogous (相似的) to the storage area for complied code of a conventional language or analogous to the \"text\" segment (部分) in an operating system process.\n\nThe method area is created on virutal machine start-up. Although the method area is logically part of the heap, simple implementations may choose not to either garbage collect or compact it. The specification (规范) does not mandate (授权) the location of the method area or the policies (政策) used to manage complied code. The method area may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger method area becomes unnecessary. The memory for the method area does not need to be contiguous.\n\n> A Java Virutal Machine implementation may provide the programmer or the user control over the initial size of the method area, as well as, in the case of a varying-size method area, control over the maximum and minimum method area size.\n\nThe following exceptional condition is associated with method area:\n- If memory in the mothod area cannot be made a avaliable to satisfy (使满意) an allocation request, the Java Virtual Machine throws an `OutOfMemoryError`.\n\n### Run-Time Constant Pool\nA run-time constant pool is a per-class or per-interface run-time representation of the constant_pool table in a class file. It contants serveral kinds of constatnts, ranging from numeric literals known at complie-time to method and field reference that must be resolved at run-time. The run-time constant pool serves a function similar to that of a symbol table for a conventional programming language, although it contanins a wider range of data than a typical symbol table.\n\nEach run-time constant pool is allocated from the Java Virtual Machine's method area. The run-time constant pool for a class or interface is constructed wwhen the class or interface is created by the Java Virtual Machine.\n\nThe folloing exception condition is assoiated with the construction (构造) of the run-time constant pool for a class or interface:\n- When creating a class or interface, if the construction of the run-time constant pool requires more memory than can be avaliable in the method area of the Java Virtual Machine, the Java Virtual Machine throws an `OutOfMemoryError`.\n\n## Native Method Stacks\nAn implementation of the Java Virtual Machine may use conventional stacks, colloquially (通俗地) called \"C stack\" to support *native* methods (methods written in a language other than the Java programming language). Native method stacks may also be used by implementation of an interpreter (解释器) for the Java Virtual Machine's instruction set in a language such as C. Java Virtual Machine implementations thant cannot load *native* methods and that do not themselves rely on conventional stacks need not supply native method stacks. If supplied, native method stacks are typically allocated per thread when each thread is created.\n\nThe specification permits native method stacks either to be of a fixed size or to dynamically expand and contract as required by the computation. If the native method stacks are of a fixed size, the size of each native method stack may be chosen independently when that stack is created.\n\n> A Java Virtual Machine implementation may provide the programmer or user control over (控制) the native mthod stacks, as well as, in the case of varying-size nativve method stacks, control over the maximum and minimum method stack sizes.\n\nThe following exceptional conditions are associated with native method stacks:\n- If the computation in a thread requires a larger native method stack than is permitted, the Java Virtual Machine throws a `StackOverflowError`.\n- If native method stacks can be dynamically expanded and native method stack expansion is attempted bu insufficient memory can be made available, or if insufficient memory can be made avaliable to create the inital native method stack for a new thread, the Java Virtual Machine throws an `OutOfMemoryError`.","source":"_posts/深入浅出JVM/Run-Time Data Areas.md","raw":"---\ntitle: Run-Time Data Areas\n\ncategories:\n- Java Virtual Machine Specification\n\ntags:\n- JVM\n\ndate: 2020-01-21\n---\nThe Java Virtual Machine defines various (各种不同的) run-time data areas that are used during execution of a program. Some of these data areas are created on Java Virtual Machine start-up and are destroyed only when the Java Virtual Machine exits. Other data areas are per thread. Per-thread data areas are create when a thread is created and destroyed when the thread exits.\n\n\n\n## The PC Register\nThe Java Virtual Machine can support many threads of execution at once. Ecah Java Virtual Machine thread has it own PC (Program Counter) register. At any point, each Java Virtual Machine thread is executing the code of a single method, namley the current method for that thread. If that method is not *native*, the PC register contains the address of the Java Virtual Machine instruction (指令) currently being executed.\n\n## Stacks\nEach Java Virtual Machine thread has a **private** Java Virtual Machine stack, created at the same time as the thread. A Java Virutal Machine stack stores **frames**. A Java Virtual Machine stack is anaiogous (相似的) of the stack of a conventional (传统的) language such as C: it holds local variables and partial (部分) results, and plays a part in (用在参加某活动时，作为其中的一员，一部分) method invocation (调用) and return. Because the Java Virutal Machine stack is never manipulated (控制) directly except to push and pop frames, frames may be heap allocated. The memory for a Java Virtual Machine stack does not need to be contiguous (相邻的).\n\nThis specification (规范) permits (允许) Java Virtual Machine stacks either to be of a fixed size or to dynamically expand and contract (收缩) as required by the conputation. If the Java Virtual Machine stacks are of a fixed size, the size of each Java Virtual Machine stack may be chosen independently when that stack is created.\n\n> A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of Java Virtual Machine stacks, as well as, in the case of dynamically expanding or contracting Java Virtual Machine stacks, control over the maximum and minimum sizes.\n\nThe following exceptional (特殊的) conditions are associated (有关联) with Java Virtual Machine stacks:\n- If the computation in a thread requires a larger Java Virtual Machine stack than is permitted, the Java Virtual Machine throws a `StackOverflowError`.\n- If Java Virtual Machine stacks can be dynamically expanded, and expansion is attempted but in sufficient (不足的) memory can be made available to effect the expansion, or if insufficient memory can be make available to create the initial Java Virtual Machine stack for a new thread, the Java Virtual Machine throws an `OutOfMemoryError`.\n\n```mermaid\ngraph LR\n    A1(Stack Frame)\n    A2(Stack Frame)\n    A3(Stack Frame)\n    A4(Stack Frame)\n    A5(Stack Frame)\n\n    B1(Local Variables)\n    B2(Operand Stack)\n    B3(Reference to runtime constant pool)\n    B4(Return Address)\n    B5(附加信息)\n\n    subgraph Stacks\n        A1\n        A2\n        A3\n        A4\n        A5\n    end\n\n    subgraph Frame\n        B1\n        B2\n        B3\n        B4\n        B5\n    end\n\n    A2 --> B3\n```\n\n## Heap\nThe Java Virtual Machine has a heap that is **shared** among all Java Virtual Machine threads. The heap is the run-time data area from which memory for all classes instances and arrays is allocated.\n\nThe heap is created on virtual machine start-up. Heap stroage for objects is reclaimed (再生) by an automatic storage management (known as a garbage collector); objects are never explicitly (明确) deallocated (被释放). The Java Virtual Machine assumes (假定) no particular (特别的) type of automatic storage management sytem, and the storage management technique may be chosen according to the implementor's system requirements. The heap may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger heap becomes unnecessary. The memory for the heap dost not need to be contiguous (相接).\n\n> A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the mothod area, as well as, in the case of a varying-size method area, control over the maxinum and mininum method area size.\n\nThe following exceptional condition is associated with the heap:\n- If a computation requires more heap than can be make available by the automatic sorage managment system, the Java Virtual Machine throws an `OutOfMemoryError`.\n\n## Method Area\nThe Java Virtual Machine has a method area that is **shared** among all Java Virtual Machine threads. The method area is analogous (相似的) to the storage area for complied code of a conventional language or analogous to the \"text\" segment (部分) in an operating system process.\n\nThe method area is created on virutal machine start-up. Although the method area is logically part of the heap, simple implementations may choose not to either garbage collect or compact it. The specification (规范) does not mandate (授权) the location of the method area or the policies (政策) used to manage complied code. The method area may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger method area becomes unnecessary. The memory for the method area does not need to be contiguous.\n\n> A Java Virutal Machine implementation may provide the programmer or the user control over the initial size of the method area, as well as, in the case of a varying-size method area, control over the maximum and minimum method area size.\n\nThe following exceptional condition is associated with method area:\n- If memory in the mothod area cannot be made a avaliable to satisfy (使满意) an allocation request, the Java Virtual Machine throws an `OutOfMemoryError`.\n\n### Run-Time Constant Pool\nA run-time constant pool is a per-class or per-interface run-time representation of the constant_pool table in a class file. It contants serveral kinds of constatnts, ranging from numeric literals known at complie-time to method and field reference that must be resolved at run-time. The run-time constant pool serves a function similar to that of a symbol table for a conventional programming language, although it contanins a wider range of data than a typical symbol table.\n\nEach run-time constant pool is allocated from the Java Virtual Machine's method area. The run-time constant pool for a class or interface is constructed wwhen the class or interface is created by the Java Virtual Machine.\n\nThe folloing exception condition is assoiated with the construction (构造) of the run-time constant pool for a class or interface:\n- When creating a class or interface, if the construction of the run-time constant pool requires more memory than can be avaliable in the method area of the Java Virtual Machine, the Java Virtual Machine throws an `OutOfMemoryError`.\n\n## Native Method Stacks\nAn implementation of the Java Virtual Machine may use conventional stacks, colloquially (通俗地) called \"C stack\" to support *native* methods (methods written in a language other than the Java programming language). Native method stacks may also be used by implementation of an interpreter (解释器) for the Java Virtual Machine's instruction set in a language such as C. Java Virtual Machine implementations thant cannot load *native* methods and that do not themselves rely on conventional stacks need not supply native method stacks. If supplied, native method stacks are typically allocated per thread when each thread is created.\n\nThe specification permits native method stacks either to be of a fixed size or to dynamically expand and contract as required by the computation. If the native method stacks are of a fixed size, the size of each native method stack may be chosen independently when that stack is created.\n\n> A Java Virtual Machine implementation may provide the programmer or user control over (控制) the native mthod stacks, as well as, in the case of varying-size nativve method stacks, control over the maximum and minimum method stack sizes.\n\nThe following exceptional conditions are associated with native method stacks:\n- If the computation in a thread requires a larger native method stack than is permitted, the Java Virtual Machine throws a `StackOverflowError`.\n- If native method stacks can be dynamically expanded and native method stack expansion is attempted bu insufficient memory can be made available, or if insufficient memory can be made avaliable to create the inital native method stack for a new thread, the Java Virtual Machine throws an `OutOfMemoryError`.","slug":"深入浅出JVM/Run-Time Data Areas","published":1,"updated":"2020-04-12T08:28:29.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mbn00brm33p5q6xbtf2","content":"<p>The Java Virtual Machine defines various (各种不同的) run-time data areas that are used during execution of a program. Some of these data areas are created on Java Virtual Machine start-up and are destroyed only when the Java Virtual Machine exits. Other data areas are per thread. Per-thread data areas are create when a thread is created and destroyed when the thread exits.</p>\n<h2 id=\"The-PC-Register\"><a href=\"#The-PC-Register\" class=\"headerlink\" title=\"The PC Register\"></a>The PC Register</h2><p>The Java Virtual Machine can support many threads of execution at once. Ecah Java Virtual Machine thread has it own PC (Program Counter) register. At any point, each Java Virtual Machine thread is executing the code of a single method, namley the current method for that thread. If that method is not <em>native</em>, the PC register contains the address of the Java Virtual Machine instruction (指令) currently being executed.</p>\n<h2 id=\"Stacks\"><a href=\"#Stacks\" class=\"headerlink\" title=\"Stacks\"></a>Stacks</h2><p>Each Java Virtual Machine thread has a <strong>private</strong> Java Virtual Machine stack, created at the same time as the thread. A Java Virutal Machine stack stores <strong>frames</strong>. A Java Virtual Machine stack is anaiogous (相似的) of the stack of a conventional (传统的) language such as C: it holds local variables and partial (部分) results, and plays a part in (用在参加某活动时，作为其中的一员，一部分) method invocation (调用) and return. Because the Java Virutal Machine stack is never manipulated (控制) directly except to push and pop frames, frames may be heap allocated. The memory for a Java Virtual Machine stack does not need to be contiguous (相邻的).</p>\n<p>This specification (规范) permits (允许) Java Virtual Machine stacks either to be of a fixed size or to dynamically expand and contract (收缩) as required by the conputation. If the Java Virtual Machine stacks are of a fixed size, the size of each Java Virtual Machine stack may be chosen independently when that stack is created.</p>\n<blockquote>\n<p>A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of Java Virtual Machine stacks, as well as, in the case of dynamically expanding or contracting Java Virtual Machine stacks, control over the maximum and minimum sizes.</p>\n</blockquote>\n<p>The following exceptional (特殊的) conditions are associated (有关联) with Java Virtual Machine stacks:</p>\n<ul>\n<li>If the computation in a thread requires a larger Java Virtual Machine stack than is permitted, the Java Virtual Machine throws a <code>StackOverflowError</code>.</li>\n<li>If Java Virtual Machine stacks can be dynamically expanded, and expansion is attempted but in sufficient (不足的) memory can be made available to effect the expansion, or if insufficient memory can be make available to create the initial Java Virtual Machine stack for a new thread, the Java Virtual Machine throws an <code>OutOfMemoryError</code>.</li>\n</ul>\n<pre class=\"mermaid\">graph LR\n    A1(Stack Frame)\n    A2(Stack Frame)\n    A3(Stack Frame)\n    A4(Stack Frame)\n    A5(Stack Frame)\n\n    B1(Local Variables)\n    B2(Operand Stack)\n    B3(Reference to runtime constant pool)\n    B4(Return Address)\n    B5(附加信息)\n\n    subgraph Stacks\n        A1\n        A2\n        A3\n        A4\n        A5\n    end\n\n    subgraph Frame\n        B1\n        B2\n        B3\n        B4\n        B5\n    end\n\n    A2 --> B3</pre>\n\n<h2 id=\"Heap\"><a href=\"#Heap\" class=\"headerlink\" title=\"Heap\"></a>Heap</h2><p>The Java Virtual Machine has a heap that is <strong>shared</strong> among all Java Virtual Machine threads. The heap is the run-time data area from which memory for all classes instances and arrays is allocated.</p>\n<p>The heap is created on virtual machine start-up. Heap stroage for objects is reclaimed (再生) by an automatic storage management (known as a garbage collector); objects are never explicitly (明确) deallocated (被释放). The Java Virtual Machine assumes (假定) no particular (特别的) type of automatic storage management sytem, and the storage management technique may be chosen according to the implementor’s system requirements. The heap may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger heap becomes unnecessary. The memory for the heap dost not need to be contiguous (相接).</p>\n<blockquote>\n<p>A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the mothod area, as well as, in the case of a varying-size method area, control over the maxinum and mininum method area size.</p>\n</blockquote>\n<p>The following exceptional condition is associated with the heap:</p>\n<ul>\n<li>If a computation requires more heap than can be make available by the automatic sorage managment system, the Java Virtual Machine throws an <code>OutOfMemoryError</code>.</li>\n</ul>\n<h2 id=\"Method-Area\"><a href=\"#Method-Area\" class=\"headerlink\" title=\"Method Area\"></a>Method Area</h2><p>The Java Virtual Machine has a method area that is <strong>shared</strong> among all Java Virtual Machine threads. The method area is analogous (相似的) to the storage area for complied code of a conventional language or analogous to the “text” segment (部分) in an operating system process.</p>\n<p>The method area is created on virutal machine start-up. Although the method area is logically part of the heap, simple implementations may choose not to either garbage collect or compact it. The specification (规范) does not mandate (授权) the location of the method area or the policies (政策) used to manage complied code. The method area may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger method area becomes unnecessary. The memory for the method area does not need to be contiguous.</p>\n<blockquote>\n<p>A Java Virutal Machine implementation may provide the programmer or the user control over the initial size of the method area, as well as, in the case of a varying-size method area, control over the maximum and minimum method area size.</p>\n</blockquote>\n<p>The following exceptional condition is associated with method area:</p>\n<ul>\n<li>If memory in the mothod area cannot be made a avaliable to satisfy (使满意) an allocation request, the Java Virtual Machine throws an <code>OutOfMemoryError</code>.</li>\n</ul>\n<h3 id=\"Run-Time-Constant-Pool\"><a href=\"#Run-Time-Constant-Pool\" class=\"headerlink\" title=\"Run-Time Constant Pool\"></a>Run-Time Constant Pool</h3><p>A run-time constant pool is a per-class or per-interface run-time representation of the constant_pool table in a class file. It contants serveral kinds of constatnts, ranging from numeric literals known at complie-time to method and field reference that must be resolved at run-time. The run-time constant pool serves a function similar to that of a symbol table for a conventional programming language, although it contanins a wider range of data than a typical symbol table.</p>\n<p>Each run-time constant pool is allocated from the Java Virtual Machine’s method area. The run-time constant pool for a class or interface is constructed wwhen the class or interface is created by the Java Virtual Machine.</p>\n<p>The folloing exception condition is assoiated with the construction (构造) of the run-time constant pool for a class or interface:</p>\n<ul>\n<li>When creating a class or interface, if the construction of the run-time constant pool requires more memory than can be avaliable in the method area of the Java Virtual Machine, the Java Virtual Machine throws an <code>OutOfMemoryError</code>.</li>\n</ul>\n<h2 id=\"Native-Method-Stacks\"><a href=\"#Native-Method-Stacks\" class=\"headerlink\" title=\"Native Method Stacks\"></a>Native Method Stacks</h2><p>An implementation of the Java Virtual Machine may use conventional stacks, colloquially (通俗地) called “C stack” to support <em>native</em> methods (methods written in a language other than the Java programming language). Native method stacks may also be used by implementation of an interpreter (解释器) for the Java Virtual Machine’s instruction set in a language such as C. Java Virtual Machine implementations thant cannot load <em>native</em> methods and that do not themselves rely on conventional stacks need not supply native method stacks. If supplied, native method stacks are typically allocated per thread when each thread is created.</p>\n<p>The specification permits native method stacks either to be of a fixed size or to dynamically expand and contract as required by the computation. If the native method stacks are of a fixed size, the size of each native method stack may be chosen independently when that stack is created.</p>\n<blockquote>\n<p>A Java Virtual Machine implementation may provide the programmer or user control over (控制) the native mthod stacks, as well as, in the case of varying-size nativve method stacks, control over the maximum and minimum method stack sizes.</p>\n</blockquote>\n<p>The following exceptional conditions are associated with native method stacks:</p>\n<ul>\n<li>If the computation in a thread requires a larger native method stack than is permitted, the Java Virtual Machine throws a <code>StackOverflowError</code>.</li>\n<li>If native method stacks can be dynamically expanded and native method stack expansion is attempted bu insufficient memory can be made available, or if insufficient memory can be made avaliable to create the inital native method stack for a new thread, the Java Virtual Machine throws an <code>OutOfMemoryError</code>.</li>\n</ul>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>The Java Virtual Machine defines various (各种不同的) run-time data areas that are used during execution of a program. Some of these data areas are created on Java Virtual Machine start-up and are destroyed only when the Java Virtual Machine exits. Other data areas are per thread. Per-thread data areas are create when a thread is created and destroyed when the thread exits.</p>\n<h2 id=\"The-PC-Register\"><a href=\"#The-PC-Register\" class=\"headerlink\" title=\"The PC Register\"></a>The PC Register</h2><p>The Java Virtual Machine can support many threads of execution at once. Ecah Java Virtual Machine thread has it own PC (Program Counter) register. At any point, each Java Virtual Machine thread is executing the code of a single method, namley the current method for that thread. If that method is not <em>native</em>, the PC register contains the address of the Java Virtual Machine instruction (指令) currently being executed.</p>\n<h2 id=\"Stacks\"><a href=\"#Stacks\" class=\"headerlink\" title=\"Stacks\"></a>Stacks</h2><p>Each Java Virtual Machine thread has a <strong>private</strong> Java Virtual Machine stack, created at the same time as the thread. A Java Virutal Machine stack stores <strong>frames</strong>. A Java Virtual Machine stack is anaiogous (相似的) of the stack of a conventional (传统的) language such as C: it holds local variables and partial (部分) results, and plays a part in (用在参加某活动时，作为其中的一员，一部分) method invocation (调用) and return. Because the Java Virutal Machine stack is never manipulated (控制) directly except to push and pop frames, frames may be heap allocated. The memory for a Java Virtual Machine stack does not need to be contiguous (相邻的).</p>\n<p>This specification (规范) permits (允许) Java Virtual Machine stacks either to be of a fixed size or to dynamically expand and contract (收缩) as required by the conputation. If the Java Virtual Machine stacks are of a fixed size, the size of each Java Virtual Machine stack may be chosen independently when that stack is created.</p>\n<blockquote>\n<p>A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of Java Virtual Machine stacks, as well as, in the case of dynamically expanding or contracting Java Virtual Machine stacks, control over the maximum and minimum sizes.</p>\n</blockquote>\n<p>The following exceptional (特殊的) conditions are associated (有关联) with Java Virtual Machine stacks:</p>\n<ul>\n<li>If the computation in a thread requires a larger Java Virtual Machine stack than is permitted, the Java Virtual Machine throws a <code>StackOverflowError</code>.</li>\n<li>If Java Virtual Machine stacks can be dynamically expanded, and expansion is attempted but in sufficient (不足的) memory can be made available to effect the expansion, or if insufficient memory can be make available to create the initial Java Virtual Machine stack for a new thread, the Java Virtual Machine throws an <code>OutOfMemoryError</code>.</li>\n</ul>\n<pre class=\"mermaid\">graph LR\n    A1(Stack Frame)\n    A2(Stack Frame)\n    A3(Stack Frame)\n    A4(Stack Frame)\n    A5(Stack Frame)\n\n    B1(Local Variables)\n    B2(Operand Stack)\n    B3(Reference to runtime constant pool)\n    B4(Return Address)\n    B5(附加信息)\n\n    subgraph Stacks\n        A1\n        A2\n        A3\n        A4\n        A5\n    end\n\n    subgraph Frame\n        B1\n        B2\n        B3\n        B4\n        B5\n    end\n\n    A2 --> B3</pre>\n\n<h2 id=\"Heap\"><a href=\"#Heap\" class=\"headerlink\" title=\"Heap\"></a>Heap</h2><p>The Java Virtual Machine has a heap that is <strong>shared</strong> among all Java Virtual Machine threads. The heap is the run-time data area from which memory for all classes instances and arrays is allocated.</p>\n<p>The heap is created on virtual machine start-up. Heap stroage for objects is reclaimed (再生) by an automatic storage management (known as a garbage collector); objects are never explicitly (明确) deallocated (被释放). The Java Virtual Machine assumes (假定) no particular (特别的) type of automatic storage management sytem, and the storage management technique may be chosen according to the implementor’s system requirements. The heap may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger heap becomes unnecessary. The memory for the heap dost not need to be contiguous (相接).</p>\n<blockquote>\n<p>A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the mothod area, as well as, in the case of a varying-size method area, control over the maxinum and mininum method area size.</p>\n</blockquote>\n<p>The following exceptional condition is associated with the heap:</p>\n<ul>\n<li>If a computation requires more heap than can be make available by the automatic sorage managment system, the Java Virtual Machine throws an <code>OutOfMemoryError</code>.</li>\n</ul>\n<h2 id=\"Method-Area\"><a href=\"#Method-Area\" class=\"headerlink\" title=\"Method Area\"></a>Method Area</h2><p>The Java Virtual Machine has a method area that is <strong>shared</strong> among all Java Virtual Machine threads. The method area is analogous (相似的) to the storage area for complied code of a conventional language or analogous to the “text” segment (部分) in an operating system process.</p>\n<p>The method area is created on virutal machine start-up. Although the method area is logically part of the heap, simple implementations may choose not to either garbage collect or compact it. The specification (规范) does not mandate (授权) the location of the method area or the policies (政策) used to manage complied code. The method area may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger method area becomes unnecessary. The memory for the method area does not need to be contiguous.</p>\n<blockquote>\n<p>A Java Virutal Machine implementation may provide the programmer or the user control over the initial size of the method area, as well as, in the case of a varying-size method area, control over the maximum and minimum method area size.</p>\n</blockquote>\n<p>The following exceptional condition is associated with method area:</p>\n<ul>\n<li>If memory in the mothod area cannot be made a avaliable to satisfy (使满意) an allocation request, the Java Virtual Machine throws an <code>OutOfMemoryError</code>.</li>\n</ul>\n<h3 id=\"Run-Time-Constant-Pool\"><a href=\"#Run-Time-Constant-Pool\" class=\"headerlink\" title=\"Run-Time Constant Pool\"></a>Run-Time Constant Pool</h3><p>A run-time constant pool is a per-class or per-interface run-time representation of the constant_pool table in a class file. It contants serveral kinds of constatnts, ranging from numeric literals known at complie-time to method and field reference that must be resolved at run-time. The run-time constant pool serves a function similar to that of a symbol table for a conventional programming language, although it contanins a wider range of data than a typical symbol table.</p>\n<p>Each run-time constant pool is allocated from the Java Virtual Machine’s method area. The run-time constant pool for a class or interface is constructed wwhen the class or interface is created by the Java Virtual Machine.</p>\n<p>The folloing exception condition is assoiated with the construction (构造) of the run-time constant pool for a class or interface:</p>\n<ul>\n<li>When creating a class or interface, if the construction of the run-time constant pool requires more memory than can be avaliable in the method area of the Java Virtual Machine, the Java Virtual Machine throws an <code>OutOfMemoryError</code>.</li>\n</ul>\n<h2 id=\"Native-Method-Stacks\"><a href=\"#Native-Method-Stacks\" class=\"headerlink\" title=\"Native Method Stacks\"></a>Native Method Stacks</h2><p>An implementation of the Java Virtual Machine may use conventional stacks, colloquially (通俗地) called “C stack” to support <em>native</em> methods (methods written in a language other than the Java programming language). Native method stacks may also be used by implementation of an interpreter (解释器) for the Java Virtual Machine’s instruction set in a language such as C. Java Virtual Machine implementations thant cannot load <em>native</em> methods and that do not themselves rely on conventional stacks need not supply native method stacks. If supplied, native method stacks are typically allocated per thread when each thread is created.</p>\n<p>The specification permits native method stacks either to be of a fixed size or to dynamically expand and contract as required by the computation. If the native method stacks are of a fixed size, the size of each native method stack may be chosen independently when that stack is created.</p>\n<blockquote>\n<p>A Java Virtual Machine implementation may provide the programmer or user control over (控制) the native mthod stacks, as well as, in the case of varying-size nativve method stacks, control over the maximum and minimum method stack sizes.</p>\n</blockquote>\n<p>The following exceptional conditions are associated with native method stacks:</p>\n<ul>\n<li>If the computation in a thread requires a larger native method stack than is permitted, the Java Virtual Machine throws a <code>StackOverflowError</code>.</li>\n<li>If native method stacks can be dynamically expanded and native method stack expansion is attempted bu insufficient memory can be made available, or if insufficient memory can be made avaliable to create the inital native method stack for a new thread, the Java Virtual Machine throws an <code>OutOfMemoryError</code>.</li>\n</ul>\n"},{"title":"4. Sequence diagrams","_content":"\n- A Sequence diagram is an interaction diagram that shows how processes operate with one another and in what order.\n\nMermaid can render sequence diagrams.\n\n```\n# with mermaid type\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n```\n\n## Syntax\n### Participants\nThe participants (有关系的) can be defined implicitly(隐式) as in the first example on this page. The participants or actors (参与者) are rendered in order of(按…排列) appearance (露面) in the diagram source text. Sometimes you mights want to show the particiants in a different order than how they appear in the first message. It is possiable to specify the actor's order of appearance by doing the following:\n\n```\nsequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n```\n\n```mermaid\nsequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n```\n\n### Aliases\nThe actor can have a convenient(便捷) identifier and a descriptive(描述性的) label.\n\n```\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n```\n\n```mermaid\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n```\n\n## Messages\nMessages can be of two displayed either solid or with a dotted line.\n\n```\n[Actor][Arrow][Actor]: Message text\n```\n\nThere are six types of arrows currently supprots:\n\n|type|Description|\n|:--|:--|\n|->|Solid line without arrow|\n|-->|Dotted line without arrow|\n|->>|Solid line with arrow|\n|-->>|Dotted line without arrow|\n|-x|Solid line with a cross at the end (async)|\n|--x|Dotted line with a cross at the end (async)|\n\n```\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A -> J: Hello John, how are you?\n    J --> A: Great!\n    J -->> A: Great!\n    J -x A: Great!\n    J --x A: Great!\n```\n\n```mermaid\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A -> J: Hello John, how are you?\n    J --> A: Great!\n    J -->> A: Great!\n    J -x A: Great!\n    J --x A: Great!\n```\n\n## Activations\nIt is possible to activate and deactivate (停用) an actor. (de)activation can be dedicated declarations:\n```\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n```\n\nThere is also a shortcut natation by appending `+` / `-` suffix to the message arrow:\n```\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\nActivations can be stacked (堆叠) for same actor:\n```\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n```\n\n## Notes\nIt is possible to add notes to a sequence diagram. This is done by the notation (符号) `Note [right of | left of | over] [actor]: Text in note content`.\n\nSee the example below:\n```\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n```\n\n```mermaid\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n```\n\nIt is possible to create notes spaning two participants:\n```\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n```\n\n```mermaid\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n```\n\n## Loops\nIt is possible to express loops in a sequence diagram. This is done by the notation:\n```\nloop Loop text\n... statements ...\nend\n```\n\nSee the example below:\n```\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n```\n\n```mermaid\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n```\n\n## Alt\nIt is possible to express alternative (可供替代的) paths in a sequence diagram. This is done by the notation:\n```\nalt Describing text\n... statements ...\nelse\n... statements ...\nend\n```\n\nOr if there is sequence that is optional (if without else):\n```\nopt Describing text\n... statements ...\nend\n```\n\nSee the example below:\n```\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n```\n\n## Background Highlighting\nIt is possible to highlight flows by providing colored background rects. This is done by the natation:\n```\n# The colors are defined using rgb and rgba syntax.\nrect rgb(0, 255, 0)\n... content ...\nend\n\nrect rgba(0, 0, 255, .1)\n... content ...\nend\n```\n\nSee the example below:\n```\nsequenceDiagram\n    rect rgba(0, 0, 255, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end\n\n    rect rgba(100, 0, 200, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end\n```\n\n```mermaid\nsequenceDiagram\n    rect rgba(0, 0, 255, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end\n\n    rect rgba(100, 0, 200, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end\n```\n\n## Comments\nComments can be entered within a sequence diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with `%%` (double percent signs). Any text after the start of the comments to the next newline will be treated as a comment, includeing any diagram synatx.\n\n```\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    %% this is a comment\n    John-->>Alice: Great!\n```\n\n## Styling\nStyling of the a sequence is done by defining a number of css classes. During rendering these classes are extracted (提取) from the file located at `src/themes/sequence.scss`.\n\n### Classes used\n| Class | Description |\n| :-- | :-- |\n| actor | Style for the actor box at the top of the diagram. |\n| text.actor | Styles for text in the actor box at the toop of the diagram. |\n| actor-line | The vertiacl line for an actor. |\n| messageLine0 | Styles for the solid message line. |\n| messageLine1 | Styles for the dotted message line. |\n| messageText | Defined styles for the text on the message arrows. |\n| labelBox | Defines styles label to left in a loop. |\n| labelText | Styles for the text in the loop box. |\n| loopLine | Defines styles for the lines in the loop box. |\n| note | Styles for the note box. |\n| noteText | Styles for the text on in the note boxes. |\n\n### Sample stylesheet\n```css\nbody {\n    background: white;\n}\n\n.actor {\n    stroke: #CCCCFF;\n    fill: #ECECFF;\n}\ntext.actor {\n    fill:black;\n    stroke:none;\n    font-family: Helvetica;\n}\n\n.actor-line {\n    stroke:grey;\n}\n\n.messageLine0 {\n    stroke-width:1.5;\n    stroke-dasharray: \"2 2\";\n    marker-end:\"url(#arrowhead)\";\n    stroke:black;\n}\n\n.messageLine1 {\n    stroke-width:1.5;\n    stroke-dasharray: \"2 2\";\n    stroke:black;\n}\n\n#arrowhead {\n    fill:black;\n\n}\n\n.messageText {\n    fill:black;\n    stroke:none;\n    font-family: 'trebuchet ms', verdana, arial;\n    font-size:14px;\n}\n\n.labelBox {\n    stroke: #CCCCFF;\n    fill: #ECECFF;\n}\n\n.labelText {\n    fill:black;\n    stroke:none;\n    font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopText {\n    fill:black;\n    stroke:none;\n    font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopLine {\n    stroke-width:2;\n    stroke-dasharray: \"2 2\";\n    marker-end:\"url(#arrowhead)\";\n    stroke: #CCCCFF;\n}\n\n.note {\n    stroke: #decc93;\n    stroke: #CCCCFF;\n    fill: #fff5ad;\n}\n\n.noteText {\n    fill:black;\n    stroke:none;\n    font-family: 'trebuchet ms', verdana, arial;\n    font-size:14px;\n}\n```\n\n## Configuration\nIs is possible to adjust the marigins (边距) for rendering the sequence diagram.\n\nThis is done by defining `mermaid.sequenceConfig` or by the CLI to use a JSON file with the configuration. How to use the CLI is described in the [mermaidCLI ](https://mermaid-js.github.io/mermaid/#/mermaidCLI.html) page. `mermaid.sequenceConfig` can be set to a JSON string with config parameters or the corresponding (相应的) object.\n\n```js\nmermaid.sequenceConfig = {\n    diagramMarginX:50,\n    diagramMarginY:10,\n    boxTextMargin:5,\n    noteMargin:10,\n    messageMargin:35,\n    mirrorActors:true\n};\n```\n\n### Possible configuration params\n| Param | Default value | Descripiton |\n| :-- | :-- |\n| mirrorActor | false | Turns on/off the rendering of actors below the diagram as well as above it |\n| bottomMarginAdj | 1 | Adjust how far down the graph ended. Wide borders styles with css could generate unwantewd clipping which is why the config param exists. |","source":"_posts/绘图插件mermaid/4. Sequence diagrams.md","raw":"---\ntitle: 4. Sequence diagrams\n\ntags:\n- mermaid\n\ncategories:\n- 绘图插件 mermaid\n---\n\n- A Sequence diagram is an interaction diagram that shows how processes operate with one another and in what order.\n\nMermaid can render sequence diagrams.\n\n```\n# with mermaid type\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n```\n\n## Syntax\n### Participants\nThe participants (有关系的) can be defined implicitly(隐式) as in the first example on this page. The participants or actors (参与者) are rendered in order of(按…排列) appearance (露面) in the diagram source text. Sometimes you mights want to show the particiants in a different order than how they appear in the first message. It is possiable to specify the actor's order of appearance by doing the following:\n\n```\nsequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n```\n\n```mermaid\nsequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n```\n\n### Aliases\nThe actor can have a convenient(便捷) identifier and a descriptive(描述性的) label.\n\n```\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n```\n\n```mermaid\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n```\n\n## Messages\nMessages can be of two displayed either solid or with a dotted line.\n\n```\n[Actor][Arrow][Actor]: Message text\n```\n\nThere are six types of arrows currently supprots:\n\n|type|Description|\n|:--|:--|\n|->|Solid line without arrow|\n|-->|Dotted line without arrow|\n|->>|Solid line with arrow|\n|-->>|Dotted line without arrow|\n|-x|Solid line with a cross at the end (async)|\n|--x|Dotted line with a cross at the end (async)|\n\n```\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A -> J: Hello John, how are you?\n    J --> A: Great!\n    J -->> A: Great!\n    J -x A: Great!\n    J --x A: Great!\n```\n\n```mermaid\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A -> J: Hello John, how are you?\n    J --> A: Great!\n    J -->> A: Great!\n    J -x A: Great!\n    J --x A: Great!\n```\n\n## Activations\nIt is possible to activate and deactivate (停用) an actor. (de)activation can be dedicated declarations:\n```\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n```\n\nThere is also a shortcut natation by appending `+` / `-` suffix to the message arrow:\n```\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\nActivations can be stacked (堆叠) for same actor:\n```\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n```\n\n## Notes\nIt is possible to add notes to a sequence diagram. This is done by the notation (符号) `Note [right of | left of | over] [actor]: Text in note content`.\n\nSee the example below:\n```\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n```\n\n```mermaid\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n```\n\nIt is possible to create notes spaning two participants:\n```\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n```\n\n```mermaid\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n```\n\n## Loops\nIt is possible to express loops in a sequence diagram. This is done by the notation:\n```\nloop Loop text\n... statements ...\nend\n```\n\nSee the example below:\n```\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n```\n\n```mermaid\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n```\n\n## Alt\nIt is possible to express alternative (可供替代的) paths in a sequence diagram. This is done by the notation:\n```\nalt Describing text\n... statements ...\nelse\n... statements ...\nend\n```\n\nOr if there is sequence that is optional (if without else):\n```\nopt Describing text\n... statements ...\nend\n```\n\nSee the example below:\n```\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n```\n\n## Background Highlighting\nIt is possible to highlight flows by providing colored background rects. This is done by the natation:\n```\n# The colors are defined using rgb and rgba syntax.\nrect rgb(0, 255, 0)\n... content ...\nend\n\nrect rgba(0, 0, 255, .1)\n... content ...\nend\n```\n\nSee the example below:\n```\nsequenceDiagram\n    rect rgba(0, 0, 255, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end\n\n    rect rgba(100, 0, 200, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end\n```\n\n```mermaid\nsequenceDiagram\n    rect rgba(0, 0, 255, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end\n\n    rect rgba(100, 0, 200, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end\n```\n\n## Comments\nComments can be entered within a sequence diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with `%%` (double percent signs). Any text after the start of the comments to the next newline will be treated as a comment, includeing any diagram synatx.\n\n```\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    %% this is a comment\n    John-->>Alice: Great!\n```\n\n## Styling\nStyling of the a sequence is done by defining a number of css classes. During rendering these classes are extracted (提取) from the file located at `src/themes/sequence.scss`.\n\n### Classes used\n| Class | Description |\n| :-- | :-- |\n| actor | Style for the actor box at the top of the diagram. |\n| text.actor | Styles for text in the actor box at the toop of the diagram. |\n| actor-line | The vertiacl line for an actor. |\n| messageLine0 | Styles for the solid message line. |\n| messageLine1 | Styles for the dotted message line. |\n| messageText | Defined styles for the text on the message arrows. |\n| labelBox | Defines styles label to left in a loop. |\n| labelText | Styles for the text in the loop box. |\n| loopLine | Defines styles for the lines in the loop box. |\n| note | Styles for the note box. |\n| noteText | Styles for the text on in the note boxes. |\n\n### Sample stylesheet\n```css\nbody {\n    background: white;\n}\n\n.actor {\n    stroke: #CCCCFF;\n    fill: #ECECFF;\n}\ntext.actor {\n    fill:black;\n    stroke:none;\n    font-family: Helvetica;\n}\n\n.actor-line {\n    stroke:grey;\n}\n\n.messageLine0 {\n    stroke-width:1.5;\n    stroke-dasharray: \"2 2\";\n    marker-end:\"url(#arrowhead)\";\n    stroke:black;\n}\n\n.messageLine1 {\n    stroke-width:1.5;\n    stroke-dasharray: \"2 2\";\n    stroke:black;\n}\n\n#arrowhead {\n    fill:black;\n\n}\n\n.messageText {\n    fill:black;\n    stroke:none;\n    font-family: 'trebuchet ms', verdana, arial;\n    font-size:14px;\n}\n\n.labelBox {\n    stroke: #CCCCFF;\n    fill: #ECECFF;\n}\n\n.labelText {\n    fill:black;\n    stroke:none;\n    font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopText {\n    fill:black;\n    stroke:none;\n    font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopLine {\n    stroke-width:2;\n    stroke-dasharray: \"2 2\";\n    marker-end:\"url(#arrowhead)\";\n    stroke: #CCCCFF;\n}\n\n.note {\n    stroke: #decc93;\n    stroke: #CCCCFF;\n    fill: #fff5ad;\n}\n\n.noteText {\n    fill:black;\n    stroke:none;\n    font-family: 'trebuchet ms', verdana, arial;\n    font-size:14px;\n}\n```\n\n## Configuration\nIs is possible to adjust the marigins (边距) for rendering the sequence diagram.\n\nThis is done by defining `mermaid.sequenceConfig` or by the CLI to use a JSON file with the configuration. How to use the CLI is described in the [mermaidCLI ](https://mermaid-js.github.io/mermaid/#/mermaidCLI.html) page. `mermaid.sequenceConfig` can be set to a JSON string with config parameters or the corresponding (相应的) object.\n\n```js\nmermaid.sequenceConfig = {\n    diagramMarginX:50,\n    diagramMarginY:10,\n    boxTextMargin:5,\n    noteMargin:10,\n    messageMargin:35,\n    mirrorActors:true\n};\n```\n\n### Possible configuration params\n| Param | Default value | Descripiton |\n| :-- | :-- |\n| mirrorActor | false | Turns on/off the rendering of actors below the diagram as well as above it |\n| bottomMarginAdj | 1 | Adjust how far down the graph ended. Wide borders styles with css could generate unwantewd clipping which is why the config param exists. |","slug":"绘图插件mermaid/4. Sequence diagrams","published":1,"date":"2020-04-12T08:28:29.378Z","updated":"2020-04-12T08:28:29.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mbo00bum33pn2d09x5x","content":"<ul>\n<li>A Sequence diagram is an interaction diagram that shows how processes operate with one another and in what order.</li>\n</ul>\n<p>Mermaid can render sequence diagrams.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># with mermaid type</span><br><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!</pre>\n\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><h3 id=\"Participants\"><a href=\"#Participants\" class=\"headerlink\" title=\"Participants\"></a>Participants</h3><p>The participants (有关系的) can be defined implicitly(隐式) as in the first example on this page. The participants or actors (参与者) are rendered in order of(按…排列) appearance (露面) in the diagram source text. Sometimes you mights want to show the particiants in a different order than how they appear in the first message. It is possiable to specify the actor’s order of appearance by doing the following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant John</span><br><span class=\"line\">    participant Alice</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">sequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!</pre>\n\n<h3 id=\"Aliases\"><a href=\"#Aliases\" class=\"headerlink\" title=\"Aliases\"></a>Aliases</h3><p>The actor can have a convenient(便捷) identifier and a descriptive(描述性的) label.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant A as Alice</span><br><span class=\"line\">    participant J as John</span><br><span class=\"line\">    A-&gt;&gt;J: Hello John, how are you?</span><br><span class=\"line\">    J-&gt;&gt;A: Great!</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">sequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!</pre>\n\n<h2 id=\"Messages\"><a href=\"#Messages\" class=\"headerlink\" title=\"Messages\"></a>Messages</h2><p>Messages can be of two displayed either solid or with a dotted line.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Actor][Arrow][Actor]: Message text</span><br></pre></td></tr></table></figure>\n<p>There are six types of arrows currently supprots:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">type</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-&gt;</td>\n<td style=\"text-align:left\">Solid line without arrow</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">—&gt;</td>\n<td style=\"text-align:left\">Dotted line without arrow</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-&gt;&gt;</td>\n<td style=\"text-align:left\">Solid line with arrow</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">—&gt;&gt;</td>\n<td style=\"text-align:left\">Dotted line without arrow</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-x</td>\n<td style=\"text-align:left\">Solid line with a cross at the end (async)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">—x</td>\n<td style=\"text-align:left\">Dotted line with a cross at the end (async)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant A as Alice</span><br><span class=\"line\">    participant J as John</span><br><span class=\"line\">    A -&gt; J: Hello John, how are you?</span><br><span class=\"line\">    J --&gt; A: Great!</span><br><span class=\"line\">    J --&gt;&gt; A: Great!</span><br><span class=\"line\">    J -x A: Great!</span><br><span class=\"line\">    J --x A: Great!</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">sequenceDiagram\n    participant A as Alice\n    participant J as John\n    A -> J: Hello John, how are you?\n    J --> A: Great!\n    J -->> A: Great!\n    J -x A: Great!\n    J --x A: Great!</pre>\n\n<h2 id=\"Activations\"><a href=\"#Activations\" class=\"headerlink\" title=\"Activations\"></a>Activations</h2><p>It is possible to activate and deactivate (停用) an actor. (de)activation can be dedicated declarations:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    activate John</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br><span class=\"line\">    deactivate John</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John</pre>\n\n<p>There is also a shortcut natation by appending <code>+</code> / <code>-</code> suffix to the message arrow:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;+John: Hello John, how are you?</span><br><span class=\"line\">    John--&gt;&gt;-Alice: Great!</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!</pre>\n\n<p>Activations can be stacked (堆叠) for same actor:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;+John: Hello John, how are you?</span><br><span class=\"line\">    Alice-&gt;&gt;+John: John, can you hear me?</span><br><span class=\"line\">    John--&gt;&gt;-Alice: Hi Alice, I can hear you!</span><br><span class=\"line\">    John--&gt;&gt;-Alice: I feel great!</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!</pre>\n\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><p>It is possible to add notes to a sequence diagram. This is done by the notation (符号) <code>Note [right of | left of | over] [actor]: Text in note content</code>.</p>\n<p>See the example below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant John</span><br><span class=\"line\">    Note right of John: Text in note</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    participant John\n    Note right of John: Text in note</pre>\n\n<p>It is possible to create notes spaning two participants:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;John: Hello John, how are you?</span><br><span class=\"line\">    Note over Alice,John: A typical interaction</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction</pre>\n\n<h2 id=\"Loops\"><a href=\"#Loops\" class=\"headerlink\" title=\"Loops\"></a>Loops</h2><p>It is possible to express loops in a sequence diagram. This is done by the notation:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loop Loop text</span><br><span class=\"line\">... statements ...</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>See the example below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;John: Hello John, how are you?</span><br><span class=\"line\">    loop Every minute</span><br><span class=\"line\">        John--&gt;Alice: Great!</span><br><span class=\"line\">    end</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end</pre>\n\n<h2 id=\"Alt\"><a href=\"#Alt\" class=\"headerlink\" title=\"Alt\"></a>Alt</h2><p>It is possible to express alternative (可供替代的) paths in a sequence diagram. This is done by the notation:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alt Describing text</span><br><span class=\"line\">... statements ...</span><br><span class=\"line\">else</span><br><span class=\"line\">... statements ...</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>Or if there is sequence that is optional (if without else):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opt Describing text</span><br><span class=\"line\">... statements ...</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>See the example below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;Bob: Hello Bob, how are you?</span><br><span class=\"line\">    alt is sick</span><br><span class=\"line\">        Bob-&gt;&gt;Alice: Not so good :(</span><br><span class=\"line\">    else is well</span><br><span class=\"line\">        Bob-&gt;&gt;Alice: Feeling fresh like a daisy</span><br><span class=\"line\">    end</span><br><span class=\"line\">    opt Extra response</span><br><span class=\"line\">        Bob-&gt;&gt;Alice: Thanks for asking</span><br><span class=\"line\">    end</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end</pre>\n\n<h2 id=\"Background-Highlighting\"><a href=\"#Background-Highlighting\" class=\"headerlink\" title=\"Background Highlighting\"></a>Background Highlighting</h2><p>It is possible to highlight flows by providing colored background rects. This is done by the natation:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The colors are defined using rgb and rgba syntax.</span><br><span class=\"line\">rect rgb(0, 255, 0)</span><br><span class=\"line\">... content ...</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">rect rgba(0, 0, 255, .1)</span><br><span class=\"line\">... content ...</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>See the example below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    rect rgba(0, 0, 255, .5)</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    activate John</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br><span class=\"line\">    deactivate John</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    rect rgba(100, 0, 200, .5)</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    activate John</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br><span class=\"line\">    deactivate John</span><br><span class=\"line\">    end</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    rect rgba(0, 0, 255, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end\n\n    rect rgba(100, 0, 200, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end</pre>\n\n<h2 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h2><p>Comments can be entered within a sequence diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with <code>%%</code> (double percent signs). Any text after the start of the comments to the next newline will be treated as a comment, includeing any diagram synatx.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    %% this is a comment</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure>\n<h2 id=\"Styling\"><a href=\"#Styling\" class=\"headerlink\" title=\"Styling\"></a>Styling</h2><p>Styling of the a sequence is done by defining a number of css classes. During rendering these classes are extracted (提取) from the file located at <code>src/themes/sequence.scss</code>.</p>\n<h3 id=\"Classes-used\"><a href=\"#Classes-used\" class=\"headerlink\" title=\"Classes used\"></a>Classes used</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Class</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">actor</td>\n<td style=\"text-align:left\">Style for the actor box at the top of the diagram.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text.actor</td>\n<td style=\"text-align:left\">Styles for text in the actor box at the toop of the diagram.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">actor-line</td>\n<td style=\"text-align:left\">The vertiacl line for an actor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">messageLine0</td>\n<td style=\"text-align:left\">Styles for the solid message line.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">messageLine1</td>\n<td style=\"text-align:left\">Styles for the dotted message line.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">messageText</td>\n<td style=\"text-align:left\">Defined styles for the text on the message arrows.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">labelBox</td>\n<td style=\"text-align:left\">Defines styles label to left in a loop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">labelText</td>\n<td style=\"text-align:left\">Styles for the text in the loop box.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">loopLine</td>\n<td style=\"text-align:left\">Defines styles for the lines in the loop box.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">note</td>\n<td style=\"text-align:left\">Styles for the note box.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">noteText</td>\n<td style=\"text-align:left\">Styles for the text on in the note boxes.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"Sample-stylesheet\"><a href=\"#Sample-stylesheet\" class=\"headerlink\" title=\"Sample stylesheet\"></a>Sample stylesheet</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.actor</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: <span class=\"number\">#CCCCFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: <span class=\"number\">#ECECFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">text</span><span class=\"selector-class\">.actor</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Helvetica;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.actor-line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.messageLine0</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-width</span>:<span class=\"number\">1.5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-dasharray</span>: <span class=\"string\">\"2 2\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">marker-end</span>:<span class=\"string\">\"url(#arrowhead)\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.messageLine1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-width</span>:<span class=\"number\">1.5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-dasharray</span>: <span class=\"string\">\"2 2\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#arrowhead</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.messageText</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'trebuchet ms'</span>, verdana, arial;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.labelBox</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: <span class=\"number\">#CCCCFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: <span class=\"number\">#ECECFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.labelText</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'trebuchet ms'</span>, verdana, arial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.loopText</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'trebuchet ms'</span>, verdana, arial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.loopLine</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-width</span>:<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-dasharray</span>: <span class=\"string\">\"2 2\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">marker-end</span>:<span class=\"string\">\"url(#arrowhead)\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: <span class=\"number\">#CCCCFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.note</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: <span class=\"number\">#decc93</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: <span class=\"number\">#CCCCFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: <span class=\"number\">#fff5ad</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.noteText</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'trebuchet ms'</span>, verdana, arial;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p>Is is possible to adjust the marigins (边距) for rendering the sequence diagram.</p>\n<p>This is done by defining <code>mermaid.sequenceConfig</code> or by the CLI to use a JSON file with the configuration. How to use the CLI is described in the <a href=\"https://mermaid-js.github.io/mermaid/#/mermaidCLI.html\">mermaidCLI </a> page. <code>mermaid.sequenceConfig</code> can be set to a JSON string with config parameters or the corresponding (相应的) object.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mermaid.sequenceConfig = &#123;</span><br><span class=\"line\">    diagramMarginX:<span class=\"number\">50</span>,</span><br><span class=\"line\">    diagramMarginY:<span class=\"number\">10</span>,</span><br><span class=\"line\">    boxTextMargin:<span class=\"number\">5</span>,</span><br><span class=\"line\">    noteMargin:<span class=\"number\">10</span>,</span><br><span class=\"line\">    messageMargin:<span class=\"number\">35</span>,</span><br><span class=\"line\">    mirrorActors:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Possible-configuration-params\"><a href=\"#Possible-configuration-params\" class=\"headerlink\" title=\"Possible configuration params\"></a>Possible configuration params</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Param</th>\n<th style=\"text-align:left\">Default value</th>\n<th>Descripiton</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">mirrorActor</td>\n<td style=\"text-align:left\">false</td>\n<td>Turns on/off the rendering of actors below the diagram as well as above it</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bottomMarginAdj</td>\n<td style=\"text-align:left\">1</td>\n<td>Adjust how far down the graph ended. Wide borders styles with css could generate unwantewd clipping which is why the config param exists.</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<ul>\n<li>A Sequence diagram is an interaction diagram that shows how processes operate with one another and in what order.</li>\n</ul>\n<p>Mermaid can render sequence diagrams.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># with mermaid type</span><br><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!</pre>\n\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><h3 id=\"Participants\"><a href=\"#Participants\" class=\"headerlink\" title=\"Participants\"></a>Participants</h3><p>The participants (有关系的) can be defined implicitly(隐式) as in the first example on this page. The participants or actors (参与者) are rendered in order of(按…排列) appearance (露面) in the diagram source text. Sometimes you mights want to show the particiants in a different order than how they appear in the first message. It is possiable to specify the actor’s order of appearance by doing the following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant John</span><br><span class=\"line\">    participant Alice</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">sequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!</pre>\n\n<h3 id=\"Aliases\"><a href=\"#Aliases\" class=\"headerlink\" title=\"Aliases\"></a>Aliases</h3><p>The actor can have a convenient(便捷) identifier and a descriptive(描述性的) label.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant A as Alice</span><br><span class=\"line\">    participant J as John</span><br><span class=\"line\">    A-&gt;&gt;J: Hello John, how are you?</span><br><span class=\"line\">    J-&gt;&gt;A: Great!</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">sequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!</pre>\n\n<h2 id=\"Messages\"><a href=\"#Messages\" class=\"headerlink\" title=\"Messages\"></a>Messages</h2><p>Messages can be of two displayed either solid or with a dotted line.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Actor][Arrow][Actor]: Message text</span><br></pre></td></tr></table></figure>\n<p>There are six types of arrows currently supprots:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">type</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-&gt;</td>\n<td style=\"text-align:left\">Solid line without arrow</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">—&gt;</td>\n<td style=\"text-align:left\">Dotted line without arrow</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-&gt;&gt;</td>\n<td style=\"text-align:left\">Solid line with arrow</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">—&gt;&gt;</td>\n<td style=\"text-align:left\">Dotted line without arrow</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-x</td>\n<td style=\"text-align:left\">Solid line with a cross at the end (async)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">—x</td>\n<td style=\"text-align:left\">Dotted line with a cross at the end (async)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant A as Alice</span><br><span class=\"line\">    participant J as John</span><br><span class=\"line\">    A -&gt; J: Hello John, how are you?</span><br><span class=\"line\">    J --&gt; A: Great!</span><br><span class=\"line\">    J --&gt;&gt; A: Great!</span><br><span class=\"line\">    J -x A: Great!</span><br><span class=\"line\">    J --x A: Great!</span><br></pre></td></tr></table></figure>\n<pre class=\"mermaid\">sequenceDiagram\n    participant A as Alice\n    participant J as John\n    A -> J: Hello John, how are you?\n    J --> A: Great!\n    J -->> A: Great!\n    J -x A: Great!\n    J --x A: Great!</pre>\n\n<h2 id=\"Activations\"><a href=\"#Activations\" class=\"headerlink\" title=\"Activations\"></a>Activations</h2><p>It is possible to activate and deactivate (停用) an actor. (de)activation can be dedicated declarations:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    activate John</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br><span class=\"line\">    deactivate John</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John</pre>\n\n<p>There is also a shortcut natation by appending <code>+</code> / <code>-</code> suffix to the message arrow:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;+John: Hello John, how are you?</span><br><span class=\"line\">    John--&gt;&gt;-Alice: Great!</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!</pre>\n\n<p>Activations can be stacked (堆叠) for same actor:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;+John: Hello John, how are you?</span><br><span class=\"line\">    Alice-&gt;&gt;+John: John, can you hear me?</span><br><span class=\"line\">    John--&gt;&gt;-Alice: Hi Alice, I can hear you!</span><br><span class=\"line\">    John--&gt;&gt;-Alice: I feel great!</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!</pre>\n\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><p>It is possible to add notes to a sequence diagram. This is done by the notation (符号) <code>Note [right of | left of | over] [actor]: Text in note content</code>.</p>\n<p>See the example below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant John</span><br><span class=\"line\">    Note right of John: Text in note</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    participant John\n    Note right of John: Text in note</pre>\n\n<p>It is possible to create notes spaning two participants:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;John: Hello John, how are you?</span><br><span class=\"line\">    Note over Alice,John: A typical interaction</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction</pre>\n\n<h2 id=\"Loops\"><a href=\"#Loops\" class=\"headerlink\" title=\"Loops\"></a>Loops</h2><p>It is possible to express loops in a sequence diagram. This is done by the notation:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loop Loop text</span><br><span class=\"line\">... statements ...</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>See the example below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;John: Hello John, how are you?</span><br><span class=\"line\">    loop Every minute</span><br><span class=\"line\">        John--&gt;Alice: Great!</span><br><span class=\"line\">    end</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end</pre>\n\n<h2 id=\"Alt\"><a href=\"#Alt\" class=\"headerlink\" title=\"Alt\"></a>Alt</h2><p>It is possible to express alternative (可供替代的) paths in a sequence diagram. This is done by the notation:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alt Describing text</span><br><span class=\"line\">... statements ...</span><br><span class=\"line\">else</span><br><span class=\"line\">... statements ...</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>Or if there is sequence that is optional (if without else):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opt Describing text</span><br><span class=\"line\">... statements ...</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>See the example below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;Bob: Hello Bob, how are you?</span><br><span class=\"line\">    alt is sick</span><br><span class=\"line\">        Bob-&gt;&gt;Alice: Not so good :(</span><br><span class=\"line\">    else is well</span><br><span class=\"line\">        Bob-&gt;&gt;Alice: Feeling fresh like a daisy</span><br><span class=\"line\">    end</span><br><span class=\"line\">    opt Extra response</span><br><span class=\"line\">        Bob-&gt;&gt;Alice: Thanks for asking</span><br><span class=\"line\">    end</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end</pre>\n\n<h2 id=\"Background-Highlighting\"><a href=\"#Background-Highlighting\" class=\"headerlink\" title=\"Background Highlighting\"></a>Background Highlighting</h2><p>It is possible to highlight flows by providing colored background rects. This is done by the natation:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The colors are defined using rgb and rgba syntax.</span><br><span class=\"line\">rect rgb(0, 255, 0)</span><br><span class=\"line\">... content ...</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">rect rgba(0, 0, 255, .1)</span><br><span class=\"line\">... content ...</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>See the example below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    rect rgba(0, 0, 255, .5)</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    activate John</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br><span class=\"line\">    deactivate John</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    rect rgba(100, 0, 200, .5)</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    activate John</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br><span class=\"line\">    deactivate John</span><br><span class=\"line\">    end</span><br></pre></td></tr></table></figure></p>\n<pre class=\"mermaid\">sequenceDiagram\n    rect rgba(0, 0, 255, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end\n\n    rect rgba(100, 0, 200, .5)\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    end</pre>\n\n<h2 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h2><p>Comments can be entered within a sequence diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with <code>%%</code> (double percent signs). Any text after the start of the comments to the next newline will be treated as a comment, includeing any diagram synatx.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">    %% this is a comment</span><br><span class=\"line\">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure>\n<h2 id=\"Styling\"><a href=\"#Styling\" class=\"headerlink\" title=\"Styling\"></a>Styling</h2><p>Styling of the a sequence is done by defining a number of css classes. During rendering these classes are extracted (提取) from the file located at <code>src/themes/sequence.scss</code>.</p>\n<h3 id=\"Classes-used\"><a href=\"#Classes-used\" class=\"headerlink\" title=\"Classes used\"></a>Classes used</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Class</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">actor</td>\n<td style=\"text-align:left\">Style for the actor box at the top of the diagram.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text.actor</td>\n<td style=\"text-align:left\">Styles for text in the actor box at the toop of the diagram.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">actor-line</td>\n<td style=\"text-align:left\">The vertiacl line for an actor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">messageLine0</td>\n<td style=\"text-align:left\">Styles for the solid message line.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">messageLine1</td>\n<td style=\"text-align:left\">Styles for the dotted message line.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">messageText</td>\n<td style=\"text-align:left\">Defined styles for the text on the message arrows.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">labelBox</td>\n<td style=\"text-align:left\">Defines styles label to left in a loop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">labelText</td>\n<td style=\"text-align:left\">Styles for the text in the loop box.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">loopLine</td>\n<td style=\"text-align:left\">Defines styles for the lines in the loop box.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">note</td>\n<td style=\"text-align:left\">Styles for the note box.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">noteText</td>\n<td style=\"text-align:left\">Styles for the text on in the note boxes.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"Sample-stylesheet\"><a href=\"#Sample-stylesheet\" class=\"headerlink\" title=\"Sample stylesheet\"></a>Sample stylesheet</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.actor</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: <span class=\"number\">#CCCCFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: <span class=\"number\">#ECECFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">text</span><span class=\"selector-class\">.actor</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Helvetica;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.actor-line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.messageLine0</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-width</span>:<span class=\"number\">1.5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-dasharray</span>: <span class=\"string\">\"2 2\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">marker-end</span>:<span class=\"string\">\"url(#arrowhead)\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.messageLine1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-width</span>:<span class=\"number\">1.5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-dasharray</span>: <span class=\"string\">\"2 2\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#arrowhead</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.messageText</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'trebuchet ms'</span>, verdana, arial;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.labelBox</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: <span class=\"number\">#CCCCFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: <span class=\"number\">#ECECFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.labelText</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'trebuchet ms'</span>, verdana, arial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.loopText</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'trebuchet ms'</span>, verdana, arial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.loopLine</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-width</span>:<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-dasharray</span>: <span class=\"string\">\"2 2\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">marker-end</span>:<span class=\"string\">\"url(#arrowhead)\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: <span class=\"number\">#CCCCFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.note</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: <span class=\"number\">#decc93</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: <span class=\"number\">#CCCCFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: <span class=\"number\">#fff5ad</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.noteText</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'trebuchet ms'</span>, verdana, arial;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p>Is is possible to adjust the marigins (边距) for rendering the sequence diagram.</p>\n<p>This is done by defining <code>mermaid.sequenceConfig</code> or by the CLI to use a JSON file with the configuration. How to use the CLI is described in the <a href=\"https://mermaid-js.github.io/mermaid/#/mermaidCLI.html\">mermaidCLI </a> page. <code>mermaid.sequenceConfig</code> can be set to a JSON string with config parameters or the corresponding (相应的) object.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mermaid.sequenceConfig = &#123;</span><br><span class=\"line\">    diagramMarginX:<span class=\"number\">50</span>,</span><br><span class=\"line\">    diagramMarginY:<span class=\"number\">10</span>,</span><br><span class=\"line\">    boxTextMargin:<span class=\"number\">5</span>,</span><br><span class=\"line\">    noteMargin:<span class=\"number\">10</span>,</span><br><span class=\"line\">    messageMargin:<span class=\"number\">35</span>,</span><br><span class=\"line\">    mirrorActors:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Possible-configuration-params\"><a href=\"#Possible-configuration-params\" class=\"headerlink\" title=\"Possible configuration params\"></a>Possible configuration params</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Param</th>\n<th style=\"text-align:left\">Default value</th>\n<th>Descripiton</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">mirrorActor</td>\n<td style=\"text-align:left\">false</td>\n<td>Turns on/off the rendering of actors below the diagram as well as above it</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bottomMarginAdj</td>\n<td style=\"text-align:left\">1</td>\n<td>Adjust how far down the graph ended. Wide borders styles with css could generate unwantewd clipping which is why the config param exists.</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"title":"Advanced features Part 2, Exception handling basics","date":"2020-03-04T16:00:02.000Z","_content":"Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class's namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.\n\nIn Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you'll learn how to work with static member classes and the three types of inner classes in your Java code.\n\n#### test\n\n## Static classes in Java\nFromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the `static` keyword. Here's an example of a static member class declaration:\n```java\nclass C {\n    static int f;\n\n    static void m() {}\n\n    static {\n        f = 2;\n    }\n\n    static class D {\n        // members\n    }\n}\n```\n\nThis example introduces top-level class `C` with static field `f`, static method `m()`, a static initializer, and static member cladd `D`. Notice that `D` is a member of `C`. The static field `f`, static method `m()`, and the static initializer are also members of `C`. Since all of these elements belong to class `C`, it is known as the enclosing class (封闭类). Class `D` is known as the enclosed class.\n\n### Enclosure and access rules\nAlthough it is enclosed (围绕), a static member class cannot access the enclosing class's instance fields and invoke its instance methods. However, it can access the enclosing class's static fields and invoke its static methods, even those members that are declared `private`. To demonstrate (演示), Listing 1 declares an `EnclosingClass` with a nested `SMClass`. \n\n### Listing 1. Declaring a static member class\n```java\nclass EnclosingClass {\n    private static String s;\n\n    private static void m1() {\n        System.out.println(s);\n    }\n\n    static void m2() {\n        SMClass.accessEnclosingClass();\n    }\n\n    static class SMClass {\n        \n        static void accessEnclosingClass() {\n            s = \"Called from SMClass's accessEnclosingClas() method\";\n            m1();\n        }\n\n        void accessEnclosingClass2() {\n            m2();\n        }\n\n    }\n}\n```\n\nListing 1 declares a top-level class named EnclosingClass with class field s, class method `m1()` and `m2()`, and static member class SMClass. SMClass declares class method `accessEnclosingClass()` and instance method `accessEnclosingClass2()`. Note the following:\n1. `m2()`'s invocation (调用) of SMClass's `accessEnclosingClass()` method requires the `SMClass.` prefix because `accessEnclosingClass()` is declared `static`\n1. `accessEnclosingClass()` is able to access EnclosingClass's s field and call its `m1()` method, even though both have been declared `private`.\n\nListing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass's `accessEnclosingClass()` method. It also demonstrates how to instantiate SMClass and invoke its `accessEnclosingClass2()` instance method.\n\n### Listing 2. Invoking a static member class's methods\n```java\npublic class SMCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass.SMClass.accessEncolsingClass();\n        EnclsoingClass.SMClass smc = new EnclosingClass.SMClass();\n        smc.accessEnclosingClass2();\n    }\n}\n```\n\nAs shown in Listing 2, if you want to invoke a top-level class's method from within an enclosed class, you must prefix the enclosed class's name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.\n\nCompile Listing 1 and 2 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class's name, dollar-sign character, and the static member class's name. In this case, compiling results is:\n```\nSMCDemo.class\nEnclosingClass.class\nEnclosingClass$SMCClass.class\n```\n\nRun the application as follows:\n\n```bash\njava SMCDemo\n```\n\nYou should observe the following output:\n```\nCalled from SMClass's accessEnclosingClass() method\nCalled from SMClass's accessEnclosingClass() method\n```\n\n### Example: Static classes and Java 2D\nJava's standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the `java.awt.geom` package.\n\nThe `Ellipse2D` class found in `java.awt.geom` describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class's architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass `Ellipse2D`:\n```java\npublic abstract class Ellipse2D extends RectangularShape {\n    \n    public static class Float extends Ellipse2D implements Serializable {\n\n        public float x, y, widht, heigh;\n\n        public Float() {}\n\n        public Float(float x, float y, float w, float h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return (double)x;\n        }\n\n        // additional instance methods\n    }\n\n    public static class Double extends Ellipse2D implements Serializable {\n        \n        public double x, y, width, height;\n    \n        public Double() {}\n\n        public Double(double x, double y, double w, double h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return x;\n        }\n\n        // additional instance methods\n    }\n\n    public boolean contains(double x, double y) {\n        // ...\n    }\n\n    // additional instance methods shared by Float, Double, and other Ellipse2D subclass.\n}\n```\n\nThe `Float` and `Double` classes extend `Ellipse2D`, providing floating-point and double precision floating-point Ellipse2D implementations.\n\n## Inner classes, tpye 1: Non-static member classes\nConsider this example:\n```java\nclass C {\n    int f;\n\n    void m() {}\n\n    C() {\n        f = 2;\n    }\n\n    class D {\n        // members\n    }\n}\n```\n\nHere, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.\n\nEach instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class's instance methods can call the enclosing class's instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.\n\n#### Listing 3. Declare an enclosing class with a nested non-static member class\n```java\nclass EnclosingClass {\n    private String s;\n\n    private void m() {\n        System.out.println(s);\n    }\n\n    class NSMClass {\n        void accessEnclosingClass() {\n            s = \"Called from NSMClass's accessEnclosingClass() method\";\n            m();\n        }\n    }\n}\n```\n\nListing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method `accessEnclosingClass()`.\n\nBecause `accessEnclosingClass()` in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.\n\n#### Listing 4. NSMCDemo.java\n```java\npublic class NSMDemo {\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.new NSMClass().accessEnclosingClass();\n    }\n}\n```\n\nListing 4's `main()` method first instantiates EnclosingClass and saves its reference in local variable ec. The `main()` method then uses the EnclosingClass reference as a prefix to the `new` operator, in order to instantiate NSMClass. The NSMClass reference is then used to call `accessEnclosingClass()` method.\n\n> Should I use `new` with a reference to the enclosing class?\n> Prefixing `new` with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class's constructor from within a constructor or an instance method of its enclosing class.\n\nCompile Listing 3 and 4 as follows:\n```bash\njava *.java\n```\n\nWhen you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class's name, a dollar-sign character, and the non-static member class's name. In this case, compiling results in：\n```\nNSMDemo.class\nEnclosingClass.class\nEnclisingClass$NSMCClass.class\n```\n\nRun the application as follows:\n```bash\njava NSMDemo\n```\n\nYou should observe the following output:\n```\nCalled from NSMClass's accessEnclosingClass() method\n```\n\n> When (and how) to qualify (限定) `this`\n> An enclosed class's code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) `this` with the enclosing class's name and the member access operator `.`. For example, if code within `accessEnclosingClass()` needed to obtain a reference to its `EnclosingClass` instance, it would spcify `EnclosingClass.this`. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.\n\n#### Example: Non-static member classes in HashMap\nThe standard class library includes non-static member as well as static member classes. For this example, we'll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.\n\nFor example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:\n```java\npublic class HashMap<K, V> extends AbstractMap<K, V> implements Map<K, V>, Cloneable, Serializable {\n    // various members\n\n    final class KeySet extends AbstractSet<K> {\n        // various members\n    }\n\n    // various members\n}\n```\n\nThe `<K, V>` and `<K>` syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.\n\nHashMap provides a `KeySet()` method that instantiates KeySet when necessary and returns this instance or a cached instance. Here's the complete method:\n```java\npublic Set<K> keyset() {\n    Set<K> ks = keySet;\n    if (ks == null) {\n        ks = new KeySet();\n        keySet = ks;\n    }\n    return ks;\n}\n```\n\nNotice that the enclosed class's (KeySet's) constructor is called from within the enclosing class's (HashSet's) `keyset()` instance method. This illustrates a common practice (做法) especially because prefixing the `new` operator with an enclosing class reference is rare.\n\n## Inner classes, type 2: Local classes\nIt's occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:\n```java\ninterface I {\n\n}\n\nclass C {\n    // or even static I m()\n    I m() {\n        class D implements I {\n            // members\n        }\n        return new D();\n    }\n}\n```\n\nTop-level class C declares instance method `m()`, which returns an instance of local class D, which is declared in this method. Notice that `m()`'s return type is interface I, which D implements. The interface is necessary because giving `m()` return type D would result in a compiler error -- D isn't accessible outside of `m()`' body.\n\n> Illegal access modifiers (修饰语) in local class declaration\n> The compiler will report an error if a local class declaration contains any of the access modifiers `private`, `public`, or `protected`; or the modifier `static`.\n\nA local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope's local variables and parameters, which must be declared `final`. Consider 5.\n\n### Listing 5. Declaring a local class within an enclosing class instance method\n```java\nclass EnclosingClass {\n    \n    void m(final int x) {\n        final int y = x * 3;\n\n        class LClass {\n            int m = x;\n            int n = y;\n        }\n\n        LClass lc = new LClass();\n        System.out.println(lc.m);\n        System.out.println(lc.n);\n    }\n}\n```\n\nListing 5 declares EnclosingClass with instance method `m()`, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.\n\n### Listing 6. A local class declares and initializes a pair of instance fields\n```java\npublic class LCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.m(5);\n    }\n}\n```\n\nListing 6's `main()` method first instantiates EnclosingClass. It then invokes `m(5)` on this instance. The called `m()` method multiplies this argument by 3, instantiates LClass, whose `<init>()` method assigns the argument and the tripled value to its pair of instance fields and outputs LClass's instance fields. (Note that in this case the local class uses the `<init>()` method instead of a constructor to interact with its instance fields.)\n\nCompile Listing 5 and 6 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class's name, a dollar-sign character, a 1-base integer, and the local class's name. In this case, compiling results:\n```\nLCDemo.class\nEnclosingClass.class\nEnclosingClass$1LClass.class\n```\n\n### A note about local class name\nWhen generating a name for a local class's file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class's class file from a non-static member clas's class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:\n```java\npublic class EnclosingClass\n{\n    public void m1()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m2()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m3()\n    {\n       class LClass2\n       {\n       }\n    }\n}\n```\n\nEnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:\n```\nEnclosingClass$1LClass.class\nEnclosingClass$1LClass2.class\nEnclosingClass$2LClass.class\nEnclosingClass.class\n```\n\nRun the application as follow:\n```bash\njava LCDemo\n```\n\nYou should observe the following output:\n```\n5\n15\n```\n\n### Example: Using local classes in regular expressions\nThe standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:\n```java\npublic Stream<MatchResult> results()\n{\n   class MatchResultIterator implements Iterator<MatchResult>\n   {\n      // members\n   }\n   return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new MatchResultIterator(),\n                                                                   Spliterator.ORDERED |\n                                                                   Spliterator.NONNULL),\n                               false);\n}\n```\n\nNote the instantiation of MatchResultIterator() following the class declaration. Don't worry about parts of the code that you don't understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.\n\n## Inner classes, type 3: Anonymous classes\nStatic member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:\n```java\n// subclass the base class\n\nabstract class Base\n{\n   // members\n}\n\nclass A\n{\n   void m()\n   {\n      Base b = new Base()\n               {\n                 // members\n               };\n   }\n}\n\n// implement the interface\n\ninterface I\n{\n   // members\n}\n\nclass B\n{\n   void m()\n   {\n      I i = new I()\n            {\n               // members\n            };\n   }\n}\n```\n\nThe first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.\n\n> Constructing anonymous class instances\n> An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.\n\nAnonymous classes are useful for expressing functionality that's passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (<) operator for one order, and the other version using the greater than (>) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.\n\n### Listing 7. Using an anonymous class to pass functionality as a method argument\n```java\npublic abstract class Comparer\n{\n   public abstract int compare(int x, int y);\n}\n```\n\nThe compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.\n\n### Listing 8. Sorting an array of integers with the Bubble Sort algorithm\n```java\npublic class ACDemo\n{\n   public static void main(String[] args)\n   {\n      int[] a = { 10, 30, 5, 0, -2, 100, -9 };\n      dump(a);\n      sort(a, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return x - y;\n                     }\n                  });\n      dump(a);\n      int[] b = { 10, 30, 5, 0, -2, 100, -9 };\n      sort(b, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return y - x;\n                     }\n                  });\n      dump(b);\n   }\n\n   static void dump(int[] x)\n   {\n      for (int i = 0; i < x.length; i++)\n         System.out.print(x[i] + \" \");\n      System.out.println();\n   }\n\n   static void sort(int[] x, Comparer c)\n   {\n      for (int pass = 0; pass < x.length - 1; pass++)\n         for (int i = x.length - 1; i > pass; i--)\n            if (c.compare(x[i], x[pass]) < 0)\n            {\n               int temp = x[i];\n               x[i] = x[pass];\n               x[pass] = temp;\n            }\n   }\n}\n```\n\nThe main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.\n\n> Migrating from anonymous classes to lambdas\n> As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.\n\nCompile Listing 7 and 8 as follows:\n```\njavac *.java\n```\n\nWhen you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class's name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:\n```\nACDemo.class.\nACDemo$1.class\nACDemo$2.class \n```\n\nRun the application as follows:\n```bash\njava ACDemo\n```\n\nYou should obeserve the following output:\n```\n\n10 30 5 0 -2 100 -9\n-9 -2 0 5 10 30 100\n100 30 10 5 0 -2 -9\n```\n\n### Example: Using anonymous classes with an AWT event hanlder\nAnonymous classes can be used with many packages in the standard calss library. For this example, we'll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing's JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.\n\n```java\nJButton btnClose = new JButton(\"close\");\nbtnClose.addActionListener(new ActionListener()\n                               {\n                                  public void actionPerformed(ActionEvent ae)\n                                  {\n                                     System.out.println(\"close button clicked\");\n                                  }\n                               });\n```\n\nThe first line instantiates JButton, passing close as the button label to JButton's constructor. The second line registers an action listener with the button. The action listener's actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.\n\n## Conclusion\nJava's nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.","source":"_posts/JavaWorld/Advanced features Part 2, Exception handling basics.md","raw":"---\ntitle: Advanced features Part 2, Exception handling basics\n\ntag:\n- Advanced Java language features\n\ncategories:\n- JavaWorld\n\ndate: 2020-03-05 00:00:02\n---\nNested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class's namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.\n\nIn Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you'll learn how to work with static member classes and the three types of inner classes in your Java code.\n\n#### test\n\n## Static classes in Java\nFromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the `static` keyword. Here's an example of a static member class declaration:\n```java\nclass C {\n    static int f;\n\n    static void m() {}\n\n    static {\n        f = 2;\n    }\n\n    static class D {\n        // members\n    }\n}\n```\n\nThis example introduces top-level class `C` with static field `f`, static method `m()`, a static initializer, and static member cladd `D`. Notice that `D` is a member of `C`. The static field `f`, static method `m()`, and the static initializer are also members of `C`. Since all of these elements belong to class `C`, it is known as the enclosing class (封闭类). Class `D` is known as the enclosed class.\n\n### Enclosure and access rules\nAlthough it is enclosed (围绕), a static member class cannot access the enclosing class's instance fields and invoke its instance methods. However, it can access the enclosing class's static fields and invoke its static methods, even those members that are declared `private`. To demonstrate (演示), Listing 1 declares an `EnclosingClass` with a nested `SMClass`. \n\n### Listing 1. Declaring a static member class\n```java\nclass EnclosingClass {\n    private static String s;\n\n    private static void m1() {\n        System.out.println(s);\n    }\n\n    static void m2() {\n        SMClass.accessEnclosingClass();\n    }\n\n    static class SMClass {\n        \n        static void accessEnclosingClass() {\n            s = \"Called from SMClass's accessEnclosingClas() method\";\n            m1();\n        }\n\n        void accessEnclosingClass2() {\n            m2();\n        }\n\n    }\n}\n```\n\nListing 1 declares a top-level class named EnclosingClass with class field s, class method `m1()` and `m2()`, and static member class SMClass. SMClass declares class method `accessEnclosingClass()` and instance method `accessEnclosingClass2()`. Note the following:\n1. `m2()`'s invocation (调用) of SMClass's `accessEnclosingClass()` method requires the `SMClass.` prefix because `accessEnclosingClass()` is declared `static`\n1. `accessEnclosingClass()` is able to access EnclosingClass's s field and call its `m1()` method, even though both have been declared `private`.\n\nListing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass's `accessEnclosingClass()` method. It also demonstrates how to instantiate SMClass and invoke its `accessEnclosingClass2()` instance method.\n\n### Listing 2. Invoking a static member class's methods\n```java\npublic class SMCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass.SMClass.accessEncolsingClass();\n        EnclsoingClass.SMClass smc = new EnclosingClass.SMClass();\n        smc.accessEnclosingClass2();\n    }\n}\n```\n\nAs shown in Listing 2, if you want to invoke a top-level class's method from within an enclosed class, you must prefix the enclosed class's name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.\n\nCompile Listing 1 and 2 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class's name, dollar-sign character, and the static member class's name. In this case, compiling results is:\n```\nSMCDemo.class\nEnclosingClass.class\nEnclosingClass$SMCClass.class\n```\n\nRun the application as follows:\n\n```bash\njava SMCDemo\n```\n\nYou should observe the following output:\n```\nCalled from SMClass's accessEnclosingClass() method\nCalled from SMClass's accessEnclosingClass() method\n```\n\n### Example: Static classes and Java 2D\nJava's standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the `java.awt.geom` package.\n\nThe `Ellipse2D` class found in `java.awt.geom` describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class's architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass `Ellipse2D`:\n```java\npublic abstract class Ellipse2D extends RectangularShape {\n    \n    public static class Float extends Ellipse2D implements Serializable {\n\n        public float x, y, widht, heigh;\n\n        public Float() {}\n\n        public Float(float x, float y, float w, float h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return (double)x;\n        }\n\n        // additional instance methods\n    }\n\n    public static class Double extends Ellipse2D implements Serializable {\n        \n        public double x, y, width, height;\n    \n        public Double() {}\n\n        public Double(double x, double y, double w, double h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return x;\n        }\n\n        // additional instance methods\n    }\n\n    public boolean contains(double x, double y) {\n        // ...\n    }\n\n    // additional instance methods shared by Float, Double, and other Ellipse2D subclass.\n}\n```\n\nThe `Float` and `Double` classes extend `Ellipse2D`, providing floating-point and double precision floating-point Ellipse2D implementations.\n\n## Inner classes, tpye 1: Non-static member classes\nConsider this example:\n```java\nclass C {\n    int f;\n\n    void m() {}\n\n    C() {\n        f = 2;\n    }\n\n    class D {\n        // members\n    }\n}\n```\n\nHere, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.\n\nEach instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class's instance methods can call the enclosing class's instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.\n\n#### Listing 3. Declare an enclosing class with a nested non-static member class\n```java\nclass EnclosingClass {\n    private String s;\n\n    private void m() {\n        System.out.println(s);\n    }\n\n    class NSMClass {\n        void accessEnclosingClass() {\n            s = \"Called from NSMClass's accessEnclosingClass() method\";\n            m();\n        }\n    }\n}\n```\n\nListing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method `accessEnclosingClass()`.\n\nBecause `accessEnclosingClass()` in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.\n\n#### Listing 4. NSMCDemo.java\n```java\npublic class NSMDemo {\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.new NSMClass().accessEnclosingClass();\n    }\n}\n```\n\nListing 4's `main()` method first instantiates EnclosingClass and saves its reference in local variable ec. The `main()` method then uses the EnclosingClass reference as a prefix to the `new` operator, in order to instantiate NSMClass. The NSMClass reference is then used to call `accessEnclosingClass()` method.\n\n> Should I use `new` with a reference to the enclosing class?\n> Prefixing `new` with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class's constructor from within a constructor or an instance method of its enclosing class.\n\nCompile Listing 3 and 4 as follows:\n```bash\njava *.java\n```\n\nWhen you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class's name, a dollar-sign character, and the non-static member class's name. In this case, compiling results in：\n```\nNSMDemo.class\nEnclosingClass.class\nEnclisingClass$NSMCClass.class\n```\n\nRun the application as follows:\n```bash\njava NSMDemo\n```\n\nYou should observe the following output:\n```\nCalled from NSMClass's accessEnclosingClass() method\n```\n\n> When (and how) to qualify (限定) `this`\n> An enclosed class's code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) `this` with the enclosing class's name and the member access operator `.`. For example, if code within `accessEnclosingClass()` needed to obtain a reference to its `EnclosingClass` instance, it would spcify `EnclosingClass.this`. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.\n\n#### Example: Non-static member classes in HashMap\nThe standard class library includes non-static member as well as static member classes. For this example, we'll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.\n\nFor example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:\n```java\npublic class HashMap<K, V> extends AbstractMap<K, V> implements Map<K, V>, Cloneable, Serializable {\n    // various members\n\n    final class KeySet extends AbstractSet<K> {\n        // various members\n    }\n\n    // various members\n}\n```\n\nThe `<K, V>` and `<K>` syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.\n\nHashMap provides a `KeySet()` method that instantiates KeySet when necessary and returns this instance or a cached instance. Here's the complete method:\n```java\npublic Set<K> keyset() {\n    Set<K> ks = keySet;\n    if (ks == null) {\n        ks = new KeySet();\n        keySet = ks;\n    }\n    return ks;\n}\n```\n\nNotice that the enclosed class's (KeySet's) constructor is called from within the enclosing class's (HashSet's) `keyset()` instance method. This illustrates a common practice (做法) especially because prefixing the `new` operator with an enclosing class reference is rare.\n\n## Inner classes, type 2: Local classes\nIt's occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:\n```java\ninterface I {\n\n}\n\nclass C {\n    // or even static I m()\n    I m() {\n        class D implements I {\n            // members\n        }\n        return new D();\n    }\n}\n```\n\nTop-level class C declares instance method `m()`, which returns an instance of local class D, which is declared in this method. Notice that `m()`'s return type is interface I, which D implements. The interface is necessary because giving `m()` return type D would result in a compiler error -- D isn't accessible outside of `m()`' body.\n\n> Illegal access modifiers (修饰语) in local class declaration\n> The compiler will report an error if a local class declaration contains any of the access modifiers `private`, `public`, or `protected`; or the modifier `static`.\n\nA local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope's local variables and parameters, which must be declared `final`. Consider 5.\n\n### Listing 5. Declaring a local class within an enclosing class instance method\n```java\nclass EnclosingClass {\n    \n    void m(final int x) {\n        final int y = x * 3;\n\n        class LClass {\n            int m = x;\n            int n = y;\n        }\n\n        LClass lc = new LClass();\n        System.out.println(lc.m);\n        System.out.println(lc.n);\n    }\n}\n```\n\nListing 5 declares EnclosingClass with instance method `m()`, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.\n\n### Listing 6. A local class declares and initializes a pair of instance fields\n```java\npublic class LCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.m(5);\n    }\n}\n```\n\nListing 6's `main()` method first instantiates EnclosingClass. It then invokes `m(5)` on this instance. The called `m()` method multiplies this argument by 3, instantiates LClass, whose `<init>()` method assigns the argument and the tripled value to its pair of instance fields and outputs LClass's instance fields. (Note that in this case the local class uses the `<init>()` method instead of a constructor to interact with its instance fields.)\n\nCompile Listing 5 and 6 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class's name, a dollar-sign character, a 1-base integer, and the local class's name. In this case, compiling results:\n```\nLCDemo.class\nEnclosingClass.class\nEnclosingClass$1LClass.class\n```\n\n### A note about local class name\nWhen generating a name for a local class's file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class's class file from a non-static member clas's class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:\n```java\npublic class EnclosingClass\n{\n    public void m1()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m2()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m3()\n    {\n       class LClass2\n       {\n       }\n    }\n}\n```\n\nEnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:\n```\nEnclosingClass$1LClass.class\nEnclosingClass$1LClass2.class\nEnclosingClass$2LClass.class\nEnclosingClass.class\n```\n\nRun the application as follow:\n```bash\njava LCDemo\n```\n\nYou should observe the following output:\n```\n5\n15\n```\n\n### Example: Using local classes in regular expressions\nThe standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:\n```java\npublic Stream<MatchResult> results()\n{\n   class MatchResultIterator implements Iterator<MatchResult>\n   {\n      // members\n   }\n   return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new MatchResultIterator(),\n                                                                   Spliterator.ORDERED |\n                                                                   Spliterator.NONNULL),\n                               false);\n}\n```\n\nNote the instantiation of MatchResultIterator() following the class declaration. Don't worry about parts of the code that you don't understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.\n\n## Inner classes, type 3: Anonymous classes\nStatic member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:\n```java\n// subclass the base class\n\nabstract class Base\n{\n   // members\n}\n\nclass A\n{\n   void m()\n   {\n      Base b = new Base()\n               {\n                 // members\n               };\n   }\n}\n\n// implement the interface\n\ninterface I\n{\n   // members\n}\n\nclass B\n{\n   void m()\n   {\n      I i = new I()\n            {\n               // members\n            };\n   }\n}\n```\n\nThe first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.\n\n> Constructing anonymous class instances\n> An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.\n\nAnonymous classes are useful for expressing functionality that's passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (<) operator for one order, and the other version using the greater than (>) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.\n\n### Listing 7. Using an anonymous class to pass functionality as a method argument\n```java\npublic abstract class Comparer\n{\n   public abstract int compare(int x, int y);\n}\n```\n\nThe compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.\n\n### Listing 8. Sorting an array of integers with the Bubble Sort algorithm\n```java\npublic class ACDemo\n{\n   public static void main(String[] args)\n   {\n      int[] a = { 10, 30, 5, 0, -2, 100, -9 };\n      dump(a);\n      sort(a, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return x - y;\n                     }\n                  });\n      dump(a);\n      int[] b = { 10, 30, 5, 0, -2, 100, -9 };\n      sort(b, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return y - x;\n                     }\n                  });\n      dump(b);\n   }\n\n   static void dump(int[] x)\n   {\n      for (int i = 0; i < x.length; i++)\n         System.out.print(x[i] + \" \");\n      System.out.println();\n   }\n\n   static void sort(int[] x, Comparer c)\n   {\n      for (int pass = 0; pass < x.length - 1; pass++)\n         for (int i = x.length - 1; i > pass; i--)\n            if (c.compare(x[i], x[pass]) < 0)\n            {\n               int temp = x[i];\n               x[i] = x[pass];\n               x[pass] = temp;\n            }\n   }\n}\n```\n\nThe main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.\n\n> Migrating from anonymous classes to lambdas\n> As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.\n\nCompile Listing 7 and 8 as follows:\n```\njavac *.java\n```\n\nWhen you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class's name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:\n```\nACDemo.class.\nACDemo$1.class\nACDemo$2.class \n```\n\nRun the application as follows:\n```bash\njava ACDemo\n```\n\nYou should obeserve the following output:\n```\n\n10 30 5 0 -2 100 -9\n-9 -2 0 5 10 30 100\n100 30 10 5 0 -2 -9\n```\n\n### Example: Using anonymous classes with an AWT event hanlder\nAnonymous classes can be used with many packages in the standard calss library. For this example, we'll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing's JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.\n\n```java\nJButton btnClose = new JButton(\"close\");\nbtnClose.addActionListener(new ActionListener()\n                               {\n                                  public void actionPerformed(ActionEvent ae)\n                                  {\n                                     System.out.println(\"close button clicked\");\n                                  }\n                               });\n```\n\nThe first line instantiates JButton, passing close as the button label to JButton's constructor. The second line registers an action listener with the button. The action listener's actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.\n\n## Conclusion\nJava's nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.","slug":"JavaWorld/Advanced features Part 2, Exception handling basics","published":1,"updated":"2020-04-19T12:20:55.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mcb00c4m33po1vmbpu9","content":"<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p>\n<p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><h2 id=\"Static-classes-in-Java\"><a href=\"#Static-classes-in-Java\" class=\"headerlink\" title=\"Static classes in Java\"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p>\n<h3 id=\"Enclosure-and-access-rules\"><a href=\"#Enclosure-and-access-rules\" class=\"headerlink\" title=\"Enclosure and access rules\"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p>\n<h3 id=\"Listing-1-Declaring-a-static-member-class\"><a href=\"#Listing-1-Declaring-a-static-member-class\" class=\"headerlink\" title=\"Listing 1. Declaring a static member class\"></a>Listing 1. Declaring a static member class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SMClass.accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMClass</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from SMClass's accessEnclosingClas() method\"</span>;</span><br><span class=\"line\">            m1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            m2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p>\n<ol>\n<li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li>\n<li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li>\n</ol>\n<p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p>\n<h3 id=\"Listing-2-Invoking-a-static-member-class’s-methods\"><a href=\"#Listing-2-Invoking-a-static-member-class’s-methods\" class=\"headerlink\" title=\"Listing 2. Invoking a static member class’s methods\"></a>Listing 2. Invoking a static member class’s methods</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class=\"line\">        EnclsoingClass.SMClass smc = <span class=\"keyword\">new</span> EnclosingClass.SMClass();</span><br><span class=\"line\">        smc.accessEnclosingClass2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p>\n<p>Compile Listing 1 and 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SMCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java SMCDemo</span><br></pre></td></tr></table></figure>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Static-classes-and-Java-2D\"><a href=\"#Example-Static-classes-and-Java-2D\" class=\"headerlink\" title=\"Example: Static classes and Java 2D\"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p>\n<p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">extends</span> <span class=\"title\">RectangularShape</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Float</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> x, y, widht, heigh;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">float</span> w, <span class=\"keyword\">float</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Double</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> x, y, width, height;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y, <span class=\"keyword\">double</span> w, <span class=\"keyword\">double</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p>\n<h2 id=\"Inner-classes-tpye-1-Non-static-member-classes\"><a href=\"#Inner-classes-tpye-1-Non-static-member-classes\" class=\"headerlink\" title=\"Inner classes, tpye 1: Non-static member classes\"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    C() &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p>\n<p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p>\n<h4 id=\"Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\"><a href=\"#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\" class=\"headerlink\" title=\"Listing 3. Declare an enclosing class with a nested non-static member class\"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from NSMClass's accessEnclosingClass() method\"</span>;</span><br><span class=\"line\">            m();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p>\n<p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p>\n<h4 id=\"Listing-4-NSMCDemo-java\"><a href=\"#Listing-4-NSMCDemo-java\" class=\"headerlink\" title=\"Listing 4. NSMCDemo.java\"></a>Listing 4. NSMCDemo.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.new NSMClass().accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p>\n<blockquote>\n<p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p>\n</blockquote>\n<p>Compile Listing 3 and 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java NSMDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p>\n</blockquote>\n<h4 id=\"Example-Non-static-member-classes-in-HashMap\"><a href=\"#Example-Non-static-member-classes-in-HashMap\" class=\"headerlink\" title=\"Example: Non-static member classes in HashMap\"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p>\n<p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// various members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p>\n<p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Set&lt;K&gt; <span class=\"title\">keyset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;K&gt; ks = keySet;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ks == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ks = <span class=\"keyword\">new</span> KeySet();</span><br><span class=\"line\">        keySet = ks;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ks;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p>\n<h2 id=\"Inner-classes-type-2-Local-classes\"><a href=\"#Inner-classes-type-2-Local-classes\" class=\"headerlink\" title=\"Inner classes, type 2: Local classes\"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// or even static I m()</span></span><br><span class=\"line\">    <span class=\"function\">I <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// members</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p>\n<blockquote>\n<p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p>\n</blockquote>\n<p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p>\n<h3 id=\"Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\"><a href=\"#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\" class=\"headerlink\" title=\"Listing 5. Declaring a local class within an enclosing class instance method\"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = x * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = x;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LClass lc = <span class=\"keyword\">new</span> LClass();</span><br><span class=\"line\">        System.out.println(lc.m);</span><br><span class=\"line\">        System.out.println(lc.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p>\n<h3 id=\"Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\"><a href=\"#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\" class=\"headerlink\" title=\"Listing 6. A local class declares and initializes a pair of instance fields\"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.m(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p>\n<p>Compile Listing 5 and 6 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"A-note-about-local-class-name\"><a href=\"#A-note-about-local-class-name\" class=\"headerlink\" title=\"A note about local class name\"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass2</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EnclosingClass$1LClass.class</span><br><span class=\"line\">EnclosingClass$1LClass2.class</span><br><span class=\"line\">EnclosingClass$2LClass.class</span><br><span class=\"line\">EnclosingClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follow:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LCDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">15</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-local-classes-in-regular-expressions\"><a href=\"#Example-Using-local-classes-in-regular-expressions\" class=\"headerlink\" title=\"Example: Using local classes in regular expressions\"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Stream&lt;MatchResult&gt; <span class=\"title\">results</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchResultIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">MatchResult</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// members</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class=\"keyword\">new</span> MatchResultIterator(),</span><br><span class=\"line\">                                                                   Spliterator.ORDERED |</span><br><span class=\"line\">                                                                   Spliterator.NONNULL),</span><br><span class=\"line\">                               <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p>\n<h2 id=\"Inner-classes-type-3-Anonymous-classes\"><a href=\"#Inner-classes-type-3-Anonymous-classes\" class=\"headerlink\" title=\"Inner classes, type 3: Anonymous classes\"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// subclass the base class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      Base b = <span class=\"keyword\">new</span> Base()</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// members</span></span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// implement the interface</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      I i = <span class=\"keyword\">new</span> I()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"comment\">// members</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p>\n<blockquote>\n<p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p>\n</blockquote>\n<p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p>\n<h3 id=\"Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\"><a href=\"#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\" class=\"headerlink\" title=\"Listing 7. Using an anonymous class to pass functionality as a method argument\"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comparer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p>\n<h3 id=\"Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\"><a href=\"#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"Listing 8. Sorting an array of integers with the Bubble Sort algorithm\"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] a = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      sort(a, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] b = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      sort(b, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> y - x;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(b);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">         System.out.print(x[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, Comparer c)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pass = <span class=\"number\">0</span>; pass &lt; x.length - <span class=\"number\">1</span>; pass++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.length - <span class=\"number\">1</span>; i &gt; pass; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.compare(x[i], x[pass]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = x[i];</span><br><span class=\"line\">               x[i] = x[pass];</span><br><span class=\"line\">               x[pass] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p>\n<blockquote>\n<p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p>\n</blockquote>\n<p>Compile Listing 7 and 8 as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACDemo.class.</span><br><span class=\"line\">ACDemo$1.class</span><br><span class=\"line\">ACDemo$2.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java ACDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should obeserve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">10 30 5 0 -2 100 -9</span><br><span class=\"line\">-9 -2 0 5 10 30 100</span><br><span class=\"line\">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-anonymous-classes-with-an-AWT-event-hanlder\"><a href=\"#Example-Using-anonymous-classes-with-an-AWT-event-hanlder\" class=\"headerlink\" title=\"Example: Using anonymous classes with an AWT event hanlder\"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton btnClose = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"close\"</span>);</span><br><span class=\"line\">btnClose.addActionListener(<span class=\"keyword\">new</span> ActionListener()</span><br><span class=\"line\">                               &#123;</span><br><span class=\"line\">                                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent ae)</span></span></span><br><span class=\"line\"><span class=\"function\">                                  </span>&#123;</span><br><span class=\"line\">                                     System.out.println(<span class=\"string\">\"close button clicked\"</span>);</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                               &#125;);</span><br></pre></td></tr></table></figure>\n<p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p>\n<p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><h2 id=\"Static-classes-in-Java\"><a href=\"#Static-classes-in-Java\" class=\"headerlink\" title=\"Static classes in Java\"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p>\n<h3 id=\"Enclosure-and-access-rules\"><a href=\"#Enclosure-and-access-rules\" class=\"headerlink\" title=\"Enclosure and access rules\"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p>\n<h3 id=\"Listing-1-Declaring-a-static-member-class\"><a href=\"#Listing-1-Declaring-a-static-member-class\" class=\"headerlink\" title=\"Listing 1. Declaring a static member class\"></a>Listing 1. Declaring a static member class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SMClass.accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMClass</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from SMClass's accessEnclosingClas() method\"</span>;</span><br><span class=\"line\">            m1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            m2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p>\n<ol>\n<li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li>\n<li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li>\n</ol>\n<p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p>\n<h3 id=\"Listing-2-Invoking-a-static-member-class’s-methods\"><a href=\"#Listing-2-Invoking-a-static-member-class’s-methods\" class=\"headerlink\" title=\"Listing 2. Invoking a static member class’s methods\"></a>Listing 2. Invoking a static member class’s methods</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class=\"line\">        EnclsoingClass.SMClass smc = <span class=\"keyword\">new</span> EnclosingClass.SMClass();</span><br><span class=\"line\">        smc.accessEnclosingClass2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p>\n<p>Compile Listing 1 and 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SMCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java SMCDemo</span><br></pre></td></tr></table></figure>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Static-classes-and-Java-2D\"><a href=\"#Example-Static-classes-and-Java-2D\" class=\"headerlink\" title=\"Example: Static classes and Java 2D\"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p>\n<p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">extends</span> <span class=\"title\">RectangularShape</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Float</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> x, y, widht, heigh;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">float</span> w, <span class=\"keyword\">float</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Double</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> x, y, width, height;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y, <span class=\"keyword\">double</span> w, <span class=\"keyword\">double</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p>\n<h2 id=\"Inner-classes-tpye-1-Non-static-member-classes\"><a href=\"#Inner-classes-tpye-1-Non-static-member-classes\" class=\"headerlink\" title=\"Inner classes, tpye 1: Non-static member classes\"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    C() &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p>\n<p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p>\n<h4 id=\"Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\"><a href=\"#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\" class=\"headerlink\" title=\"Listing 3. Declare an enclosing class with a nested non-static member class\"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from NSMClass's accessEnclosingClass() method\"</span>;</span><br><span class=\"line\">            m();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p>\n<p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p>\n<h4 id=\"Listing-4-NSMCDemo-java\"><a href=\"#Listing-4-NSMCDemo-java\" class=\"headerlink\" title=\"Listing 4. NSMCDemo.java\"></a>Listing 4. NSMCDemo.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.new NSMClass().accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p>\n<blockquote>\n<p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p>\n</blockquote>\n<p>Compile Listing 3 and 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java NSMDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p>\n</blockquote>\n<h4 id=\"Example-Non-static-member-classes-in-HashMap\"><a href=\"#Example-Non-static-member-classes-in-HashMap\" class=\"headerlink\" title=\"Example: Non-static member classes in HashMap\"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p>\n<p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// various members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p>\n<p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Set&lt;K&gt; <span class=\"title\">keyset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;K&gt; ks = keySet;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ks == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ks = <span class=\"keyword\">new</span> KeySet();</span><br><span class=\"line\">        keySet = ks;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ks;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p>\n<h2 id=\"Inner-classes-type-2-Local-classes\"><a href=\"#Inner-classes-type-2-Local-classes\" class=\"headerlink\" title=\"Inner classes, type 2: Local classes\"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// or even static I m()</span></span><br><span class=\"line\">    <span class=\"function\">I <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// members</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p>\n<blockquote>\n<p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p>\n</blockquote>\n<p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p>\n<h3 id=\"Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\"><a href=\"#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\" class=\"headerlink\" title=\"Listing 5. Declaring a local class within an enclosing class instance method\"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = x * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = x;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LClass lc = <span class=\"keyword\">new</span> LClass();</span><br><span class=\"line\">        System.out.println(lc.m);</span><br><span class=\"line\">        System.out.println(lc.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p>\n<h3 id=\"Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\"><a href=\"#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\" class=\"headerlink\" title=\"Listing 6. A local class declares and initializes a pair of instance fields\"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.m(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p>\n<p>Compile Listing 5 and 6 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"A-note-about-local-class-name\"><a href=\"#A-note-about-local-class-name\" class=\"headerlink\" title=\"A note about local class name\"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass2</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EnclosingClass$1LClass.class</span><br><span class=\"line\">EnclosingClass$1LClass2.class</span><br><span class=\"line\">EnclosingClass$2LClass.class</span><br><span class=\"line\">EnclosingClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follow:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LCDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">15</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-local-classes-in-regular-expressions\"><a href=\"#Example-Using-local-classes-in-regular-expressions\" class=\"headerlink\" title=\"Example: Using local classes in regular expressions\"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Stream&lt;MatchResult&gt; <span class=\"title\">results</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchResultIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">MatchResult</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// members</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class=\"keyword\">new</span> MatchResultIterator(),</span><br><span class=\"line\">                                                                   Spliterator.ORDERED |</span><br><span class=\"line\">                                                                   Spliterator.NONNULL),</span><br><span class=\"line\">                               <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p>\n<h2 id=\"Inner-classes-type-3-Anonymous-classes\"><a href=\"#Inner-classes-type-3-Anonymous-classes\" class=\"headerlink\" title=\"Inner classes, type 3: Anonymous classes\"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// subclass the base class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      Base b = <span class=\"keyword\">new</span> Base()</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// members</span></span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// implement the interface</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      I i = <span class=\"keyword\">new</span> I()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"comment\">// members</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p>\n<blockquote>\n<p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p>\n</blockquote>\n<p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p>\n<h3 id=\"Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\"><a href=\"#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\" class=\"headerlink\" title=\"Listing 7. Using an anonymous class to pass functionality as a method argument\"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comparer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p>\n<h3 id=\"Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\"><a href=\"#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"Listing 8. Sorting an array of integers with the Bubble Sort algorithm\"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] a = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      sort(a, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] b = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      sort(b, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> y - x;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(b);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">         System.out.print(x[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, Comparer c)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pass = <span class=\"number\">0</span>; pass &lt; x.length - <span class=\"number\">1</span>; pass++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.length - <span class=\"number\">1</span>; i &gt; pass; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.compare(x[i], x[pass]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = x[i];</span><br><span class=\"line\">               x[i] = x[pass];</span><br><span class=\"line\">               x[pass] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p>\n<blockquote>\n<p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p>\n</blockquote>\n<p>Compile Listing 7 and 8 as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACDemo.class.</span><br><span class=\"line\">ACDemo$1.class</span><br><span class=\"line\">ACDemo$2.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java ACDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should obeserve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">10 30 5 0 -2 100 -9</span><br><span class=\"line\">-9 -2 0 5 10 30 100</span><br><span class=\"line\">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-anonymous-classes-with-an-AWT-event-hanlder\"><a href=\"#Example-Using-anonymous-classes-with-an-AWT-event-hanlder\" class=\"headerlink\" title=\"Example: Using anonymous classes with an AWT event hanlder\"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton btnClose = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"close\"</span>);</span><br><span class=\"line\">btnClose.addActionListener(<span class=\"keyword\">new</span> ActionListener()</span><br><span class=\"line\">                               &#123;</span><br><span class=\"line\">                                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent ae)</span></span></span><br><span class=\"line\"><span class=\"function\">                                  </span>&#123;</span><br><span class=\"line\">                                     System.out.println(<span class=\"string\">\"close button clicked\"</span>);</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                               &#125;);</span><br></pre></td></tr></table></figure>\n<p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>\n"},{"title":"Advanced features Part 4, Get started with method references in Java","date":"2020-03-04T16:00:04.000Z","_content":"Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class's namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.\n\nIn Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you'll learn how to work with static member classes and the three types of inner classes in your Java code.\n\n#### test\n\n## Static classes in Java\nFromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the `static` keyword. Here's an example of a static member class declaration:\n```java\nclass C {\n    static int f;\n\n    static void m() {}\n\n    static {\n        f = 2;\n    }\n\n    static class D {\n        // members\n    }\n}\n```\n\nThis example introduces top-level class `C` with static field `f`, static method `m()`, a static initializer, and static member cladd `D`. Notice that `D` is a member of `C`. The static field `f`, static method `m()`, and the static initializer are also members of `C`. Since all of these elements belong to class `C`, it is known as the enclosing class (封闭类). Class `D` is known as the enclosed class.\n\n### Enclosure and access rules\nAlthough it is enclosed (围绕), a static member class cannot access the enclosing class's instance fields and invoke its instance methods. However, it can access the enclosing class's static fields and invoke its static methods, even those members that are declared `private`. To demonstrate (演示), Listing 1 declares an `EnclosingClass` with a nested `SMClass`. \n\n### Listing 1. Declaring a static member class\n```java\nclass EnclosingClass {\n    private static String s;\n\n    private static void m1() {\n        System.out.println(s);\n    }\n\n    static void m2() {\n        SMClass.accessEnclosingClass();\n    }\n\n    static class SMClass {\n        \n        static void accessEnclosingClass() {\n            s = \"Called from SMClass's accessEnclosingClas() method\";\n            m1();\n        }\n\n        void accessEnclosingClass2() {\n            m2();\n        }\n\n    }\n}\n```\n\nListing 1 declares a top-level class named EnclosingClass with class field s, class method `m1()` and `m2()`, and static member class SMClass. SMClass declares class method `accessEnclosingClass()` and instance method `accessEnclosingClass2()`. Note the following:\n1. `m2()`'s invocation (调用) of SMClass's `accessEnclosingClass()` method requires the `SMClass.` prefix because `accessEnclosingClass()` is declared `static`\n1. `accessEnclosingClass()` is able to access EnclosingClass's s field and call its `m1()` method, even though both have been declared `private`.\n\nListing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass's `accessEnclosingClass()` method. It also demonstrates how to instantiate SMClass and invoke its `accessEnclosingClass2()` instance method.\n\n### Listing 2. Invoking a static member class's methods\n```java\npublic class SMCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass.SMClass.accessEncolsingClass();\n        EnclsoingClass.SMClass smc = new EnclosingClass.SMClass();\n        smc.accessEnclosingClass2();\n    }\n}\n```\n\nAs shown in Listing 2, if you want to invoke a top-level class's method from within an enclosed class, you must prefix the enclosed class's name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.\n\nCompile Listing 1 and 2 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class's name, dollar-sign character, and the static member class's name. In this case, compiling results is:\n```\nSMCDemo.class\nEnclosingClass.class\nEnclosingClass$SMCClass.class\n```\n\nRun the application as follows:\n\n```bash\njava SMCDemo\n```\n\nYou should observe the following output:\n```\nCalled from SMClass's accessEnclosingClass() method\nCalled from SMClass's accessEnclosingClass() method\n```\n\n### Example: Static classes and Java 2D\nJava's standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the `java.awt.geom` package.\n\nThe `Ellipse2D` class found in `java.awt.geom` describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class's architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass `Ellipse2D`:\n```java\npublic abstract class Ellipse2D extends RectangularShape {\n    \n    public static class Float extends Ellipse2D implements Serializable {\n\n        public float x, y, widht, heigh;\n\n        public Float() {}\n\n        public Float(float x, float y, float w, float h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return (double)x;\n        }\n\n        // additional instance methods\n    }\n\n    public static class Double extends Ellipse2D implements Serializable {\n        \n        public double x, y, width, height;\n    \n        public Double() {}\n\n        public Double(double x, double y, double w, double h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return x;\n        }\n\n        // additional instance methods\n    }\n\n    public boolean contains(double x, double y) {\n        // ...\n    }\n\n    // additional instance methods shared by Float, Double, and other Ellipse2D subclass.\n}\n```\n\nThe `Float` and `Double` classes extend `Ellipse2D`, providing floating-point and double precision floating-point Ellipse2D implementations.\n\n## Inner classes, tpye 1: Non-static member classes\nConsider this example:\n```java\nclass C {\n    int f;\n\n    void m() {}\n\n    C() {\n        f = 2;\n    }\n\n    class D {\n        // members\n    }\n}\n```\n\nHere, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.\n\nEach instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class's instance methods can call the enclosing class's instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.\n\n#### Listing 3. Declare an enclosing class with a nested non-static member class\n```java\nclass EnclosingClass {\n    private String s;\n\n    private void m() {\n        System.out.println(s);\n    }\n\n    class NSMClass {\n        void accessEnclosingClass() {\n            s = \"Called from NSMClass's accessEnclosingClass() method\";\n            m();\n        }\n    }\n}\n```\n\nListing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method `accessEnclosingClass()`.\n\nBecause `accessEnclosingClass()` in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.\n\n#### Listing 4. NSMCDemo.java\n```java\npublic class NSMDemo {\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.new NSMClass().accessEnclosingClass();\n    }\n}\n```\n\nListing 4's `main()` method first instantiates EnclosingClass and saves its reference in local variable ec. The `main()` method then uses the EnclosingClass reference as a prefix to the `new` operator, in order to instantiate NSMClass. The NSMClass reference is then used to call `accessEnclosingClass()` method.\n\n> Should I use `new` with a reference to the enclosing class?\n> Prefixing `new` with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class's constructor from within a constructor or an instance method of its enclosing class.\n\nCompile Listing 3 and 4 as follows:\n```bash\njava *.java\n```\n\nWhen you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class's name, a dollar-sign character, and the non-static member class's name. In this case, compiling results in：\n```\nNSMDemo.class\nEnclosingClass.class\nEnclisingClass$NSMCClass.class\n```\n\nRun the application as follows:\n```bash\njava NSMDemo\n```\n\nYou should observe the following output:\n```\nCalled from NSMClass's accessEnclosingClass() method\n```\n\n> When (and how) to qualify (限定) `this`\n> An enclosed class's code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) `this` with the enclosing class's name and the member access operator `.`. For example, if code within `accessEnclosingClass()` needed to obtain a reference to its `EnclosingClass` instance, it would spcify `EnclosingClass.this`. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.\n\n#### Example: Non-static member classes in HashMap\nThe standard class library includes non-static member as well as static member classes. For this example, we'll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.\n\nFor example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:\n```java\npublic class HashMap<K, V> extends AbstractMap<K, V> implements Map<K, V>, Cloneable, Serializable {\n    // various members\n\n    final class KeySet extends AbstractSet<K> {\n        // various members\n    }\n\n    // various members\n}\n```\n\nThe `<K, V>` and `<K>` syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.\n\nHashMap provides a `KeySet()` method that instantiates KeySet when necessary and returns this instance or a cached instance. Here's the complete method:\n```java\npublic Set<K> keyset() {\n    Set<K> ks = keySet;\n    if (ks == null) {\n        ks = new KeySet();\n        keySet = ks;\n    }\n    return ks;\n}\n```\n\nNotice that the enclosed class's (KeySet's) constructor is called from within the enclosing class's (HashSet's) `keyset()` instance method. This illustrates a common practice (做法) especially because prefixing the `new` operator with an enclosing class reference is rare.\n\n## Inner classes, type 2: Local classes\nIt's occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:\n```java\ninterface I {\n\n}\n\nclass C {\n    // or even static I m()\n    I m() {\n        class D implements I {\n            // members\n        }\n        return new D();\n    }\n}\n```\n\nTop-level class C declares instance method `m()`, which returns an instance of local class D, which is declared in this method. Notice that `m()`'s return type is interface I, which D implements. The interface is necessary because giving `m()` return type D would result in a compiler error -- D isn't accessible outside of `m()`' body.\n\n> Illegal access modifiers (修饰语) in local class declaration\n> The compiler will report an error if a local class declaration contains any of the access modifiers `private`, `public`, or `protected`; or the modifier `static`.\n\nA local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope's local variables and parameters, which must be declared `final`. Consider 5.\n\n### Listing 5. Declaring a local class within an enclosing class instance method\n```java\nclass EnclosingClass {\n    \n    void m(final int x) {\n        final int y = x * 3;\n\n        class LClass {\n            int m = x;\n            int n = y;\n        }\n\n        LClass lc = new LClass();\n        System.out.println(lc.m);\n        System.out.println(lc.n);\n    }\n}\n```\n\nListing 5 declares EnclosingClass with instance method `m()`, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.\n\n### Listing 6. A local class declares and initializes a pair of instance fields\n```java\npublic class LCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.m(5);\n    }\n}\n```\n\nListing 6's `main()` method first instantiates EnclosingClass. It then invokes `m(5)` on this instance. The called `m()` method multiplies this argument by 3, instantiates LClass, whose `<init>()` method assigns the argument and the tripled value to its pair of instance fields and outputs LClass's instance fields. (Note that in this case the local class uses the `<init>()` method instead of a constructor to interact with its instance fields.)\n\nCompile Listing 5 and 6 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class's name, a dollar-sign character, a 1-base integer, and the local class's name. In this case, compiling results:\n```\nLCDemo.class\nEnclosingClass.class\nEnclosingClass$1LClass.class\n```\n\n### A note about local class name\nWhen generating a name for a local class's file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class's class file from a non-static member clas's class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:\n```java\npublic class EnclosingClass\n{\n    public void m1()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m2()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m3()\n    {\n       class LClass2\n       {\n       }\n    }\n}\n```\n\nEnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:\n```\nEnclosingClass$1LClass.class\nEnclosingClass$1LClass2.class\nEnclosingClass$2LClass.class\nEnclosingClass.class\n```\n\nRun the application as follow:\n```bash\njava LCDemo\n```\n\nYou should observe the following output:\n```\n5\n15\n```\n\n### Example: Using local classes in regular expressions\nThe standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:\n```java\npublic Stream<MatchResult> results()\n{\n   class MatchResultIterator implements Iterator<MatchResult>\n   {\n      // members\n   }\n   return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new MatchResultIterator(),\n                                                                   Spliterator.ORDERED |\n                                                                   Spliterator.NONNULL),\n                               false);\n}\n```\n\nNote the instantiation of MatchResultIterator() following the class declaration. Don't worry about parts of the code that you don't understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.\n\n## Inner classes, type 3: Anonymous classes\nStatic member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:\n```java\n// subclass the base class\n\nabstract class Base\n{\n   // members\n}\n\nclass A\n{\n   void m()\n   {\n      Base b = new Base()\n               {\n                 // members\n               };\n   }\n}\n\n// implement the interface\n\ninterface I\n{\n   // members\n}\n\nclass B\n{\n   void m()\n   {\n      I i = new I()\n            {\n               // members\n            };\n   }\n}\n```\n\nThe first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.\n\n> Constructing anonymous class instances\n> An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.\n\nAnonymous classes are useful for expressing functionality that's passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (<) operator for one order, and the other version using the greater than (>) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.\n\n### Listing 7. Using an anonymous class to pass functionality as a method argument\n```java\npublic abstract class Comparer\n{\n   public abstract int compare(int x, int y);\n}\n```\n\nThe compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.\n\n### Listing 8. Sorting an array of integers with the Bubble Sort algorithm\n```java\npublic class ACDemo\n{\n   public static void main(String[] args)\n   {\n      int[] a = { 10, 30, 5, 0, -2, 100, -9 };\n      dump(a);\n      sort(a, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return x - y;\n                     }\n                  });\n      dump(a);\n      int[] b = { 10, 30, 5, 0, -2, 100, -9 };\n      sort(b, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return y - x;\n                     }\n                  });\n      dump(b);\n   }\n\n   static void dump(int[] x)\n   {\n      for (int i = 0; i < x.length; i++)\n         System.out.print(x[i] + \" \");\n      System.out.println();\n   }\n\n   static void sort(int[] x, Comparer c)\n   {\n      for (int pass = 0; pass < x.length - 1; pass++)\n         for (int i = x.length - 1; i > pass; i--)\n            if (c.compare(x[i], x[pass]) < 0)\n            {\n               int temp = x[i];\n               x[i] = x[pass];\n               x[pass] = temp;\n            }\n   }\n}\n```\n\nThe main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.\n\n> Migrating from anonymous classes to lambdas\n> As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.\n\nCompile Listing 7 and 8 as follows:\n```\njavac *.java\n```\n\nWhen you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class's name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:\n```\nACDemo.class.\nACDemo$1.class\nACDemo$2.class \n```\n\nRun the application as follows:\n```bash\njava ACDemo\n```\n\nYou should obeserve the following output:\n```\n\n10 30 5 0 -2 100 -9\n-9 -2 0 5 10 30 100\n100 30 10 5 0 -2 -9\n```\n\n### Example: Using anonymous classes with an AWT event hanlder\nAnonymous classes can be used with many packages in the standard calss library. For this example, we'll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing's JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.\n\n```java\nJButton btnClose = new JButton(\"close\");\nbtnClose.addActionListener(new ActionListener()\n                               {\n                                  public void actionPerformed(ActionEvent ae)\n                                  {\n                                     System.out.println(\"close button clicked\");\n                                  }\n                               });\n```\n\nThe first line instantiates JButton, passing close as the button label to JButton's constructor. The second line registers an action listener with the button. The action listener's actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.\n\n## Conclusion\nJava's nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.","source":"_posts/JavaWorld/Advanced features Part 4, Get started with method references in Java.md","raw":"---\ntitle: Advanced features Part 4, Get started with method references in Java\n\ntag:\n- Advanced Java language features\n\ncategories:\n- JavaWorld\n\ndate: 2020-03-05 00:00:04\n---\nNested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class's namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.\n\nIn Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you'll learn how to work with static member classes and the three types of inner classes in your Java code.\n\n#### test\n\n## Static classes in Java\nFromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the `static` keyword. Here's an example of a static member class declaration:\n```java\nclass C {\n    static int f;\n\n    static void m() {}\n\n    static {\n        f = 2;\n    }\n\n    static class D {\n        // members\n    }\n}\n```\n\nThis example introduces top-level class `C` with static field `f`, static method `m()`, a static initializer, and static member cladd `D`. Notice that `D` is a member of `C`. The static field `f`, static method `m()`, and the static initializer are also members of `C`. Since all of these elements belong to class `C`, it is known as the enclosing class (封闭类). Class `D` is known as the enclosed class.\n\n### Enclosure and access rules\nAlthough it is enclosed (围绕), a static member class cannot access the enclosing class's instance fields and invoke its instance methods. However, it can access the enclosing class's static fields and invoke its static methods, even those members that are declared `private`. To demonstrate (演示), Listing 1 declares an `EnclosingClass` with a nested `SMClass`. \n\n### Listing 1. Declaring a static member class\n```java\nclass EnclosingClass {\n    private static String s;\n\n    private static void m1() {\n        System.out.println(s);\n    }\n\n    static void m2() {\n        SMClass.accessEnclosingClass();\n    }\n\n    static class SMClass {\n        \n        static void accessEnclosingClass() {\n            s = \"Called from SMClass's accessEnclosingClas() method\";\n            m1();\n        }\n\n        void accessEnclosingClass2() {\n            m2();\n        }\n\n    }\n}\n```\n\nListing 1 declares a top-level class named EnclosingClass with class field s, class method `m1()` and `m2()`, and static member class SMClass. SMClass declares class method `accessEnclosingClass()` and instance method `accessEnclosingClass2()`. Note the following:\n1. `m2()`'s invocation (调用) of SMClass's `accessEnclosingClass()` method requires the `SMClass.` prefix because `accessEnclosingClass()` is declared `static`\n1. `accessEnclosingClass()` is able to access EnclosingClass's s field and call its `m1()` method, even though both have been declared `private`.\n\nListing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass's `accessEnclosingClass()` method. It also demonstrates how to instantiate SMClass and invoke its `accessEnclosingClass2()` instance method.\n\n### Listing 2. Invoking a static member class's methods\n```java\npublic class SMCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass.SMClass.accessEncolsingClass();\n        EnclsoingClass.SMClass smc = new EnclosingClass.SMClass();\n        smc.accessEnclosingClass2();\n    }\n}\n```\n\nAs shown in Listing 2, if you want to invoke a top-level class's method from within an enclosed class, you must prefix the enclosed class's name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.\n\nCompile Listing 1 and 2 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class's name, dollar-sign character, and the static member class's name. In this case, compiling results is:\n```\nSMCDemo.class\nEnclosingClass.class\nEnclosingClass$SMCClass.class\n```\n\nRun the application as follows:\n\n```bash\njava SMCDemo\n```\n\nYou should observe the following output:\n```\nCalled from SMClass's accessEnclosingClass() method\nCalled from SMClass's accessEnclosingClass() method\n```\n\n### Example: Static classes and Java 2D\nJava's standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the `java.awt.geom` package.\n\nThe `Ellipse2D` class found in `java.awt.geom` describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class's architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass `Ellipse2D`:\n```java\npublic abstract class Ellipse2D extends RectangularShape {\n    \n    public static class Float extends Ellipse2D implements Serializable {\n\n        public float x, y, widht, heigh;\n\n        public Float() {}\n\n        public Float(float x, float y, float w, float h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return (double)x;\n        }\n\n        // additional instance methods\n    }\n\n    public static class Double extends Ellipse2D implements Serializable {\n        \n        public double x, y, width, height;\n    \n        public Double() {}\n\n        public Double(double x, double y, double w, double h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return x;\n        }\n\n        // additional instance methods\n    }\n\n    public boolean contains(double x, double y) {\n        // ...\n    }\n\n    // additional instance methods shared by Float, Double, and other Ellipse2D subclass.\n}\n```\n\nThe `Float` and `Double` classes extend `Ellipse2D`, providing floating-point and double precision floating-point Ellipse2D implementations.\n\n## Inner classes, tpye 1: Non-static member classes\nConsider this example:\n```java\nclass C {\n    int f;\n\n    void m() {}\n\n    C() {\n        f = 2;\n    }\n\n    class D {\n        // members\n    }\n}\n```\n\nHere, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.\n\nEach instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class's instance methods can call the enclosing class's instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.\n\n#### Listing 3. Declare an enclosing class with a nested non-static member class\n```java\nclass EnclosingClass {\n    private String s;\n\n    private void m() {\n        System.out.println(s);\n    }\n\n    class NSMClass {\n        void accessEnclosingClass() {\n            s = \"Called from NSMClass's accessEnclosingClass() method\";\n            m();\n        }\n    }\n}\n```\n\nListing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method `accessEnclosingClass()`.\n\nBecause `accessEnclosingClass()` in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.\n\n#### Listing 4. NSMCDemo.java\n```java\npublic class NSMDemo {\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.new NSMClass().accessEnclosingClass();\n    }\n}\n```\n\nListing 4's `main()` method first instantiates EnclosingClass and saves its reference in local variable ec. The `main()` method then uses the EnclosingClass reference as a prefix to the `new` operator, in order to instantiate NSMClass. The NSMClass reference is then used to call `accessEnclosingClass()` method.\n\n> Should I use `new` with a reference to the enclosing class?\n> Prefixing `new` with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class's constructor from within a constructor or an instance method of its enclosing class.\n\nCompile Listing 3 and 4 as follows:\n```bash\njava *.java\n```\n\nWhen you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class's name, a dollar-sign character, and the non-static member class's name. In this case, compiling results in：\n```\nNSMDemo.class\nEnclosingClass.class\nEnclisingClass$NSMCClass.class\n```\n\nRun the application as follows:\n```bash\njava NSMDemo\n```\n\nYou should observe the following output:\n```\nCalled from NSMClass's accessEnclosingClass() method\n```\n\n> When (and how) to qualify (限定) `this`\n> An enclosed class's code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) `this` with the enclosing class's name and the member access operator `.`. For example, if code within `accessEnclosingClass()` needed to obtain a reference to its `EnclosingClass` instance, it would spcify `EnclosingClass.this`. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.\n\n#### Example: Non-static member classes in HashMap\nThe standard class library includes non-static member as well as static member classes. For this example, we'll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.\n\nFor example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:\n```java\npublic class HashMap<K, V> extends AbstractMap<K, V> implements Map<K, V>, Cloneable, Serializable {\n    // various members\n\n    final class KeySet extends AbstractSet<K> {\n        // various members\n    }\n\n    // various members\n}\n```\n\nThe `<K, V>` and `<K>` syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.\n\nHashMap provides a `KeySet()` method that instantiates KeySet when necessary and returns this instance or a cached instance. Here's the complete method:\n```java\npublic Set<K> keyset() {\n    Set<K> ks = keySet;\n    if (ks == null) {\n        ks = new KeySet();\n        keySet = ks;\n    }\n    return ks;\n}\n```\n\nNotice that the enclosed class's (KeySet's) constructor is called from within the enclosing class's (HashSet's) `keyset()` instance method. This illustrates a common practice (做法) especially because prefixing the `new` operator with an enclosing class reference is rare.\n\n## Inner classes, type 2: Local classes\nIt's occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:\n```java\ninterface I {\n\n}\n\nclass C {\n    // or even static I m()\n    I m() {\n        class D implements I {\n            // members\n        }\n        return new D();\n    }\n}\n```\n\nTop-level class C declares instance method `m()`, which returns an instance of local class D, which is declared in this method. Notice that `m()`'s return type is interface I, which D implements. The interface is necessary because giving `m()` return type D would result in a compiler error -- D isn't accessible outside of `m()`' body.\n\n> Illegal access modifiers (修饰语) in local class declaration\n> The compiler will report an error if a local class declaration contains any of the access modifiers `private`, `public`, or `protected`; or the modifier `static`.\n\nA local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope's local variables and parameters, which must be declared `final`. Consider 5.\n\n### Listing 5. Declaring a local class within an enclosing class instance method\n```java\nclass EnclosingClass {\n    \n    void m(final int x) {\n        final int y = x * 3;\n\n        class LClass {\n            int m = x;\n            int n = y;\n        }\n\n        LClass lc = new LClass();\n        System.out.println(lc.m);\n        System.out.println(lc.n);\n    }\n}\n```\n\nListing 5 declares EnclosingClass with instance method `m()`, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.\n\n### Listing 6. A local class declares and initializes a pair of instance fields\n```java\npublic class LCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.m(5);\n    }\n}\n```\n\nListing 6's `main()` method first instantiates EnclosingClass. It then invokes `m(5)` on this instance. The called `m()` method multiplies this argument by 3, instantiates LClass, whose `<init>()` method assigns the argument and the tripled value to its pair of instance fields and outputs LClass's instance fields. (Note that in this case the local class uses the `<init>()` method instead of a constructor to interact with its instance fields.)\n\nCompile Listing 5 and 6 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class's name, a dollar-sign character, a 1-base integer, and the local class's name. In this case, compiling results:\n```\nLCDemo.class\nEnclosingClass.class\nEnclosingClass$1LClass.class\n```\n\n### A note about local class name\nWhen generating a name for a local class's file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class's class file from a non-static member clas's class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:\n```java\npublic class EnclosingClass\n{\n    public void m1()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m2()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m3()\n    {\n       class LClass2\n       {\n       }\n    }\n}\n```\n\nEnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:\n```\nEnclosingClass$1LClass.class\nEnclosingClass$1LClass2.class\nEnclosingClass$2LClass.class\nEnclosingClass.class\n```\n\nRun the application as follow:\n```bash\njava LCDemo\n```\n\nYou should observe the following output:\n```\n5\n15\n```\n\n### Example: Using local classes in regular expressions\nThe standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:\n```java\npublic Stream<MatchResult> results()\n{\n   class MatchResultIterator implements Iterator<MatchResult>\n   {\n      // members\n   }\n   return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new MatchResultIterator(),\n                                                                   Spliterator.ORDERED |\n                                                                   Spliterator.NONNULL),\n                               false);\n}\n```\n\nNote the instantiation of MatchResultIterator() following the class declaration. Don't worry about parts of the code that you don't understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.\n\n## Inner classes, type 3: Anonymous classes\nStatic member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:\n```java\n// subclass the base class\n\nabstract class Base\n{\n   // members\n}\n\nclass A\n{\n   void m()\n   {\n      Base b = new Base()\n               {\n                 // members\n               };\n   }\n}\n\n// implement the interface\n\ninterface I\n{\n   // members\n}\n\nclass B\n{\n   void m()\n   {\n      I i = new I()\n            {\n               // members\n            };\n   }\n}\n```\n\nThe first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.\n\n> Constructing anonymous class instances\n> An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.\n\nAnonymous classes are useful for expressing functionality that's passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (<) operator for one order, and the other version using the greater than (>) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.\n\n### Listing 7. Using an anonymous class to pass functionality as a method argument\n```java\npublic abstract class Comparer\n{\n   public abstract int compare(int x, int y);\n}\n```\n\nThe compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.\n\n### Listing 8. Sorting an array of integers with the Bubble Sort algorithm\n```java\npublic class ACDemo\n{\n   public static void main(String[] args)\n   {\n      int[] a = { 10, 30, 5, 0, -2, 100, -9 };\n      dump(a);\n      sort(a, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return x - y;\n                     }\n                  });\n      dump(a);\n      int[] b = { 10, 30, 5, 0, -2, 100, -9 };\n      sort(b, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return y - x;\n                     }\n                  });\n      dump(b);\n   }\n\n   static void dump(int[] x)\n   {\n      for (int i = 0; i < x.length; i++)\n         System.out.print(x[i] + \" \");\n      System.out.println();\n   }\n\n   static void sort(int[] x, Comparer c)\n   {\n      for (int pass = 0; pass < x.length - 1; pass++)\n         for (int i = x.length - 1; i > pass; i--)\n            if (c.compare(x[i], x[pass]) < 0)\n            {\n               int temp = x[i];\n               x[i] = x[pass];\n               x[pass] = temp;\n            }\n   }\n}\n```\n\nThe main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.\n\n> Migrating from anonymous classes to lambdas\n> As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.\n\nCompile Listing 7 and 8 as follows:\n```\njavac *.java\n```\n\nWhen you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class's name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:\n```\nACDemo.class.\nACDemo$1.class\nACDemo$2.class \n```\n\nRun the application as follows:\n```bash\njava ACDemo\n```\n\nYou should obeserve the following output:\n```\n\n10 30 5 0 -2 100 -9\n-9 -2 0 5 10 30 100\n100 30 10 5 0 -2 -9\n```\n\n### Example: Using anonymous classes with an AWT event hanlder\nAnonymous classes can be used with many packages in the standard calss library. For this example, we'll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing's JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.\n\n```java\nJButton btnClose = new JButton(\"close\");\nbtnClose.addActionListener(new ActionListener()\n                               {\n                                  public void actionPerformed(ActionEvent ae)\n                                  {\n                                     System.out.println(\"close button clicked\");\n                                  }\n                               });\n```\n\nThe first line instantiates JButton, passing close as the button label to JButton's constructor. The second line registers an action listener with the button. The action listener's actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.\n\n## Conclusion\nJava's nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.","slug":"JavaWorld/Advanced features Part 4, Get started with method references in Java","published":1,"updated":"2020-04-19T12:23:19.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mcd00c5m33p3o0yq35m","content":"<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p>\n<p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><h2 id=\"Static-classes-in-Java\"><a href=\"#Static-classes-in-Java\" class=\"headerlink\" title=\"Static classes in Java\"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p>\n<h3 id=\"Enclosure-and-access-rules\"><a href=\"#Enclosure-and-access-rules\" class=\"headerlink\" title=\"Enclosure and access rules\"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p>\n<h3 id=\"Listing-1-Declaring-a-static-member-class\"><a href=\"#Listing-1-Declaring-a-static-member-class\" class=\"headerlink\" title=\"Listing 1. Declaring a static member class\"></a>Listing 1. Declaring a static member class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SMClass.accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMClass</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from SMClass's accessEnclosingClas() method\"</span>;</span><br><span class=\"line\">            m1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            m2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p>\n<ol>\n<li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li>\n<li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li>\n</ol>\n<p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p>\n<h3 id=\"Listing-2-Invoking-a-static-member-class’s-methods\"><a href=\"#Listing-2-Invoking-a-static-member-class’s-methods\" class=\"headerlink\" title=\"Listing 2. Invoking a static member class’s methods\"></a>Listing 2. Invoking a static member class’s methods</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class=\"line\">        EnclsoingClass.SMClass smc = <span class=\"keyword\">new</span> EnclosingClass.SMClass();</span><br><span class=\"line\">        smc.accessEnclosingClass2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p>\n<p>Compile Listing 1 and 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SMCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java SMCDemo</span><br></pre></td></tr></table></figure>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Static-classes-and-Java-2D\"><a href=\"#Example-Static-classes-and-Java-2D\" class=\"headerlink\" title=\"Example: Static classes and Java 2D\"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p>\n<p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">extends</span> <span class=\"title\">RectangularShape</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Float</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> x, y, widht, heigh;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">float</span> w, <span class=\"keyword\">float</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Double</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> x, y, width, height;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y, <span class=\"keyword\">double</span> w, <span class=\"keyword\">double</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p>\n<h2 id=\"Inner-classes-tpye-1-Non-static-member-classes\"><a href=\"#Inner-classes-tpye-1-Non-static-member-classes\" class=\"headerlink\" title=\"Inner classes, tpye 1: Non-static member classes\"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    C() &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p>\n<p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p>\n<h4 id=\"Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\"><a href=\"#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\" class=\"headerlink\" title=\"Listing 3. Declare an enclosing class with a nested non-static member class\"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from NSMClass's accessEnclosingClass() method\"</span>;</span><br><span class=\"line\">            m();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p>\n<p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p>\n<h4 id=\"Listing-4-NSMCDemo-java\"><a href=\"#Listing-4-NSMCDemo-java\" class=\"headerlink\" title=\"Listing 4. NSMCDemo.java\"></a>Listing 4. NSMCDemo.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.new NSMClass().accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p>\n<blockquote>\n<p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p>\n</blockquote>\n<p>Compile Listing 3 and 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java NSMDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p>\n</blockquote>\n<h4 id=\"Example-Non-static-member-classes-in-HashMap\"><a href=\"#Example-Non-static-member-classes-in-HashMap\" class=\"headerlink\" title=\"Example: Non-static member classes in HashMap\"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p>\n<p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// various members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p>\n<p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Set&lt;K&gt; <span class=\"title\">keyset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;K&gt; ks = keySet;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ks == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ks = <span class=\"keyword\">new</span> KeySet();</span><br><span class=\"line\">        keySet = ks;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ks;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p>\n<h2 id=\"Inner-classes-type-2-Local-classes\"><a href=\"#Inner-classes-type-2-Local-classes\" class=\"headerlink\" title=\"Inner classes, type 2: Local classes\"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// or even static I m()</span></span><br><span class=\"line\">    <span class=\"function\">I <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// members</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p>\n<blockquote>\n<p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p>\n</blockquote>\n<p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p>\n<h3 id=\"Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\"><a href=\"#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\" class=\"headerlink\" title=\"Listing 5. Declaring a local class within an enclosing class instance method\"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = x * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = x;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LClass lc = <span class=\"keyword\">new</span> LClass();</span><br><span class=\"line\">        System.out.println(lc.m);</span><br><span class=\"line\">        System.out.println(lc.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p>\n<h3 id=\"Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\"><a href=\"#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\" class=\"headerlink\" title=\"Listing 6. A local class declares and initializes a pair of instance fields\"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.m(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p>\n<p>Compile Listing 5 and 6 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"A-note-about-local-class-name\"><a href=\"#A-note-about-local-class-name\" class=\"headerlink\" title=\"A note about local class name\"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass2</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EnclosingClass$1LClass.class</span><br><span class=\"line\">EnclosingClass$1LClass2.class</span><br><span class=\"line\">EnclosingClass$2LClass.class</span><br><span class=\"line\">EnclosingClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follow:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LCDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">15</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-local-classes-in-regular-expressions\"><a href=\"#Example-Using-local-classes-in-regular-expressions\" class=\"headerlink\" title=\"Example: Using local classes in regular expressions\"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Stream&lt;MatchResult&gt; <span class=\"title\">results</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchResultIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">MatchResult</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// members</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class=\"keyword\">new</span> MatchResultIterator(),</span><br><span class=\"line\">                                                                   Spliterator.ORDERED |</span><br><span class=\"line\">                                                                   Spliterator.NONNULL),</span><br><span class=\"line\">                               <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p>\n<h2 id=\"Inner-classes-type-3-Anonymous-classes\"><a href=\"#Inner-classes-type-3-Anonymous-classes\" class=\"headerlink\" title=\"Inner classes, type 3: Anonymous classes\"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// subclass the base class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      Base b = <span class=\"keyword\">new</span> Base()</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// members</span></span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// implement the interface</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      I i = <span class=\"keyword\">new</span> I()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"comment\">// members</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p>\n<blockquote>\n<p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p>\n</blockquote>\n<p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p>\n<h3 id=\"Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\"><a href=\"#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\" class=\"headerlink\" title=\"Listing 7. Using an anonymous class to pass functionality as a method argument\"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comparer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p>\n<h3 id=\"Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\"><a href=\"#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"Listing 8. Sorting an array of integers with the Bubble Sort algorithm\"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] a = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      sort(a, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] b = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      sort(b, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> y - x;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(b);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">         System.out.print(x[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, Comparer c)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pass = <span class=\"number\">0</span>; pass &lt; x.length - <span class=\"number\">1</span>; pass++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.length - <span class=\"number\">1</span>; i &gt; pass; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.compare(x[i], x[pass]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = x[i];</span><br><span class=\"line\">               x[i] = x[pass];</span><br><span class=\"line\">               x[pass] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p>\n<blockquote>\n<p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p>\n</blockquote>\n<p>Compile Listing 7 and 8 as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACDemo.class.</span><br><span class=\"line\">ACDemo$1.class</span><br><span class=\"line\">ACDemo$2.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java ACDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should obeserve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">10 30 5 0 -2 100 -9</span><br><span class=\"line\">-9 -2 0 5 10 30 100</span><br><span class=\"line\">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-anonymous-classes-with-an-AWT-event-hanlder\"><a href=\"#Example-Using-anonymous-classes-with-an-AWT-event-hanlder\" class=\"headerlink\" title=\"Example: Using anonymous classes with an AWT event hanlder\"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton btnClose = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"close\"</span>);</span><br><span class=\"line\">btnClose.addActionListener(<span class=\"keyword\">new</span> ActionListener()</span><br><span class=\"line\">                               &#123;</span><br><span class=\"line\">                                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent ae)</span></span></span><br><span class=\"line\"><span class=\"function\">                                  </span>&#123;</span><br><span class=\"line\">                                     System.out.println(<span class=\"string\">\"close button clicked\"</span>);</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                               &#125;);</span><br></pre></td></tr></table></figure>\n<p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p>\n<p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><h2 id=\"Static-classes-in-Java\"><a href=\"#Static-classes-in-Java\" class=\"headerlink\" title=\"Static classes in Java\"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p>\n<h3 id=\"Enclosure-and-access-rules\"><a href=\"#Enclosure-and-access-rules\" class=\"headerlink\" title=\"Enclosure and access rules\"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p>\n<h3 id=\"Listing-1-Declaring-a-static-member-class\"><a href=\"#Listing-1-Declaring-a-static-member-class\" class=\"headerlink\" title=\"Listing 1. Declaring a static member class\"></a>Listing 1. Declaring a static member class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SMClass.accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMClass</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from SMClass's accessEnclosingClas() method\"</span>;</span><br><span class=\"line\">            m1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            m2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p>\n<ol>\n<li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li>\n<li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li>\n</ol>\n<p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p>\n<h3 id=\"Listing-2-Invoking-a-static-member-class’s-methods\"><a href=\"#Listing-2-Invoking-a-static-member-class’s-methods\" class=\"headerlink\" title=\"Listing 2. Invoking a static member class’s methods\"></a>Listing 2. Invoking a static member class’s methods</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class=\"line\">        EnclsoingClass.SMClass smc = <span class=\"keyword\">new</span> EnclosingClass.SMClass();</span><br><span class=\"line\">        smc.accessEnclosingClass2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p>\n<p>Compile Listing 1 and 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SMCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java SMCDemo</span><br></pre></td></tr></table></figure>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Static-classes-and-Java-2D\"><a href=\"#Example-Static-classes-and-Java-2D\" class=\"headerlink\" title=\"Example: Static classes and Java 2D\"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p>\n<p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">extends</span> <span class=\"title\">RectangularShape</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Float</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> x, y, widht, heigh;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">float</span> w, <span class=\"keyword\">float</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Double</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> x, y, width, height;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y, <span class=\"keyword\">double</span> w, <span class=\"keyword\">double</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p>\n<h2 id=\"Inner-classes-tpye-1-Non-static-member-classes\"><a href=\"#Inner-classes-tpye-1-Non-static-member-classes\" class=\"headerlink\" title=\"Inner classes, tpye 1: Non-static member classes\"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    C() &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p>\n<p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p>\n<h4 id=\"Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\"><a href=\"#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\" class=\"headerlink\" title=\"Listing 3. Declare an enclosing class with a nested non-static member class\"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from NSMClass's accessEnclosingClass() method\"</span>;</span><br><span class=\"line\">            m();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p>\n<p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p>\n<h4 id=\"Listing-4-NSMCDemo-java\"><a href=\"#Listing-4-NSMCDemo-java\" class=\"headerlink\" title=\"Listing 4. NSMCDemo.java\"></a>Listing 4. NSMCDemo.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.new NSMClass().accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p>\n<blockquote>\n<p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p>\n</blockquote>\n<p>Compile Listing 3 and 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java NSMDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p>\n</blockquote>\n<h4 id=\"Example-Non-static-member-classes-in-HashMap\"><a href=\"#Example-Non-static-member-classes-in-HashMap\" class=\"headerlink\" title=\"Example: Non-static member classes in HashMap\"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p>\n<p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// various members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p>\n<p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Set&lt;K&gt; <span class=\"title\">keyset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;K&gt; ks = keySet;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ks == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ks = <span class=\"keyword\">new</span> KeySet();</span><br><span class=\"line\">        keySet = ks;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ks;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p>\n<h2 id=\"Inner-classes-type-2-Local-classes\"><a href=\"#Inner-classes-type-2-Local-classes\" class=\"headerlink\" title=\"Inner classes, type 2: Local classes\"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// or even static I m()</span></span><br><span class=\"line\">    <span class=\"function\">I <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// members</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p>\n<blockquote>\n<p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p>\n</blockquote>\n<p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p>\n<h3 id=\"Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\"><a href=\"#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\" class=\"headerlink\" title=\"Listing 5. Declaring a local class within an enclosing class instance method\"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = x * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = x;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LClass lc = <span class=\"keyword\">new</span> LClass();</span><br><span class=\"line\">        System.out.println(lc.m);</span><br><span class=\"line\">        System.out.println(lc.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p>\n<h3 id=\"Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\"><a href=\"#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\" class=\"headerlink\" title=\"Listing 6. A local class declares and initializes a pair of instance fields\"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.m(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p>\n<p>Compile Listing 5 and 6 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"A-note-about-local-class-name\"><a href=\"#A-note-about-local-class-name\" class=\"headerlink\" title=\"A note about local class name\"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass2</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EnclosingClass$1LClass.class</span><br><span class=\"line\">EnclosingClass$1LClass2.class</span><br><span class=\"line\">EnclosingClass$2LClass.class</span><br><span class=\"line\">EnclosingClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follow:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LCDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">15</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-local-classes-in-regular-expressions\"><a href=\"#Example-Using-local-classes-in-regular-expressions\" class=\"headerlink\" title=\"Example: Using local classes in regular expressions\"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Stream&lt;MatchResult&gt; <span class=\"title\">results</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchResultIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">MatchResult</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// members</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class=\"keyword\">new</span> MatchResultIterator(),</span><br><span class=\"line\">                                                                   Spliterator.ORDERED |</span><br><span class=\"line\">                                                                   Spliterator.NONNULL),</span><br><span class=\"line\">                               <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p>\n<h2 id=\"Inner-classes-type-3-Anonymous-classes\"><a href=\"#Inner-classes-type-3-Anonymous-classes\" class=\"headerlink\" title=\"Inner classes, type 3: Anonymous classes\"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// subclass the base class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      Base b = <span class=\"keyword\">new</span> Base()</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// members</span></span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// implement the interface</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      I i = <span class=\"keyword\">new</span> I()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"comment\">// members</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p>\n<blockquote>\n<p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p>\n</blockquote>\n<p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p>\n<h3 id=\"Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\"><a href=\"#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\" class=\"headerlink\" title=\"Listing 7. Using an anonymous class to pass functionality as a method argument\"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comparer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p>\n<h3 id=\"Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\"><a href=\"#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"Listing 8. Sorting an array of integers with the Bubble Sort algorithm\"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] a = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      sort(a, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] b = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      sort(b, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> y - x;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(b);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">         System.out.print(x[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, Comparer c)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pass = <span class=\"number\">0</span>; pass &lt; x.length - <span class=\"number\">1</span>; pass++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.length - <span class=\"number\">1</span>; i &gt; pass; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.compare(x[i], x[pass]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = x[i];</span><br><span class=\"line\">               x[i] = x[pass];</span><br><span class=\"line\">               x[pass] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p>\n<blockquote>\n<p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p>\n</blockquote>\n<p>Compile Listing 7 and 8 as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACDemo.class.</span><br><span class=\"line\">ACDemo$1.class</span><br><span class=\"line\">ACDemo$2.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java ACDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should obeserve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">10 30 5 0 -2 100 -9</span><br><span class=\"line\">-9 -2 0 5 10 30 100</span><br><span class=\"line\">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-anonymous-classes-with-an-AWT-event-hanlder\"><a href=\"#Example-Using-anonymous-classes-with-an-AWT-event-hanlder\" class=\"headerlink\" title=\"Example: Using anonymous classes with an AWT event hanlder\"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton btnClose = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"close\"</span>);</span><br><span class=\"line\">btnClose.addActionListener(<span class=\"keyword\">new</span> ActionListener()</span><br><span class=\"line\">                               &#123;</span><br><span class=\"line\">                                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent ae)</span></span></span><br><span class=\"line\"><span class=\"function\">                                  </span>&#123;</span><br><span class=\"line\">                                     System.out.println(<span class=\"string\">\"close button clicked\"</span>);</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                               &#125;);</span><br></pre></td></tr></table></figure>\n<p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>\n"},{"title":"Advanced features Part 1, Static classes and inner classes in Java","date":"2020-03-04T16:00:01.000Z","_content":"Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class's namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.\n\nIn Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you'll learn how to work with static member classes and the three types of inner classes in your Java code.\n\n#### test\n\n## Static classes in Java\nFromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the `static` keyword. Here's an example of a static member class declaration:\n```java\nclass C {\n    static int f;\n\n    static void m() {}\n\n    static {\n        f = 2;\n    }\n\n    static class D {\n        // members\n    }\n}\n```\n\nThis example introduces top-level class `C` with static field `f`, static method `m()`, a static initializer, and static member cladd `D`. Notice that `D` is a member of `C`. The static field `f`, static method `m()`, and the static initializer are also members of `C`. Since all of these elements belong to class `C`, it is known as the enclosing class (封闭类). Class `D` is known as the enclosed class.\n\n### Enclosure and access rules\nAlthough it is enclosed (围绕), a static member class cannot access the enclosing class's instance fields and invoke its instance methods. However, it can access the enclosing class's static fields and invoke its static methods, even those members that are declared `private`. To demonstrate (演示), Listing 1 declares an `EnclosingClass` with a nested `SMClass`. \n\n### Listing 1. Declaring a static member class\n```java\nclass EnclosingClass {\n    private static String s;\n\n    private static void m1() {\n        System.out.println(s);\n    }\n\n    static void m2() {\n        SMClass.accessEnclosingClass();\n    }\n\n    static class SMClass {\n        \n        static void accessEnclosingClass() {\n            s = \"Called from SMClass's accessEnclosingClas() method\";\n            m1();\n        }\n\n        void accessEnclosingClass2() {\n            m2();\n        }\n\n    }\n}\n```\n\nListing 1 declares a top-level class named EnclosingClass with class field s, class method `m1()` and `m2()`, and static member class SMClass. SMClass declares class method `accessEnclosingClass()` and instance method `accessEnclosingClass2()`. Note the following:\n1. `m2()`'s invocation (调用) of SMClass's `accessEnclosingClass()` method requires the `SMClass.` prefix because `accessEnclosingClass()` is declared `static`\n1. `accessEnclosingClass()` is able to access EnclosingClass's s field and call its `m1()` method, even though both have been declared `private`.\n\nListing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass's `accessEnclosingClass()` method. It also demonstrates how to instantiate SMClass and invoke its `accessEnclosingClass2()` instance method.\n\n### Listing 2. Invoking a static member class's methods\n```java\npublic class SMCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass.SMClass.accessEncolsingClass();\n        EnclsoingClass.SMClass smc = new EnclosingClass.SMClass();\n        smc.accessEnclosingClass2();\n    }\n}\n```\n\nAs shown in Listing 2, if you want to invoke a top-level class's method from within an enclosed class, you must prefix the enclosed class's name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.\n\nCompile Listing 1 and 2 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class's name, dollar-sign character, and the static member class's name. In this case, compiling results is:\n```\nSMCDemo.class\nEnclosingClass.class\nEnclosingClass$SMCClass.class\n```\n\nRun the application as follows:\n\n```bash\njava SMCDemo\n```\n\nYou should observe the following output:\n```\nCalled from SMClass's accessEnclosingClass() method\nCalled from SMClass's accessEnclosingClass() method\n```\n\n### Example: Static classes and Java 2D\nJava's standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the `java.awt.geom` package.\n\nThe `Ellipse2D` class found in `java.awt.geom` describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class's architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass `Ellipse2D`:\n```java\npublic abstract class Ellipse2D extends RectangularShape {\n    \n    public static class Float extends Ellipse2D implements Serializable {\n\n        public float x, y, widht, heigh;\n\n        public Float() {}\n\n        public Float(float x, float y, float w, float h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return (double)x;\n        }\n\n        // additional instance methods\n    }\n\n    public static class Double extends Ellipse2D implements Serializable {\n        \n        public double x, y, width, height;\n    \n        public Double() {}\n\n        public Double(double x, double y, double w, double h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return x;\n        }\n\n        // additional instance methods\n    }\n\n    public boolean contains(double x, double y) {\n        // ...\n    }\n\n    // additional instance methods shared by Float, Double, and other Ellipse2D subclass.\n}\n```\n\nThe `Float` and `Double` classes extend `Ellipse2D`, providing floating-point and double precision floating-point Ellipse2D implementations.\n\n## Inner classes, tpye 1: Non-static member classes\nConsider this example:\n```java\nclass C {\n    int f;\n\n    void m() {}\n\n    C() {\n        f = 2;\n    }\n\n    class D {\n        // members\n    }\n}\n```\n\nHere, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.\n\nEach instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class's instance methods can call the enclosing class's instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.\n\n#### Listing 3. Declare an enclosing class with a nested non-static member class\n```java\nclass EnclosingClass {\n    private String s;\n\n    private void m() {\n        System.out.println(s);\n    }\n\n    class NSMClass {\n        void accessEnclosingClass() {\n            s = \"Called from NSMClass's accessEnclosingClass() method\";\n            m();\n        }\n    }\n}\n```\n\nListing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method `accessEnclosingClass()`.\n\nBecause `accessEnclosingClass()` in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.\n\n#### Listing 4. NSMCDemo.java\n```java\npublic class NSMDemo {\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.new NSMClass().accessEnclosingClass();\n    }\n}\n```\n\nListing 4's `main()` method first instantiates EnclosingClass and saves its reference in local variable ec. The `main()` method then uses the EnclosingClass reference as a prefix to the `new` operator, in order to instantiate NSMClass. The NSMClass reference is then used to call `accessEnclosingClass()` method.\n\n> Should I use `new` with a reference to the enclosing class?\n> Prefixing `new` with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class's constructor from within a constructor or an instance method of its enclosing class.\n\nCompile Listing 3 and 4 as follows:\n```bash\njava *.java\n```\n\nWhen you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class's name, a dollar-sign character, and the non-static member class's name. In this case, compiling results in：\n```\nNSMDemo.class\nEnclosingClass.class\nEnclisingClass$NSMCClass.class\n```\n\nRun the application as follows:\n```bash\njava NSMDemo\n```\n\nYou should observe the following output:\n```\nCalled from NSMClass's accessEnclosingClass() method\n```\n\n> When (and how) to qualify (限定) `this`\n> An enclosed class's code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) `this` with the enclosing class's name and the member access operator `.`. For example, if code within `accessEnclosingClass()` needed to obtain a reference to its `EnclosingClass` instance, it would spcify `EnclosingClass.this`. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.\n\n#### Example: Non-static member classes in HashMap\nThe standard class library includes non-static member as well as static member classes. For this example, we'll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.\n\nFor example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:\n```java\npublic class HashMap<K, V> extends AbstractMap<K, V> implements Map<K, V>, Cloneable, Serializable {\n    // various members\n\n    final class KeySet extends AbstractSet<K> {\n        // various members\n    }\n\n    // various members\n}\n```\n\nThe `<K, V>` and `<K>` syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.\n\nHashMap provides a `KeySet()` method that instantiates KeySet when necessary and returns this instance or a cached instance. Here's the complete method:\n```java\npublic Set<K> keyset() {\n    Set<K> ks = keySet;\n    if (ks == null) {\n        ks = new KeySet();\n        keySet = ks;\n    }\n    return ks;\n}\n```\n\nNotice that the enclosed class's (KeySet's) constructor is called from within the enclosing class's (HashSet's) `keyset()` instance method. This illustrates a common practice (做法) especially because prefixing the `new` operator with an enclosing class reference is rare.\n\n## Inner classes, type 2: Local classes\nIt's occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:\n```java\ninterface I {\n\n}\n\nclass C {\n    // or even static I m()\n    I m() {\n        class D implements I {\n            // members\n        }\n        return new D();\n    }\n}\n```\n\nTop-level class C declares instance method `m()`, which returns an instance of local class D, which is declared in this method. Notice that `m()`'s return type is interface I, which D implements. The interface is necessary because giving `m()` return type D would result in a compiler error -- D isn't accessible outside of `m()`' body.\n\n> Illegal access modifiers (修饰语) in local class declaration\n> The compiler will report an error if a local class declaration contains any of the access modifiers `private`, `public`, or `protected`; or the modifier `static`.\n\nA local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope's local variables and parameters, which must be declared `final`. Consider 5.\n\n### Listing 5. Declaring a local class within an enclosing class instance method\n```java\nclass EnclosingClass {\n    \n    void m(final int x) {\n        final int y = x * 3;\n\n        class LClass {\n            int m = x;\n            int n = y;\n        }\n\n        LClass lc = new LClass();\n        System.out.println(lc.m);\n        System.out.println(lc.n);\n    }\n}\n```\n\nListing 5 declares EnclosingClass with instance method `m()`, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.\n\n### Listing 6. A local class declares and initializes a pair of instance fields\n```java\npublic class LCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.m(5);\n    }\n}\n```\n\nListing 6's `main()` method first instantiates EnclosingClass. It then invokes `m(5)` on this instance. The called `m()` method multiplies this argument by 3, instantiates LClass, whose `<init>()` method assigns the argument and the tripled value to its pair of instance fields and outputs LClass's instance fields. (Note that in this case the local class uses the `<init>()` method instead of a constructor to interact with its instance fields.)\n\nCompile Listing 5 and 6 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class's name, a dollar-sign character, a 1-base integer, and the local class's name. In this case, compiling results:\n```\nLCDemo.class\nEnclosingClass.class\nEnclosingClass$1LClass.class\n```\n\n### A note about local class name\nWhen generating a name for a local class's file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class's class file from a non-static member clas's class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:\n```java\npublic class EnclosingClass\n{\n    public void m1()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m2()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m3()\n    {\n       class LClass2\n       {\n       }\n    }\n}\n```\n\nEnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:\n```\nEnclosingClass$1LClass.class\nEnclosingClass$1LClass2.class\nEnclosingClass$2LClass.class\nEnclosingClass.class\n```\n\nRun the application as follow:\n```bash\njava LCDemo\n```\n\nYou should observe the following output:\n```\n5\n15\n```\n\n### Example: Using local classes in regular expressions\nThe standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:\n```java\npublic Stream<MatchResult> results()\n{\n   class MatchResultIterator implements Iterator<MatchResult>\n   {\n      // members\n   }\n   return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new MatchResultIterator(),\n                                                                   Spliterator.ORDERED |\n                                                                   Spliterator.NONNULL),\n                               false);\n}\n```\n\nNote the instantiation of MatchResultIterator() following the class declaration. Don't worry about parts of the code that you don't understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.\n\n## Inner classes, type 3: Anonymous classes\nStatic member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:\n```java\n// subclass the base class\n\nabstract class Base\n{\n   // members\n}\n\nclass A\n{\n   void m()\n   {\n      Base b = new Base()\n               {\n                 // members\n               };\n   }\n}\n\n// implement the interface\n\ninterface I\n{\n   // members\n}\n\nclass B\n{\n   void m()\n   {\n      I i = new I()\n            {\n               // members\n            };\n   }\n}\n```\n\nThe first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.\n\n> Constructing anonymous class instances\n> An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.\n\nAnonymous classes are useful for expressing functionality that's passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (<) operator for one order, and the other version using the greater than (>) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.\n\n### Listing 7. Using an anonymous class to pass functionality as a method argument\n```java\npublic abstract class Comparer\n{\n   public abstract int compare(int x, int y);\n}\n```\n\nThe compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.\n\n### Listing 8. Sorting an array of integers with the Bubble Sort algorithm\n```java\npublic class ACDemo\n{\n   public static void main(String[] args)\n   {\n      int[] a = { 10, 30, 5, 0, -2, 100, -9 };\n      dump(a);\n      sort(a, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return x - y;\n                     }\n                  });\n      dump(a);\n      int[] b = { 10, 30, 5, 0, -2, 100, -9 };\n      sort(b, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return y - x;\n                     }\n                  });\n      dump(b);\n   }\n\n   static void dump(int[] x)\n   {\n      for (int i = 0; i < x.length; i++)\n         System.out.print(x[i] + \" \");\n      System.out.println();\n   }\n\n   static void sort(int[] x, Comparer c)\n   {\n      for (int pass = 0; pass < x.length - 1; pass++)\n         for (int i = x.length - 1; i > pass; i--)\n            if (c.compare(x[i], x[pass]) < 0)\n            {\n               int temp = x[i];\n               x[i] = x[pass];\n               x[pass] = temp;\n            }\n   }\n}\n```\n\nThe main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.\n\n> Migrating from anonymous classes to lambdas\n> As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.\n\nCompile Listing 7 and 8 as follows:\n```\njavac *.java\n```\n\nWhen you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class's name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:\n```\nACDemo.class.\nACDemo$1.class\nACDemo$2.class \n```\n\nRun the application as follows:\n```bash\njava ACDemo\n```\n\nYou should obeserve the following output:\n```\n\n10 30 5 0 -2 100 -9\n-9 -2 0 5 10 30 100\n100 30 10 5 0 -2 -9\n```\n\n### Example: Using anonymous classes with an AWT event hanlder\nAnonymous classes can be used with many packages in the standard calss library. For this example, we'll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing's JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.\n\n```java\nJButton btnClose = new JButton(\"close\");\nbtnClose.addActionListener(new ActionListener()\n                               {\n                                  public void actionPerformed(ActionEvent ae)\n                                  {\n                                     System.out.println(\"close button clicked\");\n                                  }\n                               });\n```\n\nThe first line instantiates JButton, passing close as the button label to JButton's constructor. The second line registers an action listener with the button. The action listener's actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.\n\n## Conclusion\nJava's nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.","source":"_posts/JavaWorld/Advanced features Part 1, Static classes and inner classes in Java.md","raw":"---\ntitle: Advanced features Part 1, Static classes and inner classes in Java\n\ntag:\n- Advanced Java language features\n\ncategories:\n- JavaWorld\n\ndate: 2020-03-05 00:00:01\n---\nNested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class's namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.\n\nIn Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you'll learn how to work with static member classes and the three types of inner classes in your Java code.\n\n#### test\n\n## Static classes in Java\nFromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the `static` keyword. Here's an example of a static member class declaration:\n```java\nclass C {\n    static int f;\n\n    static void m() {}\n\n    static {\n        f = 2;\n    }\n\n    static class D {\n        // members\n    }\n}\n```\n\nThis example introduces top-level class `C` with static field `f`, static method `m()`, a static initializer, and static member cladd `D`. Notice that `D` is a member of `C`. The static field `f`, static method `m()`, and the static initializer are also members of `C`. Since all of these elements belong to class `C`, it is known as the enclosing class (封闭类). Class `D` is known as the enclosed class.\n\n### Enclosure and access rules\nAlthough it is enclosed (围绕), a static member class cannot access the enclosing class's instance fields and invoke its instance methods. However, it can access the enclosing class's static fields and invoke its static methods, even those members that are declared `private`. To demonstrate (演示), Listing 1 declares an `EnclosingClass` with a nested `SMClass`. \n\n### Listing 1. Declaring a static member class\n```java\nclass EnclosingClass {\n    private static String s;\n\n    private static void m1() {\n        System.out.println(s);\n    }\n\n    static void m2() {\n        SMClass.accessEnclosingClass();\n    }\n\n    static class SMClass {\n        \n        static void accessEnclosingClass() {\n            s = \"Called from SMClass's accessEnclosingClas() method\";\n            m1();\n        }\n\n        void accessEnclosingClass2() {\n            m2();\n        }\n\n    }\n}\n```\n\nListing 1 declares a top-level class named EnclosingClass with class field s, class method `m1()` and `m2()`, and static member class SMClass. SMClass declares class method `accessEnclosingClass()` and instance method `accessEnclosingClass2()`. Note the following:\n1. `m2()`'s invocation (调用) of SMClass's `accessEnclosingClass()` method requires the `SMClass.` prefix because `accessEnclosingClass()` is declared `static`\n1. `accessEnclosingClass()` is able to access EnclosingClass's s field and call its `m1()` method, even though both have been declared `private`.\n\nListing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass's `accessEnclosingClass()` method. It also demonstrates how to instantiate SMClass and invoke its `accessEnclosingClass2()` instance method.\n\n### Listing 2. Invoking a static member class's methods\n```java\npublic class SMCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass.SMClass.accessEncolsingClass();\n        EnclsoingClass.SMClass smc = new EnclosingClass.SMClass();\n        smc.accessEnclosingClass2();\n    }\n}\n```\n\nAs shown in Listing 2, if you want to invoke a top-level class's method from within an enclosed class, you must prefix the enclosed class's name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.\n\nCompile Listing 1 and 2 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class's name, dollar-sign character, and the static member class's name. In this case, compiling results is:\n```\nSMCDemo.class\nEnclosingClass.class\nEnclosingClass$SMCClass.class\n```\n\nRun the application as follows:\n\n```bash\njava SMCDemo\n```\n\nYou should observe the following output:\n```\nCalled from SMClass's accessEnclosingClass() method\nCalled from SMClass's accessEnclosingClass() method\n```\n\n### Example: Static classes and Java 2D\nJava's standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the `java.awt.geom` package.\n\nThe `Ellipse2D` class found in `java.awt.geom` describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class's architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass `Ellipse2D`:\n```java\npublic abstract class Ellipse2D extends RectangularShape {\n    \n    public static class Float extends Ellipse2D implements Serializable {\n\n        public float x, y, widht, heigh;\n\n        public Float() {}\n\n        public Float(float x, float y, float w, float h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return (double)x;\n        }\n\n        // additional instance methods\n    }\n\n    public static class Double extends Ellipse2D implements Serializable {\n        \n        public double x, y, width, height;\n    \n        public Double() {}\n\n        public Double(double x, double y, double w, double h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return x;\n        }\n\n        // additional instance methods\n    }\n\n    public boolean contains(double x, double y) {\n        // ...\n    }\n\n    // additional instance methods shared by Float, Double, and other Ellipse2D subclass.\n}\n```\n\nThe `Float` and `Double` classes extend `Ellipse2D`, providing floating-point and double precision floating-point Ellipse2D implementations.\n\n## Inner classes, tpye 1: Non-static member classes\nConsider this example:\n```java\nclass C {\n    int f;\n\n    void m() {}\n\n    C() {\n        f = 2;\n    }\n\n    class D {\n        // members\n    }\n}\n```\n\nHere, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.\n\nEach instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class's instance methods can call the enclosing class's instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.\n\n#### Listing 3. Declare an enclosing class with a nested non-static member class\n```java\nclass EnclosingClass {\n    private String s;\n\n    private void m() {\n        System.out.println(s);\n    }\n\n    class NSMClass {\n        void accessEnclosingClass() {\n            s = \"Called from NSMClass's accessEnclosingClass() method\";\n            m();\n        }\n    }\n}\n```\n\nListing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method `accessEnclosingClass()`.\n\nBecause `accessEnclosingClass()` in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.\n\n#### Listing 4. NSMCDemo.java\n```java\npublic class NSMDemo {\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.new NSMClass().accessEnclosingClass();\n    }\n}\n```\n\nListing 4's `main()` method first instantiates EnclosingClass and saves its reference in local variable ec. The `main()` method then uses the EnclosingClass reference as a prefix to the `new` operator, in order to instantiate NSMClass. The NSMClass reference is then used to call `accessEnclosingClass()` method.\n\n> Should I use `new` with a reference to the enclosing class?\n> Prefixing `new` with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class's constructor from within a constructor or an instance method of its enclosing class.\n\nCompile Listing 3 and 4 as follows:\n```bash\njava *.java\n```\n\nWhen you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class's name, a dollar-sign character, and the non-static member class's name. In this case, compiling results in：\n```\nNSMDemo.class\nEnclosingClass.class\nEnclisingClass$NSMCClass.class\n```\n\nRun the application as follows:\n```bash\njava NSMDemo\n```\n\nYou should observe the following output:\n```\nCalled from NSMClass's accessEnclosingClass() method\n```\n\n> When (and how) to qualify (限定) `this`\n> An enclosed class's code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) `this` with the enclosing class's name and the member access operator `.`. For example, if code within `accessEnclosingClass()` needed to obtain a reference to its `EnclosingClass` instance, it would spcify `EnclosingClass.this`. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.\n\n#### Example: Non-static member classes in HashMap\nThe standard class library includes non-static member as well as static member classes. For this example, we'll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.\n\nFor example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:\n```java\npublic class HashMap<K, V> extends AbstractMap<K, V> implements Map<K, V>, Cloneable, Serializable {\n    // various members\n\n    final class KeySet extends AbstractSet<K> {\n        // various members\n    }\n\n    // various members\n}\n```\n\nThe `<K, V>` and `<K>` syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.\n\nHashMap provides a `KeySet()` method that instantiates KeySet when necessary and returns this instance or a cached instance. Here's the complete method:\n```java\npublic Set<K> keyset() {\n    Set<K> ks = keySet;\n    if (ks == null) {\n        ks = new KeySet();\n        keySet = ks;\n    }\n    return ks;\n}\n```\n\nNotice that the enclosed class's (KeySet's) constructor is called from within the enclosing class's (HashSet's) `keyset()` instance method. This illustrates a common practice (做法) especially because prefixing the `new` operator with an enclosing class reference is rare.\n\n## Inner classes, type 2: Local classes\nIt's occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:\n```java\ninterface I {\n\n}\n\nclass C {\n    // or even static I m()\n    I m() {\n        class D implements I {\n            // members\n        }\n        return new D();\n    }\n}\n```\n\nTop-level class C declares instance method `m()`, which returns an instance of local class D, which is declared in this method. Notice that `m()`'s return type is interface I, which D implements. The interface is necessary because giving `m()` return type D would result in a compiler error -- D isn't accessible outside of `m()`' body.\n\n> Illegal access modifiers (修饰语) in local class declaration\n> The compiler will report an error if a local class declaration contains any of the access modifiers `private`, `public`, or `protected`; or the modifier `static`.\n\nA local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope's local variables and parameters, which must be declared `final`. Consider 5.\n\n### Listing 5. Declaring a local class within an enclosing class instance method\n```java\nclass EnclosingClass {\n    \n    void m(final int x) {\n        final int y = x * 3;\n\n        class LClass {\n            int m = x;\n            int n = y;\n        }\n\n        LClass lc = new LClass();\n        System.out.println(lc.m);\n        System.out.println(lc.n);\n    }\n}\n```\n\nListing 5 declares EnclosingClass with instance method `m()`, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.\n\n### Listing 6. A local class declares and initializes a pair of instance fields\n```java\npublic class LCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.m(5);\n    }\n}\n```\n\nListing 6's `main()` method first instantiates EnclosingClass. It then invokes `m(5)` on this instance. The called `m()` method multiplies this argument by 3, instantiates LClass, whose `<init>()` method assigns the argument and the tripled value to its pair of instance fields and outputs LClass's instance fields. (Note that in this case the local class uses the `<init>()` method instead of a constructor to interact with its instance fields.)\n\nCompile Listing 5 and 6 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class's name, a dollar-sign character, a 1-base integer, and the local class's name. In this case, compiling results:\n```\nLCDemo.class\nEnclosingClass.class\nEnclosingClass$1LClass.class\n```\n\n### A note about local class name\nWhen generating a name for a local class's file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class's class file from a non-static member clas's class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:\n```java\npublic class EnclosingClass\n{\n    public void m1()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m2()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m3()\n    {\n       class LClass2\n       {\n       }\n    }\n}\n```\n\nEnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:\n```\nEnclosingClass$1LClass.class\nEnclosingClass$1LClass2.class\nEnclosingClass$2LClass.class\nEnclosingClass.class\n```\n\nRun the application as follow:\n```bash\njava LCDemo\n```\n\nYou should observe the following output:\n```\n5\n15\n```\n\n### Example: Using local classes in regular expressions\nThe standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:\n```java\npublic Stream<MatchResult> results()\n{\n   class MatchResultIterator implements Iterator<MatchResult>\n   {\n      // members\n   }\n   return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new MatchResultIterator(),\n                                                                   Spliterator.ORDERED |\n                                                                   Spliterator.NONNULL),\n                               false);\n}\n```\n\nNote the instantiation of MatchResultIterator() following the class declaration. Don't worry about parts of the code that you don't understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.\n\n## Inner classes, type 3: Anonymous classes\nStatic member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:\n```java\n// subclass the base class\n\nabstract class Base\n{\n   // members\n}\n\nclass A\n{\n   void m()\n   {\n      Base b = new Base()\n               {\n                 // members\n               };\n   }\n}\n\n// implement the interface\n\ninterface I\n{\n   // members\n}\n\nclass B\n{\n   void m()\n   {\n      I i = new I()\n            {\n               // members\n            };\n   }\n}\n```\n\nThe first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.\n\n> Constructing anonymous class instances\n> An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.\n\nAnonymous classes are useful for expressing functionality that's passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (<) operator for one order, and the other version using the greater than (>) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.\n\n### Listing 7. Using an anonymous class to pass functionality as a method argument\n```java\npublic abstract class Comparer\n{\n   public abstract int compare(int x, int y);\n}\n```\n\nThe compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.\n\n### Listing 8. Sorting an array of integers with the Bubble Sort algorithm\n```java\npublic class ACDemo\n{\n   public static void main(String[] args)\n   {\n      int[] a = { 10, 30, 5, 0, -2, 100, -9 };\n      dump(a);\n      sort(a, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return x - y;\n                     }\n                  });\n      dump(a);\n      int[] b = { 10, 30, 5, 0, -2, 100, -9 };\n      sort(b, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return y - x;\n                     }\n                  });\n      dump(b);\n   }\n\n   static void dump(int[] x)\n   {\n      for (int i = 0; i < x.length; i++)\n         System.out.print(x[i] + \" \");\n      System.out.println();\n   }\n\n   static void sort(int[] x, Comparer c)\n   {\n      for (int pass = 0; pass < x.length - 1; pass++)\n         for (int i = x.length - 1; i > pass; i--)\n            if (c.compare(x[i], x[pass]) < 0)\n            {\n               int temp = x[i];\n               x[i] = x[pass];\n               x[pass] = temp;\n            }\n   }\n}\n```\n\nThe main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.\n\n> Migrating from anonymous classes to lambdas\n> As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.\n\nCompile Listing 7 and 8 as follows:\n```\njavac *.java\n```\n\nWhen you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class's name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:\n```\nACDemo.class.\nACDemo$1.class\nACDemo$2.class \n```\n\nRun the application as follows:\n```bash\njava ACDemo\n```\n\nYou should obeserve the following output:\n```\n\n10 30 5 0 -2 100 -9\n-9 -2 0 5 10 30 100\n100 30 10 5 0 -2 -9\n```\n\n### Example: Using anonymous classes with an AWT event hanlder\nAnonymous classes can be used with many packages in the standard calss library. For this example, we'll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing's JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.\n\n```java\nJButton btnClose = new JButton(\"close\");\nbtnClose.addActionListener(new ActionListener()\n                               {\n                                  public void actionPerformed(ActionEvent ae)\n                                  {\n                                     System.out.println(\"close button clicked\");\n                                  }\n                               });\n```\n\nThe first line instantiates JButton, passing close as the button label to JButton's constructor. The second line registers an action listener with the button. The action listener's actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.\n\n## Conclusion\nJava's nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.","slug":"JavaWorld/Advanced features Part 1, Static classes and inner classes in Java","published":1,"updated":"2020-04-19T12:21:18.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mcg00c7m33pzlj8jf55","content":"<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p>\n<p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><h2 id=\"Static-classes-in-Java\"><a href=\"#Static-classes-in-Java\" class=\"headerlink\" title=\"Static classes in Java\"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p>\n<h3 id=\"Enclosure-and-access-rules\"><a href=\"#Enclosure-and-access-rules\" class=\"headerlink\" title=\"Enclosure and access rules\"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p>\n<h3 id=\"Listing-1-Declaring-a-static-member-class\"><a href=\"#Listing-1-Declaring-a-static-member-class\" class=\"headerlink\" title=\"Listing 1. Declaring a static member class\"></a>Listing 1. Declaring a static member class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SMClass.accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMClass</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from SMClass's accessEnclosingClas() method\"</span>;</span><br><span class=\"line\">            m1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            m2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p>\n<ol>\n<li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li>\n<li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li>\n</ol>\n<p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p>\n<h3 id=\"Listing-2-Invoking-a-static-member-class’s-methods\"><a href=\"#Listing-2-Invoking-a-static-member-class’s-methods\" class=\"headerlink\" title=\"Listing 2. Invoking a static member class’s methods\"></a>Listing 2. Invoking a static member class’s methods</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class=\"line\">        EnclsoingClass.SMClass smc = <span class=\"keyword\">new</span> EnclosingClass.SMClass();</span><br><span class=\"line\">        smc.accessEnclosingClass2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p>\n<p>Compile Listing 1 and 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SMCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java SMCDemo</span><br></pre></td></tr></table></figure>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Static-classes-and-Java-2D\"><a href=\"#Example-Static-classes-and-Java-2D\" class=\"headerlink\" title=\"Example: Static classes and Java 2D\"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p>\n<p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">extends</span> <span class=\"title\">RectangularShape</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Float</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> x, y, widht, heigh;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">float</span> w, <span class=\"keyword\">float</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Double</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> x, y, width, height;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y, <span class=\"keyword\">double</span> w, <span class=\"keyword\">double</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p>\n<h2 id=\"Inner-classes-tpye-1-Non-static-member-classes\"><a href=\"#Inner-classes-tpye-1-Non-static-member-classes\" class=\"headerlink\" title=\"Inner classes, tpye 1: Non-static member classes\"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    C() &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p>\n<p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p>\n<h4 id=\"Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\"><a href=\"#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\" class=\"headerlink\" title=\"Listing 3. Declare an enclosing class with a nested non-static member class\"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from NSMClass's accessEnclosingClass() method\"</span>;</span><br><span class=\"line\">            m();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p>\n<p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p>\n<h4 id=\"Listing-4-NSMCDemo-java\"><a href=\"#Listing-4-NSMCDemo-java\" class=\"headerlink\" title=\"Listing 4. NSMCDemo.java\"></a>Listing 4. NSMCDemo.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.new NSMClass().accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p>\n<blockquote>\n<p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p>\n</blockquote>\n<p>Compile Listing 3 and 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java NSMDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p>\n</blockquote>\n<h4 id=\"Example-Non-static-member-classes-in-HashMap\"><a href=\"#Example-Non-static-member-classes-in-HashMap\" class=\"headerlink\" title=\"Example: Non-static member classes in HashMap\"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p>\n<p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// various members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p>\n<p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Set&lt;K&gt; <span class=\"title\">keyset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;K&gt; ks = keySet;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ks == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ks = <span class=\"keyword\">new</span> KeySet();</span><br><span class=\"line\">        keySet = ks;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ks;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p>\n<h2 id=\"Inner-classes-type-2-Local-classes\"><a href=\"#Inner-classes-type-2-Local-classes\" class=\"headerlink\" title=\"Inner classes, type 2: Local classes\"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// or even static I m()</span></span><br><span class=\"line\">    <span class=\"function\">I <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// members</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p>\n<blockquote>\n<p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p>\n</blockquote>\n<p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p>\n<h3 id=\"Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\"><a href=\"#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\" class=\"headerlink\" title=\"Listing 5. Declaring a local class within an enclosing class instance method\"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = x * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = x;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LClass lc = <span class=\"keyword\">new</span> LClass();</span><br><span class=\"line\">        System.out.println(lc.m);</span><br><span class=\"line\">        System.out.println(lc.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p>\n<h3 id=\"Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\"><a href=\"#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\" class=\"headerlink\" title=\"Listing 6. A local class declares and initializes a pair of instance fields\"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.m(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p>\n<p>Compile Listing 5 and 6 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"A-note-about-local-class-name\"><a href=\"#A-note-about-local-class-name\" class=\"headerlink\" title=\"A note about local class name\"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass2</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EnclosingClass$1LClass.class</span><br><span class=\"line\">EnclosingClass$1LClass2.class</span><br><span class=\"line\">EnclosingClass$2LClass.class</span><br><span class=\"line\">EnclosingClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follow:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LCDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">15</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-local-classes-in-regular-expressions\"><a href=\"#Example-Using-local-classes-in-regular-expressions\" class=\"headerlink\" title=\"Example: Using local classes in regular expressions\"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Stream&lt;MatchResult&gt; <span class=\"title\">results</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchResultIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">MatchResult</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// members</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class=\"keyword\">new</span> MatchResultIterator(),</span><br><span class=\"line\">                                                                   Spliterator.ORDERED |</span><br><span class=\"line\">                                                                   Spliterator.NONNULL),</span><br><span class=\"line\">                               <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p>\n<h2 id=\"Inner-classes-type-3-Anonymous-classes\"><a href=\"#Inner-classes-type-3-Anonymous-classes\" class=\"headerlink\" title=\"Inner classes, type 3: Anonymous classes\"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// subclass the base class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      Base b = <span class=\"keyword\">new</span> Base()</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// members</span></span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// implement the interface</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      I i = <span class=\"keyword\">new</span> I()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"comment\">// members</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p>\n<blockquote>\n<p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p>\n</blockquote>\n<p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p>\n<h3 id=\"Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\"><a href=\"#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\" class=\"headerlink\" title=\"Listing 7. Using an anonymous class to pass functionality as a method argument\"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comparer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p>\n<h3 id=\"Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\"><a href=\"#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"Listing 8. Sorting an array of integers with the Bubble Sort algorithm\"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] a = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      sort(a, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] b = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      sort(b, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> y - x;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(b);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">         System.out.print(x[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, Comparer c)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pass = <span class=\"number\">0</span>; pass &lt; x.length - <span class=\"number\">1</span>; pass++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.length - <span class=\"number\">1</span>; i &gt; pass; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.compare(x[i], x[pass]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = x[i];</span><br><span class=\"line\">               x[i] = x[pass];</span><br><span class=\"line\">               x[pass] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p>\n<blockquote>\n<p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p>\n</blockquote>\n<p>Compile Listing 7 and 8 as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACDemo.class.</span><br><span class=\"line\">ACDemo$1.class</span><br><span class=\"line\">ACDemo$2.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java ACDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should obeserve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">10 30 5 0 -2 100 -9</span><br><span class=\"line\">-9 -2 0 5 10 30 100</span><br><span class=\"line\">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-anonymous-classes-with-an-AWT-event-hanlder\"><a href=\"#Example-Using-anonymous-classes-with-an-AWT-event-hanlder\" class=\"headerlink\" title=\"Example: Using anonymous classes with an AWT event hanlder\"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton btnClose = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"close\"</span>);</span><br><span class=\"line\">btnClose.addActionListener(<span class=\"keyword\">new</span> ActionListener()</span><br><span class=\"line\">                               &#123;</span><br><span class=\"line\">                                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent ae)</span></span></span><br><span class=\"line\"><span class=\"function\">                                  </span>&#123;</span><br><span class=\"line\">                                     System.out.println(<span class=\"string\">\"close button clicked\"</span>);</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                               &#125;);</span><br></pre></td></tr></table></figure>\n<p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p>\n<p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><h2 id=\"Static-classes-in-Java\"><a href=\"#Static-classes-in-Java\" class=\"headerlink\" title=\"Static classes in Java\"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p>\n<h3 id=\"Enclosure-and-access-rules\"><a href=\"#Enclosure-and-access-rules\" class=\"headerlink\" title=\"Enclosure and access rules\"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p>\n<h3 id=\"Listing-1-Declaring-a-static-member-class\"><a href=\"#Listing-1-Declaring-a-static-member-class\" class=\"headerlink\" title=\"Listing 1. Declaring a static member class\"></a>Listing 1. Declaring a static member class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SMClass.accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMClass</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from SMClass's accessEnclosingClas() method\"</span>;</span><br><span class=\"line\">            m1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            m2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p>\n<ol>\n<li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li>\n<li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li>\n</ol>\n<p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p>\n<h3 id=\"Listing-2-Invoking-a-static-member-class’s-methods\"><a href=\"#Listing-2-Invoking-a-static-member-class’s-methods\" class=\"headerlink\" title=\"Listing 2. Invoking a static member class’s methods\"></a>Listing 2. Invoking a static member class’s methods</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class=\"line\">        EnclsoingClass.SMClass smc = <span class=\"keyword\">new</span> EnclosingClass.SMClass();</span><br><span class=\"line\">        smc.accessEnclosingClass2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p>\n<p>Compile Listing 1 and 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SMCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java SMCDemo</span><br></pre></td></tr></table></figure>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Static-classes-and-Java-2D\"><a href=\"#Example-Static-classes-and-Java-2D\" class=\"headerlink\" title=\"Example: Static classes and Java 2D\"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p>\n<p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">extends</span> <span class=\"title\">RectangularShape</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Float</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> x, y, widht, heigh;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">float</span> w, <span class=\"keyword\">float</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Double</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> x, y, width, height;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y, <span class=\"keyword\">double</span> w, <span class=\"keyword\">double</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p>\n<h2 id=\"Inner-classes-tpye-1-Non-static-member-classes\"><a href=\"#Inner-classes-tpye-1-Non-static-member-classes\" class=\"headerlink\" title=\"Inner classes, tpye 1: Non-static member classes\"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    C() &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p>\n<p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p>\n<h4 id=\"Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\"><a href=\"#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\" class=\"headerlink\" title=\"Listing 3. Declare an enclosing class with a nested non-static member class\"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from NSMClass's accessEnclosingClass() method\"</span>;</span><br><span class=\"line\">            m();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p>\n<p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p>\n<h4 id=\"Listing-4-NSMCDemo-java\"><a href=\"#Listing-4-NSMCDemo-java\" class=\"headerlink\" title=\"Listing 4. NSMCDemo.java\"></a>Listing 4. NSMCDemo.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.new NSMClass().accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p>\n<blockquote>\n<p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p>\n</blockquote>\n<p>Compile Listing 3 and 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java NSMDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p>\n</blockquote>\n<h4 id=\"Example-Non-static-member-classes-in-HashMap\"><a href=\"#Example-Non-static-member-classes-in-HashMap\" class=\"headerlink\" title=\"Example: Non-static member classes in HashMap\"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p>\n<p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// various members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p>\n<p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Set&lt;K&gt; <span class=\"title\">keyset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;K&gt; ks = keySet;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ks == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ks = <span class=\"keyword\">new</span> KeySet();</span><br><span class=\"line\">        keySet = ks;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ks;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p>\n<h2 id=\"Inner-classes-type-2-Local-classes\"><a href=\"#Inner-classes-type-2-Local-classes\" class=\"headerlink\" title=\"Inner classes, type 2: Local classes\"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// or even static I m()</span></span><br><span class=\"line\">    <span class=\"function\">I <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// members</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p>\n<blockquote>\n<p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p>\n</blockquote>\n<p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p>\n<h3 id=\"Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\"><a href=\"#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\" class=\"headerlink\" title=\"Listing 5. Declaring a local class within an enclosing class instance method\"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = x * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = x;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LClass lc = <span class=\"keyword\">new</span> LClass();</span><br><span class=\"line\">        System.out.println(lc.m);</span><br><span class=\"line\">        System.out.println(lc.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p>\n<h3 id=\"Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\"><a href=\"#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\" class=\"headerlink\" title=\"Listing 6. A local class declares and initializes a pair of instance fields\"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.m(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p>\n<p>Compile Listing 5 and 6 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"A-note-about-local-class-name\"><a href=\"#A-note-about-local-class-name\" class=\"headerlink\" title=\"A note about local class name\"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass2</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EnclosingClass$1LClass.class</span><br><span class=\"line\">EnclosingClass$1LClass2.class</span><br><span class=\"line\">EnclosingClass$2LClass.class</span><br><span class=\"line\">EnclosingClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follow:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LCDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">15</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-local-classes-in-regular-expressions\"><a href=\"#Example-Using-local-classes-in-regular-expressions\" class=\"headerlink\" title=\"Example: Using local classes in regular expressions\"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Stream&lt;MatchResult&gt; <span class=\"title\">results</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchResultIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">MatchResult</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// members</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class=\"keyword\">new</span> MatchResultIterator(),</span><br><span class=\"line\">                                                                   Spliterator.ORDERED |</span><br><span class=\"line\">                                                                   Spliterator.NONNULL),</span><br><span class=\"line\">                               <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p>\n<h2 id=\"Inner-classes-type-3-Anonymous-classes\"><a href=\"#Inner-classes-type-3-Anonymous-classes\" class=\"headerlink\" title=\"Inner classes, type 3: Anonymous classes\"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// subclass the base class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      Base b = <span class=\"keyword\">new</span> Base()</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// members</span></span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// implement the interface</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      I i = <span class=\"keyword\">new</span> I()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"comment\">// members</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p>\n<blockquote>\n<p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p>\n</blockquote>\n<p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p>\n<h3 id=\"Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\"><a href=\"#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\" class=\"headerlink\" title=\"Listing 7. Using an anonymous class to pass functionality as a method argument\"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comparer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p>\n<h3 id=\"Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\"><a href=\"#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"Listing 8. Sorting an array of integers with the Bubble Sort algorithm\"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] a = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      sort(a, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] b = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      sort(b, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> y - x;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(b);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">         System.out.print(x[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, Comparer c)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pass = <span class=\"number\">0</span>; pass &lt; x.length - <span class=\"number\">1</span>; pass++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.length - <span class=\"number\">1</span>; i &gt; pass; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.compare(x[i], x[pass]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = x[i];</span><br><span class=\"line\">               x[i] = x[pass];</span><br><span class=\"line\">               x[pass] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p>\n<blockquote>\n<p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p>\n</blockquote>\n<p>Compile Listing 7 and 8 as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACDemo.class.</span><br><span class=\"line\">ACDemo$1.class</span><br><span class=\"line\">ACDemo$2.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java ACDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should obeserve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">10 30 5 0 -2 100 -9</span><br><span class=\"line\">-9 -2 0 5 10 30 100</span><br><span class=\"line\">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-anonymous-classes-with-an-AWT-event-hanlder\"><a href=\"#Example-Using-anonymous-classes-with-an-AWT-event-hanlder\" class=\"headerlink\" title=\"Example: Using anonymous classes with an AWT event hanlder\"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton btnClose = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"close\"</span>);</span><br><span class=\"line\">btnClose.addActionListener(<span class=\"keyword\">new</span> ActionListener()</span><br><span class=\"line\">                               &#123;</span><br><span class=\"line\">                                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent ae)</span></span></span><br><span class=\"line\"><span class=\"function\">                                  </span>&#123;</span><br><span class=\"line\">                                     System.out.println(<span class=\"string\">\"close button clicked\"</span>);</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                               &#125;);</span><br></pre></td></tr></table></figure>\n<p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>\n"},{"title":"Advanced features Part 3, Advanced features and types","date":"2020-03-04T16:00:03.000Z","_content":"Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class's namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.\n\nIn Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you'll learn how to work with static member classes and the three types of inner classes in your Java code.\n\n#### test\n\n## Static classes in Java\nFromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the `static` keyword. Here's an example of a static member class declaration:\n```java\nclass C {\n    static int f;\n\n    static void m() {}\n\n    static {\n        f = 2;\n    }\n\n    static class D {\n        // members\n    }\n}\n```\n\nThis example introduces top-level class `C` with static field `f`, static method `m()`, a static initializer, and static member cladd `D`. Notice that `D` is a member of `C`. The static field `f`, static method `m()`, and the static initializer are also members of `C`. Since all of these elements belong to class `C`, it is known as the enclosing class (封闭类). Class `D` is known as the enclosed class.\n\n### Enclosure and access rules\nAlthough it is enclosed (围绕), a static member class cannot access the enclosing class's instance fields and invoke its instance methods. However, it can access the enclosing class's static fields and invoke its static methods, even those members that are declared `private`. To demonstrate (演示), Listing 1 declares an `EnclosingClass` with a nested `SMClass`. \n\n### Listing 1. Declaring a static member class\n```java\nclass EnclosingClass {\n    private static String s;\n\n    private static void m1() {\n        System.out.println(s);\n    }\n\n    static void m2() {\n        SMClass.accessEnclosingClass();\n    }\n\n    static class SMClass {\n        \n        static void accessEnclosingClass() {\n            s = \"Called from SMClass's accessEnclosingClas() method\";\n            m1();\n        }\n\n        void accessEnclosingClass2() {\n            m2();\n        }\n\n    }\n}\n```\n\nListing 1 declares a top-level class named EnclosingClass with class field s, class method `m1()` and `m2()`, and static member class SMClass. SMClass declares class method `accessEnclosingClass()` and instance method `accessEnclosingClass2()`. Note the following:\n1. `m2()`'s invocation (调用) of SMClass's `accessEnclosingClass()` method requires the `SMClass.` prefix because `accessEnclosingClass()` is declared `static`\n1. `accessEnclosingClass()` is able to access EnclosingClass's s field and call its `m1()` method, even though both have been declared `private`.\n\nListing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass's `accessEnclosingClass()` method. It also demonstrates how to instantiate SMClass and invoke its `accessEnclosingClass2()` instance method.\n\n### Listing 2. Invoking a static member class's methods\n```java\npublic class SMCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass.SMClass.accessEncolsingClass();\n        EnclsoingClass.SMClass smc = new EnclosingClass.SMClass();\n        smc.accessEnclosingClass2();\n    }\n}\n```\n\nAs shown in Listing 2, if you want to invoke a top-level class's method from within an enclosed class, you must prefix the enclosed class's name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.\n\nCompile Listing 1 and 2 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class's name, dollar-sign character, and the static member class's name. In this case, compiling results is:\n```\nSMCDemo.class\nEnclosingClass.class\nEnclosingClass$SMCClass.class\n```\n\nRun the application as follows:\n\n```bash\njava SMCDemo\n```\n\nYou should observe the following output:\n```\nCalled from SMClass's accessEnclosingClass() method\nCalled from SMClass's accessEnclosingClass() method\n```\n\n### Example: Static classes and Java 2D\nJava's standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the `java.awt.geom` package.\n\nThe `Ellipse2D` class found in `java.awt.geom` describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class's architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass `Ellipse2D`:\n```java\npublic abstract class Ellipse2D extends RectangularShape {\n    \n    public static class Float extends Ellipse2D implements Serializable {\n\n        public float x, y, widht, heigh;\n\n        public Float() {}\n\n        public Float(float x, float y, float w, float h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return (double)x;\n        }\n\n        // additional instance methods\n    }\n\n    public static class Double extends Ellipse2D implements Serializable {\n        \n        public double x, y, width, height;\n    \n        public Double() {}\n\n        public Double(double x, double y, double w, double h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return x;\n        }\n\n        // additional instance methods\n    }\n\n    public boolean contains(double x, double y) {\n        // ...\n    }\n\n    // additional instance methods shared by Float, Double, and other Ellipse2D subclass.\n}\n```\n\nThe `Float` and `Double` classes extend `Ellipse2D`, providing floating-point and double precision floating-point Ellipse2D implementations.\n\n## Inner classes, tpye 1: Non-static member classes\nConsider this example:\n```java\nclass C {\n    int f;\n\n    void m() {}\n\n    C() {\n        f = 2;\n    }\n\n    class D {\n        // members\n    }\n}\n```\n\nHere, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.\n\nEach instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class's instance methods can call the enclosing class's instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.\n\n#### Listing 3. Declare an enclosing class with a nested non-static member class\n```java\nclass EnclosingClass {\n    private String s;\n\n    private void m() {\n        System.out.println(s);\n    }\n\n    class NSMClass {\n        void accessEnclosingClass() {\n            s = \"Called from NSMClass's accessEnclosingClass() method\";\n            m();\n        }\n    }\n}\n```\n\nListing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method `accessEnclosingClass()`.\n\nBecause `accessEnclosingClass()` in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.\n\n#### Listing 4. NSMCDemo.java\n```java\npublic class NSMDemo {\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.new NSMClass().accessEnclosingClass();\n    }\n}\n```\n\nListing 4's `main()` method first instantiates EnclosingClass and saves its reference in local variable ec. The `main()` method then uses the EnclosingClass reference as a prefix to the `new` operator, in order to instantiate NSMClass. The NSMClass reference is then used to call `accessEnclosingClass()` method.\n\n> Should I use `new` with a reference to the enclosing class?\n> Prefixing `new` with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class's constructor from within a constructor or an instance method of its enclosing class.\n\nCompile Listing 3 and 4 as follows:\n```bash\njava *.java\n```\n\nWhen you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class's name, a dollar-sign character, and the non-static member class's name. In this case, compiling results in：\n```\nNSMDemo.class\nEnclosingClass.class\nEnclisingClass$NSMCClass.class\n```\n\nRun the application as follows:\n```bash\njava NSMDemo\n```\n\nYou should observe the following output:\n```\nCalled from NSMClass's accessEnclosingClass() method\n```\n\n> When (and how) to qualify (限定) `this`\n> An enclosed class's code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) `this` with the enclosing class's name and the member access operator `.`. For example, if code within `accessEnclosingClass()` needed to obtain a reference to its `EnclosingClass` instance, it would spcify `EnclosingClass.this`. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.\n\n#### Example: Non-static member classes in HashMap\nThe standard class library includes non-static member as well as static member classes. For this example, we'll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.\n\nFor example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:\n```java\npublic class HashMap<K, V> extends AbstractMap<K, V> implements Map<K, V>, Cloneable, Serializable {\n    // various members\n\n    final class KeySet extends AbstractSet<K> {\n        // various members\n    }\n\n    // various members\n}\n```\n\nThe `<K, V>` and `<K>` syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.\n\nHashMap provides a `KeySet()` method that instantiates KeySet when necessary and returns this instance or a cached instance. Here's the complete method:\n```java\npublic Set<K> keyset() {\n    Set<K> ks = keySet;\n    if (ks == null) {\n        ks = new KeySet();\n        keySet = ks;\n    }\n    return ks;\n}\n```\n\nNotice that the enclosed class's (KeySet's) constructor is called from within the enclosing class's (HashSet's) `keyset()` instance method. This illustrates a common practice (做法) especially because prefixing the `new` operator with an enclosing class reference is rare.\n\n## Inner classes, type 2: Local classes\nIt's occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:\n```java\ninterface I {\n\n}\n\nclass C {\n    // or even static I m()\n    I m() {\n        class D implements I {\n            // members\n        }\n        return new D();\n    }\n}\n```\n\nTop-level class C declares instance method `m()`, which returns an instance of local class D, which is declared in this method. Notice that `m()`'s return type is interface I, which D implements. The interface is necessary because giving `m()` return type D would result in a compiler error -- D isn't accessible outside of `m()`' body.\n\n> Illegal access modifiers (修饰语) in local class declaration\n> The compiler will report an error if a local class declaration contains any of the access modifiers `private`, `public`, or `protected`; or the modifier `static`.\n\nA local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope's local variables and parameters, which must be declared `final`. Consider 5.\n\n### Listing 5. Declaring a local class within an enclosing class instance method\n```java\nclass EnclosingClass {\n    \n    void m(final int x) {\n        final int y = x * 3;\n\n        class LClass {\n            int m = x;\n            int n = y;\n        }\n\n        LClass lc = new LClass();\n        System.out.println(lc.m);\n        System.out.println(lc.n);\n    }\n}\n```\n\nListing 5 declares EnclosingClass with instance method `m()`, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.\n\n### Listing 6. A local class declares and initializes a pair of instance fields\n```java\npublic class LCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.m(5);\n    }\n}\n```\n\nListing 6's `main()` method first instantiates EnclosingClass. It then invokes `m(5)` on this instance. The called `m()` method multiplies this argument by 3, instantiates LClass, whose `<init>()` method assigns the argument and the tripled value to its pair of instance fields and outputs LClass's instance fields. (Note that in this case the local class uses the `<init>()` method instead of a constructor to interact with its instance fields.)\n\nCompile Listing 5 and 6 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class's name, a dollar-sign character, a 1-base integer, and the local class's name. In this case, compiling results:\n```\nLCDemo.class\nEnclosingClass.class\nEnclosingClass$1LClass.class\n```\n\n### A note about local class name\nWhen generating a name for a local class's file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class's class file from a non-static member clas's class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:\n```java\npublic class EnclosingClass\n{\n    public void m1()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m2()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m3()\n    {\n       class LClass2\n       {\n       }\n    }\n}\n```\n\nEnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:\n```\nEnclosingClass$1LClass.class\nEnclosingClass$1LClass2.class\nEnclosingClass$2LClass.class\nEnclosingClass.class\n```\n\nRun the application as follow:\n```bash\njava LCDemo\n```\n\nYou should observe the following output:\n```\n5\n15\n```\n\n### Example: Using local classes in regular expressions\nThe standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:\n```java\npublic Stream<MatchResult> results()\n{\n   class MatchResultIterator implements Iterator<MatchResult>\n   {\n      // members\n   }\n   return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new MatchResultIterator(),\n                                                                   Spliterator.ORDERED |\n                                                                   Spliterator.NONNULL),\n                               false);\n}\n```\n\nNote the instantiation of MatchResultIterator() following the class declaration. Don't worry about parts of the code that you don't understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.\n\n## Inner classes, type 3: Anonymous classes\nStatic member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:\n```java\n// subclass the base class\n\nabstract class Base\n{\n   // members\n}\n\nclass A\n{\n   void m()\n   {\n      Base b = new Base()\n               {\n                 // members\n               };\n   }\n}\n\n// implement the interface\n\ninterface I\n{\n   // members\n}\n\nclass B\n{\n   void m()\n   {\n      I i = new I()\n            {\n               // members\n            };\n   }\n}\n```\n\nThe first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.\n\n> Constructing anonymous class instances\n> An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.\n\nAnonymous classes are useful for expressing functionality that's passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (<) operator for one order, and the other version using the greater than (>) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.\n\n### Listing 7. Using an anonymous class to pass functionality as a method argument\n```java\npublic abstract class Comparer\n{\n   public abstract int compare(int x, int y);\n}\n```\n\nThe compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.\n\n### Listing 8. Sorting an array of integers with the Bubble Sort algorithm\n```java\npublic class ACDemo\n{\n   public static void main(String[] args)\n   {\n      int[] a = { 10, 30, 5, 0, -2, 100, -9 };\n      dump(a);\n      sort(a, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return x - y;\n                     }\n                  });\n      dump(a);\n      int[] b = { 10, 30, 5, 0, -2, 100, -9 };\n      sort(b, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return y - x;\n                     }\n                  });\n      dump(b);\n   }\n\n   static void dump(int[] x)\n   {\n      for (int i = 0; i < x.length; i++)\n         System.out.print(x[i] + \" \");\n      System.out.println();\n   }\n\n   static void sort(int[] x, Comparer c)\n   {\n      for (int pass = 0; pass < x.length - 1; pass++)\n         for (int i = x.length - 1; i > pass; i--)\n            if (c.compare(x[i], x[pass]) < 0)\n            {\n               int temp = x[i];\n               x[i] = x[pass];\n               x[pass] = temp;\n            }\n   }\n}\n```\n\nThe main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.\n\n> Migrating from anonymous classes to lambdas\n> As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.\n\nCompile Listing 7 and 8 as follows:\n```\njavac *.java\n```\n\nWhen you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class's name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:\n```\nACDemo.class.\nACDemo$1.class\nACDemo$2.class \n```\n\nRun the application as follows:\n```bash\njava ACDemo\n```\n\nYou should obeserve the following output:\n```\n\n10 30 5 0 -2 100 -9\n-9 -2 0 5 10 30 100\n100 30 10 5 0 -2 -9\n```\n\n### Example: Using anonymous classes with an AWT event hanlder\nAnonymous classes can be used with many packages in the standard calss library. For this example, we'll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing's JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.\n\n```java\nJButton btnClose = new JButton(\"close\");\nbtnClose.addActionListener(new ActionListener()\n                               {\n                                  public void actionPerformed(ActionEvent ae)\n                                  {\n                                     System.out.println(\"close button clicked\");\n                                  }\n                               });\n```\n\nThe first line instantiates JButton, passing close as the button label to JButton's constructor. The second line registers an action listener with the button. The action listener's actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.\n\n## Conclusion\nJava's nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.","source":"_posts/JavaWorld/Advanced features Part 3, Advanced features and types.md","raw":"---\ntitle: Advanced features Part 3, Advanced features and types\n\ntag:\n- Advanced Java language features\n\ncategories:\n- JavaWorld\n\ndate: 2020-03-05 00:00:03\n---\nNested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class's namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.\n\nIn Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you'll learn how to work with static member classes and the three types of inner classes in your Java code.\n\n#### test\n\n## Static classes in Java\nFromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the `static` keyword. Here's an example of a static member class declaration:\n```java\nclass C {\n    static int f;\n\n    static void m() {}\n\n    static {\n        f = 2;\n    }\n\n    static class D {\n        // members\n    }\n}\n```\n\nThis example introduces top-level class `C` with static field `f`, static method `m()`, a static initializer, and static member cladd `D`. Notice that `D` is a member of `C`. The static field `f`, static method `m()`, and the static initializer are also members of `C`. Since all of these elements belong to class `C`, it is known as the enclosing class (封闭类). Class `D` is known as the enclosed class.\n\n### Enclosure and access rules\nAlthough it is enclosed (围绕), a static member class cannot access the enclosing class's instance fields and invoke its instance methods. However, it can access the enclosing class's static fields and invoke its static methods, even those members that are declared `private`. To demonstrate (演示), Listing 1 declares an `EnclosingClass` with a nested `SMClass`. \n\n### Listing 1. Declaring a static member class\n```java\nclass EnclosingClass {\n    private static String s;\n\n    private static void m1() {\n        System.out.println(s);\n    }\n\n    static void m2() {\n        SMClass.accessEnclosingClass();\n    }\n\n    static class SMClass {\n        \n        static void accessEnclosingClass() {\n            s = \"Called from SMClass's accessEnclosingClas() method\";\n            m1();\n        }\n\n        void accessEnclosingClass2() {\n            m2();\n        }\n\n    }\n}\n```\n\nListing 1 declares a top-level class named EnclosingClass with class field s, class method `m1()` and `m2()`, and static member class SMClass. SMClass declares class method `accessEnclosingClass()` and instance method `accessEnclosingClass2()`. Note the following:\n1. `m2()`'s invocation (调用) of SMClass's `accessEnclosingClass()` method requires the `SMClass.` prefix because `accessEnclosingClass()` is declared `static`\n1. `accessEnclosingClass()` is able to access EnclosingClass's s field and call its `m1()` method, even though both have been declared `private`.\n\nListing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass's `accessEnclosingClass()` method. It also demonstrates how to instantiate SMClass and invoke its `accessEnclosingClass2()` instance method.\n\n### Listing 2. Invoking a static member class's methods\n```java\npublic class SMCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass.SMClass.accessEncolsingClass();\n        EnclsoingClass.SMClass smc = new EnclosingClass.SMClass();\n        smc.accessEnclosingClass2();\n    }\n}\n```\n\nAs shown in Listing 2, if you want to invoke a top-level class's method from within an enclosed class, you must prefix the enclosed class's name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.\n\nCompile Listing 1 and 2 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class's name, dollar-sign character, and the static member class's name. In this case, compiling results is:\n```\nSMCDemo.class\nEnclosingClass.class\nEnclosingClass$SMCClass.class\n```\n\nRun the application as follows:\n\n```bash\njava SMCDemo\n```\n\nYou should observe the following output:\n```\nCalled from SMClass's accessEnclosingClass() method\nCalled from SMClass's accessEnclosingClass() method\n```\n\n### Example: Static classes and Java 2D\nJava's standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the `java.awt.geom` package.\n\nThe `Ellipse2D` class found in `java.awt.geom` describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class's architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass `Ellipse2D`:\n```java\npublic abstract class Ellipse2D extends RectangularShape {\n    \n    public static class Float extends Ellipse2D implements Serializable {\n\n        public float x, y, widht, heigh;\n\n        public Float() {}\n\n        public Float(float x, float y, float w, float h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return (double)x;\n        }\n\n        // additional instance methods\n    }\n\n    public static class Double extends Ellipse2D implements Serializable {\n        \n        public double x, y, width, height;\n    \n        public Double() {}\n\n        public Double(double x, double y, double w, double h) {\n            setFrame(x, y, w, h);\n        }\n\n        public double getX() {\n            return x;\n        }\n\n        // additional instance methods\n    }\n\n    public boolean contains(double x, double y) {\n        // ...\n    }\n\n    // additional instance methods shared by Float, Double, and other Ellipse2D subclass.\n}\n```\n\nThe `Float` and `Double` classes extend `Ellipse2D`, providing floating-point and double precision floating-point Ellipse2D implementations.\n\n## Inner classes, tpye 1: Non-static member classes\nConsider this example:\n```java\nclass C {\n    int f;\n\n    void m() {}\n\n    C() {\n        f = 2;\n    }\n\n    class D {\n        // members\n    }\n}\n```\n\nHere, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.\n\nEach instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class's instance methods can call the enclosing class's instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.\n\n#### Listing 3. Declare an enclosing class with a nested non-static member class\n```java\nclass EnclosingClass {\n    private String s;\n\n    private void m() {\n        System.out.println(s);\n    }\n\n    class NSMClass {\n        void accessEnclosingClass() {\n            s = \"Called from NSMClass's accessEnclosingClass() method\";\n            m();\n        }\n    }\n}\n```\n\nListing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method `accessEnclosingClass()`.\n\nBecause `accessEnclosingClass()` in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.\n\n#### Listing 4. NSMCDemo.java\n```java\npublic class NSMDemo {\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.new NSMClass().accessEnclosingClass();\n    }\n}\n```\n\nListing 4's `main()` method first instantiates EnclosingClass and saves its reference in local variable ec. The `main()` method then uses the EnclosingClass reference as a prefix to the `new` operator, in order to instantiate NSMClass. The NSMClass reference is then used to call `accessEnclosingClass()` method.\n\n> Should I use `new` with a reference to the enclosing class?\n> Prefixing `new` with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class's constructor from within a constructor or an instance method of its enclosing class.\n\nCompile Listing 3 and 4 as follows:\n```bash\njava *.java\n```\n\nWhen you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class's name, a dollar-sign character, and the non-static member class's name. In this case, compiling results in：\n```\nNSMDemo.class\nEnclosingClass.class\nEnclisingClass$NSMCClass.class\n```\n\nRun the application as follows:\n```bash\njava NSMDemo\n```\n\nYou should observe the following output:\n```\nCalled from NSMClass's accessEnclosingClass() method\n```\n\n> When (and how) to qualify (限定) `this`\n> An enclosed class's code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) `this` with the enclosing class's name and the member access operator `.`. For example, if code within `accessEnclosingClass()` needed to obtain a reference to its `EnclosingClass` instance, it would spcify `EnclosingClass.this`. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.\n\n#### Example: Non-static member classes in HashMap\nThe standard class library includes non-static member as well as static member classes. For this example, we'll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.\n\nFor example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:\n```java\npublic class HashMap<K, V> extends AbstractMap<K, V> implements Map<K, V>, Cloneable, Serializable {\n    // various members\n\n    final class KeySet extends AbstractSet<K> {\n        // various members\n    }\n\n    // various members\n}\n```\n\nThe `<K, V>` and `<K>` syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.\n\nHashMap provides a `KeySet()` method that instantiates KeySet when necessary and returns this instance or a cached instance. Here's the complete method:\n```java\npublic Set<K> keyset() {\n    Set<K> ks = keySet;\n    if (ks == null) {\n        ks = new KeySet();\n        keySet = ks;\n    }\n    return ks;\n}\n```\n\nNotice that the enclosed class's (KeySet's) constructor is called from within the enclosing class's (HashSet's) `keyset()` instance method. This illustrates a common practice (做法) especially because prefixing the `new` operator with an enclosing class reference is rare.\n\n## Inner classes, type 2: Local classes\nIt's occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:\n```java\ninterface I {\n\n}\n\nclass C {\n    // or even static I m()\n    I m() {\n        class D implements I {\n            // members\n        }\n        return new D();\n    }\n}\n```\n\nTop-level class C declares instance method `m()`, which returns an instance of local class D, which is declared in this method. Notice that `m()`'s return type is interface I, which D implements. The interface is necessary because giving `m()` return type D would result in a compiler error -- D isn't accessible outside of `m()`' body.\n\n> Illegal access modifiers (修饰语) in local class declaration\n> The compiler will report an error if a local class declaration contains any of the access modifiers `private`, `public`, or `protected`; or the modifier `static`.\n\nA local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope's local variables and parameters, which must be declared `final`. Consider 5.\n\n### Listing 5. Declaring a local class within an enclosing class instance method\n```java\nclass EnclosingClass {\n    \n    void m(final int x) {\n        final int y = x * 3;\n\n        class LClass {\n            int m = x;\n            int n = y;\n        }\n\n        LClass lc = new LClass();\n        System.out.println(lc.m);\n        System.out.println(lc.n);\n    }\n}\n```\n\nListing 5 declares EnclosingClass with instance method `m()`, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.\n\n### Listing 6. A local class declares and initializes a pair of instance fields\n```java\npublic class LCDemo {\n\n    public static void main(String[] args) {\n        EnclosingClass ec = new EnclosingClass();\n        ec.m(5);\n    }\n}\n```\n\nListing 6's `main()` method first instantiates EnclosingClass. It then invokes `m(5)` on this instance. The called `m()` method multiplies this argument by 3, instantiates LClass, whose `<init>()` method assigns the argument and the tripled value to its pair of instance fields and outputs LClass's instance fields. (Note that in this case the local class uses the `<init>()` method instead of a constructor to interact with its instance fields.)\n\nCompile Listing 5 and 6 as follows:\n```bash\njavac *.java\n```\n\nWhen you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class's name, a dollar-sign character, a 1-base integer, and the local class's name. In this case, compiling results:\n```\nLCDemo.class\nEnclosingClass.class\nEnclosingClass$1LClass.class\n```\n\n### A note about local class name\nWhen generating a name for a local class's file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class's class file from a non-static member clas's class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:\n```java\npublic class EnclosingClass\n{\n    public void m1()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m2()\n    {\n       class LClass\n       {\n       }\n    }\n\n    public void m3()\n    {\n       class LClass2\n       {\n       }\n    }\n}\n```\n\nEnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:\n```\nEnclosingClass$1LClass.class\nEnclosingClass$1LClass2.class\nEnclosingClass$2LClass.class\nEnclosingClass.class\n```\n\nRun the application as follow:\n```bash\njava LCDemo\n```\n\nYou should observe the following output:\n```\n5\n15\n```\n\n### Example: Using local classes in regular expressions\nThe standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:\n```java\npublic Stream<MatchResult> results()\n{\n   class MatchResultIterator implements Iterator<MatchResult>\n   {\n      // members\n   }\n   return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new MatchResultIterator(),\n                                                                   Spliterator.ORDERED |\n                                                                   Spliterator.NONNULL),\n                               false);\n}\n```\n\nNote the instantiation of MatchResultIterator() following the class declaration. Don't worry about parts of the code that you don't understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.\n\n## Inner classes, type 3: Anonymous classes\nStatic member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:\n```java\n// subclass the base class\n\nabstract class Base\n{\n   // members\n}\n\nclass A\n{\n   void m()\n   {\n      Base b = new Base()\n               {\n                 // members\n               };\n   }\n}\n\n// implement the interface\n\ninterface I\n{\n   // members\n}\n\nclass B\n{\n   void m()\n   {\n      I i = new I()\n            {\n               // members\n            };\n   }\n}\n```\n\nThe first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.\n\n> Constructing anonymous class instances\n> An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.\n\nAnonymous classes are useful for expressing functionality that's passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (<) operator for one order, and the other version using the greater than (>) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.\n\n### Listing 7. Using an anonymous class to pass functionality as a method argument\n```java\npublic abstract class Comparer\n{\n   public abstract int compare(int x, int y);\n}\n```\n\nThe compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.\n\n### Listing 8. Sorting an array of integers with the Bubble Sort algorithm\n```java\npublic class ACDemo\n{\n   public static void main(String[] args)\n   {\n      int[] a = { 10, 30, 5, 0, -2, 100, -9 };\n      dump(a);\n      sort(a, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return x - y;\n                     }\n                  });\n      dump(a);\n      int[] b = { 10, 30, 5, 0, -2, 100, -9 };\n      sort(b, new Comparer()\n                  {\n                     public int compare(int x, int y)\n                     {\n                        return y - x;\n                     }\n                  });\n      dump(b);\n   }\n\n   static void dump(int[] x)\n   {\n      for (int i = 0; i < x.length; i++)\n         System.out.print(x[i] + \" \");\n      System.out.println();\n   }\n\n   static void sort(int[] x, Comparer c)\n   {\n      for (int pass = 0; pass < x.length - 1; pass++)\n         for (int i = x.length - 1; i > pass; i--)\n            if (c.compare(x[i], x[pass]) < 0)\n            {\n               int temp = x[i];\n               x[i] = x[pass];\n               x[pass] = temp;\n            }\n   }\n}\n```\n\nThe main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.\n\n> Migrating from anonymous classes to lambdas\n> As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.\n\nCompile Listing 7 and 8 as follows:\n```\njavac *.java\n```\n\nWhen you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class's name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:\n```\nACDemo.class.\nACDemo$1.class\nACDemo$2.class \n```\n\nRun the application as follows:\n```bash\njava ACDemo\n```\n\nYou should obeserve the following output:\n```\n\n10 30 5 0 -2 100 -9\n-9 -2 0 5 10 30 100\n100 30 10 5 0 -2 -9\n```\n\n### Example: Using anonymous classes with an AWT event hanlder\nAnonymous classes can be used with many packages in the standard calss library. For this example, we'll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing's JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.\n\n```java\nJButton btnClose = new JButton(\"close\");\nbtnClose.addActionListener(new ActionListener()\n                               {\n                                  public void actionPerformed(ActionEvent ae)\n                                  {\n                                     System.out.println(\"close button clicked\");\n                                  }\n                               });\n```\n\nThe first line instantiates JButton, passing close as the button label to JButton's constructor. The second line registers an action listener with the button. The action listener's actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.\n\n## Conclusion\nJava's nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.","slug":"JavaWorld/Advanced features Part 3, Advanced features and types","published":1,"updated":"2020-04-19T12:22:17.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mci00c8m33pjubd2ts1","content":"<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p>\n<p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><h2 id=\"Static-classes-in-Java\"><a href=\"#Static-classes-in-Java\" class=\"headerlink\" title=\"Static classes in Java\"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p>\n<h3 id=\"Enclosure-and-access-rules\"><a href=\"#Enclosure-and-access-rules\" class=\"headerlink\" title=\"Enclosure and access rules\"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p>\n<h3 id=\"Listing-1-Declaring-a-static-member-class\"><a href=\"#Listing-1-Declaring-a-static-member-class\" class=\"headerlink\" title=\"Listing 1. Declaring a static member class\"></a>Listing 1. Declaring a static member class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SMClass.accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMClass</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from SMClass's accessEnclosingClas() method\"</span>;</span><br><span class=\"line\">            m1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            m2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p>\n<ol>\n<li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li>\n<li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li>\n</ol>\n<p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p>\n<h3 id=\"Listing-2-Invoking-a-static-member-class’s-methods\"><a href=\"#Listing-2-Invoking-a-static-member-class’s-methods\" class=\"headerlink\" title=\"Listing 2. Invoking a static member class’s methods\"></a>Listing 2. Invoking a static member class’s methods</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class=\"line\">        EnclsoingClass.SMClass smc = <span class=\"keyword\">new</span> EnclosingClass.SMClass();</span><br><span class=\"line\">        smc.accessEnclosingClass2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p>\n<p>Compile Listing 1 and 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SMCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java SMCDemo</span><br></pre></td></tr></table></figure>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Static-classes-and-Java-2D\"><a href=\"#Example-Static-classes-and-Java-2D\" class=\"headerlink\" title=\"Example: Static classes and Java 2D\"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p>\n<p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">extends</span> <span class=\"title\">RectangularShape</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Float</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> x, y, widht, heigh;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">float</span> w, <span class=\"keyword\">float</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Double</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> x, y, width, height;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y, <span class=\"keyword\">double</span> w, <span class=\"keyword\">double</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p>\n<h2 id=\"Inner-classes-tpye-1-Non-static-member-classes\"><a href=\"#Inner-classes-tpye-1-Non-static-member-classes\" class=\"headerlink\" title=\"Inner classes, tpye 1: Non-static member classes\"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    C() &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p>\n<p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p>\n<h4 id=\"Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\"><a href=\"#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\" class=\"headerlink\" title=\"Listing 3. Declare an enclosing class with a nested non-static member class\"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from NSMClass's accessEnclosingClass() method\"</span>;</span><br><span class=\"line\">            m();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p>\n<p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p>\n<h4 id=\"Listing-4-NSMCDemo-java\"><a href=\"#Listing-4-NSMCDemo-java\" class=\"headerlink\" title=\"Listing 4. NSMCDemo.java\"></a>Listing 4. NSMCDemo.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.new NSMClass().accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p>\n<blockquote>\n<p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p>\n</blockquote>\n<p>Compile Listing 3 and 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java NSMDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p>\n</blockquote>\n<h4 id=\"Example-Non-static-member-classes-in-HashMap\"><a href=\"#Example-Non-static-member-classes-in-HashMap\" class=\"headerlink\" title=\"Example: Non-static member classes in HashMap\"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p>\n<p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// various members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p>\n<p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Set&lt;K&gt; <span class=\"title\">keyset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;K&gt; ks = keySet;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ks == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ks = <span class=\"keyword\">new</span> KeySet();</span><br><span class=\"line\">        keySet = ks;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ks;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p>\n<h2 id=\"Inner-classes-type-2-Local-classes\"><a href=\"#Inner-classes-type-2-Local-classes\" class=\"headerlink\" title=\"Inner classes, type 2: Local classes\"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// or even static I m()</span></span><br><span class=\"line\">    <span class=\"function\">I <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// members</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p>\n<blockquote>\n<p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p>\n</blockquote>\n<p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p>\n<h3 id=\"Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\"><a href=\"#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\" class=\"headerlink\" title=\"Listing 5. Declaring a local class within an enclosing class instance method\"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = x * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = x;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LClass lc = <span class=\"keyword\">new</span> LClass();</span><br><span class=\"line\">        System.out.println(lc.m);</span><br><span class=\"line\">        System.out.println(lc.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p>\n<h3 id=\"Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\"><a href=\"#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\" class=\"headerlink\" title=\"Listing 6. A local class declares and initializes a pair of instance fields\"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.m(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p>\n<p>Compile Listing 5 and 6 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"A-note-about-local-class-name\"><a href=\"#A-note-about-local-class-name\" class=\"headerlink\" title=\"A note about local class name\"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass2</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EnclosingClass$1LClass.class</span><br><span class=\"line\">EnclosingClass$1LClass2.class</span><br><span class=\"line\">EnclosingClass$2LClass.class</span><br><span class=\"line\">EnclosingClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follow:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LCDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">15</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-local-classes-in-regular-expressions\"><a href=\"#Example-Using-local-classes-in-regular-expressions\" class=\"headerlink\" title=\"Example: Using local classes in regular expressions\"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Stream&lt;MatchResult&gt; <span class=\"title\">results</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchResultIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">MatchResult</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// members</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class=\"keyword\">new</span> MatchResultIterator(),</span><br><span class=\"line\">                                                                   Spliterator.ORDERED |</span><br><span class=\"line\">                                                                   Spliterator.NONNULL),</span><br><span class=\"line\">                               <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p>\n<h2 id=\"Inner-classes-type-3-Anonymous-classes\"><a href=\"#Inner-classes-type-3-Anonymous-classes\" class=\"headerlink\" title=\"Inner classes, type 3: Anonymous classes\"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// subclass the base class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      Base b = <span class=\"keyword\">new</span> Base()</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// members</span></span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// implement the interface</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      I i = <span class=\"keyword\">new</span> I()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"comment\">// members</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p>\n<blockquote>\n<p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p>\n</blockquote>\n<p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p>\n<h3 id=\"Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\"><a href=\"#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\" class=\"headerlink\" title=\"Listing 7. Using an anonymous class to pass functionality as a method argument\"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comparer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p>\n<h3 id=\"Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\"><a href=\"#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"Listing 8. Sorting an array of integers with the Bubble Sort algorithm\"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] a = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      sort(a, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] b = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      sort(b, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> y - x;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(b);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">         System.out.print(x[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, Comparer c)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pass = <span class=\"number\">0</span>; pass &lt; x.length - <span class=\"number\">1</span>; pass++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.length - <span class=\"number\">1</span>; i &gt; pass; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.compare(x[i], x[pass]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = x[i];</span><br><span class=\"line\">               x[i] = x[pass];</span><br><span class=\"line\">               x[pass] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p>\n<blockquote>\n<p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p>\n</blockquote>\n<p>Compile Listing 7 and 8 as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACDemo.class.</span><br><span class=\"line\">ACDemo$1.class</span><br><span class=\"line\">ACDemo$2.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java ACDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should obeserve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">10 30 5 0 -2 100 -9</span><br><span class=\"line\">-9 -2 0 5 10 30 100</span><br><span class=\"line\">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-anonymous-classes-with-an-AWT-event-hanlder\"><a href=\"#Example-Using-anonymous-classes-with-an-AWT-event-hanlder\" class=\"headerlink\" title=\"Example: Using anonymous classes with an AWT event hanlder\"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton btnClose = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"close\"</span>);</span><br><span class=\"line\">btnClose.addActionListener(<span class=\"keyword\">new</span> ActionListener()</span><br><span class=\"line\">                               &#123;</span><br><span class=\"line\">                                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent ae)</span></span></span><br><span class=\"line\"><span class=\"function\">                                  </span>&#123;</span><br><span class=\"line\">                                     System.out.println(<span class=\"string\">\"close button clicked\"</span>);</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                               &#125;);</span><br></pre></td></tr></table></figure>\n<p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p>\n<p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><h2 id=\"Static-classes-in-Java\"><a href=\"#Static-classes-in-Java\" class=\"headerlink\" title=\"Static classes in Java\"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p>\n<h3 id=\"Enclosure-and-access-rules\"><a href=\"#Enclosure-and-access-rules\" class=\"headerlink\" title=\"Enclosure and access rules\"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p>\n<h3 id=\"Listing-1-Declaring-a-static-member-class\"><a href=\"#Listing-1-Declaring-a-static-member-class\" class=\"headerlink\" title=\"Listing 1. Declaring a static member class\"></a>Listing 1. Declaring a static member class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SMClass.accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMClass</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from SMClass's accessEnclosingClas() method\"</span>;</span><br><span class=\"line\">            m1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            m2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p>\n<ol>\n<li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li>\n<li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li>\n</ol>\n<p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p>\n<h3 id=\"Listing-2-Invoking-a-static-member-class’s-methods\"><a href=\"#Listing-2-Invoking-a-static-member-class’s-methods\" class=\"headerlink\" title=\"Listing 2. Invoking a static member class’s methods\"></a>Listing 2. Invoking a static member class’s methods</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SMCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class=\"line\">        EnclsoingClass.SMClass smc = <span class=\"keyword\">new</span> EnclosingClass.SMClass();</span><br><span class=\"line\">        smc.accessEnclosingClass2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p>\n<p>Compile Listing 1 and 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SMCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java SMCDemo</span><br></pre></td></tr></table></figure>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class=\"line\">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Static-classes-and-Java-2D\"><a href=\"#Example-Static-classes-and-Java-2D\" class=\"headerlink\" title=\"Example: Static classes and Java 2D\"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p>\n<p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">extends</span> <span class=\"title\">RectangularShape</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Float</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> x, y, widht, heigh;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Float</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">float</span> w, <span class=\"keyword\">float</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Double</span> <span class=\"keyword\">extends</span> <span class=\"title\">Ellipse2D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> x, y, width, height;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Double</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y, <span class=\"keyword\">double</span> w, <span class=\"keyword\">double</span> h)</span> </span>&#123;</span><br><span class=\"line\">            setFrame(x, y, w, h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// additional instance methods</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p>\n<h2 id=\"Inner-classes-tpye-1-Non-static-member-classes\"><a href=\"#Inner-classes-tpye-1-Non-static-member-classes\" class=\"headerlink\" title=\"Inner classes, tpye 1: Non-static member classes\"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    C() &#123;</span><br><span class=\"line\">        f = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p>\n<p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p>\n<h4 id=\"Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\"><a href=\"#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class\" class=\"headerlink\" title=\"Listing 3. Declare an enclosing class with a nested non-static member class\"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accessEnclosingClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            s = <span class=\"string\">\"Called from NSMClass's accessEnclosingClass() method\"</span>;</span><br><span class=\"line\">            m();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p>\n<p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p>\n<h4 id=\"Listing-4-NSMCDemo-java\"><a href=\"#Listing-4-NSMCDemo-java\" class=\"headerlink\" title=\"Listing 4. NSMCDemo.java\"></a>Listing 4. NSMCDemo.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSMDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.new NSMClass().accessEnclosingClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p>\n<blockquote>\n<p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p>\n</blockquote>\n<p>Compile Listing 3 and 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java NSMDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p>\n</blockquote>\n<h4 id=\"Example-Non-static-member-classes-in-HashMap\"><a href=\"#Example-Non-static-member-classes-in-HashMap\" class=\"headerlink\" title=\"Example: Non-static member classes in HashMap\"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p>\n<p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// various members</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// various members</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p>\n<p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Set&lt;K&gt; <span class=\"title\">keyset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;K&gt; ks = keySet;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ks == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ks = <span class=\"keyword\">new</span> KeySet();</span><br><span class=\"line\">        keySet = ks;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ks;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p>\n<h2 id=\"Inner-classes-type-2-Local-classes\"><a href=\"#Inner-classes-type-2-Local-classes\" class=\"headerlink\" title=\"Inner classes, type 2: Local classes\"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// or even static I m()</span></span><br><span class=\"line\">    <span class=\"function\">I <span class=\"title\">m</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">I</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// members</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p>\n<blockquote>\n<p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p>\n</blockquote>\n<p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p>\n<h3 id=\"Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\"><a href=\"#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method\" class=\"headerlink\" title=\"Listing 5. Declaring a local class within an enclosing class instance method\"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = x * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = x;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LClass lc = <span class=\"keyword\">new</span> LClass();</span><br><span class=\"line\">        System.out.println(lc.m);</span><br><span class=\"line\">        System.out.println(lc.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p>\n<h3 id=\"Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\"><a href=\"#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields\" class=\"headerlink\" title=\"Listing 6. A local class declares and initializes a pair of instance fields\"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LCDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnclosingClass ec = <span class=\"keyword\">new</span> EnclosingClass();</span><br><span class=\"line\">        ec.m(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p>\n<p>Compile Listing 5 and 6 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LCDemo.class</span><br><span class=\"line\">EnclosingClass.class</span><br><span class=\"line\">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"A-note-about-local-class-name\"><a href=\"#A-note-about-local-class-name\" class=\"headerlink\" title=\"A note about local class name\"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnclosingClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LClass2</span></span></span><br><span class=\"line\"><span class=\"class\">       </span>&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EnclosingClass$1LClass.class</span><br><span class=\"line\">EnclosingClass$1LClass2.class</span><br><span class=\"line\">EnclosingClass$2LClass.class</span><br><span class=\"line\">EnclosingClass.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follow:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LCDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">15</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-local-classes-in-regular-expressions\"><a href=\"#Example-Using-local-classes-in-regular-expressions\" class=\"headerlink\" title=\"Example: Using local classes in regular expressions\"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Stream&lt;MatchResult&gt; <span class=\"title\">results</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchResultIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">MatchResult</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// members</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class=\"keyword\">new</span> MatchResultIterator(),</span><br><span class=\"line\">                                                                   Spliterator.ORDERED |</span><br><span class=\"line\">                                                                   Spliterator.NONNULL),</span><br><span class=\"line\">                               <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p>\n<h2 id=\"Inner-classes-type-3-Anonymous-classes\"><a href=\"#Inner-classes-type-3-Anonymous-classes\" class=\"headerlink\" title=\"Inner classes, type 3: Anonymous classes\"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// subclass the base class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      Base b = <span class=\"keyword\">new</span> Base()</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// members</span></span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// implement the interface</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// members</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      I i = <span class=\"keyword\">new</span> I()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"comment\">// members</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p>\n<blockquote>\n<p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p>\n</blockquote>\n<p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p>\n<h3 id=\"Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\"><a href=\"#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument\" class=\"headerlink\" title=\"Listing 7. Using an anonymous class to pass functionality as a method argument\"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comparer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p>\n<h3 id=\"Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\"><a href=\"#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"Listing 8. Sorting an array of integers with the Bubble Sort algorithm\"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] a = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      sort(a, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] b = &#123; <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, -<span class=\"number\">2</span>, <span class=\"number\">100</span>, -<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\">      sort(b, <span class=\"keyword\">new</span> Comparer()</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">                     </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> y - x;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">      dump(b);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">         System.out.print(x[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, Comparer c)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pass = <span class=\"number\">0</span>; pass &lt; x.length - <span class=\"number\">1</span>; pass++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.length - <span class=\"number\">1</span>; i &gt; pass; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.compare(x[i], x[pass]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = x[i];</span><br><span class=\"line\">               x[i] = x[pass];</span><br><span class=\"line\">               x[pass] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p>\n<blockquote>\n<p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p>\n</blockquote>\n<p>Compile Listing 7 and 8 as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac *.java</span><br></pre></td></tr></table></figure></p>\n<p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACDemo.class.</span><br><span class=\"line\">ACDemo$1.class</span><br><span class=\"line\">ACDemo$2.class</span><br></pre></td></tr></table></figure></p>\n<p>Run the application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java ACDemo</span><br></pre></td></tr></table></figure></p>\n<p>You should obeserve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">10 30 5 0 -2 100 -9</span><br><span class=\"line\">-9 -2 0 5 10 30 100</span><br><span class=\"line\">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Example-Using-anonymous-classes-with-an-AWT-event-hanlder\"><a href=\"#Example-Using-anonymous-classes-with-an-AWT-event-hanlder\" class=\"headerlink\" title=\"Example: Using anonymous classes with an AWT event hanlder\"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton btnClose = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"close\"</span>);</span><br><span class=\"line\">btnClose.addActionListener(<span class=\"keyword\">new</span> ActionListener()</span><br><span class=\"line\">                               &#123;</span><br><span class=\"line\">                                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent ae)</span></span></span><br><span class=\"line\"><span class=\"function\">                                  </span>&#123;</span><br><span class=\"line\">                                     System.out.println(<span class=\"string\">\"close button clicked\"</span>);</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                               &#125;);</span><br></pre></td></tr></table></figure>\n<p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>\n"},{"title":"Spring Series Part 1, What is Spring","date":"2020-04-19T03:00:01.000Z","_content":"Spring is perhaps the best of the compoment-based frameworks that emerged (出现) at the turn of the 21st century. It vastly improves the way that developers write and deliver infrastructure code in Java-based applications. Since it inception (开端), Spring has been recognized as a leading framework for enterprise Java development. As an end-to-end application framework, Spring mirrors some of the Java EE capabilities, but it offers a combination (结合) of features and programming conventions (约定) you won't find elsewhere.\n\nThis article introduces Spring and its core programming philosophy (理念) and methodology (方法论): Inverstion of control and dependency injection. You'll also get started with Spring annotations and a couple of hands-on coding examples.\n\n## Dependency injection and inversion of control\nSpring's core idea is that instead of managing object relationships yourself, you offload them to the framework. Inversion of control (IOC) is the methodology used to manage object relationships. Dependency injection is the machanism (机制) for implementing IOC. Since these two concepts are related but different, let's consider them more closely:\n- **Inversion of control (IOC)** does jsut what its name says: it inverst the traditional hierarchy of control for fulfilling object relationships. Instead of relying on application code to define how objects relate to each other, relationships are definded by the framework. As a methodology, IOC introduces consistency and predictability to object relations, but it does require you, as the developer, to give up some fine-grained control.\n- **Dependency injection (DI)** is a machanism where the framework \"injects\" dependencies into your app. It's the practial implementation of IOC. Dependency injection hinges (关键) on polymorphism (多态性), in the sense that it allows the fulfillment (满足) of a reference type to change based on configurations in the framework. The framework injects variable references rather than having them manually fulfilled in application code.\n\n>JSR-330\n> Like much in the Java world, what began as an in-the-wild innovation, Spring, has been in part absorbed by standard specification. In this case, JSR-330 is the Java standard. This nice thing about the JSR-330 spec is you can use it elsewhere, and will see it in use elsewhere, beyond Spring. You can use it without using Spring. However, Spring brings a whole lot more to the table.\n\n## Example 1: Spring dependency injection\nInversion of control and dependency injection are best understood by using them, so we'll start with a quick programming example.\n\nSay you're modelling a car. If you're modeling in plain old Java, you might have an interface member on the Car class to reference an Engine interface, as shown in Listing 1.\n\n### Listing 1. Object relations in plain old Java\n```java\npublic interface Engine {\n\n}\n\npublic class Car {\n    private Engine engine;\n\n    public Engine getEngine() {}\n\n    public void setEngine(Engine engine){}\n}\n```\n\nListing 1 contains an interface for an Engine type, and a class for the concrete Car type, Which references the Engine. (Note that in a real programming scenario these would be in separate files.) Now you're creating a Car instance, you'd set the association as shown in Listing 2.\n\n### Listing 2. Creating a Car with the Engine interface\n```java\n// ...\nCar newCar = new Car();\nEngine sixCylEngine = new InlineSixCylinderEngine();\nnewCar.setEngine(sixCylEngine);\n// do stuff with the car\n```\n\nNote that you create the Car object first. You then create a new object that fulfills the Engine interface, and assign it manually to the Car object. That is how object associations work in plain old Java.\n\n## Modeling classes and objects in Spring\nNow let's look at the same example in Spring. Here, you could do something like what's shown in Listing 3. You start with the Car class, but in this case you add an annotation to it: `@Inject`.\n\n### Listing 3. Example of using the @Inject annotation in Spring\n```java\npublic class Car {\n    @Inject\n    private Engine engine;\n    // ...\n}\n```\n\nUsing the `@Inject` annotation (or `@Autowired`, if you prefer) tells Spring to search the context and automatically inject an object into the reference, based on a set of rules.\n\nNext, consider the `@Component` annotation, shown in Listing 4.\n\n### Listing 4. @Component annotation\n```java\n@Component\npublic class InlineSixCylinderEngine implements Engine {\n    // ...\n}\n```\nAnnotation a class with `@Component` tells Spring that it is available for fulfilling injections. In this case, the InlineSixCyEngine would be injected because it is availalbe and satisfies the interface requirement of the association. In Spring, this is called an \"autowired\" injection. (See below for more about Spring's `@Autowired` annotation.)\n\n## Decoupling (解耦) as a design principle\nInversion of control with dependency injection removes a source of concrete dependency from your code. Nowhere in the program is there a hard-codede reference to the Engine implementation. This is an example of decoupling as a software design principle. Decoupling application code from implementation makes your code easier to manage and maintain. The application knows less about how its parts fit together, but it's much eaiser to make changes at any point in the application lifecycle.\n\n> @Autowired vs @Inject\n> @Autowired and @Inject do the same thing. However, @Inject is the Java standard annotation, whereas @Autowired is specific to Spring. They both serve the same purpose of telling the DI engine to inject the field or method with a matching object. You can use either one in Spring.\n\n## Overview of the Spring framework\nNow that you've seen some Spring code, let's take an overview of the framework and its components. As you can see, the framework consists of four main modules, which are broken into packages. Spring gives you a fair amount of flexibility with the modules you'll use: \n- Core container\n    - Core\n    - Bean\n    - Context\n    - Expression Language\n- Aspect-oriented programming (AOP)\n    - AOP\n    - Aspects\n    - Instrumentation\n- Data access and integration\n    - JDBC\n    - JPA/ORM\n    - JMS\n    - Transactions\n- Web\n    - Web/REST\n    - Servlet\n    - Struts\n\nRather than cover everthing here, let's get started with two of the more commonly used Spring features.\n\n## Starting up a new project: Spring Boot\nWe'll use Spring Boot to create an example project, which we'll use to demo Spring features. Spring Boot makes starting new projects much easier, as you'll seee for yourself. To begin, take a look at the main class shown below. In Spring Boot, we can take a main class with a `main()` method, and then choose to run it standalone, or package for deployment in a container like Tomcat.\n\n### Listing 5. Main class with Spring Boot\n```java\n@SpringBootApplication\npulbic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n\nNote two things about the above code: First, all of the work is abstracted into the framework. The main class boots up the app, but it doesn't konw anything about how the app works or delivers its functionality. Second, the `SpringApplication.run()` does the actual job of booting the app and passing in the Application class itself. Again, the work the app does is not apparent here.\n\nThe `@SpringBootApplication` annotation wraps up a few standard annotations and tells Spring to look at the package where the main calss exists for components. In our previous example, with the car and engine, this would allow Spring to find all classes annotated with `@Component` and `@Inject`. The process itself, called component scanning, is highly customizable.\n\nYou can build the app with the standard `mvn clane install`, and you can run it with the Spring Boot goal (`mvn spring-boot:run`). Before doing that, let's look at this application's pom.xml file.\n\n### Listing 6. Starter pom.xml\n```xml\n<groupId>com.javaworld</groupId>\n    <artifactId>what-is-spring</artifactId>\n    <version>1.0.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.3.RELEASE</version>\n    </parent>\n\n    <dependencies>\n    </dependencies>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n\nNote two important features in the above code:\n1. The partent element relies on the spring-boot-starter-parent proejct. This parent proejct defines a number of useful defaults, such as the default compiler level of JDK 1.8. For the most part, you can just trust that it knows what it's doing. As an example, you can omit the version number for many common dependencies, and SpringBootParent will set the versions to be compatible. When you bump up the parent's version number, the dependency versions and defaults will also change.\n1. The spring-boot-maven-plugin allows for the executable JAR/WAR packging and in-plcae run (via the `mvn spring-boot:run` command).\n\n## Adding Spring Web as a dependency\nSo far, we've been able to use spring-boot to limit how much work we put in to get an app up and running. Now let's add a dependency and see how quickly we cacn get something in a broswer.\n\n### Listing 7. Adding Spring Web to a project\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n> Note\n> Spring will automatically detect what files have changed and compile accordingly. You can just execute `mvn spirng-boot:run` to pickup changes.\n\nNow that we've got a baisc project setup, we're ready for our two examples.\n\n## Example 2. Building RESTful endpoints with Spring Web\nWe've used spring-boot-starter-web to bring in serveral dependencies that are useful for building web applications. Next we'll create a route handler for a URL path. Spring's web support is part of the Spring MVC (Model-View-Controller) module, but don't let that worry you: Spring Web has full and effective support for building RESTful endpoints, as well.\n\nThe class whose job it is to field URL requests is known as a controller, as shown in Listing 8.\n\n### Listing 8. Spring MVC Rest controller\n```java\n@Controller\npublic class GreetingController {\n    \n    @RequestMethod(value = \"/hi\", method = RequestMethod.GET) \n    public String hi(@RequestParam(name = \"name\", required = false, defaultValue = \"JavaWorld\") String name, Model model) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n### The @Controller annotation\nThe @Controller annotation identifies a class as a controller. A class narked as a controller is also automatically identified as a component class, which makes it a candidate for auto-wiring. Wherever this controller is needed, it will be plugged into the framework. In this case, we'll plug it into the MVC system to handle requests.\n\nThe controller is a specialized kind of component. It support the @RequestMapping and @ResponseBody annotations that you see on the `hi()` method. These annotations tell the framework how to map URL requests to the app.\n\nAt this point, you can run the app with `mvn spring-boot:run`. When you hit the `/hi` URL, you'll get a response like \"Hello JavaWorld\".\n\nNotice how Spring has taken the basics of autowiring components, and delivered a whole web framework. With Spring, you don't have to explicitly connect anything togetehr!\n\n### The @Request annotations\nThe @RequestMapping allows you to define a handler for a URL path. Options include defining the HTTP method you want, which is what we've done in this case. Leaving RequestMethod off would instruct the program to handle all HTTP method types.\n\nThe @RequestParam argument annotation allows us to map the request parameters directly into the method signature, including requiring certain params and defining default values as we've done here. We can even map a request body to a class with the @RequestBody argument annotation.\n\n### REST and JSON response\nIf you are creating a REST endpoint and you want to return JSON from the method, you can annotate the method with @ResponseBody. The response will then be automatically packaged as JSON. In this case you'll return an object from the method.\n\n> Using MVC with Spring Web\n> Similar to Struts, the Spring Web module can easily be used for a true model-view-controller setup. In this case, you would return a mapping in the given templating (like Thymeleaf), and Spring would resolve the mapping, provide the model you pass to it, and render the response. \n\n## Example #3: Spring with JDBC\nNow let's do something more intertesting with our request hanlder: let's return some data from a database. For the purpose of this example, we'll use the H2 database. Thankfully, Spring Boot supports the in-memory H2 DB out of the box.\n\nYou can add the H2 DB to your app by including it in your pom.xml, as shown in Lisinting 9. We'll also add a dependency to spring-boot-starter-jdbc. This brings in what we need to control JDBC with Spring.\n\n### Listing 9. Adding a Maven dependency to the H2 DB\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n\n<dependency>\n\t<groupId>com.h2database</groupId>\n\t<artifactId>h2</artifactId>\n</dependency>\n```\n\nNext, you'll want to configure the database. This is done with a spring.database.properties file, which is located in the `/resources` directory. Listing 10 shows how we can use H2 with the in-memory mode activated.\n\n### Listing 10. H2 in-memory config\n```properties\ndriverClassName=org.hsqldb.jdbc.JDBCDriver\nurl=jdbc:hsqldb:mem:myDb\nusername=sa\npassword=sa\n```\n\n### Service component classes\nNow, we can start using the database. It's that easy. However, basic software design tells us never to access the data layer via the view layer. In this case, we don't want to access the JDBC support via the view controller. We need a service component. In Spring Web, we use the @Service annoation to create a service class. Like the @Controller annoation, using the @Service annotation designates a class as a kink of @Component. That means Spring will add it to the DI context, and you can autowire it into your controller.\n\n> Annotating components\n> Spring offers a few ways to annotate components. The most baisc way to indicate that a class is available for auto-wriring is via the @Component annotation. The @Service annotation does the same thing, but indicates a specific type of class. You could use the @Bean annotation to designate a method that would serve the purpose of creating a bean to be autowired.\n\nLising 11 shows a simple Service Component.\n\n### Listing 11. Service component\n```java\n@Service(\"myService\")\npublic class MyService {\n  public String getGreeting(){\n    return \"Hey There\";\n  }\n\tpublic boolean addSong(String name) {\n\t\tif (name.length() > 15){\n\t\t  return false;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic List<String> getSongs() {\n\t\treturn new ArrayList();\n\t}\n}\n```\n\nNow we can access the service class from the controller. In listing 12, we'll injetc it.\n\n### Listing 12. Injetcing MyService into the controller\n```java\n@Controller\npublic class GreetingController {\n  @Inject\n  private MyService myService;\n    @RequestMapping(value = \"/hi\", method = RequestMethod.GET)\n    public String hi(@RequestParam(name=\"name\", required=false, defaultValue=\"JavaWorld\") String name, Model model) {\n        return myService.getGreeting() + name;\n    }\n}\n```\n\nNow the Controller is makring use of the Service class. Notice how Spring is allowing us to define a layered architecture using the same DI system. We can do the same in defining a data layer that the service class can use, and leverage Spring's support for a variety of datastores and datastore access approaches at the same time.\n\nWe can annotate our data layer class with @Repository, as seen in Listing 13, and the inject it into the service class. In the same way @Service allowed us to define the service layer, we are now defining the data layer in a decoupled way.\n\n## The JdbcTemplate class\nThe data layer will require more than the service layer, because it will be talking to the database. Spring eases this primarily by providing the JdbcTemplate class.\n\n### Listing 13. Repository data class\n```java\n@Repository\npublic class MyDataObject {\n  public void addName(String name){\n    jdbcTemplate.execute(\"DROP TABLE names IF EXISTS\");\n    jdbcTemplate.execute(\"CREATE TABLE names(\"id SERIAL, name VARCHAR(255))\");\n    jdbcTemplate.update(\"INSERT INTO names (name) VALUES (?)\", name);\n  }\n}\n```\n\nSpring will automatically use the in-memory H2 DB we've configured. Notice how jdbcTemplate has eliminated all the boilerplate and error-handling code from this class. While this is a simplified example of accessing the database, it gives you an idea of how SPring works both to connect your application layers, and facilitates the use of other required services.\n\n## Conclusion\nSpring is one of the most advanced and compelete application development framewors for Java, bar none. It makes setting up an application easier, allows you to easily bring in the dependencies you need as the application grows, and is fully capable ofremping up the high-volume, production-grade use.\n\nIt's tough to argue using Spring in a new Java application. The Spring platform is maintained and advanced with vigor, and virtually any task you might need to undertake is doable with Spring. Using this platform will spare you considerable heavy lifting, and will help ensure your application design is robust and flexible. If you can use Spring to ease your development path, then do it.\n","source":"_posts/JavaWorld/Spring Series Part 1, What is Spring.md","raw":"---\ntitle: Spring Series Part 1, What is Spring\n\ntag:\n- The Spring Series\n\ncategories:\n- JavaWorld\n\ndate: 2020-04-19 11:00:01\n---\nSpring is perhaps the best of the compoment-based frameworks that emerged (出现) at the turn of the 21st century. It vastly improves the way that developers write and deliver infrastructure code in Java-based applications. Since it inception (开端), Spring has been recognized as a leading framework for enterprise Java development. As an end-to-end application framework, Spring mirrors some of the Java EE capabilities, but it offers a combination (结合) of features and programming conventions (约定) you won't find elsewhere.\n\nThis article introduces Spring and its core programming philosophy (理念) and methodology (方法论): Inverstion of control and dependency injection. You'll also get started with Spring annotations and a couple of hands-on coding examples.\n\n## Dependency injection and inversion of control\nSpring's core idea is that instead of managing object relationships yourself, you offload them to the framework. Inversion of control (IOC) is the methodology used to manage object relationships. Dependency injection is the machanism (机制) for implementing IOC. Since these two concepts are related but different, let's consider them more closely:\n- **Inversion of control (IOC)** does jsut what its name says: it inverst the traditional hierarchy of control for fulfilling object relationships. Instead of relying on application code to define how objects relate to each other, relationships are definded by the framework. As a methodology, IOC introduces consistency and predictability to object relations, but it does require you, as the developer, to give up some fine-grained control.\n- **Dependency injection (DI)** is a machanism where the framework \"injects\" dependencies into your app. It's the practial implementation of IOC. Dependency injection hinges (关键) on polymorphism (多态性), in the sense that it allows the fulfillment (满足) of a reference type to change based on configurations in the framework. The framework injects variable references rather than having them manually fulfilled in application code.\n\n>JSR-330\n> Like much in the Java world, what began as an in-the-wild innovation, Spring, has been in part absorbed by standard specification. In this case, JSR-330 is the Java standard. This nice thing about the JSR-330 spec is you can use it elsewhere, and will see it in use elsewhere, beyond Spring. You can use it without using Spring. However, Spring brings a whole lot more to the table.\n\n## Example 1: Spring dependency injection\nInversion of control and dependency injection are best understood by using them, so we'll start with a quick programming example.\n\nSay you're modelling a car. If you're modeling in plain old Java, you might have an interface member on the Car class to reference an Engine interface, as shown in Listing 1.\n\n### Listing 1. Object relations in plain old Java\n```java\npublic interface Engine {\n\n}\n\npublic class Car {\n    private Engine engine;\n\n    public Engine getEngine() {}\n\n    public void setEngine(Engine engine){}\n}\n```\n\nListing 1 contains an interface for an Engine type, and a class for the concrete Car type, Which references the Engine. (Note that in a real programming scenario these would be in separate files.) Now you're creating a Car instance, you'd set the association as shown in Listing 2.\n\n### Listing 2. Creating a Car with the Engine interface\n```java\n// ...\nCar newCar = new Car();\nEngine sixCylEngine = new InlineSixCylinderEngine();\nnewCar.setEngine(sixCylEngine);\n// do stuff with the car\n```\n\nNote that you create the Car object first. You then create a new object that fulfills the Engine interface, and assign it manually to the Car object. That is how object associations work in plain old Java.\n\n## Modeling classes and objects in Spring\nNow let's look at the same example in Spring. Here, you could do something like what's shown in Listing 3. You start with the Car class, but in this case you add an annotation to it: `@Inject`.\n\n### Listing 3. Example of using the @Inject annotation in Spring\n```java\npublic class Car {\n    @Inject\n    private Engine engine;\n    // ...\n}\n```\n\nUsing the `@Inject` annotation (or `@Autowired`, if you prefer) tells Spring to search the context and automatically inject an object into the reference, based on a set of rules.\n\nNext, consider the `@Component` annotation, shown in Listing 4.\n\n### Listing 4. @Component annotation\n```java\n@Component\npublic class InlineSixCylinderEngine implements Engine {\n    // ...\n}\n```\nAnnotation a class with `@Component` tells Spring that it is available for fulfilling injections. In this case, the InlineSixCyEngine would be injected because it is availalbe and satisfies the interface requirement of the association. In Spring, this is called an \"autowired\" injection. (See below for more about Spring's `@Autowired` annotation.)\n\n## Decoupling (解耦) as a design principle\nInversion of control with dependency injection removes a source of concrete dependency from your code. Nowhere in the program is there a hard-codede reference to the Engine implementation. This is an example of decoupling as a software design principle. Decoupling application code from implementation makes your code easier to manage and maintain. The application knows less about how its parts fit together, but it's much eaiser to make changes at any point in the application lifecycle.\n\n> @Autowired vs @Inject\n> @Autowired and @Inject do the same thing. However, @Inject is the Java standard annotation, whereas @Autowired is specific to Spring. They both serve the same purpose of telling the DI engine to inject the field or method with a matching object. You can use either one in Spring.\n\n## Overview of the Spring framework\nNow that you've seen some Spring code, let's take an overview of the framework and its components. As you can see, the framework consists of four main modules, which are broken into packages. Spring gives you a fair amount of flexibility with the modules you'll use: \n- Core container\n    - Core\n    - Bean\n    - Context\n    - Expression Language\n- Aspect-oriented programming (AOP)\n    - AOP\n    - Aspects\n    - Instrumentation\n- Data access and integration\n    - JDBC\n    - JPA/ORM\n    - JMS\n    - Transactions\n- Web\n    - Web/REST\n    - Servlet\n    - Struts\n\nRather than cover everthing here, let's get started with two of the more commonly used Spring features.\n\n## Starting up a new project: Spring Boot\nWe'll use Spring Boot to create an example project, which we'll use to demo Spring features. Spring Boot makes starting new projects much easier, as you'll seee for yourself. To begin, take a look at the main class shown below. In Spring Boot, we can take a main class with a `main()` method, and then choose to run it standalone, or package for deployment in a container like Tomcat.\n\n### Listing 5. Main class with Spring Boot\n```java\n@SpringBootApplication\npulbic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n\nNote two things about the above code: First, all of the work is abstracted into the framework. The main class boots up the app, but it doesn't konw anything about how the app works or delivers its functionality. Second, the `SpringApplication.run()` does the actual job of booting the app and passing in the Application class itself. Again, the work the app does is not apparent here.\n\nThe `@SpringBootApplication` annotation wraps up a few standard annotations and tells Spring to look at the package where the main calss exists for components. In our previous example, with the car and engine, this would allow Spring to find all classes annotated with `@Component` and `@Inject`. The process itself, called component scanning, is highly customizable.\n\nYou can build the app with the standard `mvn clane install`, and you can run it with the Spring Boot goal (`mvn spring-boot:run`). Before doing that, let's look at this application's pom.xml file.\n\n### Listing 6. Starter pom.xml\n```xml\n<groupId>com.javaworld</groupId>\n    <artifactId>what-is-spring</artifactId>\n    <version>1.0.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.3.RELEASE</version>\n    </parent>\n\n    <dependencies>\n    </dependencies>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n\nNote two important features in the above code:\n1. The partent element relies on the spring-boot-starter-parent proejct. This parent proejct defines a number of useful defaults, such as the default compiler level of JDK 1.8. For the most part, you can just trust that it knows what it's doing. As an example, you can omit the version number for many common dependencies, and SpringBootParent will set the versions to be compatible. When you bump up the parent's version number, the dependency versions and defaults will also change.\n1. The spring-boot-maven-plugin allows for the executable JAR/WAR packging and in-plcae run (via the `mvn spring-boot:run` command).\n\n## Adding Spring Web as a dependency\nSo far, we've been able to use spring-boot to limit how much work we put in to get an app up and running. Now let's add a dependency and see how quickly we cacn get something in a broswer.\n\n### Listing 7. Adding Spring Web to a project\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n> Note\n> Spring will automatically detect what files have changed and compile accordingly. You can just execute `mvn spirng-boot:run` to pickup changes.\n\nNow that we've got a baisc project setup, we're ready for our two examples.\n\n## Example 2. Building RESTful endpoints with Spring Web\nWe've used spring-boot-starter-web to bring in serveral dependencies that are useful for building web applications. Next we'll create a route handler for a URL path. Spring's web support is part of the Spring MVC (Model-View-Controller) module, but don't let that worry you: Spring Web has full and effective support for building RESTful endpoints, as well.\n\nThe class whose job it is to field URL requests is known as a controller, as shown in Listing 8.\n\n### Listing 8. Spring MVC Rest controller\n```java\n@Controller\npublic class GreetingController {\n    \n    @RequestMethod(value = \"/hi\", method = RequestMethod.GET) \n    public String hi(@RequestParam(name = \"name\", required = false, defaultValue = \"JavaWorld\") String name, Model model) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n### The @Controller annotation\nThe @Controller annotation identifies a class as a controller. A class narked as a controller is also automatically identified as a component class, which makes it a candidate for auto-wiring. Wherever this controller is needed, it will be plugged into the framework. In this case, we'll plug it into the MVC system to handle requests.\n\nThe controller is a specialized kind of component. It support the @RequestMapping and @ResponseBody annotations that you see on the `hi()` method. These annotations tell the framework how to map URL requests to the app.\n\nAt this point, you can run the app with `mvn spring-boot:run`. When you hit the `/hi` URL, you'll get a response like \"Hello JavaWorld\".\n\nNotice how Spring has taken the basics of autowiring components, and delivered a whole web framework. With Spring, you don't have to explicitly connect anything togetehr!\n\n### The @Request annotations\nThe @RequestMapping allows you to define a handler for a URL path. Options include defining the HTTP method you want, which is what we've done in this case. Leaving RequestMethod off would instruct the program to handle all HTTP method types.\n\nThe @RequestParam argument annotation allows us to map the request parameters directly into the method signature, including requiring certain params and defining default values as we've done here. We can even map a request body to a class with the @RequestBody argument annotation.\n\n### REST and JSON response\nIf you are creating a REST endpoint and you want to return JSON from the method, you can annotate the method with @ResponseBody. The response will then be automatically packaged as JSON. In this case you'll return an object from the method.\n\n> Using MVC with Spring Web\n> Similar to Struts, the Spring Web module can easily be used for a true model-view-controller setup. In this case, you would return a mapping in the given templating (like Thymeleaf), and Spring would resolve the mapping, provide the model you pass to it, and render the response. \n\n## Example #3: Spring with JDBC\nNow let's do something more intertesting with our request hanlder: let's return some data from a database. For the purpose of this example, we'll use the H2 database. Thankfully, Spring Boot supports the in-memory H2 DB out of the box.\n\nYou can add the H2 DB to your app by including it in your pom.xml, as shown in Lisinting 9. We'll also add a dependency to spring-boot-starter-jdbc. This brings in what we need to control JDBC with Spring.\n\n### Listing 9. Adding a Maven dependency to the H2 DB\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n\n<dependency>\n\t<groupId>com.h2database</groupId>\n\t<artifactId>h2</artifactId>\n</dependency>\n```\n\nNext, you'll want to configure the database. This is done with a spring.database.properties file, which is located in the `/resources` directory. Listing 10 shows how we can use H2 with the in-memory mode activated.\n\n### Listing 10. H2 in-memory config\n```properties\ndriverClassName=org.hsqldb.jdbc.JDBCDriver\nurl=jdbc:hsqldb:mem:myDb\nusername=sa\npassword=sa\n```\n\n### Service component classes\nNow, we can start using the database. It's that easy. However, basic software design tells us never to access the data layer via the view layer. In this case, we don't want to access the JDBC support via the view controller. We need a service component. In Spring Web, we use the @Service annoation to create a service class. Like the @Controller annoation, using the @Service annotation designates a class as a kink of @Component. That means Spring will add it to the DI context, and you can autowire it into your controller.\n\n> Annotating components\n> Spring offers a few ways to annotate components. The most baisc way to indicate that a class is available for auto-wriring is via the @Component annotation. The @Service annotation does the same thing, but indicates a specific type of class. You could use the @Bean annotation to designate a method that would serve the purpose of creating a bean to be autowired.\n\nLising 11 shows a simple Service Component.\n\n### Listing 11. Service component\n```java\n@Service(\"myService\")\npublic class MyService {\n  public String getGreeting(){\n    return \"Hey There\";\n  }\n\tpublic boolean addSong(String name) {\n\t\tif (name.length() > 15){\n\t\t  return false;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic List<String> getSongs() {\n\t\treturn new ArrayList();\n\t}\n}\n```\n\nNow we can access the service class from the controller. In listing 12, we'll injetc it.\n\n### Listing 12. Injetcing MyService into the controller\n```java\n@Controller\npublic class GreetingController {\n  @Inject\n  private MyService myService;\n    @RequestMapping(value = \"/hi\", method = RequestMethod.GET)\n    public String hi(@RequestParam(name=\"name\", required=false, defaultValue=\"JavaWorld\") String name, Model model) {\n        return myService.getGreeting() + name;\n    }\n}\n```\n\nNow the Controller is makring use of the Service class. Notice how Spring is allowing us to define a layered architecture using the same DI system. We can do the same in defining a data layer that the service class can use, and leverage Spring's support for a variety of datastores and datastore access approaches at the same time.\n\nWe can annotate our data layer class with @Repository, as seen in Listing 13, and the inject it into the service class. In the same way @Service allowed us to define the service layer, we are now defining the data layer in a decoupled way.\n\n## The JdbcTemplate class\nThe data layer will require more than the service layer, because it will be talking to the database. Spring eases this primarily by providing the JdbcTemplate class.\n\n### Listing 13. Repository data class\n```java\n@Repository\npublic class MyDataObject {\n  public void addName(String name){\n    jdbcTemplate.execute(\"DROP TABLE names IF EXISTS\");\n    jdbcTemplate.execute(\"CREATE TABLE names(\"id SERIAL, name VARCHAR(255))\");\n    jdbcTemplate.update(\"INSERT INTO names (name) VALUES (?)\", name);\n  }\n}\n```\n\nSpring will automatically use the in-memory H2 DB we've configured. Notice how jdbcTemplate has eliminated all the boilerplate and error-handling code from this class. While this is a simplified example of accessing the database, it gives you an idea of how SPring works both to connect your application layers, and facilitates the use of other required services.\n\n## Conclusion\nSpring is one of the most advanced and compelete application development framewors for Java, bar none. It makes setting up an application easier, allows you to easily bring in the dependencies you need as the application grows, and is fully capable ofremping up the high-volume, production-grade use.\n\nIt's tough to argue using Spring in a new Java application. The Spring platform is maintained and advanced with vigor, and virtually any task you might need to undertake is doable with Spring. Using this platform will spare you considerable heavy lifting, and will help ensure your application design is robust and flexible. If you can use Spring to ease your development path, then do it.\n","slug":"JavaWorld/Spring Series Part 1, What is Spring","published":1,"updated":"2020-05-01T07:42:35.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mcj00cam33pi8rtg9d1","content":"<p>Spring is perhaps the best of the compoment-based frameworks that emerged (出现) at the turn of the 21st century. It vastly improves the way that developers write and deliver infrastructure code in Java-based applications. Since it inception (开端), Spring has been recognized as a leading framework for enterprise Java development. As an end-to-end application framework, Spring mirrors some of the Java EE capabilities, but it offers a combination (结合) of features and programming conventions (约定) you won’t find elsewhere.</p>\n<p>This article introduces Spring and its core programming philosophy (理念) and methodology (方法论): Inverstion of control and dependency injection. You’ll also get started with Spring annotations and a couple of hands-on coding examples.</p>\n<h2 id=\"Dependency-injection-and-inversion-of-control\"><a href=\"#Dependency-injection-and-inversion-of-control\" class=\"headerlink\" title=\"Dependency injection and inversion of control\"></a>Dependency injection and inversion of control</h2><p>Spring’s core idea is that instead of managing object relationships yourself, you offload them to the framework. Inversion of control (IOC) is the methodology used to manage object relationships. Dependency injection is the machanism (机制) for implementing IOC. Since these two concepts are related but different, let’s consider them more closely:</p>\n<ul>\n<li><strong>Inversion of control (IOC)</strong> does jsut what its name says: it inverst the traditional hierarchy of control for fulfilling object relationships. Instead of relying on application code to define how objects relate to each other, relationships are definded by the framework. As a methodology, IOC introduces consistency and predictability to object relations, but it does require you, as the developer, to give up some fine-grained control.</li>\n<li><strong>Dependency injection (DI)</strong> is a machanism where the framework “injects” dependencies into your app. It’s the practial implementation of IOC. Dependency injection hinges (关键) on polymorphism (多态性), in the sense that it allows the fulfillment (满足) of a reference type to change based on configurations in the framework. The framework injects variable references rather than having them manually fulfilled in application code.</li>\n</ul>\n<blockquote>\n<p>JSR-330<br>Like much in the Java world, what began as an in-the-wild innovation, Spring, has been in part absorbed by standard specification. In this case, JSR-330 is the Java standard. This nice thing about the JSR-330 spec is you can use it elsewhere, and will see it in use elsewhere, beyond Spring. You can use it without using Spring. However, Spring brings a whole lot more to the table.</p>\n</blockquote>\n<h2 id=\"Example-1-Spring-dependency-injection\"><a href=\"#Example-1-Spring-dependency-injection\" class=\"headerlink\" title=\"Example 1: Spring dependency injection\"></a>Example 1: Spring dependency injection</h2><p>Inversion of control and dependency injection are best understood by using them, so we’ll start with a quick programming example.</p>\n<p>Say you’re modelling a car. If you’re modeling in plain old Java, you might have an interface member on the Car class to reference an Engine interface, as shown in Listing 1.</p>\n<h3 id=\"Listing-1-Object-relations-in-plain-old-Java\"><a href=\"#Listing-1-Object-relations-in-plain-old-Java\" class=\"headerlink\" title=\"Listing 1. Object relations in plain old Java\"></a>Listing 1. Object relations in plain old Java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Engine</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Engine engine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Engine <span class=\"title\">getEngine</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEngine</span><span class=\"params\">(Engine engine)</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 contains an interface for an Engine type, and a class for the concrete Car type, Which references the Engine. (Note that in a real programming scenario these would be in separate files.) Now you’re creating a Car instance, you’d set the association as shown in Listing 2.</p>\n<h3 id=\"Listing-2-Creating-a-Car-with-the-Engine-interface\"><a href=\"#Listing-2-Creating-a-Car-with-the-Engine-interface\" class=\"headerlink\" title=\"Listing 2. Creating a Car with the Engine interface\"></a>Listing 2. Creating a Car with the Engine interface</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Car newCar = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">Engine sixCylEngine = <span class=\"keyword\">new</span> InlineSixCylinderEngine();</span><br><span class=\"line\">newCar.setEngine(sixCylEngine);</span><br><span class=\"line\"><span class=\"comment\">// do stuff with the car</span></span><br></pre></td></tr></table></figure>\n<p>Note that you create the Car object first. You then create a new object that fulfills the Engine interface, and assign it manually to the Car object. That is how object associations work in plain old Java.</p>\n<h2 id=\"Modeling-classes-and-objects-in-Spring\"><a href=\"#Modeling-classes-and-objects-in-Spring\" class=\"headerlink\" title=\"Modeling classes and objects in Spring\"></a>Modeling classes and objects in Spring</h2><p>Now let’s look at the same example in Spring. Here, you could do something like what’s shown in Listing 3. You start with the Car class, but in this case you add an annotation to it: <code>@Inject</code>.</p>\n<h3 id=\"Listing-3-Example-of-using-the-Inject-annotation-in-Spring\"><a href=\"#Listing-3-Example-of-using-the-Inject-annotation-in-Spring\" class=\"headerlink\" title=\"Listing 3. Example of using the @Inject annotation in Spring\"></a>Listing 3. Example of using the @Inject annotation in Spring</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Engine engine;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Using the <code>@Inject</code> annotation (or <code>@Autowired</code>, if you prefer) tells Spring to search the context and automatically inject an object into the reference, based on a set of rules.</p>\n<p>Next, consider the <code>@Component</code> annotation, shown in Listing 4.</p>\n<h3 id=\"Listing-4-Component-annotation\"><a href=\"#Listing-4-Component-annotation\" class=\"headerlink\" title=\"Listing 4. @Component annotation\"></a>Listing 4. @Component annotation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InlineSixCylinderEngine</span> <span class=\"keyword\">implements</span> <span class=\"title\">Engine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Annotation a class with <code>@Component</code> tells Spring that it is available for fulfilling injections. In this case, the InlineSixCyEngine would be injected because it is availalbe and satisfies the interface requirement of the association. In Spring, this is called an “autowired” injection. (See below for more about Spring’s <code>@Autowired</code> annotation.)</p>\n<h2 id=\"Decoupling-解耦-as-a-design-principle\"><a href=\"#Decoupling-解耦-as-a-design-principle\" class=\"headerlink\" title=\"Decoupling (解耦) as a design principle\"></a>Decoupling (解耦) as a design principle</h2><p>Inversion of control with dependency injection removes a source of concrete dependency from your code. Nowhere in the program is there a hard-codede reference to the Engine implementation. This is an example of decoupling as a software design principle. Decoupling application code from implementation makes your code easier to manage and maintain. The application knows less about how its parts fit together, but it’s much eaiser to make changes at any point in the application lifecycle.</p>\n<blockquote>\n<p>@Autowired vs @Inject<br>@Autowired and @Inject do the same thing. However, @Inject is the Java standard annotation, whereas @Autowired is specific to Spring. They both serve the same purpose of telling the DI engine to inject the field or method with a matching object. You can use either one in Spring.</p>\n</blockquote>\n<h2 id=\"Overview-of-the-Spring-framework\"><a href=\"#Overview-of-the-Spring-framework\" class=\"headerlink\" title=\"Overview of the Spring framework\"></a>Overview of the Spring framework</h2><p>Now that you’ve seen some Spring code, let’s take an overview of the framework and its components. As you can see, the framework consists of four main modules, which are broken into packages. Spring gives you a fair amount of flexibility with the modules you’ll use: </p>\n<ul>\n<li>Core container<ul>\n<li>Core</li>\n<li>Bean</li>\n<li>Context</li>\n<li>Expression Language</li>\n</ul>\n</li>\n<li>Aspect-oriented programming (AOP)<ul>\n<li>AOP</li>\n<li>Aspects</li>\n<li>Instrumentation</li>\n</ul>\n</li>\n<li>Data access and integration<ul>\n<li>JDBC</li>\n<li>JPA/ORM</li>\n<li>JMS</li>\n<li>Transactions</li>\n</ul>\n</li>\n<li>Web<ul>\n<li>Web/REST</li>\n<li>Servlet</li>\n<li>Struts</li>\n</ul>\n</li>\n</ul>\n<p>Rather than cover everthing here, let’s get started with two of the more commonly used Spring features.</p>\n<h2 id=\"Starting-up-a-new-project-Spring-Boot\"><a href=\"#Starting-up-a-new-project-Spring-Boot\" class=\"headerlink\" title=\"Starting up a new project: Spring Boot\"></a>Starting up a new project: Spring Boot</h2><p>We’ll use Spring Boot to create an example project, which we’ll use to demo Spring features. Spring Boot makes starting new projects much easier, as you’ll seee for yourself. To begin, take a look at the main class shown below. In Spring Boot, we can take a main class with a <code>main()</code> method, and then choose to run it standalone, or package for deployment in a container like Tomcat.</p>\n<h3 id=\"Listing-5-Main-class-with-Spring-Boot\"><a href=\"#Listing-5-Main-class-with-Spring-Boot\" class=\"headerlink\" title=\"Listing 5. Main class with Spring Boot\"></a>Listing 5. Main class with Spring Boot</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\">pulbic <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note two things about the above code: First, all of the work is abstracted into the framework. The main class boots up the app, but it doesn’t konw anything about how the app works or delivers its functionality. Second, the <code>SpringApplication.run()</code> does the actual job of booting the app and passing in the Application class itself. Again, the work the app does is not apparent here.</p>\n<p>The <code>@SpringBootApplication</code> annotation wraps up a few standard annotations and tells Spring to look at the package where the main calss exists for components. In our previous example, with the car and engine, this would allow Spring to find all classes annotated with <code>@Component</code> and <code>@Inject</code>. The process itself, called component scanning, is highly customizable.</p>\n<p>You can build the app with the standard <code>mvn clane install</code>, and you can run it with the Spring Boot goal (<code>mvn spring-boot:run</code>). Before doing that, let’s look at this application’s pom.xml file.</p>\n<h3 id=\"Listing-6-Starter-pom-xml\"><a href=\"#Listing-6-Starter-pom-xml\" class=\"headerlink\" title=\"Listing 6. Starter pom.xml\"></a>Listing 6. Starter pom.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.javaworld<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>what-is-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Note two important features in the above code:</p>\n<ol>\n<li>The partent element relies on the spring-boot-starter-parent proejct. This parent proejct defines a number of useful defaults, such as the default compiler level of JDK 1.8. For the most part, you can just trust that it knows what it’s doing. As an example, you can omit the version number for many common dependencies, and SpringBootParent will set the versions to be compatible. When you bump up the parent’s version number, the dependency versions and defaults will also change.</li>\n<li>The spring-boot-maven-plugin allows for the executable JAR/WAR packging and in-plcae run (via the <code>mvn spring-boot:run</code> command).</li>\n</ol>\n<h2 id=\"Adding-Spring-Web-as-a-dependency\"><a href=\"#Adding-Spring-Web-as-a-dependency\" class=\"headerlink\" title=\"Adding Spring Web as a dependency\"></a>Adding Spring Web as a dependency</h2><p>So far, we’ve been able to use spring-boot to limit how much work we put in to get an app up and running. Now let’s add a dependency and see how quickly we cacn get something in a broswer.</p>\n<h3 id=\"Listing-7-Adding-Spring-Web-to-a-project\"><a href=\"#Listing-7-Adding-Spring-Web-to-a-project\" class=\"headerlink\" title=\"Listing 7. Adding Spring Web to a project\"></a>Listing 7. Adding Spring Web to a project</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Note<br>Spring will automatically detect what files have changed and compile accordingly. You can just execute <code>mvn spirng-boot:run</code> to pickup changes.</p>\n</blockquote>\n<p>Now that we’ve got a baisc project setup, we’re ready for our two examples.</p>\n<h2 id=\"Example-2-Building-RESTful-endpoints-with-Spring-Web\"><a href=\"#Example-2-Building-RESTful-endpoints-with-Spring-Web\" class=\"headerlink\" title=\"Example 2. Building RESTful endpoints with Spring Web\"></a>Example 2. Building RESTful endpoints with Spring Web</h2><p>We’ve used spring-boot-starter-web to bring in serveral dependencies that are useful for building web applications. Next we’ll create a route handler for a URL path. Spring’s web support is part of the Spring MVC (Model-View-Controller) module, but don’t let that worry you: Spring Web has full and effective support for building RESTful endpoints, as well.</p>\n<p>The class whose job it is to field URL requests is known as a controller, as shown in Listing 8.</p>\n<h3 id=\"Listing-8-Spring-MVC-Rest-controller\"><a href=\"#Listing-8-Spring-MVC-Rest-controller\" class=\"headerlink\" title=\"Listing 8. Spring MVC Rest controller\"></a>Listing 8. Spring MVC Rest controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMethod</span>(value = <span class=\"string\">\"/hi\"</span>, method = RequestMethod.GET) </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hi</span><span class=\"params\">(@RequestParam(name = <span class=\"string\">\"name\"</span>, required = <span class=\"keyword\">false</span>, defaultValue = <span class=\"string\">\"JavaWorld\"</span>)</span> String name, Model model) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"The-Controller-annotation\"><a href=\"#The-Controller-annotation\" class=\"headerlink\" title=\"The @Controller annotation\"></a>The @Controller annotation</h3><p>The @Controller annotation identifies a class as a controller. A class narked as a controller is also automatically identified as a component class, which makes it a candidate for auto-wiring. Wherever this controller is needed, it will be plugged into the framework. In this case, we’ll plug it into the MVC system to handle requests.</p>\n<p>The controller is a specialized kind of component. It support the @RequestMapping and @ResponseBody annotations that you see on the <code>hi()</code> method. These annotations tell the framework how to map URL requests to the app.</p>\n<p>At this point, you can run the app with <code>mvn spring-boot:run</code>. When you hit the <code>/hi</code> URL, you’ll get a response like “Hello JavaWorld”.</p>\n<p>Notice how Spring has taken the basics of autowiring components, and delivered a whole web framework. With Spring, you don’t have to explicitly connect anything togetehr!</p>\n<h3 id=\"The-Request-annotations\"><a href=\"#The-Request-annotations\" class=\"headerlink\" title=\"The @Request annotations\"></a>The @Request annotations</h3><p>The @RequestMapping allows you to define a handler for a URL path. Options include defining the HTTP method you want, which is what we’ve done in this case. Leaving RequestMethod off would instruct the program to handle all HTTP method types.</p>\n<p>The @RequestParam argument annotation allows us to map the request parameters directly into the method signature, including requiring certain params and defining default values as we’ve done here. We can even map a request body to a class with the @RequestBody argument annotation.</p>\n<h3 id=\"REST-and-JSON-response\"><a href=\"#REST-and-JSON-response\" class=\"headerlink\" title=\"REST and JSON response\"></a>REST and JSON response</h3><p>If you are creating a REST endpoint and you want to return JSON from the method, you can annotate the method with @ResponseBody. The response will then be automatically packaged as JSON. In this case you’ll return an object from the method.</p>\n<blockquote>\n<p>Using MVC with Spring Web<br>Similar to Struts, the Spring Web module can easily be used for a true model-view-controller setup. In this case, you would return a mapping in the given templating (like Thymeleaf), and Spring would resolve the mapping, provide the model you pass to it, and render the response. </p>\n</blockquote>\n<h2 id=\"Example-3-Spring-with-JDBC\"><a href=\"#Example-3-Spring-with-JDBC\" class=\"headerlink\" title=\"Example #3: Spring with JDBC\"></a>Example #3: Spring with JDBC</h2><p>Now let’s do something more intertesting with our request hanlder: let’s return some data from a database. For the purpose of this example, we’ll use the H2 database. Thankfully, Spring Boot supports the in-memory H2 DB out of the box.</p>\n<p>You can add the H2 DB to your app by including it in your pom.xml, as shown in Lisinting 9. We’ll also add a dependency to spring-boot-starter-jdbc. This brings in what we need to control JDBC with Spring.</p>\n<h3 id=\"Listing-9-Adding-a-Maven-dependency-to-the-H2-DB\"><a href=\"#Listing-9-Adding-a-Maven-dependency-to-the-H2-DB\" class=\"headerlink\" title=\"Listing 9. Adding a Maven dependency to the H2 DB\"></a>Listing 9. Adding a Maven dependency to the H2 DB</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Next, you’ll want to configure the database. This is done with a spring.database.properties file, which is located in the <code>/resources</code> directory. Listing 10 shows how we can use H2 with the in-memory mode activated.</p>\n<h3 id=\"Listing-10-H2-in-memory-config\"><a href=\"#Listing-10-H2-in-memory-config\" class=\"headerlink\" title=\"Listing 10. H2 in-memory config\"></a>Listing 10. H2 in-memory config</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driverClassName=org.hsqldb.jdbc.JDBCDriver</span><br><span class=\"line\">url=jdbc:hsqldb:mem:myDb</span><br><span class=\"line\">username=sa</span><br><span class=\"line\">password=sa</span><br></pre></td></tr></table></figure>\n<h3 id=\"Service-component-classes\"><a href=\"#Service-component-classes\" class=\"headerlink\" title=\"Service component classes\"></a>Service component classes</h3><p>Now, we can start using the database. It’s that easy. However, basic software design tells us never to access the data layer via the view layer. In this case, we don’t want to access the JDBC support via the view controller. We need a service component. In Spring Web, we use the @Service annoation to create a service class. Like the @Controller annoation, using the @Service annotation designates a class as a kink of @Component. That means Spring will add it to the DI context, and you can autowire it into your controller.</p>\n<blockquote>\n<p>Annotating components<br>Spring offers a few ways to annotate components. The most baisc way to indicate that a class is available for auto-wriring is via the @Component annotation. The @Service annotation does the same thing, but indicates a specific type of class. You could use the @Bean annotation to designate a method that would serve the purpose of creating a bean to be autowired.</p>\n</blockquote>\n<p>Lising 11 shows a simple Service Component.</p>\n<h3 id=\"Listing-11-Service-component\"><a href=\"#Listing-11-Service-component\" class=\"headerlink\" title=\"Listing 11. Service component\"></a>Listing 11. Service component</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"myService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getGreeting</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hey There\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addSong</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (name.length() &gt; <span class=\"number\">15</span>)&#123;</span><br><span class=\"line\">\t\t  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getSongs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now we can access the service class from the controller. In listing 12, we’ll injetc it.</p>\n<h3 id=\"Listing-12-Injetcing-MyService-into-the-controller\"><a href=\"#Listing-12-Injetcing-MyService-into-the-controller\" class=\"headerlink\" title=\"Listing 12. Injetcing MyService into the controller\"></a>Listing 12. Injetcing MyService into the controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Inject</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> MyService myService;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hi\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hi</span><span class=\"params\">(@RequestParam(name=<span class=\"string\">\"name\"</span>, required=<span class=\"keyword\">false</span>, defaultValue=<span class=\"string\">\"JavaWorld\"</span>)</span> String name, Model model) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myService.getGreeting() + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now the Controller is makring use of the Service class. Notice how Spring is allowing us to define a layered architecture using the same DI system. We can do the same in defining a data layer that the service class can use, and leverage Spring’s support for a variety of datastores and datastore access approaches at the same time.</p>\n<p>We can annotate our data layer class with @Repository, as seen in Listing 13, and the inject it into the service class. In the same way @Service allowed us to define the service layer, we are now defining the data layer in a decoupled way.</p>\n<h2 id=\"The-JdbcTemplate-class\"><a href=\"#The-JdbcTemplate-class\" class=\"headerlink\" title=\"The JdbcTemplate class\"></a>The JdbcTemplate class</h2><p>The data layer will require more than the service layer, because it will be talking to the database. Spring eases this primarily by providing the JdbcTemplate class.</p>\n<h3 id=\"Listing-13-Repository-data-class\"><a href=\"#Listing-13-Repository-data-class\" class=\"headerlink\" title=\"Listing 13. Repository data class\"></a>Listing 13. Repository data class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDataObject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">    jdbcTemplate.execute(<span class=\"string\">\"DROP TABLE names IF EXISTS\"</span>);</span><br><span class=\"line\">    jdbcTemplate.execute(<span class=\"string\">\"CREATE TABLE names(\"</span>id SERIAL, <span class=\"function\">name <span class=\"title\">VARCHAR</span><span class=\"params\">(<span class=\"number\">255</span>)</span>)\")</span>;</span><br><span class=\"line\">    jdbcTemplate.update(<span class=\"string\">\"INSERT INTO names (name) VALUES (?)\"</span>, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Spring will automatically use the in-memory H2 DB we’ve configured. Notice how jdbcTemplate has eliminated all the boilerplate and error-handling code from this class. While this is a simplified example of accessing the database, it gives you an idea of how SPring works both to connect your application layers, and facilitates the use of other required services.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Spring is one of the most advanced and compelete application development framewors for Java, bar none. It makes setting up an application easier, allows you to easily bring in the dependencies you need as the application grows, and is fully capable ofremping up the high-volume, production-grade use.</p>\n<p>It’s tough to argue using Spring in a new Java application. The Spring platform is maintained and advanced with vigor, and virtually any task you might need to undertake is doable with Spring. Using this platform will spare you considerable heavy lifting, and will help ensure your application design is robust and flexible. If you can use Spring to ease your development path, then do it.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Spring is perhaps the best of the compoment-based frameworks that emerged (出现) at the turn of the 21st century. It vastly improves the way that developers write and deliver infrastructure code in Java-based applications. Since it inception (开端), Spring has been recognized as a leading framework for enterprise Java development. As an end-to-end application framework, Spring mirrors some of the Java EE capabilities, but it offers a combination (结合) of features and programming conventions (约定) you won’t find elsewhere.</p>\n<p>This article introduces Spring and its core programming philosophy (理念) and methodology (方法论): Inverstion of control and dependency injection. You’ll also get started with Spring annotations and a couple of hands-on coding examples.</p>\n<h2 id=\"Dependency-injection-and-inversion-of-control\"><a href=\"#Dependency-injection-and-inversion-of-control\" class=\"headerlink\" title=\"Dependency injection and inversion of control\"></a>Dependency injection and inversion of control</h2><p>Spring’s core idea is that instead of managing object relationships yourself, you offload them to the framework. Inversion of control (IOC) is the methodology used to manage object relationships. Dependency injection is the machanism (机制) for implementing IOC. Since these two concepts are related but different, let’s consider them more closely:</p>\n<ul>\n<li><strong>Inversion of control (IOC)</strong> does jsut what its name says: it inverst the traditional hierarchy of control for fulfilling object relationships. Instead of relying on application code to define how objects relate to each other, relationships are definded by the framework. As a methodology, IOC introduces consistency and predictability to object relations, but it does require you, as the developer, to give up some fine-grained control.</li>\n<li><strong>Dependency injection (DI)</strong> is a machanism where the framework “injects” dependencies into your app. It’s the practial implementation of IOC. Dependency injection hinges (关键) on polymorphism (多态性), in the sense that it allows the fulfillment (满足) of a reference type to change based on configurations in the framework. The framework injects variable references rather than having them manually fulfilled in application code.</li>\n</ul>\n<blockquote>\n<p>JSR-330<br>Like much in the Java world, what began as an in-the-wild innovation, Spring, has been in part absorbed by standard specification. In this case, JSR-330 is the Java standard. This nice thing about the JSR-330 spec is you can use it elsewhere, and will see it in use elsewhere, beyond Spring. You can use it without using Spring. However, Spring brings a whole lot more to the table.</p>\n</blockquote>\n<h2 id=\"Example-1-Spring-dependency-injection\"><a href=\"#Example-1-Spring-dependency-injection\" class=\"headerlink\" title=\"Example 1: Spring dependency injection\"></a>Example 1: Spring dependency injection</h2><p>Inversion of control and dependency injection are best understood by using them, so we’ll start with a quick programming example.</p>\n<p>Say you’re modelling a car. If you’re modeling in plain old Java, you might have an interface member on the Car class to reference an Engine interface, as shown in Listing 1.</p>\n<h3 id=\"Listing-1-Object-relations-in-plain-old-Java\"><a href=\"#Listing-1-Object-relations-in-plain-old-Java\" class=\"headerlink\" title=\"Listing 1. Object relations in plain old Java\"></a>Listing 1. Object relations in plain old Java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Engine</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Engine engine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Engine <span class=\"title\">getEngine</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEngine</span><span class=\"params\">(Engine engine)</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 contains an interface for an Engine type, and a class for the concrete Car type, Which references the Engine. (Note that in a real programming scenario these would be in separate files.) Now you’re creating a Car instance, you’d set the association as shown in Listing 2.</p>\n<h3 id=\"Listing-2-Creating-a-Car-with-the-Engine-interface\"><a href=\"#Listing-2-Creating-a-Car-with-the-Engine-interface\" class=\"headerlink\" title=\"Listing 2. Creating a Car with the Engine interface\"></a>Listing 2. Creating a Car with the Engine interface</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Car newCar = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">Engine sixCylEngine = <span class=\"keyword\">new</span> InlineSixCylinderEngine();</span><br><span class=\"line\">newCar.setEngine(sixCylEngine);</span><br><span class=\"line\"><span class=\"comment\">// do stuff with the car</span></span><br></pre></td></tr></table></figure>\n<p>Note that you create the Car object first. You then create a new object that fulfills the Engine interface, and assign it manually to the Car object. That is how object associations work in plain old Java.</p>\n<h2 id=\"Modeling-classes-and-objects-in-Spring\"><a href=\"#Modeling-classes-and-objects-in-Spring\" class=\"headerlink\" title=\"Modeling classes and objects in Spring\"></a>Modeling classes and objects in Spring</h2><p>Now let’s look at the same example in Spring. Here, you could do something like what’s shown in Listing 3. You start with the Car class, but in this case you add an annotation to it: <code>@Inject</code>.</p>\n<h3 id=\"Listing-3-Example-of-using-the-Inject-annotation-in-Spring\"><a href=\"#Listing-3-Example-of-using-the-Inject-annotation-in-Spring\" class=\"headerlink\" title=\"Listing 3. Example of using the @Inject annotation in Spring\"></a>Listing 3. Example of using the @Inject annotation in Spring</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Engine engine;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Using the <code>@Inject</code> annotation (or <code>@Autowired</code>, if you prefer) tells Spring to search the context and automatically inject an object into the reference, based on a set of rules.</p>\n<p>Next, consider the <code>@Component</code> annotation, shown in Listing 4.</p>\n<h3 id=\"Listing-4-Component-annotation\"><a href=\"#Listing-4-Component-annotation\" class=\"headerlink\" title=\"Listing 4. @Component annotation\"></a>Listing 4. @Component annotation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InlineSixCylinderEngine</span> <span class=\"keyword\">implements</span> <span class=\"title\">Engine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Annotation a class with <code>@Component</code> tells Spring that it is available for fulfilling injections. In this case, the InlineSixCyEngine would be injected because it is availalbe and satisfies the interface requirement of the association. In Spring, this is called an “autowired” injection. (See below for more about Spring’s <code>@Autowired</code> annotation.)</p>\n<h2 id=\"Decoupling-解耦-as-a-design-principle\"><a href=\"#Decoupling-解耦-as-a-design-principle\" class=\"headerlink\" title=\"Decoupling (解耦) as a design principle\"></a>Decoupling (解耦) as a design principle</h2><p>Inversion of control with dependency injection removes a source of concrete dependency from your code. Nowhere in the program is there a hard-codede reference to the Engine implementation. This is an example of decoupling as a software design principle. Decoupling application code from implementation makes your code easier to manage and maintain. The application knows less about how its parts fit together, but it’s much eaiser to make changes at any point in the application lifecycle.</p>\n<blockquote>\n<p>@Autowired vs @Inject<br>@Autowired and @Inject do the same thing. However, @Inject is the Java standard annotation, whereas @Autowired is specific to Spring. They both serve the same purpose of telling the DI engine to inject the field or method with a matching object. You can use either one in Spring.</p>\n</blockquote>\n<h2 id=\"Overview-of-the-Spring-framework\"><a href=\"#Overview-of-the-Spring-framework\" class=\"headerlink\" title=\"Overview of the Spring framework\"></a>Overview of the Spring framework</h2><p>Now that you’ve seen some Spring code, let’s take an overview of the framework and its components. As you can see, the framework consists of four main modules, which are broken into packages. Spring gives you a fair amount of flexibility with the modules you’ll use: </p>\n<ul>\n<li>Core container<ul>\n<li>Core</li>\n<li>Bean</li>\n<li>Context</li>\n<li>Expression Language</li>\n</ul>\n</li>\n<li>Aspect-oriented programming (AOP)<ul>\n<li>AOP</li>\n<li>Aspects</li>\n<li>Instrumentation</li>\n</ul>\n</li>\n<li>Data access and integration<ul>\n<li>JDBC</li>\n<li>JPA/ORM</li>\n<li>JMS</li>\n<li>Transactions</li>\n</ul>\n</li>\n<li>Web<ul>\n<li>Web/REST</li>\n<li>Servlet</li>\n<li>Struts</li>\n</ul>\n</li>\n</ul>\n<p>Rather than cover everthing here, let’s get started with two of the more commonly used Spring features.</p>\n<h2 id=\"Starting-up-a-new-project-Spring-Boot\"><a href=\"#Starting-up-a-new-project-Spring-Boot\" class=\"headerlink\" title=\"Starting up a new project: Spring Boot\"></a>Starting up a new project: Spring Boot</h2><p>We’ll use Spring Boot to create an example project, which we’ll use to demo Spring features. Spring Boot makes starting new projects much easier, as you’ll seee for yourself. To begin, take a look at the main class shown below. In Spring Boot, we can take a main class with a <code>main()</code> method, and then choose to run it standalone, or package for deployment in a container like Tomcat.</p>\n<h3 id=\"Listing-5-Main-class-with-Spring-Boot\"><a href=\"#Listing-5-Main-class-with-Spring-Boot\" class=\"headerlink\" title=\"Listing 5. Main class with Spring Boot\"></a>Listing 5. Main class with Spring Boot</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\">pulbic <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note two things about the above code: First, all of the work is abstracted into the framework. The main class boots up the app, but it doesn’t konw anything about how the app works or delivers its functionality. Second, the <code>SpringApplication.run()</code> does the actual job of booting the app and passing in the Application class itself. Again, the work the app does is not apparent here.</p>\n<p>The <code>@SpringBootApplication</code> annotation wraps up a few standard annotations and tells Spring to look at the package where the main calss exists for components. In our previous example, with the car and engine, this would allow Spring to find all classes annotated with <code>@Component</code> and <code>@Inject</code>. The process itself, called component scanning, is highly customizable.</p>\n<p>You can build the app with the standard <code>mvn clane install</code>, and you can run it with the Spring Boot goal (<code>mvn spring-boot:run</code>). Before doing that, let’s look at this application’s pom.xml file.</p>\n<h3 id=\"Listing-6-Starter-pom-xml\"><a href=\"#Listing-6-Starter-pom-xml\" class=\"headerlink\" title=\"Listing 6. Starter pom.xml\"></a>Listing 6. Starter pom.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.javaworld<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>what-is-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Note two important features in the above code:</p>\n<ol>\n<li>The partent element relies on the spring-boot-starter-parent proejct. This parent proejct defines a number of useful defaults, such as the default compiler level of JDK 1.8. For the most part, you can just trust that it knows what it’s doing. As an example, you can omit the version number for many common dependencies, and SpringBootParent will set the versions to be compatible. When you bump up the parent’s version number, the dependency versions and defaults will also change.</li>\n<li>The spring-boot-maven-plugin allows for the executable JAR/WAR packging and in-plcae run (via the <code>mvn spring-boot:run</code> command).</li>\n</ol>\n<h2 id=\"Adding-Spring-Web-as-a-dependency\"><a href=\"#Adding-Spring-Web-as-a-dependency\" class=\"headerlink\" title=\"Adding Spring Web as a dependency\"></a>Adding Spring Web as a dependency</h2><p>So far, we’ve been able to use spring-boot to limit how much work we put in to get an app up and running. Now let’s add a dependency and see how quickly we cacn get something in a broswer.</p>\n<h3 id=\"Listing-7-Adding-Spring-Web-to-a-project\"><a href=\"#Listing-7-Adding-Spring-Web-to-a-project\" class=\"headerlink\" title=\"Listing 7. Adding Spring Web to a project\"></a>Listing 7. Adding Spring Web to a project</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Note<br>Spring will automatically detect what files have changed and compile accordingly. You can just execute <code>mvn spirng-boot:run</code> to pickup changes.</p>\n</blockquote>\n<p>Now that we’ve got a baisc project setup, we’re ready for our two examples.</p>\n<h2 id=\"Example-2-Building-RESTful-endpoints-with-Spring-Web\"><a href=\"#Example-2-Building-RESTful-endpoints-with-Spring-Web\" class=\"headerlink\" title=\"Example 2. Building RESTful endpoints with Spring Web\"></a>Example 2. Building RESTful endpoints with Spring Web</h2><p>We’ve used spring-boot-starter-web to bring in serveral dependencies that are useful for building web applications. Next we’ll create a route handler for a URL path. Spring’s web support is part of the Spring MVC (Model-View-Controller) module, but don’t let that worry you: Spring Web has full and effective support for building RESTful endpoints, as well.</p>\n<p>The class whose job it is to field URL requests is known as a controller, as shown in Listing 8.</p>\n<h3 id=\"Listing-8-Spring-MVC-Rest-controller\"><a href=\"#Listing-8-Spring-MVC-Rest-controller\" class=\"headerlink\" title=\"Listing 8. Spring MVC Rest controller\"></a>Listing 8. Spring MVC Rest controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMethod</span>(value = <span class=\"string\">\"/hi\"</span>, method = RequestMethod.GET) </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hi</span><span class=\"params\">(@RequestParam(name = <span class=\"string\">\"name\"</span>, required = <span class=\"keyword\">false</span>, defaultValue = <span class=\"string\">\"JavaWorld\"</span>)</span> String name, Model model) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"The-Controller-annotation\"><a href=\"#The-Controller-annotation\" class=\"headerlink\" title=\"The @Controller annotation\"></a>The @Controller annotation</h3><p>The @Controller annotation identifies a class as a controller. A class narked as a controller is also automatically identified as a component class, which makes it a candidate for auto-wiring. Wherever this controller is needed, it will be plugged into the framework. In this case, we’ll plug it into the MVC system to handle requests.</p>\n<p>The controller is a specialized kind of component. It support the @RequestMapping and @ResponseBody annotations that you see on the <code>hi()</code> method. These annotations tell the framework how to map URL requests to the app.</p>\n<p>At this point, you can run the app with <code>mvn spring-boot:run</code>. When you hit the <code>/hi</code> URL, you’ll get a response like “Hello JavaWorld”.</p>\n<p>Notice how Spring has taken the basics of autowiring components, and delivered a whole web framework. With Spring, you don’t have to explicitly connect anything togetehr!</p>\n<h3 id=\"The-Request-annotations\"><a href=\"#The-Request-annotations\" class=\"headerlink\" title=\"The @Request annotations\"></a>The @Request annotations</h3><p>The @RequestMapping allows you to define a handler for a URL path. Options include defining the HTTP method you want, which is what we’ve done in this case. Leaving RequestMethod off would instruct the program to handle all HTTP method types.</p>\n<p>The @RequestParam argument annotation allows us to map the request parameters directly into the method signature, including requiring certain params and defining default values as we’ve done here. We can even map a request body to a class with the @RequestBody argument annotation.</p>\n<h3 id=\"REST-and-JSON-response\"><a href=\"#REST-and-JSON-response\" class=\"headerlink\" title=\"REST and JSON response\"></a>REST and JSON response</h3><p>If you are creating a REST endpoint and you want to return JSON from the method, you can annotate the method with @ResponseBody. The response will then be automatically packaged as JSON. In this case you’ll return an object from the method.</p>\n<blockquote>\n<p>Using MVC with Spring Web<br>Similar to Struts, the Spring Web module can easily be used for a true model-view-controller setup. In this case, you would return a mapping in the given templating (like Thymeleaf), and Spring would resolve the mapping, provide the model you pass to it, and render the response. </p>\n</blockquote>\n<h2 id=\"Example-3-Spring-with-JDBC\"><a href=\"#Example-3-Spring-with-JDBC\" class=\"headerlink\" title=\"Example #3: Spring with JDBC\"></a>Example #3: Spring with JDBC</h2><p>Now let’s do something more intertesting with our request hanlder: let’s return some data from a database. For the purpose of this example, we’ll use the H2 database. Thankfully, Spring Boot supports the in-memory H2 DB out of the box.</p>\n<p>You can add the H2 DB to your app by including it in your pom.xml, as shown in Lisinting 9. We’ll also add a dependency to spring-boot-starter-jdbc. This brings in what we need to control JDBC with Spring.</p>\n<h3 id=\"Listing-9-Adding-a-Maven-dependency-to-the-H2-DB\"><a href=\"#Listing-9-Adding-a-Maven-dependency-to-the-H2-DB\" class=\"headerlink\" title=\"Listing 9. Adding a Maven dependency to the H2 DB\"></a>Listing 9. Adding a Maven dependency to the H2 DB</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Next, you’ll want to configure the database. This is done with a spring.database.properties file, which is located in the <code>/resources</code> directory. Listing 10 shows how we can use H2 with the in-memory mode activated.</p>\n<h3 id=\"Listing-10-H2-in-memory-config\"><a href=\"#Listing-10-H2-in-memory-config\" class=\"headerlink\" title=\"Listing 10. H2 in-memory config\"></a>Listing 10. H2 in-memory config</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driverClassName=org.hsqldb.jdbc.JDBCDriver</span><br><span class=\"line\">url=jdbc:hsqldb:mem:myDb</span><br><span class=\"line\">username=sa</span><br><span class=\"line\">password=sa</span><br></pre></td></tr></table></figure>\n<h3 id=\"Service-component-classes\"><a href=\"#Service-component-classes\" class=\"headerlink\" title=\"Service component classes\"></a>Service component classes</h3><p>Now, we can start using the database. It’s that easy. However, basic software design tells us never to access the data layer via the view layer. In this case, we don’t want to access the JDBC support via the view controller. We need a service component. In Spring Web, we use the @Service annoation to create a service class. Like the @Controller annoation, using the @Service annotation designates a class as a kink of @Component. That means Spring will add it to the DI context, and you can autowire it into your controller.</p>\n<blockquote>\n<p>Annotating components<br>Spring offers a few ways to annotate components. The most baisc way to indicate that a class is available for auto-wriring is via the @Component annotation. The @Service annotation does the same thing, but indicates a specific type of class. You could use the @Bean annotation to designate a method that would serve the purpose of creating a bean to be autowired.</p>\n</blockquote>\n<p>Lising 11 shows a simple Service Component.</p>\n<h3 id=\"Listing-11-Service-component\"><a href=\"#Listing-11-Service-component\" class=\"headerlink\" title=\"Listing 11. Service component\"></a>Listing 11. Service component</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"myService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getGreeting</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hey There\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addSong</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (name.length() &gt; <span class=\"number\">15</span>)&#123;</span><br><span class=\"line\">\t\t  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getSongs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now we can access the service class from the controller. In listing 12, we’ll injetc it.</p>\n<h3 id=\"Listing-12-Injetcing-MyService-into-the-controller\"><a href=\"#Listing-12-Injetcing-MyService-into-the-controller\" class=\"headerlink\" title=\"Listing 12. Injetcing MyService into the controller\"></a>Listing 12. Injetcing MyService into the controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Inject</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> MyService myService;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hi\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hi</span><span class=\"params\">(@RequestParam(name=<span class=\"string\">\"name\"</span>, required=<span class=\"keyword\">false</span>, defaultValue=<span class=\"string\">\"JavaWorld\"</span>)</span> String name, Model model) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myService.getGreeting() + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now the Controller is makring use of the Service class. Notice how Spring is allowing us to define a layered architecture using the same DI system. We can do the same in defining a data layer that the service class can use, and leverage Spring’s support for a variety of datastores and datastore access approaches at the same time.</p>\n<p>We can annotate our data layer class with @Repository, as seen in Listing 13, and the inject it into the service class. In the same way @Service allowed us to define the service layer, we are now defining the data layer in a decoupled way.</p>\n<h2 id=\"The-JdbcTemplate-class\"><a href=\"#The-JdbcTemplate-class\" class=\"headerlink\" title=\"The JdbcTemplate class\"></a>The JdbcTemplate class</h2><p>The data layer will require more than the service layer, because it will be talking to the database. Spring eases this primarily by providing the JdbcTemplate class.</p>\n<h3 id=\"Listing-13-Repository-data-class\"><a href=\"#Listing-13-Repository-data-class\" class=\"headerlink\" title=\"Listing 13. Repository data class\"></a>Listing 13. Repository data class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDataObject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">    jdbcTemplate.execute(<span class=\"string\">\"DROP TABLE names IF EXISTS\"</span>);</span><br><span class=\"line\">    jdbcTemplate.execute(<span class=\"string\">\"CREATE TABLE names(\"</span>id SERIAL, <span class=\"function\">name <span class=\"title\">VARCHAR</span><span class=\"params\">(<span class=\"number\">255</span>)</span>)\")</span>;</span><br><span class=\"line\">    jdbcTemplate.update(<span class=\"string\">\"INSERT INTO names (name) VALUES (?)\"</span>, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Spring will automatically use the in-memory H2 DB we’ve configured. Notice how jdbcTemplate has eliminated all the boilerplate and error-handling code from this class. While this is a simplified example of accessing the database, it gives you an idea of how SPring works both to connect your application layers, and facilitates the use of other required services.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Spring is one of the most advanced and compelete application development framewors for Java, bar none. It makes setting up an application easier, allows you to easily bring in the dependencies you need as the application grows, and is fully capable ofremping up the high-volume, production-grade use.</p>\n<p>It’s tough to argue using Spring in a new Java application. The Spring platform is maintained and advanced with vigor, and virtually any task you might need to undertake is doable with Spring. Using this platform will spare you considerable heavy lifting, and will help ensure your application design is robust and flexible. If you can use Spring to ease your development path, then do it.</p>\n"},{"title":"Multidimensional arrays and the Matrix Multiplication algorithm","mathjax":true,"date":"2020-04-05T16:00:03.000Z","_content":"Data structures and algorithm in Java, Part 2 instroduced a variety of techniques for searching and sorting one-dimensional arrays, which are the simplest arrays. In this tutorial you'll explore multidimensional arrays. I'll show you the three ways to create multidimensional arrays, then you'll learn how to use the Matrix Multiplication algorithm to multiply elemtns in a two-dimensional array. I'll also introduce ragged arrays and you'll learn why they're popular for big data applications. Finally, we'll consider the question of whether an array is or is not a Java object.\n\nThis article sets you up for Part 4, which introduces searching and sorting with singly-linked lists.\n\n## Mutidimentsional arrays\nA multidimensional array associates each element in the array with multiple indexes. The most commonly used multidimensional array is the two-dimensional array, also known as a table or matrix. A two-dimensional array associates each of its elements with two indexes.\n\nWe can conceptualize a two-dimensional array as a rectanglar grid of elements divided into rows and colums. We use the (row, column) natation to identify an element, as shown in Figure 1.\n\n![Figure 1. A conceptual view of a two-dimensional array reveals a grid of elements](001.jpg)\n\nBecause two-dimensional arrays are so commonly used, I'll focus on them. What you learn about two-dimensional arrays can be generalized to higher-dimensional ones.\n\n## Creating two-dimensional arrays\nThere are three techniques for creating a two-dimensional array in Java:\n- Using an initializer\n- Using the keyword new\n- Using the keyword new with an initializer\n\n### Using an initializer to create a two-dimensional array\nThe initializer-only approach to creating a two-dimensional array has the following syntax:\n```\n'{' [rowInitializer (',' rowInitializer)*] '}'\n```\n\nrowinitializer has the following syntax:\n```\n'{' [expr (',' expr)*] '}'\n```\n\nThis syntax states that a two-dimensional array is an optional, comma-separated list of row initializer appearing between open - and close - brace characters. Futhermore, each row initializer is an optional, comma-separated list of expressions appearing between oopen - and close - brace characters. Like one-dimensional ararys, all expressions must evaluate to compatible types.\n\nHere's an example of a two-dimensional array:\n```java\n{ { 20.5, 30.6, 28.3 }, { -38.7, -18.3, -16.2 } }\n```\n\nThis example creates a table with rows and three columns. Figure 2 presents a concetual (概念上的) view of this table along with a memory view that shows how Java lays out this (and every) table in memory.\n\n![Figure 2. Conceptual and memory views of a two-dimensional array](002.jpg)\n\nFigure 2 reveals that Java represents a two-dimensional array as a one-dimensional row array whose elements reference one-dimensional column arrays. The row index identifies the column array; the column index identifies the data item.\n\n### Keyword new-only creation\nThe keyword new allocates memory for a two-dimensional array and returns its reference. This approach has the following syntax:\n```\n'new' type '[' int_expr1 ']' '['int_expr2 ']'\n```\n\nThe syntax states that a two-dimensional array is a region of (positive) int_expr1 row elements and (positive) int_expr2 column elements that all share the same type. Furthermore, all elements are zeroed. Here's an example:\n```java\nnew double[2][3] // Create a two-row-by-three-column table.\n```\n\n### Keyword new and initializer creation\nThe keyword new with an initializer approach has the following syntax:\n```\n'new' type '[' ']' [' ']' '{' [rowInitializer (',' rowInitializer)*] '}'\n```\n\nWhere rowInitializer has the following syntax:\n```java\n'{' [expr (',' expr)*] '}'\n```\n\nThe syntax blends the previous two examples. Because the number of elements can be determined from the comma-separated lists of expressions, you don't provide an int_expr between either pair of square brackets. Here is an exmaple:\n```java\nnew double [][] { { 20.5, 30.6, 28.3 }, { -38.7, -18.3, -16.2 } }\n```\n\n## Two-dimensinal arrays and array variable\nBy itself, a newly-created two-dimensional array is useless. Its reference must be assigned to an array variable of a compatible type, either directly or via a method call. The follwoing syntaxes show how you would declare this variable:\n```\ntype var_name '[' ']' '[' ']'\ntype '[' ']' '[' ']' var_name\n```\n\nEach syntax declares an array variable taht stores a reference to a two-dimensional array. It's perferred to palce the square brackets after type. Consider the follwoing examples:\n```\ndouble[][] temperatures1 = { { 20.5, 30.6, 28.3 }, { -38.7, -18.3, -16.2 } };\ndouble[][] temperatures2 = new double[2][3];\ndouble[][] temperatures3 = new double[][] { { 20.5, 30.6, 28.3 }, { -38.7, -18.3, -16.2 } };\n```\n\nLike one-dimensional array variables, a two-dimensional array variable is associated with a `.length`  property, which reutrns the length of the row array. For example, `temperatures1.length` returns 2. Each row element is also an array variable with a `.length` property, which returns the number of columns for the column array assigned to the row element. For example, `temperatures1[0].length` returns 3.\n\nGiven an array variable, you can access any element in a two-dimensional array by specifying an expression that agress with the following syntax:\n```\narray_var '[' row_index ']' '[' col_index ']'\n```\n\nBoth indexes are positive ints that range from 0 to one less than the value returned from the respective `.length` properties. Consider the next two examples:\n```java\ndouble temp = temperatures1[0][1]; // Get value.\ntemperatures1[0][1] = 75.0;        // Set value.\n```\n\nThe first example returns the value in the second column of the first row (30.6). The second example  repalces this value with 75.0.\n\nIf you spcify a negative idnex or an index that is greater than or equal to the value returned by the array variable's `.length` property, Java creates and throws an ArrayIndexOutOfBoundsException object.\n\n## Multiplying two-dimensional arrays\nMultiplying one matrix by another matrix is a comon operation in fields ranging from computer graphics, to economics, to the transportation industry. Developer usually use the Matrix Multiplication algorithm for this operation.\n\nHow does matrix mutiplication work? Let A represent a matrix with $m$ rows and $p$ columns. Similarly, let B represent a matrix with $p$ rows and $n$ columns. Multiply A by B to produce a maxtrix C, with $m$ rows and $n$ columns. Each cij entry in C is obtained by mutiplying all entries in A's ith row by corresponding entries in B's jth column, then adding the results. Figure 3 illustrates these operations.\n\n![Figure 3. Each of A's rows if mutiplied (and andded with each of B's columns to produce an entry in C)](003.jpg)\n\n> Left-matrix columns must equal right-matrix rows\n> Matrix multiplcation requries that the number of columns (p) in the left matrix (A) equal the number of rows (p) in the right matrix (B). Otherwise, this algorithm won't work.\n\nThe following pseudocode expresses Matrix Multiplication in a 2-row-by-2-column and a 2-row-by-1-column table context. (Recall that I introduced pseudocode in Part 1.)\n\n```\n// ==      ==   == ==   ==                     ==\n// | 10  30 |   | 5 |   | 10 x 5 + 30 x 7 (260) |\n// |        | X |   | = |                       | \n// | 20  40 |   | 7 |   | 20 x 5 + 40 * 7 (380) | \n// ==      ==   == ==   ==                     ==\n\nDECLARE INTEGER a[][] = [ 10, 30 ] [ 20, 40 ]\nDECLARE INTEGER b[][] =  [ 5, 7 ]\nDECLARE INTEGER m = 2 // Number of rows in left matrix (a)\nDECLARE INTEGER p = 2 // Number of columns in left matrix (a)\n                      // Number of rows in right matrix (b)\nDECLARE INTEGER n = 1 // Number of columns in right matrix (b)\nDECLARE INTEGER c[m][n] // c holds 2 rows by 1 columns\n                        // All elements initialize to 0\nFOR i = 0 TO m - 1\n   FOR j = 0 TO n - 1\n      FOR k = 0 TO p - 1\n         c[i][j] = c[i][j] + a[i][k] * b[k][j]\n      NEXT k\n   NEXT j\nNEXT i\nEND\n```\n\nBecause of the three FOR loops, Matrix Multiplication has a time complexity of $O(n^3)$, which is pronounced \"Big Oh of $n$ cubed\". Matrix Multiplication offers cubic performance, which gets expensive time-wise when large matrixes are multiplied. It offers a space complexity of $O(nm)$, which is pronounced \"Big Oh of $n * m$\", for storing an additional matrix of $n$ rows by $m$ columns. This becomes $O(n^2)$ for square matrixes.\n\nI've created a MatMult Java application that lets you experiment with Matrix Multiplication. Listing 1 presents this application's source code.\n\n### Listing 1. A Java application of experimenting with Matrix Multiplication\n```java\npublic final class MatMult\n{\n   public static void main(String[] args)\n   {\n      int[][] a = {{ 10, 30 }, { 20, 40 }};\n      int[][] b = {{ 5 }, { 7 }};\n      dump(a);\n      System.out.println();\n      dump(b);\n      System.out.println();\n      int[][] c = multiply(a, b);\n      dump(c);\n   }\n\n   private static void dump(int[][] x)\n   {\n      if (x == null)\n      {\n         System.err.println(\"array is null\");\n         return;\n      }\n\n      // Dump the matrix's element values to the standard output in a tabular\n      // order.\n\n      for (int i = 0; i < x.length; i++)\n      {\n         for (int j = 0; j < x[0].length; j++)\n            System.out.print(x[i][j] + \" \");\n         System.out.println();\n      }\n   }\n\n   private static int[][] multiply(int[][] a, int[][] b)\n   {\n      // ====================================================================\n      // 1. a.length contains a's row count\n      //\n      // 2. a[0].length (or any other a[x].length for a valid x) contains a's\n      //    column count\n      //\n      // 3. b.length contains b's row count\n      //\n      // 4. b[0].length (or any other b[x].length for a valid x) contains b's\n      //    column count\n      // ====================================================================\n\n      // If a's column count != b's row count, bail out\n\n      if (a[0].length != b.length)\n      {\n         System.err.println(\"a's column count != b's row count\");\n         return null;\n      }\n\n      // Allocate result matrix with a size equal to a's row count times b's\n      // column count\n\n      int[][] result = new int[a.length][];\n      for (int i = 0; i < result.length; i++)\n         result[i] = new int[b[0].length];\n\n      // Perform the multiplication and addition\n\n      for (int i = 0; i < a.length; i++)\n         for (int j = 0; j < b[0].length; j++)\n            for (int k = 0; k < a[0].length; k++) // or k < b.length\n               result[i][j] += a[i][k] * b[k][j];\n\n      // Return the result matrix\n\n      return result;\n   }\n}\n```\n\nMatMult declares a pair of matrixes and dumps their values to standard output. It then multiplies both matrixes and dumps the result matrix to standard output.\n\nCompile Listing 1 as follows:\n```bash\njavac MatMult.java\n```\n\nRun the resulting application as follows:\n```bash\njava MatMult\n```\n\nYou should observe the following output:\n```\n10 30 \n20 40 \n\n5 \n7 \n\n260 \n380\n```\n\n## Example of matrix multiplication\nLet's explore a problem that is best solved by matrix multiplication. In this scenario, a fruit grower in Florida loads a couple of emitrailers with 1,250 boxes of oranges, 400 boxes of peaches, and 250 boxes of grapefruit. Figure 4 shows a chart of the market price per box for each kind of fruit, in four different cities.\n\n![Figure 4. Market price for oranges, peaches, and grapefurit in four different cities](004.jpg)\n\nOur problem is to determine where the fruit should be shipped and sold for maximum gross income. To solve that problem, we first reconstruct the chart from Figure 4 as a four-row by three-column price matrix. From this, we can construct a tree-row by one-column quntity matrix, which appears below:\n```\n==    ==\n| 1250 |\n|      |\n|  400 |\n|      |\n|  250 |\n==    ==\n```\n\nWith both matrixes on hand, we simply multiply the price matrix by the quantity matrix to produce a gross income matrix:\n```\n==                  ==              ==        ==\n| 10.00  8.00  12.00 |   ==    ==   | 18700.00 | New York\n|                    |   | 1250 |   |          |\n| 11.00  8.50  11.55 |   |      |   | 20037.50 | Los Angeles\n|                    | X |  400 | = |          |\n|  8.75  6.90  10.00 |   |      |   | 16197.50 | Miami \n|                    |   |  250 |   |          |\n| 10.50  8.25  11.75 |   ==    ==   | 19362.50 | Chicago\n==                  ==              ==        ==\n```\n\nSending both semitrailers to Los Angeles will produce the highest gross income. But when distance aand fuel costs are considered, perhaps New Yourk is a better bet for yielding the highest income.\n\n## Ragged arrays\nHaving learned about two-dimensional arrays, you might now wonder whether it's possible to assign one-dimensional column arrays with different lengths to elements of a row array. The answer is yes. Consider these examples:\n```java\ndouble[][] temperatures1 = { { 20.5, 30.6, 28.3 }, { -38.7, -18.3 } };\ndouble[][] temperatures2 = new double[2][];\ndouble[][] temperatures3 = new double[][] { { 20.5, 30.6, 28.3 }, { -38.7, -18.3 } };\n```\n\nThe first and third examples crate a two-dimensional array where the first row contains three columns and the second row contains two columns. The second example creates an array with two rows and an unspecified number of columns.\n\nAfter creating temperature2's row array, its elements must be populated with references to new column arrays. The following example demonstrates, assigning 3 columns to the first rwo and 2 columns to the second row:\n```java\ntemperatures2[0] = new double[3];\ntemperatures2[1] = new double[2];\n```\n\nThe resulting two-dimensional array is known as a ragged array. Here is a second example:\n```java\nint[][] x = new int[5][];\nx[0] = new int[3];\nx[1] = new int[2];\nx[2] = new int[3];\nx[3] = new int[5];\nx[4] = new int[1];\n```\n\nFFigure 5 presents a conceptual view of this second ragged array.\n\n![Figure 5. A ragged array specifies row with varying numbers of column elements](005.jpg)\n\nRagged arrays are useful data structures because of their memory-saving capabiliy. For example, consider a spreadsheet with the potential of 100,000 rows by 20,000 columns. If we attempt to use a matrix to hold the spreadsheet, we require a great deal of memory. But suppose most of the spreadsheet's cells contain defualt values, such as 0 for numeric cells and null for nonnumeric cells. If we use a ragged array instead of a matrix, we store only those cells that contain nonnumeric data. (Of course, we need some kind of mapping machinism that mpas spreadsheet (row, column) coordinates to ragged array (row, colum) coordinates.)\n\n> Using ragged arrays for big data\n> Ragged arrays come in handy when managing Big Data, such as the vast amounts of data generated by the Internet of Things.\n\n## Why arrays are objects\nAccording to the first sentence of Chatper 10 in the Java Language Specification arrays are objects in Java. Under the hood, each array is an instance of a hidden class that inherits java.lang.Object's 11 methods. The array instance override Object's `protected Object clone() throws CloneNotSupprotedException` method, allowing the array to be shallowly cloned. The hidden class additionally provides a `.length` field.\n\nListing 2's ArrayIsObject source code demonstrates the associatation between arrays and objects.\n\n### Listing 2. ArrayIsObject\n```java\npublic final class ArrayIsObject\n{\n   public static void main(String[] args)\n   {\n      double[] a = { 100.5, 200.5, 300.5 };\n      double[] b = { 100.5, 200.5, 300.5 };\n      double[] c = b;\n      System.out.println(\"a's class is \" + a.getClass());\n      System.out.println(\"a and b are \" + ((a.equals(b)) ? \"\" : \"not \") +\n                         \"equal \");\n      System.out.println(\"b and c are \" + ((b.equals(c)) ? \"\" : \"not \") +\n                         \"equal \");\n      double[] d = (double[]) c.clone();\n      System.out.println(\"c and d are \" + ((c.equals(d)) ? \"\" : \"not \") +\n                         \"equal \");\n      for (int i = 0; i < d.length; i++)\n         System.out.println(d[i]);\n   }\n}\n```\n\nArrayIsObeject creates a referenced and b referenced double precision floating-point arrays with the same contents and lengths. For the a referenced array, a.getClass() returns class [D, where [D is the name of the array's hidden class.\n\nDespite the two arrays having the same contents, a.equals(b) returns false bacause equals() compares references (not contents), and a and b contain different references. b's reference is assigned to c, and b.equals(c) returns true because b and c reference the same array. c.clone() creates a shallow clone of c, and a reference to this new array is assigned to d.\n\nTo prove that the d-referenced array contains the same contents as the c-referenced array, the for loop iterates over all elements and prints their contents to the standard output. The loop reads the contents of d's read-only .length field to determine over how many elements to iterate.\n\n> Tip: Don't specify array length in source code\n> In source code, specify .length (as in d.length) instead of an array's actual length. This eliminates the risk of introducing length-related bugs into your code, should you later change the array's length ini its creation code.\n\nCompile Listing 2 as follows:\n```bash\njavac ArrayIsObject.java\n```\n\nRun the resulting application as follows:\n```bash\njava ArrayIsObject\n```\n\nYou should observe the following output:\n```\na's class is class [D\na and b are not equal \nb and c are equal \nc and d are not equal \n100.5\n200.5\n300.5\n```","source":"_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm.md","raw":"---\ntitle: Multidimensional arrays and the Matrix Multiplication algorithm\n\ntag:\n- Data structures and algorithms in Java\ncategories:\n- JavaWorld\n\nmathjax: true\n\ndate: 2020-04-06 00:00:03\n---\nData structures and algorithm in Java, Part 2 instroduced a variety of techniques for searching and sorting one-dimensional arrays, which are the simplest arrays. In this tutorial you'll explore multidimensional arrays. I'll show you the three ways to create multidimensional arrays, then you'll learn how to use the Matrix Multiplication algorithm to multiply elemtns in a two-dimensional array. I'll also introduce ragged arrays and you'll learn why they're popular for big data applications. Finally, we'll consider the question of whether an array is or is not a Java object.\n\nThis article sets you up for Part 4, which introduces searching and sorting with singly-linked lists.\n\n## Mutidimentsional arrays\nA multidimensional array associates each element in the array with multiple indexes. The most commonly used multidimensional array is the two-dimensional array, also known as a table or matrix. A two-dimensional array associates each of its elements with two indexes.\n\nWe can conceptualize a two-dimensional array as a rectanglar grid of elements divided into rows and colums. We use the (row, column) natation to identify an element, as shown in Figure 1.\n\n![Figure 1. A conceptual view of a two-dimensional array reveals a grid of elements](001.jpg)\n\nBecause two-dimensional arrays are so commonly used, I'll focus on them. What you learn about two-dimensional arrays can be generalized to higher-dimensional ones.\n\n## Creating two-dimensional arrays\nThere are three techniques for creating a two-dimensional array in Java:\n- Using an initializer\n- Using the keyword new\n- Using the keyword new with an initializer\n\n### Using an initializer to create a two-dimensional array\nThe initializer-only approach to creating a two-dimensional array has the following syntax:\n```\n'{' [rowInitializer (',' rowInitializer)*] '}'\n```\n\nrowinitializer has the following syntax:\n```\n'{' [expr (',' expr)*] '}'\n```\n\nThis syntax states that a two-dimensional array is an optional, comma-separated list of row initializer appearing between open - and close - brace characters. Futhermore, each row initializer is an optional, comma-separated list of expressions appearing between oopen - and close - brace characters. Like one-dimensional ararys, all expressions must evaluate to compatible types.\n\nHere's an example of a two-dimensional array:\n```java\n{ { 20.5, 30.6, 28.3 }, { -38.7, -18.3, -16.2 } }\n```\n\nThis example creates a table with rows and three columns. Figure 2 presents a concetual (概念上的) view of this table along with a memory view that shows how Java lays out this (and every) table in memory.\n\n![Figure 2. Conceptual and memory views of a two-dimensional array](002.jpg)\n\nFigure 2 reveals that Java represents a two-dimensional array as a one-dimensional row array whose elements reference one-dimensional column arrays. The row index identifies the column array; the column index identifies the data item.\n\n### Keyword new-only creation\nThe keyword new allocates memory for a two-dimensional array and returns its reference. This approach has the following syntax:\n```\n'new' type '[' int_expr1 ']' '['int_expr2 ']'\n```\n\nThe syntax states that a two-dimensional array is a region of (positive) int_expr1 row elements and (positive) int_expr2 column elements that all share the same type. Furthermore, all elements are zeroed. Here's an example:\n```java\nnew double[2][3] // Create a two-row-by-three-column table.\n```\n\n### Keyword new and initializer creation\nThe keyword new with an initializer approach has the following syntax:\n```\n'new' type '[' ']' [' ']' '{' [rowInitializer (',' rowInitializer)*] '}'\n```\n\nWhere rowInitializer has the following syntax:\n```java\n'{' [expr (',' expr)*] '}'\n```\n\nThe syntax blends the previous two examples. Because the number of elements can be determined from the comma-separated lists of expressions, you don't provide an int_expr between either pair of square brackets. Here is an exmaple:\n```java\nnew double [][] { { 20.5, 30.6, 28.3 }, { -38.7, -18.3, -16.2 } }\n```\n\n## Two-dimensinal arrays and array variable\nBy itself, a newly-created two-dimensional array is useless. Its reference must be assigned to an array variable of a compatible type, either directly or via a method call. The follwoing syntaxes show how you would declare this variable:\n```\ntype var_name '[' ']' '[' ']'\ntype '[' ']' '[' ']' var_name\n```\n\nEach syntax declares an array variable taht stores a reference to a two-dimensional array. It's perferred to palce the square brackets after type. Consider the follwoing examples:\n```\ndouble[][] temperatures1 = { { 20.5, 30.6, 28.3 }, { -38.7, -18.3, -16.2 } };\ndouble[][] temperatures2 = new double[2][3];\ndouble[][] temperatures3 = new double[][] { { 20.5, 30.6, 28.3 }, { -38.7, -18.3, -16.2 } };\n```\n\nLike one-dimensional array variables, a two-dimensional array variable is associated with a `.length`  property, which reutrns the length of the row array. For example, `temperatures1.length` returns 2. Each row element is also an array variable with a `.length` property, which returns the number of columns for the column array assigned to the row element. For example, `temperatures1[0].length` returns 3.\n\nGiven an array variable, you can access any element in a two-dimensional array by specifying an expression that agress with the following syntax:\n```\narray_var '[' row_index ']' '[' col_index ']'\n```\n\nBoth indexes are positive ints that range from 0 to one less than the value returned from the respective `.length` properties. Consider the next two examples:\n```java\ndouble temp = temperatures1[0][1]; // Get value.\ntemperatures1[0][1] = 75.0;        // Set value.\n```\n\nThe first example returns the value in the second column of the first row (30.6). The second example  repalces this value with 75.0.\n\nIf you spcify a negative idnex or an index that is greater than or equal to the value returned by the array variable's `.length` property, Java creates and throws an ArrayIndexOutOfBoundsException object.\n\n## Multiplying two-dimensional arrays\nMultiplying one matrix by another matrix is a comon operation in fields ranging from computer graphics, to economics, to the transportation industry. Developer usually use the Matrix Multiplication algorithm for this operation.\n\nHow does matrix mutiplication work? Let A represent a matrix with $m$ rows and $p$ columns. Similarly, let B represent a matrix with $p$ rows and $n$ columns. Multiply A by B to produce a maxtrix C, with $m$ rows and $n$ columns. Each cij entry in C is obtained by mutiplying all entries in A's ith row by corresponding entries in B's jth column, then adding the results. Figure 3 illustrates these operations.\n\n![Figure 3. Each of A's rows if mutiplied (and andded with each of B's columns to produce an entry in C)](003.jpg)\n\n> Left-matrix columns must equal right-matrix rows\n> Matrix multiplcation requries that the number of columns (p) in the left matrix (A) equal the number of rows (p) in the right matrix (B). Otherwise, this algorithm won't work.\n\nThe following pseudocode expresses Matrix Multiplication in a 2-row-by-2-column and a 2-row-by-1-column table context. (Recall that I introduced pseudocode in Part 1.)\n\n```\n// ==      ==   == ==   ==                     ==\n// | 10  30 |   | 5 |   | 10 x 5 + 30 x 7 (260) |\n// |        | X |   | = |                       | \n// | 20  40 |   | 7 |   | 20 x 5 + 40 * 7 (380) | \n// ==      ==   == ==   ==                     ==\n\nDECLARE INTEGER a[][] = [ 10, 30 ] [ 20, 40 ]\nDECLARE INTEGER b[][] =  [ 5, 7 ]\nDECLARE INTEGER m = 2 // Number of rows in left matrix (a)\nDECLARE INTEGER p = 2 // Number of columns in left matrix (a)\n                      // Number of rows in right matrix (b)\nDECLARE INTEGER n = 1 // Number of columns in right matrix (b)\nDECLARE INTEGER c[m][n] // c holds 2 rows by 1 columns\n                        // All elements initialize to 0\nFOR i = 0 TO m - 1\n   FOR j = 0 TO n - 1\n      FOR k = 0 TO p - 1\n         c[i][j] = c[i][j] + a[i][k] * b[k][j]\n      NEXT k\n   NEXT j\nNEXT i\nEND\n```\n\nBecause of the three FOR loops, Matrix Multiplication has a time complexity of $O(n^3)$, which is pronounced \"Big Oh of $n$ cubed\". Matrix Multiplication offers cubic performance, which gets expensive time-wise when large matrixes are multiplied. It offers a space complexity of $O(nm)$, which is pronounced \"Big Oh of $n * m$\", for storing an additional matrix of $n$ rows by $m$ columns. This becomes $O(n^2)$ for square matrixes.\n\nI've created a MatMult Java application that lets you experiment with Matrix Multiplication. Listing 1 presents this application's source code.\n\n### Listing 1. A Java application of experimenting with Matrix Multiplication\n```java\npublic final class MatMult\n{\n   public static void main(String[] args)\n   {\n      int[][] a = {{ 10, 30 }, { 20, 40 }};\n      int[][] b = {{ 5 }, { 7 }};\n      dump(a);\n      System.out.println();\n      dump(b);\n      System.out.println();\n      int[][] c = multiply(a, b);\n      dump(c);\n   }\n\n   private static void dump(int[][] x)\n   {\n      if (x == null)\n      {\n         System.err.println(\"array is null\");\n         return;\n      }\n\n      // Dump the matrix's element values to the standard output in a tabular\n      // order.\n\n      for (int i = 0; i < x.length; i++)\n      {\n         for (int j = 0; j < x[0].length; j++)\n            System.out.print(x[i][j] + \" \");\n         System.out.println();\n      }\n   }\n\n   private static int[][] multiply(int[][] a, int[][] b)\n   {\n      // ====================================================================\n      // 1. a.length contains a's row count\n      //\n      // 2. a[0].length (or any other a[x].length for a valid x) contains a's\n      //    column count\n      //\n      // 3. b.length contains b's row count\n      //\n      // 4. b[0].length (or any other b[x].length for a valid x) contains b's\n      //    column count\n      // ====================================================================\n\n      // If a's column count != b's row count, bail out\n\n      if (a[0].length != b.length)\n      {\n         System.err.println(\"a's column count != b's row count\");\n         return null;\n      }\n\n      // Allocate result matrix with a size equal to a's row count times b's\n      // column count\n\n      int[][] result = new int[a.length][];\n      for (int i = 0; i < result.length; i++)\n         result[i] = new int[b[0].length];\n\n      // Perform the multiplication and addition\n\n      for (int i = 0; i < a.length; i++)\n         for (int j = 0; j < b[0].length; j++)\n            for (int k = 0; k < a[0].length; k++) // or k < b.length\n               result[i][j] += a[i][k] * b[k][j];\n\n      // Return the result matrix\n\n      return result;\n   }\n}\n```\n\nMatMult declares a pair of matrixes and dumps their values to standard output. It then multiplies both matrixes and dumps the result matrix to standard output.\n\nCompile Listing 1 as follows:\n```bash\njavac MatMult.java\n```\n\nRun the resulting application as follows:\n```bash\njava MatMult\n```\n\nYou should observe the following output:\n```\n10 30 \n20 40 \n\n5 \n7 \n\n260 \n380\n```\n\n## Example of matrix multiplication\nLet's explore a problem that is best solved by matrix multiplication. In this scenario, a fruit grower in Florida loads a couple of emitrailers with 1,250 boxes of oranges, 400 boxes of peaches, and 250 boxes of grapefruit. Figure 4 shows a chart of the market price per box for each kind of fruit, in four different cities.\n\n![Figure 4. Market price for oranges, peaches, and grapefurit in four different cities](004.jpg)\n\nOur problem is to determine where the fruit should be shipped and sold for maximum gross income. To solve that problem, we first reconstruct the chart from Figure 4 as a four-row by three-column price matrix. From this, we can construct a tree-row by one-column quntity matrix, which appears below:\n```\n==    ==\n| 1250 |\n|      |\n|  400 |\n|      |\n|  250 |\n==    ==\n```\n\nWith both matrixes on hand, we simply multiply the price matrix by the quantity matrix to produce a gross income matrix:\n```\n==                  ==              ==        ==\n| 10.00  8.00  12.00 |   ==    ==   | 18700.00 | New York\n|                    |   | 1250 |   |          |\n| 11.00  8.50  11.55 |   |      |   | 20037.50 | Los Angeles\n|                    | X |  400 | = |          |\n|  8.75  6.90  10.00 |   |      |   | 16197.50 | Miami \n|                    |   |  250 |   |          |\n| 10.50  8.25  11.75 |   ==    ==   | 19362.50 | Chicago\n==                  ==              ==        ==\n```\n\nSending both semitrailers to Los Angeles will produce the highest gross income. But when distance aand fuel costs are considered, perhaps New Yourk is a better bet for yielding the highest income.\n\n## Ragged arrays\nHaving learned about two-dimensional arrays, you might now wonder whether it's possible to assign one-dimensional column arrays with different lengths to elements of a row array. The answer is yes. Consider these examples:\n```java\ndouble[][] temperatures1 = { { 20.5, 30.6, 28.3 }, { -38.7, -18.3 } };\ndouble[][] temperatures2 = new double[2][];\ndouble[][] temperatures3 = new double[][] { { 20.5, 30.6, 28.3 }, { -38.7, -18.3 } };\n```\n\nThe first and third examples crate a two-dimensional array where the first row contains three columns and the second row contains two columns. The second example creates an array with two rows and an unspecified number of columns.\n\nAfter creating temperature2's row array, its elements must be populated with references to new column arrays. The following example demonstrates, assigning 3 columns to the first rwo and 2 columns to the second row:\n```java\ntemperatures2[0] = new double[3];\ntemperatures2[1] = new double[2];\n```\n\nThe resulting two-dimensional array is known as a ragged array. Here is a second example:\n```java\nint[][] x = new int[5][];\nx[0] = new int[3];\nx[1] = new int[2];\nx[2] = new int[3];\nx[3] = new int[5];\nx[4] = new int[1];\n```\n\nFFigure 5 presents a conceptual view of this second ragged array.\n\n![Figure 5. A ragged array specifies row with varying numbers of column elements](005.jpg)\n\nRagged arrays are useful data structures because of their memory-saving capabiliy. For example, consider a spreadsheet with the potential of 100,000 rows by 20,000 columns. If we attempt to use a matrix to hold the spreadsheet, we require a great deal of memory. But suppose most of the spreadsheet's cells contain defualt values, such as 0 for numeric cells and null for nonnumeric cells. If we use a ragged array instead of a matrix, we store only those cells that contain nonnumeric data. (Of course, we need some kind of mapping machinism that mpas spreadsheet (row, column) coordinates to ragged array (row, colum) coordinates.)\n\n> Using ragged arrays for big data\n> Ragged arrays come in handy when managing Big Data, such as the vast amounts of data generated by the Internet of Things.\n\n## Why arrays are objects\nAccording to the first sentence of Chatper 10 in the Java Language Specification arrays are objects in Java. Under the hood, each array is an instance of a hidden class that inherits java.lang.Object's 11 methods. The array instance override Object's `protected Object clone() throws CloneNotSupprotedException` method, allowing the array to be shallowly cloned. The hidden class additionally provides a `.length` field.\n\nListing 2's ArrayIsObject source code demonstrates the associatation between arrays and objects.\n\n### Listing 2. ArrayIsObject\n```java\npublic final class ArrayIsObject\n{\n   public static void main(String[] args)\n   {\n      double[] a = { 100.5, 200.5, 300.5 };\n      double[] b = { 100.5, 200.5, 300.5 };\n      double[] c = b;\n      System.out.println(\"a's class is \" + a.getClass());\n      System.out.println(\"a and b are \" + ((a.equals(b)) ? \"\" : \"not \") +\n                         \"equal \");\n      System.out.println(\"b and c are \" + ((b.equals(c)) ? \"\" : \"not \") +\n                         \"equal \");\n      double[] d = (double[]) c.clone();\n      System.out.println(\"c and d are \" + ((c.equals(d)) ? \"\" : \"not \") +\n                         \"equal \");\n      for (int i = 0; i < d.length; i++)\n         System.out.println(d[i]);\n   }\n}\n```\n\nArrayIsObeject creates a referenced and b referenced double precision floating-point arrays with the same contents and lengths. For the a referenced array, a.getClass() returns class [D, where [D is the name of the array's hidden class.\n\nDespite the two arrays having the same contents, a.equals(b) returns false bacause equals() compares references (not contents), and a and b contain different references. b's reference is assigned to c, and b.equals(c) returns true because b and c reference the same array. c.clone() creates a shallow clone of c, and a reference to this new array is assigned to d.\n\nTo prove that the d-referenced array contains the same contents as the c-referenced array, the for loop iterates over all elements and prints their contents to the standard output. The loop reads the contents of d's read-only .length field to determine over how many elements to iterate.\n\n> Tip: Don't specify array length in source code\n> In source code, specify .length (as in d.length) instead of an array's actual length. This eliminates the risk of introducing length-related bugs into your code, should you later change the array's length ini its creation code.\n\nCompile Listing 2 as follows:\n```bash\njavac ArrayIsObject.java\n```\n\nRun the resulting application as follows:\n```bash\njava ArrayIsObject\n```\n\nYou should observe the following output:\n```\na's class is class [D\na and b are not equal \nb and c are equal \nc and d are not equal \n100.5\n200.5\n300.5\n```","slug":"JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm","published":1,"updated":"2020-04-19T06:40:26.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mcm00cem33p1ipz0x4f","content":"<p>Data structures and algorithm in Java, Part 2 instroduced a variety of techniques for searching and sorting one-dimensional arrays, which are the simplest arrays. In this tutorial you’ll explore multidimensional arrays. I’ll show you the three ways to create multidimensional arrays, then you’ll learn how to use the Matrix Multiplication algorithm to multiply elemtns in a two-dimensional array. I’ll also introduce ragged arrays and you’ll learn why they’re popular for big data applications. Finally, we’ll consider the question of whether an array is or is not a Java object.</p>\n<p>This article sets you up for Part 4, which introduces searching and sorting with singly-linked lists.</p>\n<h2 id=\"Mutidimentsional-arrays\"><a href=\"#Mutidimentsional-arrays\" class=\"headerlink\" title=\"Mutidimentsional arrays\"></a>Mutidimentsional arrays</h2><p>A multidimensional array associates each element in the array with multiple indexes. The most commonly used multidimensional array is the two-dimensional array, also known as a table or matrix. A two-dimensional array associates each of its elements with two indexes.</p>\n<p>We can conceptualize a two-dimensional array as a rectanglar grid of elements divided into rows and colums. We use the (row, column) natation to identify an element, as shown in Figure 1.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. A conceptual view of a two-dimensional array reveals a grid of elements\"></p>\n<p>Because two-dimensional arrays are so commonly used, I’ll focus on them. What you learn about two-dimensional arrays can be generalized to higher-dimensional ones.</p>\n<h2 id=\"Creating-two-dimensional-arrays\"><a href=\"#Creating-two-dimensional-arrays\" class=\"headerlink\" title=\"Creating two-dimensional arrays\"></a>Creating two-dimensional arrays</h2><p>There are three techniques for creating a two-dimensional array in Java:</p>\n<ul>\n<li>Using an initializer</li>\n<li>Using the keyword new</li>\n<li>Using the keyword new with an initializer</li>\n</ul>\n<h3 id=\"Using-an-initializer-to-create-a-two-dimensional-array\"><a href=\"#Using-an-initializer-to-create-a-two-dimensional-array\" class=\"headerlink\" title=\"Using an initializer to create a two-dimensional array\"></a>Using an initializer to create a two-dimensional array</h3><p>The initializer-only approach to creating a two-dimensional array has the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&#123;&apos; [rowInitializer (&apos;,&apos; rowInitializer)*] &apos;&#125;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>rowinitializer has the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&#123;&apos; [expr (&apos;,&apos; expr)*] &apos;&#125;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>This syntax states that a two-dimensional array is an optional, comma-separated list of row initializer appearing between open - and close - brace characters. Futhermore, each row initializer is an optional, comma-separated list of expressions appearing between oopen - and close - brace characters. Like one-dimensional ararys, all expressions must evaluate to compatible types.</p>\n<p>Here’s an example of a two-dimensional array:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &#123; <span class=\"number\">20.5</span>, <span class=\"number\">30.6</span>, <span class=\"number\">28.3</span> &#125;, &#123; -<span class=\"number\">38.7</span>, -<span class=\"number\">18.3</span>, -<span class=\"number\">16.2</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>This example creates a table with rows and three columns. Figure 2 presents a concetual (概念上的) view of this table along with a memory view that shows how Java lays out this (and every) table in memory.</p>\n<p><img src=\"002.jpg\" alt=\"Figure 2. Conceptual and memory views of a two-dimensional array\"></p>\n<p>Figure 2 reveals that Java represents a two-dimensional array as a one-dimensional row array whose elements reference one-dimensional column arrays. The row index identifies the column array; the column index identifies the data item.</p>\n<h3 id=\"Keyword-new-only-creation\"><a href=\"#Keyword-new-only-creation\" class=\"headerlink\" title=\"Keyword new-only creation\"></a>Keyword new-only creation</h3><p>The keyword new allocates memory for a two-dimensional array and returns its reference. This approach has the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;new&apos; type &apos;[&apos; int_expr1 &apos;]&apos; &apos;[&apos;int_expr2 &apos;]&apos;</span><br></pre></td></tr></table></figure></p>\n<p>The syntax states that a two-dimensional array is a region of (positive) int_expr1 row elements and (positive) int_expr2 column elements that all share the same type. Furthermore, all elements are zeroed. Here’s an example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">2</span>][<span class=\"number\">3</span>] <span class=\"comment\">// Create a two-row-by-three-column table.</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Keyword-new-and-initializer-creation\"><a href=\"#Keyword-new-and-initializer-creation\" class=\"headerlink\" title=\"Keyword new and initializer creation\"></a>Keyword new and initializer creation</h3><p>The keyword new with an initializer approach has the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;new&apos; type &apos;[&apos; &apos;]&apos; [&apos; &apos;]&apos; &apos;&#123;&apos; [rowInitializer (&apos;,&apos; rowInitializer)*] &apos;&#125;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Where rowInitializer has the following syntax:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'&#123;'</span> [expr (<span class=\"string\">','</span> expr)*] <span class=\"string\">'&#125;'</span></span><br></pre></td></tr></table></figure></p>\n<p>The syntax blends the previous two examples. Because the number of elements can be determined from the comma-separated lists of expressions, you don’t provide an int_expr between either pair of square brackets. Here is an exmaple:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">double</span> [][] &#123; &#123; <span class=\"number\">20.5</span>, <span class=\"number\">30.6</span>, <span class=\"number\">28.3</span> &#125;, &#123; -<span class=\"number\">38.7</span>, -<span class=\"number\">18.3</span>, -<span class=\"number\">16.2</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Two-dimensinal-arrays-and-array-variable\"><a href=\"#Two-dimensinal-arrays-and-array-variable\" class=\"headerlink\" title=\"Two-dimensinal arrays and array variable\"></a>Two-dimensinal arrays and array variable</h2><p>By itself, a newly-created two-dimensional array is useless. Its reference must be assigned to an array variable of a compatible type, either directly or via a method call. The follwoing syntaxes show how you would declare this variable:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type var_name &apos;[&apos; &apos;]&apos; &apos;[&apos; &apos;]&apos;</span><br><span class=\"line\">type &apos;[&apos; &apos;]&apos; &apos;[&apos; &apos;]&apos; var_name</span><br></pre></td></tr></table></figure></p>\n<p>Each syntax declares an array variable taht stores a reference to a two-dimensional array. It’s perferred to palce the square brackets after type. Consider the follwoing examples:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double[][] temperatures1 = &#123; &#123; 20.5, 30.6, 28.3 &#125;, &#123; -38.7, -18.3, -16.2 &#125; &#125;;</span><br><span class=\"line\">double[][] temperatures2 = new double[2][3];</span><br><span class=\"line\">double[][] temperatures3 = new double[][] &#123; &#123; 20.5, 30.6, 28.3 &#125;, &#123; -38.7, -18.3, -16.2 &#125; &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>Like one-dimensional array variables, a two-dimensional array variable is associated with a <code>.length</code>  property, which reutrns the length of the row array. For example, <code>temperatures1.length</code> returns 2. Each row element is also an array variable with a <code>.length</code> property, which returns the number of columns for the column array assigned to the row element. For example, <code>temperatures1[0].length</code> returns 3.</p>\n<p>Given an array variable, you can access any element in a two-dimensional array by specifying an expression that agress with the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_var &apos;[&apos; row_index &apos;]&apos; &apos;[&apos; col_index &apos;]&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Both indexes are positive ints that range from 0 to one less than the value returned from the respective <code>.length</code> properties. Consider the next two examples:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> temp = temperatures1[<span class=\"number\">0</span>][<span class=\"number\">1</span>]; <span class=\"comment\">// Get value.</span></span><br><span class=\"line\">temperatures1[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">75.0</span>;        <span class=\"comment\">// Set value.</span></span><br></pre></td></tr></table></figure></p>\n<p>The first example returns the value in the second column of the first row (30.6). The second example  repalces this value with 75.0.</p>\n<p>If you spcify a negative idnex or an index that is greater than or equal to the value returned by the array variable’s <code>.length</code> property, Java creates and throws an ArrayIndexOutOfBoundsException object.</p>\n<h2 id=\"Multiplying-two-dimensional-arrays\"><a href=\"#Multiplying-two-dimensional-arrays\" class=\"headerlink\" title=\"Multiplying two-dimensional arrays\"></a>Multiplying two-dimensional arrays</h2><p>Multiplying one matrix by another matrix is a comon operation in fields ranging from computer graphics, to economics, to the transportation industry. Developer usually use the Matrix Multiplication algorithm for this operation.</p>\n<p>How does matrix mutiplication work? Let A represent a matrix with $m$ rows and $p$ columns. Similarly, let B represent a matrix with $p$ rows and $n$ columns. Multiply A by B to produce a maxtrix C, with $m$ rows and $n$ columns. Each cij entry in C is obtained by mutiplying all entries in A’s ith row by corresponding entries in B’s jth column, then adding the results. Figure 3 illustrates these operations.</p>\n<p><img src=\"003.jpg\" alt=\"Figure 3. Each of A&#39;s rows if mutiplied (and andded with each of B&#39;s columns to produce an entry in C)\"></p>\n<blockquote>\n<p>Left-matrix columns must equal right-matrix rows<br>Matrix multiplcation requries that the number of columns (p) in the left matrix (A) equal the number of rows (p) in the right matrix (B). Otherwise, this algorithm won’t work.</p>\n</blockquote>\n<p>The following pseudocode expresses Matrix Multiplication in a 2-row-by-2-column and a 2-row-by-1-column table context. (Recall that I introduced pseudocode in Part 1.)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ==      ==   == ==   ==                     ==</span><br><span class=\"line\">// | 10  30 |   | 5 |   | 10 x 5 + 30 x 7 (260) |</span><br><span class=\"line\">// |        | X |   | = |                       | </span><br><span class=\"line\">// | 20  40 |   | 7 |   | 20 x 5 + 40 * 7 (380) | </span><br><span class=\"line\">// ==      ==   == ==   ==                     ==</span><br><span class=\"line\"></span><br><span class=\"line\">DECLARE INTEGER a[][] = [ 10, 30 ] [ 20, 40 ]</span><br><span class=\"line\">DECLARE INTEGER b[][] =  [ 5, 7 ]</span><br><span class=\"line\">DECLARE INTEGER m = 2 // Number of rows in left matrix (a)</span><br><span class=\"line\">DECLARE INTEGER p = 2 // Number of columns in left matrix (a)</span><br><span class=\"line\">                      // Number of rows in right matrix (b)</span><br><span class=\"line\">DECLARE INTEGER n = 1 // Number of columns in right matrix (b)</span><br><span class=\"line\">DECLARE INTEGER c[m][n] // c holds 2 rows by 1 columns</span><br><span class=\"line\">                        // All elements initialize to 0</span><br><span class=\"line\">FOR i = 0 TO m - 1</span><br><span class=\"line\">   FOR j = 0 TO n - 1</span><br><span class=\"line\">      FOR k = 0 TO p - 1</span><br><span class=\"line\">         c[i][j] = c[i][j] + a[i][k] * b[k][j]</span><br><span class=\"line\">      NEXT k</span><br><span class=\"line\">   NEXT j</span><br><span class=\"line\">NEXT i</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p>Because of the three FOR loops, Matrix Multiplication has a time complexity of $O(n^3)$, which is pronounced “Big Oh of $n$ cubed”. Matrix Multiplication offers cubic performance, which gets expensive time-wise when large matrixes are multiplied. It offers a space complexity of $O(nm)$, which is pronounced “Big Oh of $n * m$”, for storing an additional matrix of $n$ rows by $m$ columns. This becomes $O(n^2)$ for square matrixes.</p>\n<p>I’ve created a MatMult Java application that lets you experiment with Matrix Multiplication. Listing 1 presents this application’s source code.</p>\n<h3 id=\"Listing-1-A-Java-application-of-experimenting-with-Matrix-Multiplication\"><a href=\"#Listing-1-A-Java-application-of-experimenting-with-Matrix-Multiplication\" class=\"headerlink\" title=\"Listing 1. A Java application of experimenting with Matrix Multiplication\"></a>Listing 1. A Java application of experimenting with Matrix Multiplication</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatMult</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] a = &#123;&#123; <span class=\"number\">10</span>, <span class=\"number\">30</span> &#125;, &#123; <span class=\"number\">20</span>, <span class=\"number\">40</span> &#125;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] b = &#123;&#123; <span class=\"number\">5</span> &#125;, &#123; <span class=\"number\">7</span> &#125;&#125;;</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      dump(b);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] c = multiply(a, b);</span><br><span class=\"line\">      dump(c);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"array is null\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump the matrix's element values to the standard output in a tabular</span></span><br><span class=\"line\">      <span class=\"comment\">// order.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; x[<span class=\"number\">0</span>].length; j++)</span><br><span class=\"line\">            System.out.print(x[i][j] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">         System.out.println();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[][] multiply(<span class=\"keyword\">int</span>[][] a, <span class=\"keyword\">int</span>[][] b)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ====================================================================</span></span><br><span class=\"line\">      <span class=\"comment\">// 1. a.length contains a's row count</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// 2. a[0].length (or any other a[x].length for a valid x) contains a's</span></span><br><span class=\"line\">      <span class=\"comment\">//    column count</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// 3. b.length contains b's row count</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// 4. b[0].length (or any other b[x].length for a valid x) contains b's</span></span><br><span class=\"line\">      <span class=\"comment\">//    column count</span></span><br><span class=\"line\">      <span class=\"comment\">// ====================================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// If a's column count != b's row count, bail out</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>].length != b.length)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"a's column count != b's row count\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Allocate result matrix with a size equal to a's row count times b's</span></span><br><span class=\"line\">      <span class=\"comment\">// column count</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length][];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.length; i++)</span><br><span class=\"line\">         result[i] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[b[<span class=\"number\">0</span>].length];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Perform the multiplication and addition</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; b[<span class=\"number\">0</span>].length; j++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; a[<span class=\"number\">0</span>].length; k++) <span class=\"comment\">// or k &lt; b.length</span></span><br><span class=\"line\">               result[i][j] += a[i][k] * b[k][j];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Return the result matrix</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MatMult declares a pair of matrixes and dumps their values to standard output. It then multiplies both matrixes and dumps the result matrix to standard output.</p>\n<p>Compile Listing 1 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac MatMult.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java MatMult</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 30 </span><br><span class=\"line\">20 40 </span><br><span class=\"line\"></span><br><span class=\"line\">5 </span><br><span class=\"line\">7 </span><br><span class=\"line\"></span><br><span class=\"line\">260 </span><br><span class=\"line\">380</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Example-of-matrix-multiplication\"><a href=\"#Example-of-matrix-multiplication\" class=\"headerlink\" title=\"Example of matrix multiplication\"></a>Example of matrix multiplication</h2><p>Let’s explore a problem that is best solved by matrix multiplication. In this scenario, a fruit grower in Florida loads a couple of emitrailers with 1,250 boxes of oranges, 400 boxes of peaches, and 250 boxes of grapefruit. Figure 4 shows a chart of the market price per box for each kind of fruit, in four different cities.</p>\n<p><img src=\"004.jpg\" alt=\"Figure 4. Market price for oranges, peaches, and grapefurit in four different cities\"></p>\n<p>Our problem is to determine where the fruit should be shipped and sold for maximum gross income. To solve that problem, we first reconstruct the chart from Figure 4 as a four-row by three-column price matrix. From this, we can construct a tree-row by one-column quntity matrix, which appears below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==    ==</span><br><span class=\"line\">| 1250 |</span><br><span class=\"line\">|      |</span><br><span class=\"line\">|  400 |</span><br><span class=\"line\">|      |</span><br><span class=\"line\">|  250 |</span><br><span class=\"line\">==    ==</span><br></pre></td></tr></table></figure></p>\n<p>With both matrixes on hand, we simply multiply the price matrix by the quantity matrix to produce a gross income matrix:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==                  ==              ==        ==</span><br><span class=\"line\">| 10.00  8.00  12.00 |   ==    ==   | 18700.00 | New York</span><br><span class=\"line\">|                    |   | 1250 |   |          |</span><br><span class=\"line\">| 11.00  8.50  11.55 |   |      |   | 20037.50 | Los Angeles</span><br><span class=\"line\">|                    | X |  400 | = |          |</span><br><span class=\"line\">|  8.75  6.90  10.00 |   |      |   | 16197.50 | Miami </span><br><span class=\"line\">|                    |   |  250 |   |          |</span><br><span class=\"line\">| 10.50  8.25  11.75 |   ==    ==   | 19362.50 | Chicago</span><br><span class=\"line\">==                  ==              ==        ==</span><br></pre></td></tr></table></figure></p>\n<p>Sending both semitrailers to Los Angeles will produce the highest gross income. But when distance aand fuel costs are considered, perhaps New Yourk is a better bet for yielding the highest income.</p>\n<h2 id=\"Ragged-arrays\"><a href=\"#Ragged-arrays\" class=\"headerlink\" title=\"Ragged arrays\"></a>Ragged arrays</h2><p>Having learned about two-dimensional arrays, you might now wonder whether it’s possible to assign one-dimensional column arrays with different lengths to elements of a row array. The answer is yes. Consider these examples:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span>[][] temperatures1 = &#123; &#123; <span class=\"number\">20.5</span>, <span class=\"number\">30.6</span>, <span class=\"number\">28.3</span> &#125;, &#123; -<span class=\"number\">38.7</span>, -<span class=\"number\">18.3</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">double</span>[][] temperatures2 = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">2</span>][];</span><br><span class=\"line\"><span class=\"keyword\">double</span>[][] temperatures3 = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[][] &#123; &#123; <span class=\"number\">20.5</span>, <span class=\"number\">30.6</span>, <span class=\"number\">28.3</span> &#125;, &#123; -<span class=\"number\">38.7</span>, -<span class=\"number\">18.3</span> &#125; &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>The first and third examples crate a two-dimensional array where the first row contains three columns and the second row contains two columns. The second example creates an array with two rows and an unspecified number of columns.</p>\n<p>After creating temperature2’s row array, its elements must be populated with references to new column arrays. The following example demonstrates, assigning 3 columns to the first rwo and 2 columns to the second row:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temperatures2[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">temperatures2[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure></p>\n<p>The resulting two-dimensional array is known as a ragged array. Here is a second example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[][] x = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\">x[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">x[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">x[<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">x[<span class=\"number\">4</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure></p>\n<p>FFigure 5 presents a conceptual view of this second ragged array.</p>\n<p><img src=\"005.jpg\" alt=\"Figure 5. A ragged array specifies row with varying numbers of column elements\"></p>\n<p>Ragged arrays are useful data structures because of their memory-saving capabiliy. For example, consider a spreadsheet with the potential of 100,000 rows by 20,000 columns. If we attempt to use a matrix to hold the spreadsheet, we require a great deal of memory. But suppose most of the spreadsheet’s cells contain defualt values, such as 0 for numeric cells and null for nonnumeric cells. If we use a ragged array instead of a matrix, we store only those cells that contain nonnumeric data. (Of course, we need some kind of mapping machinism that mpas spreadsheet (row, column) coordinates to ragged array (row, colum) coordinates.)</p>\n<blockquote>\n<p>Using ragged arrays for big data<br>Ragged arrays come in handy when managing Big Data, such as the vast amounts of data generated by the Internet of Things.</p>\n</blockquote>\n<h2 id=\"Why-arrays-are-objects\"><a href=\"#Why-arrays-are-objects\" class=\"headerlink\" title=\"Why arrays are objects\"></a>Why arrays are objects</h2><p>According to the first sentence of Chatper 10 in the Java Language Specification arrays are objects in Java. Under the hood, each array is an instance of a hidden class that inherits java.lang.Object’s 11 methods. The array instance override Object’s <code>protected Object clone() throws CloneNotSupprotedException</code> method, allowing the array to be shallowly cloned. The hidden class additionally provides a <code>.length</code> field.</p>\n<p>Listing 2’s ArrayIsObject source code demonstrates the associatation between arrays and objects.</p>\n<h3 id=\"Listing-2-ArrayIsObject\"><a href=\"#Listing-2-ArrayIsObject\" class=\"headerlink\" title=\"Listing 2. ArrayIsObject\"></a>Listing 2. ArrayIsObject</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayIsObject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">double</span>[] a = &#123; <span class=\"number\">100.5</span>, <span class=\"number\">200.5</span>, <span class=\"number\">300.5</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">double</span>[] b = &#123; <span class=\"number\">100.5</span>, <span class=\"number\">200.5</span>, <span class=\"number\">300.5</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">double</span>[] c = b;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"a's class is \"</span> + a.getClass());</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"a and b are \"</span> + ((a.equals(b)) ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"not \"</span>) +</span><br><span class=\"line\">                         <span class=\"string\">\"equal \"</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"b and c are \"</span> + ((b.equals(c)) ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"not \"</span>) +</span><br><span class=\"line\">                         <span class=\"string\">\"equal \"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">double</span>[] d = (<span class=\"keyword\">double</span>[]) c.clone();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"c and d are \"</span> + ((c.equals(d)) ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"not \"</span>) +</span><br><span class=\"line\">                         <span class=\"string\">\"equal \"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; d.length; i++)</span><br><span class=\"line\">         System.out.println(d[i]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ArrayIsObeject creates a referenced and b referenced double precision floating-point arrays with the same contents and lengths. For the a referenced array, a.getClass() returns class [D, where [D is the name of the array’s hidden class.</p>\n<p>Despite the two arrays having the same contents, a.equals(b) returns false bacause equals() compares references (not contents), and a and b contain different references. b’s reference is assigned to c, and b.equals(c) returns true because b and c reference the same array. c.clone() creates a shallow clone of c, and a reference to this new array is assigned to d.</p>\n<p>To prove that the d-referenced array contains the same contents as the c-referenced array, the for loop iterates over all elements and prints their contents to the standard output. The loop reads the contents of d’s read-only .length field to determine over how many elements to iterate.</p>\n<blockquote>\n<p>Tip: Don’t specify array length in source code<br>In source code, specify .length (as in d.length) instead of an array’s actual length. This eliminates the risk of introducing length-related bugs into your code, should you later change the array’s length ini its creation code.</p>\n</blockquote>\n<p>Compile Listing 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac ArrayIsObject.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java ArrayIsObject</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a&apos;s class is class [D</span><br><span class=\"line\">a and b are not equal </span><br><span class=\"line\">b and c are equal </span><br><span class=\"line\">c and d are not equal </span><br><span class=\"line\">100.5</span><br><span class=\"line\">200.5</span><br><span class=\"line\">300.5</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Data structures and algorithm in Java, Part 2 instroduced a variety of techniques for searching and sorting one-dimensional arrays, which are the simplest arrays. In this tutorial you’ll explore multidimensional arrays. I’ll show you the three ways to create multidimensional arrays, then you’ll learn how to use the Matrix Multiplication algorithm to multiply elemtns in a two-dimensional array. I’ll also introduce ragged arrays and you’ll learn why they’re popular for big data applications. Finally, we’ll consider the question of whether an array is or is not a Java object.</p>\n<p>This article sets you up for Part 4, which introduces searching and sorting with singly-linked lists.</p>\n<h2 id=\"Mutidimentsional-arrays\"><a href=\"#Mutidimentsional-arrays\" class=\"headerlink\" title=\"Mutidimentsional arrays\"></a>Mutidimentsional arrays</h2><p>A multidimensional array associates each element in the array with multiple indexes. The most commonly used multidimensional array is the two-dimensional array, also known as a table or matrix. A two-dimensional array associates each of its elements with two indexes.</p>\n<p>We can conceptualize a two-dimensional array as a rectanglar grid of elements divided into rows and colums. We use the (row, column) natation to identify an element, as shown in Figure 1.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. A conceptual view of a two-dimensional array reveals a grid of elements\"></p>\n<p>Because two-dimensional arrays are so commonly used, I’ll focus on them. What you learn about two-dimensional arrays can be generalized to higher-dimensional ones.</p>\n<h2 id=\"Creating-two-dimensional-arrays\"><a href=\"#Creating-two-dimensional-arrays\" class=\"headerlink\" title=\"Creating two-dimensional arrays\"></a>Creating two-dimensional arrays</h2><p>There are three techniques for creating a two-dimensional array in Java:</p>\n<ul>\n<li>Using an initializer</li>\n<li>Using the keyword new</li>\n<li>Using the keyword new with an initializer</li>\n</ul>\n<h3 id=\"Using-an-initializer-to-create-a-two-dimensional-array\"><a href=\"#Using-an-initializer-to-create-a-two-dimensional-array\" class=\"headerlink\" title=\"Using an initializer to create a two-dimensional array\"></a>Using an initializer to create a two-dimensional array</h3><p>The initializer-only approach to creating a two-dimensional array has the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&#123;&apos; [rowInitializer (&apos;,&apos; rowInitializer)*] &apos;&#125;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>rowinitializer has the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&#123;&apos; [expr (&apos;,&apos; expr)*] &apos;&#125;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>This syntax states that a two-dimensional array is an optional, comma-separated list of row initializer appearing between open - and close - brace characters. Futhermore, each row initializer is an optional, comma-separated list of expressions appearing between oopen - and close - brace characters. Like one-dimensional ararys, all expressions must evaluate to compatible types.</p>\n<p>Here’s an example of a two-dimensional array:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &#123; <span class=\"number\">20.5</span>, <span class=\"number\">30.6</span>, <span class=\"number\">28.3</span> &#125;, &#123; -<span class=\"number\">38.7</span>, -<span class=\"number\">18.3</span>, -<span class=\"number\">16.2</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>This example creates a table with rows and three columns. Figure 2 presents a concetual (概念上的) view of this table along with a memory view that shows how Java lays out this (and every) table in memory.</p>\n<p><img src=\"002.jpg\" alt=\"Figure 2. Conceptual and memory views of a two-dimensional array\"></p>\n<p>Figure 2 reveals that Java represents a two-dimensional array as a one-dimensional row array whose elements reference one-dimensional column arrays. The row index identifies the column array; the column index identifies the data item.</p>\n<h3 id=\"Keyword-new-only-creation\"><a href=\"#Keyword-new-only-creation\" class=\"headerlink\" title=\"Keyword new-only creation\"></a>Keyword new-only creation</h3><p>The keyword new allocates memory for a two-dimensional array and returns its reference. This approach has the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;new&apos; type &apos;[&apos; int_expr1 &apos;]&apos; &apos;[&apos;int_expr2 &apos;]&apos;</span><br></pre></td></tr></table></figure></p>\n<p>The syntax states that a two-dimensional array is a region of (positive) int_expr1 row elements and (positive) int_expr2 column elements that all share the same type. Furthermore, all elements are zeroed. Here’s an example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">2</span>][<span class=\"number\">3</span>] <span class=\"comment\">// Create a two-row-by-three-column table.</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Keyword-new-and-initializer-creation\"><a href=\"#Keyword-new-and-initializer-creation\" class=\"headerlink\" title=\"Keyword new and initializer creation\"></a>Keyword new and initializer creation</h3><p>The keyword new with an initializer approach has the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;new&apos; type &apos;[&apos; &apos;]&apos; [&apos; &apos;]&apos; &apos;&#123;&apos; [rowInitializer (&apos;,&apos; rowInitializer)*] &apos;&#125;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Where rowInitializer has the following syntax:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'&#123;'</span> [expr (<span class=\"string\">','</span> expr)*] <span class=\"string\">'&#125;'</span></span><br></pre></td></tr></table></figure></p>\n<p>The syntax blends the previous two examples. Because the number of elements can be determined from the comma-separated lists of expressions, you don’t provide an int_expr between either pair of square brackets. Here is an exmaple:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">double</span> [][] &#123; &#123; <span class=\"number\">20.5</span>, <span class=\"number\">30.6</span>, <span class=\"number\">28.3</span> &#125;, &#123; -<span class=\"number\">38.7</span>, -<span class=\"number\">18.3</span>, -<span class=\"number\">16.2</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Two-dimensinal-arrays-and-array-variable\"><a href=\"#Two-dimensinal-arrays-and-array-variable\" class=\"headerlink\" title=\"Two-dimensinal arrays and array variable\"></a>Two-dimensinal arrays and array variable</h2><p>By itself, a newly-created two-dimensional array is useless. Its reference must be assigned to an array variable of a compatible type, either directly or via a method call. The follwoing syntaxes show how you would declare this variable:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type var_name &apos;[&apos; &apos;]&apos; &apos;[&apos; &apos;]&apos;</span><br><span class=\"line\">type &apos;[&apos; &apos;]&apos; &apos;[&apos; &apos;]&apos; var_name</span><br></pre></td></tr></table></figure></p>\n<p>Each syntax declares an array variable taht stores a reference to a two-dimensional array. It’s perferred to palce the square brackets after type. Consider the follwoing examples:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double[][] temperatures1 = &#123; &#123; 20.5, 30.6, 28.3 &#125;, &#123; -38.7, -18.3, -16.2 &#125; &#125;;</span><br><span class=\"line\">double[][] temperatures2 = new double[2][3];</span><br><span class=\"line\">double[][] temperatures3 = new double[][] &#123; &#123; 20.5, 30.6, 28.3 &#125;, &#123; -38.7, -18.3, -16.2 &#125; &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>Like one-dimensional array variables, a two-dimensional array variable is associated with a <code>.length</code>  property, which reutrns the length of the row array. For example, <code>temperatures1.length</code> returns 2. Each row element is also an array variable with a <code>.length</code> property, which returns the number of columns for the column array assigned to the row element. For example, <code>temperatures1[0].length</code> returns 3.</p>\n<p>Given an array variable, you can access any element in a two-dimensional array by specifying an expression that agress with the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_var &apos;[&apos; row_index &apos;]&apos; &apos;[&apos; col_index &apos;]&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Both indexes are positive ints that range from 0 to one less than the value returned from the respective <code>.length</code> properties. Consider the next two examples:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> temp = temperatures1[<span class=\"number\">0</span>][<span class=\"number\">1</span>]; <span class=\"comment\">// Get value.</span></span><br><span class=\"line\">temperatures1[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">75.0</span>;        <span class=\"comment\">// Set value.</span></span><br></pre></td></tr></table></figure></p>\n<p>The first example returns the value in the second column of the first row (30.6). The second example  repalces this value with 75.0.</p>\n<p>If you spcify a negative idnex or an index that is greater than or equal to the value returned by the array variable’s <code>.length</code> property, Java creates and throws an ArrayIndexOutOfBoundsException object.</p>\n<h2 id=\"Multiplying-two-dimensional-arrays\"><a href=\"#Multiplying-two-dimensional-arrays\" class=\"headerlink\" title=\"Multiplying two-dimensional arrays\"></a>Multiplying two-dimensional arrays</h2><p>Multiplying one matrix by another matrix is a comon operation in fields ranging from computer graphics, to economics, to the transportation industry. Developer usually use the Matrix Multiplication algorithm for this operation.</p>\n<p>How does matrix mutiplication work? Let A represent a matrix with $m$ rows and $p$ columns. Similarly, let B represent a matrix with $p$ rows and $n$ columns. Multiply A by B to produce a maxtrix C, with $m$ rows and $n$ columns. Each cij entry in C is obtained by mutiplying all entries in A’s ith row by corresponding entries in B’s jth column, then adding the results. Figure 3 illustrates these operations.</p>\n<p><img src=\"003.jpg\" alt=\"Figure 3. Each of A&#39;s rows if mutiplied (and andded with each of B&#39;s columns to produce an entry in C)\"></p>\n<blockquote>\n<p>Left-matrix columns must equal right-matrix rows<br>Matrix multiplcation requries that the number of columns (p) in the left matrix (A) equal the number of rows (p) in the right matrix (B). Otherwise, this algorithm won’t work.</p>\n</blockquote>\n<p>The following pseudocode expresses Matrix Multiplication in a 2-row-by-2-column and a 2-row-by-1-column table context. (Recall that I introduced pseudocode in Part 1.)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ==      ==   == ==   ==                     ==</span><br><span class=\"line\">// | 10  30 |   | 5 |   | 10 x 5 + 30 x 7 (260) |</span><br><span class=\"line\">// |        | X |   | = |                       | </span><br><span class=\"line\">// | 20  40 |   | 7 |   | 20 x 5 + 40 * 7 (380) | </span><br><span class=\"line\">// ==      ==   == ==   ==                     ==</span><br><span class=\"line\"></span><br><span class=\"line\">DECLARE INTEGER a[][] = [ 10, 30 ] [ 20, 40 ]</span><br><span class=\"line\">DECLARE INTEGER b[][] =  [ 5, 7 ]</span><br><span class=\"line\">DECLARE INTEGER m = 2 // Number of rows in left matrix (a)</span><br><span class=\"line\">DECLARE INTEGER p = 2 // Number of columns in left matrix (a)</span><br><span class=\"line\">                      // Number of rows in right matrix (b)</span><br><span class=\"line\">DECLARE INTEGER n = 1 // Number of columns in right matrix (b)</span><br><span class=\"line\">DECLARE INTEGER c[m][n] // c holds 2 rows by 1 columns</span><br><span class=\"line\">                        // All elements initialize to 0</span><br><span class=\"line\">FOR i = 0 TO m - 1</span><br><span class=\"line\">   FOR j = 0 TO n - 1</span><br><span class=\"line\">      FOR k = 0 TO p - 1</span><br><span class=\"line\">         c[i][j] = c[i][j] + a[i][k] * b[k][j]</span><br><span class=\"line\">      NEXT k</span><br><span class=\"line\">   NEXT j</span><br><span class=\"line\">NEXT i</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p>Because of the three FOR loops, Matrix Multiplication has a time complexity of $O(n^3)$, which is pronounced “Big Oh of $n$ cubed”. Matrix Multiplication offers cubic performance, which gets expensive time-wise when large matrixes are multiplied. It offers a space complexity of $O(nm)$, which is pronounced “Big Oh of $n * m$”, for storing an additional matrix of $n$ rows by $m$ columns. This becomes $O(n^2)$ for square matrixes.</p>\n<p>I’ve created a MatMult Java application that lets you experiment with Matrix Multiplication. Listing 1 presents this application’s source code.</p>\n<h3 id=\"Listing-1-A-Java-application-of-experimenting-with-Matrix-Multiplication\"><a href=\"#Listing-1-A-Java-application-of-experimenting-with-Matrix-Multiplication\" class=\"headerlink\" title=\"Listing 1. A Java application of experimenting with Matrix Multiplication\"></a>Listing 1. A Java application of experimenting with Matrix Multiplication</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatMult</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] a = &#123;&#123; <span class=\"number\">10</span>, <span class=\"number\">30</span> &#125;, &#123; <span class=\"number\">20</span>, <span class=\"number\">40</span> &#125;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] b = &#123;&#123; <span class=\"number\">5</span> &#125;, &#123; <span class=\"number\">7</span> &#125;&#125;;</span><br><span class=\"line\">      dump(a);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      dump(b);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] c = multiply(a, b);</span><br><span class=\"line\">      dump(c);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"array is null\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Dump the matrix's element values to the standard output in a tabular</span></span><br><span class=\"line\">      <span class=\"comment\">// order.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; x[<span class=\"number\">0</span>].length; j++)</span><br><span class=\"line\">            System.out.print(x[i][j] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">         System.out.println();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[][] multiply(<span class=\"keyword\">int</span>[][] a, <span class=\"keyword\">int</span>[][] b)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ====================================================================</span></span><br><span class=\"line\">      <span class=\"comment\">// 1. a.length contains a's row count</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// 2. a[0].length (or any other a[x].length for a valid x) contains a's</span></span><br><span class=\"line\">      <span class=\"comment\">//    column count</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// 3. b.length contains b's row count</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// 4. b[0].length (or any other b[x].length for a valid x) contains b's</span></span><br><span class=\"line\">      <span class=\"comment\">//    column count</span></span><br><span class=\"line\">      <span class=\"comment\">// ====================================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// If a's column count != b's row count, bail out</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>].length != b.length)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"a's column count != b's row count\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Allocate result matrix with a size equal to a's row count times b's</span></span><br><span class=\"line\">      <span class=\"comment\">// column count</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length][];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.length; i++)</span><br><span class=\"line\">         result[i] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[b[<span class=\"number\">0</span>].length];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Perform the multiplication and addition</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; b[<span class=\"number\">0</span>].length; j++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; a[<span class=\"number\">0</span>].length; k++) <span class=\"comment\">// or k &lt; b.length</span></span><br><span class=\"line\">               result[i][j] += a[i][k] * b[k][j];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Return the result matrix</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MatMult declares a pair of matrixes and dumps their values to standard output. It then multiplies both matrixes and dumps the result matrix to standard output.</p>\n<p>Compile Listing 1 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac MatMult.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java MatMult</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 30 </span><br><span class=\"line\">20 40 </span><br><span class=\"line\"></span><br><span class=\"line\">5 </span><br><span class=\"line\">7 </span><br><span class=\"line\"></span><br><span class=\"line\">260 </span><br><span class=\"line\">380</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Example-of-matrix-multiplication\"><a href=\"#Example-of-matrix-multiplication\" class=\"headerlink\" title=\"Example of matrix multiplication\"></a>Example of matrix multiplication</h2><p>Let’s explore a problem that is best solved by matrix multiplication. In this scenario, a fruit grower in Florida loads a couple of emitrailers with 1,250 boxes of oranges, 400 boxes of peaches, and 250 boxes of grapefruit. Figure 4 shows a chart of the market price per box for each kind of fruit, in four different cities.</p>\n<p><img src=\"004.jpg\" alt=\"Figure 4. Market price for oranges, peaches, and grapefurit in four different cities\"></p>\n<p>Our problem is to determine where the fruit should be shipped and sold for maximum gross income. To solve that problem, we first reconstruct the chart from Figure 4 as a four-row by three-column price matrix. From this, we can construct a tree-row by one-column quntity matrix, which appears below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==    ==</span><br><span class=\"line\">| 1250 |</span><br><span class=\"line\">|      |</span><br><span class=\"line\">|  400 |</span><br><span class=\"line\">|      |</span><br><span class=\"line\">|  250 |</span><br><span class=\"line\">==    ==</span><br></pre></td></tr></table></figure></p>\n<p>With both matrixes on hand, we simply multiply the price matrix by the quantity matrix to produce a gross income matrix:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==                  ==              ==        ==</span><br><span class=\"line\">| 10.00  8.00  12.00 |   ==    ==   | 18700.00 | New York</span><br><span class=\"line\">|                    |   | 1250 |   |          |</span><br><span class=\"line\">| 11.00  8.50  11.55 |   |      |   | 20037.50 | Los Angeles</span><br><span class=\"line\">|                    | X |  400 | = |          |</span><br><span class=\"line\">|  8.75  6.90  10.00 |   |      |   | 16197.50 | Miami </span><br><span class=\"line\">|                    |   |  250 |   |          |</span><br><span class=\"line\">| 10.50  8.25  11.75 |   ==    ==   | 19362.50 | Chicago</span><br><span class=\"line\">==                  ==              ==        ==</span><br></pre></td></tr></table></figure></p>\n<p>Sending both semitrailers to Los Angeles will produce the highest gross income. But when distance aand fuel costs are considered, perhaps New Yourk is a better bet for yielding the highest income.</p>\n<h2 id=\"Ragged-arrays\"><a href=\"#Ragged-arrays\" class=\"headerlink\" title=\"Ragged arrays\"></a>Ragged arrays</h2><p>Having learned about two-dimensional arrays, you might now wonder whether it’s possible to assign one-dimensional column arrays with different lengths to elements of a row array. The answer is yes. Consider these examples:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span>[][] temperatures1 = &#123; &#123; <span class=\"number\">20.5</span>, <span class=\"number\">30.6</span>, <span class=\"number\">28.3</span> &#125;, &#123; -<span class=\"number\">38.7</span>, -<span class=\"number\">18.3</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">double</span>[][] temperatures2 = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">2</span>][];</span><br><span class=\"line\"><span class=\"keyword\">double</span>[][] temperatures3 = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[][] &#123; &#123; <span class=\"number\">20.5</span>, <span class=\"number\">30.6</span>, <span class=\"number\">28.3</span> &#125;, &#123; -<span class=\"number\">38.7</span>, -<span class=\"number\">18.3</span> &#125; &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>The first and third examples crate a two-dimensional array where the first row contains three columns and the second row contains two columns. The second example creates an array with two rows and an unspecified number of columns.</p>\n<p>After creating temperature2’s row array, its elements must be populated with references to new column arrays. The following example demonstrates, assigning 3 columns to the first rwo and 2 columns to the second row:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temperatures2[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">temperatures2[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure></p>\n<p>The resulting two-dimensional array is known as a ragged array. Here is a second example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[][] x = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\">x[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">x[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">x[<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">x[<span class=\"number\">4</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure></p>\n<p>FFigure 5 presents a conceptual view of this second ragged array.</p>\n<p><img src=\"005.jpg\" alt=\"Figure 5. A ragged array specifies row with varying numbers of column elements\"></p>\n<p>Ragged arrays are useful data structures because of their memory-saving capabiliy. For example, consider a spreadsheet with the potential of 100,000 rows by 20,000 columns. If we attempt to use a matrix to hold the spreadsheet, we require a great deal of memory. But suppose most of the spreadsheet’s cells contain defualt values, such as 0 for numeric cells and null for nonnumeric cells. If we use a ragged array instead of a matrix, we store only those cells that contain nonnumeric data. (Of course, we need some kind of mapping machinism that mpas spreadsheet (row, column) coordinates to ragged array (row, colum) coordinates.)</p>\n<blockquote>\n<p>Using ragged arrays for big data<br>Ragged arrays come in handy when managing Big Data, such as the vast amounts of data generated by the Internet of Things.</p>\n</blockquote>\n<h2 id=\"Why-arrays-are-objects\"><a href=\"#Why-arrays-are-objects\" class=\"headerlink\" title=\"Why arrays are objects\"></a>Why arrays are objects</h2><p>According to the first sentence of Chatper 10 in the Java Language Specification arrays are objects in Java. Under the hood, each array is an instance of a hidden class that inherits java.lang.Object’s 11 methods. The array instance override Object’s <code>protected Object clone() throws CloneNotSupprotedException</code> method, allowing the array to be shallowly cloned. The hidden class additionally provides a <code>.length</code> field.</p>\n<p>Listing 2’s ArrayIsObject source code demonstrates the associatation between arrays and objects.</p>\n<h3 id=\"Listing-2-ArrayIsObject\"><a href=\"#Listing-2-ArrayIsObject\" class=\"headerlink\" title=\"Listing 2. ArrayIsObject\"></a>Listing 2. ArrayIsObject</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayIsObject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">double</span>[] a = &#123; <span class=\"number\">100.5</span>, <span class=\"number\">200.5</span>, <span class=\"number\">300.5</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">double</span>[] b = &#123; <span class=\"number\">100.5</span>, <span class=\"number\">200.5</span>, <span class=\"number\">300.5</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">double</span>[] c = b;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"a's class is \"</span> + a.getClass());</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"a and b are \"</span> + ((a.equals(b)) ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"not \"</span>) +</span><br><span class=\"line\">                         <span class=\"string\">\"equal \"</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"b and c are \"</span> + ((b.equals(c)) ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"not \"</span>) +</span><br><span class=\"line\">                         <span class=\"string\">\"equal \"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">double</span>[] d = (<span class=\"keyword\">double</span>[]) c.clone();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"c and d are \"</span> + ((c.equals(d)) ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"not \"</span>) +</span><br><span class=\"line\">                         <span class=\"string\">\"equal \"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; d.length; i++)</span><br><span class=\"line\">         System.out.println(d[i]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ArrayIsObeject creates a referenced and b referenced double precision floating-point arrays with the same contents and lengths. For the a referenced array, a.getClass() returns class [D, where [D is the name of the array’s hidden class.</p>\n<p>Despite the two arrays having the same contents, a.equals(b) returns false bacause equals() compares references (not contents), and a and b contain different references. b’s reference is assigned to c, and b.equals(c) returns true because b and c reference the same array. c.clone() creates a shallow clone of c, and a reference to this new array is assigned to d.</p>\n<p>To prove that the d-referenced array contains the same contents as the c-referenced array, the for loop iterates over all elements and prints their contents to the standard output. The loop reads the contents of d’s read-only .length field to determine over how many elements to iterate.</p>\n<blockquote>\n<p>Tip: Don’t specify array length in source code<br>In source code, specify .length (as in d.length) instead of an array’s actual length. This eliminates the risk of introducing length-related bugs into your code, should you later change the array’s length ini its creation code.</p>\n</blockquote>\n<p>Compile Listing 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac ArrayIsObject.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java ArrayIsObject</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a&apos;s class is class [D</span><br><span class=\"line\">a and b are not equal </span><br><span class=\"line\">b and c are equal </span><br><span class=\"line\">c and d are not equal </span><br><span class=\"line\">100.5</span><br><span class=\"line\">200.5</span><br><span class=\"line\">300.5</span><br></pre></td></tr></table></figure></p>\n"},{"title":"What is a data structure and how to write your first algorithm in Java","mathjax":true,"date":"2020-04-05T16:00:01.000Z","_content":"Java programmer use data structures to store and organize data, and we use algorithms to manipulate (操纵) the data in those structures. The more you understand about data structures and alogrithm, and how they work together, the more efficient your Java programs will be.\n\nThis tutorial launches a short series introducing data structures and algorithm. You'll learn what a data structures is and how data structures are classified. You'll also learn what an algorithm is, how algorithms are represented, and how to use time and space complexity functions to compare similar algorithm.\n\n## What is a data structures?\nData structures are based on abstract data type (ADT), which Wikipedia defines as follows:\n>  (A) mathematical model for data types where a data type is defined by its behavior (semantics) from the point of view of a user of the data, specifically in terms of (从…方面) possible values, possible operations on data of this type, and the behavior of these operations.\n\nAn ADT doesn't care about the memory representation of its values or how its operations are implemented. It's like a Java interface, which is a data type that's disconnected from any implementation. in contrast, a data structure is a concrete (实在的) implementatin of one or more ADTs, similar to how Java classes implements interfaces.\n\nExamples of ADTs include Employee, Vehicle, Array, and List. Consider the List ADT (also know as the Sequence ADT), which describes an ordered collection of elements that share a common type. Each element in this collection has it own position and duplicate (复制) elements are allowed. Basic operations supported by the List ADT include:\n- Creating a new and emtry list\n- Appending a value to the end of the list\n- Inserting a value within the list\n- Deleting a value from the list\n- Iterating over the list\n- Destroying the list\n\nData structures that can implement the List ADT include fixed-size and dynamically sized one-dimensional arrays and singly-linked lists.\n\n### Classifying data structures\nThere are many kinds of data structures, ranging from single variables to arrays or linked lists of objects containing multiple fields. All data structures can be classified as primitives (原始的) or aggregates (聚集), and some are classified as containers.\n\n### Primitives vs aggregates\nThe simplest kind of data structures stores single data iterm; for example, a variable that stores a Boolean value or a variable that stores an integer. I refer to such data structures as primitives.\n\nMany data structures are capable of storing multiple data items. For example, an array can store multiple data itemsi its various slots, and an object can store multiple data items via its fields. I refer to these data structures as aggregates.\n\nAll of the data structures we'll look at in this series are aggregates.\n\n### Container\nAnything from which data items are stored and retrieved could be considered a data structures. Examples include the data structures derived from the previously mentioned Employee, Vechile, Array, and List ADTs.\n\nMany data structures are designed to describes various entities. Instances of an Employee class are data structures that exist to describe various employees, for instance. In contrast, some data structures exist as generic storage vessels (容器) for other data structures. For example, an array can store primitive values or object references. I refer to this letter category of data structures as containers.\n\nAs well as being aggregates, all of the data structures we'll look at in this series are containers.\n\n> Data structures and algorithm in Java Collections\n> The Java Collections Framwork supports many kinds of container-oriented data strctures and associated algorithms.\n\n### Design patterns and data structures\nIt's become fairly (相当地) common to use design patterns to introduce university students to data structures. A Brown University paper surveys (调查) serveral design patterns that are useful for designing high-quality data structures. Among other things, the paper demonstrates that the Adapter pattern is useful for designing stacks and queues. The demonstration code is shown in Listing 1.\n\n### Listing 1. Using the Adapter pattern for stacks and queues\n```java\npublic class DequeStack implements Stack {\n    \n    Deque D; // holds the elements of the stack\n\n    public DequeStack() {\n        D = new MyDeque();\n    }\n\n    @Override\n    public int size() {\n        return D.size();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return D.isEmpty();\n    }\n\n    @Override\n    public void push(Object obj) {\n        D.insertLast(obj);\n    }\n\n    @Override\n    public Object top() throws StackEmptyException {\n        try {\n            return D.lastElement();\n        } catch(DequeEmptyException err) {\n            throw new StackEmptyException();\n        }\n    }\n\n    @Override\n    public Object pop() throws StackEmptyException {\n        try {\n            return D.removeLast();\n        } catch(DequeEmptyException err) {\n            throw new StackEmptyException();\n        }\n    }\n}\n```\n\nListing 1 excerpts (摘录) the Brown University paper's DequeStack class, which demonstractes the Adapter pattern. Note that Stack and Deque are interfaces that describe Stack and Deque ADTs. MyDeque in a class that implements Deque.\n\n> Overriding interface methods\n> The original code that Listing 1 is based on didn't persent the source code to Stack, Deque, and MyDeque. For clarity, I've introduced @Override annotations to show that all of DequeStack's non-constructor methods override Stack method.\n\nDequeStack adapts (改编) MyDeque so that it can implements Stack. All of DequeStack's method are one-line calls to the Deque interface's methods. However, there is a small wrinkle in which Deque exceptions are converted into Stack exceptions.\n\n## What is an algorithm?\nHistorically used as a tool for mathematical computation, algorithms are deeply connected with computer science, and with data structures in particular. An algorithm is a sequence of instructions that accomplishes (完成) a task in a finite period of time. Qualities of an algorithm are as follows:\n- Receives zero or more inputs\n- Produces at least one output\n- Consists of clear and unambiguous (清晰的) instructions (指令)\n- Terminates after a finite (有限的) number of steps\n- Is basic enough that a person can carry it out using a pencil and paper\n\nNote that while programs may be algorithmic. One example is a code sequence that prints a report. Mote famously, Euclid's algorithm is used to calculate the mathematical greatest common divisor (最大公约数). A case could be even be made that a data structure's basic operations (such as store value in array slot) are algorithms. In this series, for the most part, I'll focus on higher-level algorithm used to process data structures, such as the Binary Search and Matrix Multiplication algorithms.\n\n### Flowcharts and pseudocode (伪码)\nHow do you represent an alogorithm? Writing code before fully understanding its underlying algorithm can lead to bugs, so what's a beeter alternative? Two options are flowcharts and preudocode.\n\n### Using flowcharts to represent algorithms\nA flowcahrt is a visual representation of an algorithm's control flow. This representation illustrates (阐明) that need to be executed, decisions that need to be made, logic flow (for iteration and other purposes), and terminals that indicate (表明) start and end points. Figure 1 reveals the various symbols that flowcharts use to visualize algorithms.\n\n![Figure 1. Flowcharts use symbols to represent statement, decisions, logic flow, and terminals](001.jpg)\n\nConsider an algorithm that initializes a counter to 0, reads characters until a newline (`\\n`) character is seen, increments the counter for each digit character that's beed read, and prints the counter's value after the newline character has been read. The flowchart in Figure 2 illustrates this algorithm's control flow：\n![Figure 2. This flowchart show how to count from 0 to 9](002.jpg)\n\nA flowchart's simplicity and its ability to present an algorithm's control flow visually (so that it's is easy to folow) are its major advantages. Flowcharts also have several disadvantages (不利), however:\n- It's easy to introduce errors or inaccuracies (误差) into highly-detailed flowcharts because of the tedium (啰嗦) associated with drawing them\n- It takes time to position, label, and connect a flowchart's symbols, even using tools to speed up this process. This delay might slow your understanding of an algorithm\n- Flowcharts belong to the structured programming (结构化编程) era and aren't as useful in an object-oriented. In constract, the Unified Modeling Language (UML) is more appropriate for creating object-oriented visual representations.\n\n### Using pseudocode to represent algorithms\nAn alternative (可供替代的) to flowcharts is pseudocode, which is a textual representation of an algorithm that approximates (接近) the final souce code. Pseudocode is useful for quickly writing down an algorithm's representation. Because syntax is not a concern, there are no hard-and-fast rules for writing pseudocode.\n\nYou should strive (努力) for consistency (一致性) when writing pseudocode. Being consistent will make it much easier to translate the pseudocode into actual source code. For example, consider the following pseudocode representation of the previous counter-oriented flowchart:\n```\nDECLARE CHARACTER ch = ''\nDECLARE INTEGER count = 0\nDO\n    READ ch\n    IF ch GE '0' AND ch LE '9' THEN \n        count = count + 1\n    END IF\nUNTIL ch EQ '\\n'\nPRINT count\nEND\n```\n\nThe pseudocode first presnets a couple of DECLARE statements that introduce variables ch and count, initialized to default values. It then presents a DO loop that executes UNTIL ch contains `\\n` (the newline character), at which point the loop ends and a PRINT statement outputs count's value.\n\nFor each loop iteration, READ causes a character to be read from the keyboard (or perhaps a file -- in this case it doesn't matter what constitues the underlying input source) and assigned to ch. If this character is a digit (ont of 0 through 9), count is incremented by 1.\n\n### Choosing the right algorithm\nThe data structures and algorithms you use critically (严重地) affect two factors in your applications:\n1. Memory useage (for data structures)\n1. CPU time (for algorithms that interact (互动) with those data structures)\n\nIt follows that you should be especially mindful of the algorithms and data structures you use for applications that will process lost of data. These include applications used for big data and the Internet of Things.\n\n> Balancing memory and CPU\n> When choosing a data structure or algorithm, you will somtimes discover an inverse relationship between memory useage and CPU time: the less memory a data structure uses, the more CPU time associated algorithms need to process the data structure's data items. Also, the more memory a data structure uses, the less CPU time associated algorithems will nedd to process the data items-leading to faster algorithm results.\n\nAs much as possible, you should strive to balance memory use with CPU time. You can simplify this task by analyzing algorithm to determine their efficiency. How well does one algorithm preform against another of similar nature? Answering this question will help you make good choices given a choice between multiple algorithms.\n\n### Measuring algorithm efficiency\nSome algorithms preform better than others. For example, the Binary Search algorithm is almost always more efficient than the Linear Search algorithm. You want to choose the most efficient algorithm for your application's needs, but that choice might not be as obvious as you would think.\n\nFor instance, what does it mean if the Selection Sort algorithm takes 0.4 seconds to sort 10000 integers on a given machine? That benchmark is only valid for that particular machine, that particular implementation of the algorithm, and for the size of the input data.\n\nAs computer scientist, we use time complextiy and space complexity to measure an algorithm's efficiency, distilling these into complexity functions to abstract implementation and runtime enviroment details. Conplexity functions reveal the variance in an algorithm's time and space reuirements based on the amount of input data:\n- A time-complexity function measures an algorithm's time complexity -- meaning how long an algorithm takes to complete\n- A space-complexity function measures an algorithm's space complexity -- meaning the amount of memory overhead (开销) required by the algorithm to preform its task\n\nBoth complexity functions are based on the size of input (n), which somehow reflects the amount of input data. Consider the follwoing preudocode for array printing:\n```\nDECLARE INTEGER i, x[] = [ 10, 15, -1, 32 ]\nFOR i = 0 TO LENGTH(x) - 1\n   PRINT x[i]\nNEXT i\nEND\n```\n\n## Time complexity and time-complexity functions\nYou can express the time complexty of this algorithm by specifying the time-complexity function $t(n) = an + b$, where $a$ (a constant multiplier) represents the amount of time to complete one loop  iteration, and $b$ represents the algorithm's setup time. In this example, the time complexity is linear.\n\nThe $t(n) = an + b$ function assumes that time complexity is measured in terms of a chronological (按时间顺序的) value (such as seconds). Because you'll want to abstract machine details, you'll often express time complexity as the number of setps to complete.\n\nHow we define a step can vary from (不同于) one algorithm to another. In this case, if you indentified the single print instruction as the program's step, you would rewrite the time-complexcity function in terms of the printing step: $t(n) = n$; for $n$ arrays elements, $n$ steps are needed to print the array.\n\nIt's important to take care when defining an algorithm's steps, so that the definition is meaningful (有意义的) and correlates with the algorithm's input size. For example, it makes sense to define printing as the steps for the array-printing algorithm, because printing dominates (控制) the runtime and depends on the input size (number of array elements to print).\n\nIt's also possible to define steps in terms of comparisons (比较) and exchanges. In a sorting algorithm, for instance, you might define steps in terms of comparisons if comparisons dominate the runtime or exchanges dominate the runtime.\n\nIt's fairly easy to choose a time-complexity function for the array-printing example, but it can be more difficult to find this function for more complicated algorithms. Use the following rules-of -thumb to simplify this task: \n- Algorithms with single loops are typically linear -- their time-complexity functions are specified in terms of $n$\n- Algorithms with two nested loops are typically quadratic -- their time-complexity functions are specified in terms of $n^2$\n- Algorithms with a triply-nested loop are typically cubic -- their time-complexity functions are spceified in terms of $n^3$\n- The pattern continues with quadruply and higher nested loops\n\nThere rules-of-thumb (经验法则) work best when a loop executes $n$ times (where $n$ is the size of the input data). This isn't always the case, however, as demonstrated by the Selection Sort algorithm represented in pseudocode below:\n```java\nDECLARE INTEGER i, min, pass\nDECLARE INTEGER x[] = [ ... ]\nFOR pass = 0 TO LENGTH(x) - 2\n   min = pass\n   FOR i = pass + 1 TO LENGTH(x) - 1\n      IF x[i] LT x[min] THEN\n         min = i\n      END IF\n   NEXT i\n   IF min NE pass THEN\n      EXCHANGE x[min], x[pass]\n   END IF\nNEXT pass\nEND\n```\n\nBecause this algorithm consists of thw nested loops, you might think that its preformance is quadratic. That't only partially correct, however, because the algorithm's performanc depends on whether you choose comparisons (比较) or exchanges as the algorithm's step:\n- If you choose an exchange as one step (bacause you think that exchanges dominate the runtime) you end up with a linear time-complexity function bacause $n - 1$ exchagnes are required to sort $n$ data items. This function is specified as $t(n) = n - 1$.\n- If you choose a comparison as one step (bacause you think that comparison deminate the runtime) you end up with $t(n) = (n - 1) + (n - 2) + ... + 1$, which sortens to $t(n) = \\frac{n^2}{2} - \\frac{n}{2}$. Comparison occur in the inner loop, which executes $n-1$ times for the first outer loop iteration, $n-2$ for the second, and so on down to once for the final outer loop iteration.\n\n## Space complexity and space-complexity funtions\nAn algorithm's space complexity indicates the amount of extra memory needed to accomplish its task. For printing an array, a constant amount of extra memory (for code storege, stack space to store the return address whwen `PRINT` is called, and space for varialbe `i`'s value) is needed no matter how lager the array.\n\nYou can express the array-printing algorithm's space complexity via space-complexity function $s(n) = c$, where $c$ signifies how much constant additional space is requried. This value represents overhead only; it doesn't include space for the data being processed. In this case, it doesn't include the array.\n\nSpace complexity is expressed in terms of mechine-independent memory cells instead of mechine-dependent bytes. A memory cell holds some kind of data. For the array-printing algorithm, `i`'s memory cell stores an integer value.\n\n## Comparing algorithms\nYou use time complexity and space complexity functions to compare the algorihm to other of a similar nature (one sorting algorithm to another sorting algorithm, for example). In order to ensure a fair comparison, you must use the same definition for step and memory cell in each algorithm.\n\nEven when you chosen identical (完全同样的) step an memory cell definations, however, comparing algorithms can still prove tricky (难办的). Because complexities are often nonlinear, an algorithm's input size can greatly affect the comparison result. As an example, consider two time-compleity functions:\n- $t_1(n) = 10n^2 + 15n$\n- $t_2(n) = 150n + 5$\n\nWhen $n$ equals 1, $t_1$ yields 25 steps, whereas $t_2$ yields 155 steps. In this case, $t_1$ is clearly better. This pattern continues until $n$ equals 14, at which point $t_1$ yields 2170 steps and $t_2$ yields 2105 steps. In this case, $t_2$ is the much better choice for this and successor value of $n$.\n\n## Using Big oh to represent upper bounds\nComputer scientists commonly compare algorithms as $n$ tends (趋于) to infinity (无限); this is knwon as asymptotic analysic (渐近分析). Complexity functions serve as the upper bound (上界) of the algorithm's asymptotic behavior (as $n$ approaches (接近) infinity), and a notation (标记法) called Big Oh is used to represent these upper bounds. Here's the formal (正规的) defination for Big Oh:\n> A function $f(n)$ is $O(g(n))$ if and only if there exist two constants $c$ and $n_0$ such that $f(n) <= cg(n)$ for all $n >= n_0$\n\nNote: $n$, $f(n)$, $c$, and $n_0$ must be positive.\n\n$f(n)$ represents the algorithm's computing time. When we say that this function is $O(g(n))$, we mean that (in terms of steps) it takes no longer than a constant multiplied by $g(n)$ for this function to execute. For example, here are the Big Oh notations for the previous time-complexity functions:\n$$\n\\begin{equation}\\begin{split}\nt_1(n) &= O(n^2) \\\\\nt_2(n) &= O(n)\n\\end{split}\\end{equation}\n$$\n\n> Simplifying Big Oh\n> It's common to throw away all terms (条件) except the largest and any constant multiplier for the largest term when specifiying $g(n)$. For example, you would speicfy $O(n)$ instead of $O(150n + 5)$\n\n## Comparing algorithms with Big Oh\nSuppose the Selection Sort algorithm if followed by the Array Printing algorithm. Because each algorithm offers it own time-complexity function, what is the overall time-complexity function for both algorithm? The answer is if $f_1(n) = O(g(n))$ and $f_2(n) = O(h(n))$ then:\n\n$$\n\\begin{equation}\\begin{split}\n\n(A) f_1(n) + f_2(n)      &= max(O(g(n)), O(h(n))) \\\\\n(B) f_1(n) \\times f_2(n) &= O(g(n) \\times h(n))\n\n\\end{split}\\end{equation}\n$$\n\nPart A covers cases where algorithm follow each other sequentially. For the Selection Sort algorithm followed by the Array Printing algorithm, the overall time-complexity function is the maxinum of each algorithm's time-complexity function, which happens to be $O(n^2)$ (assming that comparisons are the dominant steps).\n\nPart B covers where one algorithm nests inside another. For example, suppose the Array Printing algorithm is called after Selection Sort performs an exchange. Assuming that the sort's time-complxity function if $O(n^2)$ (comparisons are dominant), the overall time complexity changes to $O(n^3)$.\n\nHow do you choose an efficient algorithm that means your application's needs? Start by obtaining the Big Oh-bounded time-complexity functions for the candidate algorithms being  considered, then deciding the range of $n$ values that will be input to these functions (and, hence (因此), the algorithms).\n\nBecause it helps to see the impact (冲击) of various $n$ values in a tatular (表格式的) format, I've constructed a table that correlates the number of steps with common Big Oh-bounded time-complexity functions and various $n$ value. This table is presented in Figure 3.\n\n![Figure 3. Correlating step counts with common Big Oh-bounded time-complexity functions and various n values](003.jpg)\n\nThe Big Oh-bouded time-complexity functions are sorted from the most efficient function (constant) at the top to the least efficient function (exponential 指数) at the bottom. As you move down the table, notice the functions becoming less efficient (with more steps to complete) for $n$ values starting at 16.\n\nIt would be great if all algorithm were $O(1)$ becuase the would all be equally efficient. Because this doesn't happen in the real world, you need to carefully choose the most efficient algorithm based on Big Oh-bounded time-complexity functions and the desired range of $n$ values.\n\nKeep in mind that more efficient algorithms may be harder to code than less efficient ones. If the range of $n$ input values doesn't result in too many steps, you may find that it's better to use a less efficient algorithm with a smaller input range than a more efficient algorithm with a lager input range. You'll see an example of this in Part 2.\n","source":"_posts/JavaWorld/What is a data structure and how to write your first algorithm in Java.md","raw":"---\ntitle: What is a data structure and how to write your first algorithm in Java\n\ntag:\n- Data structures and algorithms in Java\n\ncategories:\n- JavaWorld\n\nmathjax: true\n\ndate: 2020-04-06 00:00:01\n---\nJava programmer use data structures to store and organize data, and we use algorithms to manipulate (操纵) the data in those structures. The more you understand about data structures and alogrithm, and how they work together, the more efficient your Java programs will be.\n\nThis tutorial launches a short series introducing data structures and algorithm. You'll learn what a data structures is and how data structures are classified. You'll also learn what an algorithm is, how algorithms are represented, and how to use time and space complexity functions to compare similar algorithm.\n\n## What is a data structures?\nData structures are based on abstract data type (ADT), which Wikipedia defines as follows:\n>  (A) mathematical model for data types where a data type is defined by its behavior (semantics) from the point of view of a user of the data, specifically in terms of (从…方面) possible values, possible operations on data of this type, and the behavior of these operations.\n\nAn ADT doesn't care about the memory representation of its values or how its operations are implemented. It's like a Java interface, which is a data type that's disconnected from any implementation. in contrast, a data structure is a concrete (实在的) implementatin of one or more ADTs, similar to how Java classes implements interfaces.\n\nExamples of ADTs include Employee, Vehicle, Array, and List. Consider the List ADT (also know as the Sequence ADT), which describes an ordered collection of elements that share a common type. Each element in this collection has it own position and duplicate (复制) elements are allowed. Basic operations supported by the List ADT include:\n- Creating a new and emtry list\n- Appending a value to the end of the list\n- Inserting a value within the list\n- Deleting a value from the list\n- Iterating over the list\n- Destroying the list\n\nData structures that can implement the List ADT include fixed-size and dynamically sized one-dimensional arrays and singly-linked lists.\n\n### Classifying data structures\nThere are many kinds of data structures, ranging from single variables to arrays or linked lists of objects containing multiple fields. All data structures can be classified as primitives (原始的) or aggregates (聚集), and some are classified as containers.\n\n### Primitives vs aggregates\nThe simplest kind of data structures stores single data iterm; for example, a variable that stores a Boolean value or a variable that stores an integer. I refer to such data structures as primitives.\n\nMany data structures are capable of storing multiple data items. For example, an array can store multiple data itemsi its various slots, and an object can store multiple data items via its fields. I refer to these data structures as aggregates.\n\nAll of the data structures we'll look at in this series are aggregates.\n\n### Container\nAnything from which data items are stored and retrieved could be considered a data structures. Examples include the data structures derived from the previously mentioned Employee, Vechile, Array, and List ADTs.\n\nMany data structures are designed to describes various entities. Instances of an Employee class are data structures that exist to describe various employees, for instance. In contrast, some data structures exist as generic storage vessels (容器) for other data structures. For example, an array can store primitive values or object references. I refer to this letter category of data structures as containers.\n\nAs well as being aggregates, all of the data structures we'll look at in this series are containers.\n\n> Data structures and algorithm in Java Collections\n> The Java Collections Framwork supports many kinds of container-oriented data strctures and associated algorithms.\n\n### Design patterns and data structures\nIt's become fairly (相当地) common to use design patterns to introduce university students to data structures. A Brown University paper surveys (调查) serveral design patterns that are useful for designing high-quality data structures. Among other things, the paper demonstrates that the Adapter pattern is useful for designing stacks and queues. The demonstration code is shown in Listing 1.\n\n### Listing 1. Using the Adapter pattern for stacks and queues\n```java\npublic class DequeStack implements Stack {\n    \n    Deque D; // holds the elements of the stack\n\n    public DequeStack() {\n        D = new MyDeque();\n    }\n\n    @Override\n    public int size() {\n        return D.size();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return D.isEmpty();\n    }\n\n    @Override\n    public void push(Object obj) {\n        D.insertLast(obj);\n    }\n\n    @Override\n    public Object top() throws StackEmptyException {\n        try {\n            return D.lastElement();\n        } catch(DequeEmptyException err) {\n            throw new StackEmptyException();\n        }\n    }\n\n    @Override\n    public Object pop() throws StackEmptyException {\n        try {\n            return D.removeLast();\n        } catch(DequeEmptyException err) {\n            throw new StackEmptyException();\n        }\n    }\n}\n```\n\nListing 1 excerpts (摘录) the Brown University paper's DequeStack class, which demonstractes the Adapter pattern. Note that Stack and Deque are interfaces that describe Stack and Deque ADTs. MyDeque in a class that implements Deque.\n\n> Overriding interface methods\n> The original code that Listing 1 is based on didn't persent the source code to Stack, Deque, and MyDeque. For clarity, I've introduced @Override annotations to show that all of DequeStack's non-constructor methods override Stack method.\n\nDequeStack adapts (改编) MyDeque so that it can implements Stack. All of DequeStack's method are one-line calls to the Deque interface's methods. However, there is a small wrinkle in which Deque exceptions are converted into Stack exceptions.\n\n## What is an algorithm?\nHistorically used as a tool for mathematical computation, algorithms are deeply connected with computer science, and with data structures in particular. An algorithm is a sequence of instructions that accomplishes (完成) a task in a finite period of time. Qualities of an algorithm are as follows:\n- Receives zero or more inputs\n- Produces at least one output\n- Consists of clear and unambiguous (清晰的) instructions (指令)\n- Terminates after a finite (有限的) number of steps\n- Is basic enough that a person can carry it out using a pencil and paper\n\nNote that while programs may be algorithmic. One example is a code sequence that prints a report. Mote famously, Euclid's algorithm is used to calculate the mathematical greatest common divisor (最大公约数). A case could be even be made that a data structure's basic operations (such as store value in array slot) are algorithms. In this series, for the most part, I'll focus on higher-level algorithm used to process data structures, such as the Binary Search and Matrix Multiplication algorithms.\n\n### Flowcharts and pseudocode (伪码)\nHow do you represent an alogorithm? Writing code before fully understanding its underlying algorithm can lead to bugs, so what's a beeter alternative? Two options are flowcharts and preudocode.\n\n### Using flowcharts to represent algorithms\nA flowcahrt is a visual representation of an algorithm's control flow. This representation illustrates (阐明) that need to be executed, decisions that need to be made, logic flow (for iteration and other purposes), and terminals that indicate (表明) start and end points. Figure 1 reveals the various symbols that flowcharts use to visualize algorithms.\n\n![Figure 1. Flowcharts use symbols to represent statement, decisions, logic flow, and terminals](001.jpg)\n\nConsider an algorithm that initializes a counter to 0, reads characters until a newline (`\\n`) character is seen, increments the counter for each digit character that's beed read, and prints the counter's value after the newline character has been read. The flowchart in Figure 2 illustrates this algorithm's control flow：\n![Figure 2. This flowchart show how to count from 0 to 9](002.jpg)\n\nA flowchart's simplicity and its ability to present an algorithm's control flow visually (so that it's is easy to folow) are its major advantages. Flowcharts also have several disadvantages (不利), however:\n- It's easy to introduce errors or inaccuracies (误差) into highly-detailed flowcharts because of the tedium (啰嗦) associated with drawing them\n- It takes time to position, label, and connect a flowchart's symbols, even using tools to speed up this process. This delay might slow your understanding of an algorithm\n- Flowcharts belong to the structured programming (结构化编程) era and aren't as useful in an object-oriented. In constract, the Unified Modeling Language (UML) is more appropriate for creating object-oriented visual representations.\n\n### Using pseudocode to represent algorithms\nAn alternative (可供替代的) to flowcharts is pseudocode, which is a textual representation of an algorithm that approximates (接近) the final souce code. Pseudocode is useful for quickly writing down an algorithm's representation. Because syntax is not a concern, there are no hard-and-fast rules for writing pseudocode.\n\nYou should strive (努力) for consistency (一致性) when writing pseudocode. Being consistent will make it much easier to translate the pseudocode into actual source code. For example, consider the following pseudocode representation of the previous counter-oriented flowchart:\n```\nDECLARE CHARACTER ch = ''\nDECLARE INTEGER count = 0\nDO\n    READ ch\n    IF ch GE '0' AND ch LE '9' THEN \n        count = count + 1\n    END IF\nUNTIL ch EQ '\\n'\nPRINT count\nEND\n```\n\nThe pseudocode first presnets a couple of DECLARE statements that introduce variables ch and count, initialized to default values. It then presents a DO loop that executes UNTIL ch contains `\\n` (the newline character), at which point the loop ends and a PRINT statement outputs count's value.\n\nFor each loop iteration, READ causes a character to be read from the keyboard (or perhaps a file -- in this case it doesn't matter what constitues the underlying input source) and assigned to ch. If this character is a digit (ont of 0 through 9), count is incremented by 1.\n\n### Choosing the right algorithm\nThe data structures and algorithms you use critically (严重地) affect two factors in your applications:\n1. Memory useage (for data structures)\n1. CPU time (for algorithms that interact (互动) with those data structures)\n\nIt follows that you should be especially mindful of the algorithms and data structures you use for applications that will process lost of data. These include applications used for big data and the Internet of Things.\n\n> Balancing memory and CPU\n> When choosing a data structure or algorithm, you will somtimes discover an inverse relationship between memory useage and CPU time: the less memory a data structure uses, the more CPU time associated algorithms need to process the data structure's data items. Also, the more memory a data structure uses, the less CPU time associated algorithems will nedd to process the data items-leading to faster algorithm results.\n\nAs much as possible, you should strive to balance memory use with CPU time. You can simplify this task by analyzing algorithm to determine their efficiency. How well does one algorithm preform against another of similar nature? Answering this question will help you make good choices given a choice between multiple algorithms.\n\n### Measuring algorithm efficiency\nSome algorithms preform better than others. For example, the Binary Search algorithm is almost always more efficient than the Linear Search algorithm. You want to choose the most efficient algorithm for your application's needs, but that choice might not be as obvious as you would think.\n\nFor instance, what does it mean if the Selection Sort algorithm takes 0.4 seconds to sort 10000 integers on a given machine? That benchmark is only valid for that particular machine, that particular implementation of the algorithm, and for the size of the input data.\n\nAs computer scientist, we use time complextiy and space complexity to measure an algorithm's efficiency, distilling these into complexity functions to abstract implementation and runtime enviroment details. Conplexity functions reveal the variance in an algorithm's time and space reuirements based on the amount of input data:\n- A time-complexity function measures an algorithm's time complexity -- meaning how long an algorithm takes to complete\n- A space-complexity function measures an algorithm's space complexity -- meaning the amount of memory overhead (开销) required by the algorithm to preform its task\n\nBoth complexity functions are based on the size of input (n), which somehow reflects the amount of input data. Consider the follwoing preudocode for array printing:\n```\nDECLARE INTEGER i, x[] = [ 10, 15, -1, 32 ]\nFOR i = 0 TO LENGTH(x) - 1\n   PRINT x[i]\nNEXT i\nEND\n```\n\n## Time complexity and time-complexity functions\nYou can express the time complexty of this algorithm by specifying the time-complexity function $t(n) = an + b$, where $a$ (a constant multiplier) represents the amount of time to complete one loop  iteration, and $b$ represents the algorithm's setup time. In this example, the time complexity is linear.\n\nThe $t(n) = an + b$ function assumes that time complexity is measured in terms of a chronological (按时间顺序的) value (such as seconds). Because you'll want to abstract machine details, you'll often express time complexity as the number of setps to complete.\n\nHow we define a step can vary from (不同于) one algorithm to another. In this case, if you indentified the single print instruction as the program's step, you would rewrite the time-complexcity function in terms of the printing step: $t(n) = n$; for $n$ arrays elements, $n$ steps are needed to print the array.\n\nIt's important to take care when defining an algorithm's steps, so that the definition is meaningful (有意义的) and correlates with the algorithm's input size. For example, it makes sense to define printing as the steps for the array-printing algorithm, because printing dominates (控制) the runtime and depends on the input size (number of array elements to print).\n\nIt's also possible to define steps in terms of comparisons (比较) and exchanges. In a sorting algorithm, for instance, you might define steps in terms of comparisons if comparisons dominate the runtime or exchanges dominate the runtime.\n\nIt's fairly easy to choose a time-complexity function for the array-printing example, but it can be more difficult to find this function for more complicated algorithms. Use the following rules-of -thumb to simplify this task: \n- Algorithms with single loops are typically linear -- their time-complexity functions are specified in terms of $n$\n- Algorithms with two nested loops are typically quadratic -- their time-complexity functions are specified in terms of $n^2$\n- Algorithms with a triply-nested loop are typically cubic -- their time-complexity functions are spceified in terms of $n^3$\n- The pattern continues with quadruply and higher nested loops\n\nThere rules-of-thumb (经验法则) work best when a loop executes $n$ times (where $n$ is the size of the input data). This isn't always the case, however, as demonstrated by the Selection Sort algorithm represented in pseudocode below:\n```java\nDECLARE INTEGER i, min, pass\nDECLARE INTEGER x[] = [ ... ]\nFOR pass = 0 TO LENGTH(x) - 2\n   min = pass\n   FOR i = pass + 1 TO LENGTH(x) - 1\n      IF x[i] LT x[min] THEN\n         min = i\n      END IF\n   NEXT i\n   IF min NE pass THEN\n      EXCHANGE x[min], x[pass]\n   END IF\nNEXT pass\nEND\n```\n\nBecause this algorithm consists of thw nested loops, you might think that its preformance is quadratic. That't only partially correct, however, because the algorithm's performanc depends on whether you choose comparisons (比较) or exchanges as the algorithm's step:\n- If you choose an exchange as one step (bacause you think that exchanges dominate the runtime) you end up with a linear time-complexity function bacause $n - 1$ exchagnes are required to sort $n$ data items. This function is specified as $t(n) = n - 1$.\n- If you choose a comparison as one step (bacause you think that comparison deminate the runtime) you end up with $t(n) = (n - 1) + (n - 2) + ... + 1$, which sortens to $t(n) = \\frac{n^2}{2} - \\frac{n}{2}$. Comparison occur in the inner loop, which executes $n-1$ times for the first outer loop iteration, $n-2$ for the second, and so on down to once for the final outer loop iteration.\n\n## Space complexity and space-complexity funtions\nAn algorithm's space complexity indicates the amount of extra memory needed to accomplish its task. For printing an array, a constant amount of extra memory (for code storege, stack space to store the return address whwen `PRINT` is called, and space for varialbe `i`'s value) is needed no matter how lager the array.\n\nYou can express the array-printing algorithm's space complexity via space-complexity function $s(n) = c$, where $c$ signifies how much constant additional space is requried. This value represents overhead only; it doesn't include space for the data being processed. In this case, it doesn't include the array.\n\nSpace complexity is expressed in terms of mechine-independent memory cells instead of mechine-dependent bytes. A memory cell holds some kind of data. For the array-printing algorithm, `i`'s memory cell stores an integer value.\n\n## Comparing algorithms\nYou use time complexity and space complexity functions to compare the algorihm to other of a similar nature (one sorting algorithm to another sorting algorithm, for example). In order to ensure a fair comparison, you must use the same definition for step and memory cell in each algorithm.\n\nEven when you chosen identical (完全同样的) step an memory cell definations, however, comparing algorithms can still prove tricky (难办的). Because complexities are often nonlinear, an algorithm's input size can greatly affect the comparison result. As an example, consider two time-compleity functions:\n- $t_1(n) = 10n^2 + 15n$\n- $t_2(n) = 150n + 5$\n\nWhen $n$ equals 1, $t_1$ yields 25 steps, whereas $t_2$ yields 155 steps. In this case, $t_1$ is clearly better. This pattern continues until $n$ equals 14, at which point $t_1$ yields 2170 steps and $t_2$ yields 2105 steps. In this case, $t_2$ is the much better choice for this and successor value of $n$.\n\n## Using Big oh to represent upper bounds\nComputer scientists commonly compare algorithms as $n$ tends (趋于) to infinity (无限); this is knwon as asymptotic analysic (渐近分析). Complexity functions serve as the upper bound (上界) of the algorithm's asymptotic behavior (as $n$ approaches (接近) infinity), and a notation (标记法) called Big Oh is used to represent these upper bounds. Here's the formal (正规的) defination for Big Oh:\n> A function $f(n)$ is $O(g(n))$ if and only if there exist two constants $c$ and $n_0$ such that $f(n) <= cg(n)$ for all $n >= n_0$\n\nNote: $n$, $f(n)$, $c$, and $n_0$ must be positive.\n\n$f(n)$ represents the algorithm's computing time. When we say that this function is $O(g(n))$, we mean that (in terms of steps) it takes no longer than a constant multiplied by $g(n)$ for this function to execute. For example, here are the Big Oh notations for the previous time-complexity functions:\n$$\n\\begin{equation}\\begin{split}\nt_1(n) &= O(n^2) \\\\\nt_2(n) &= O(n)\n\\end{split}\\end{equation}\n$$\n\n> Simplifying Big Oh\n> It's common to throw away all terms (条件) except the largest and any constant multiplier for the largest term when specifiying $g(n)$. For example, you would speicfy $O(n)$ instead of $O(150n + 5)$\n\n## Comparing algorithms with Big Oh\nSuppose the Selection Sort algorithm if followed by the Array Printing algorithm. Because each algorithm offers it own time-complexity function, what is the overall time-complexity function for both algorithm? The answer is if $f_1(n) = O(g(n))$ and $f_2(n) = O(h(n))$ then:\n\n$$\n\\begin{equation}\\begin{split}\n\n(A) f_1(n) + f_2(n)      &= max(O(g(n)), O(h(n))) \\\\\n(B) f_1(n) \\times f_2(n) &= O(g(n) \\times h(n))\n\n\\end{split}\\end{equation}\n$$\n\nPart A covers cases where algorithm follow each other sequentially. For the Selection Sort algorithm followed by the Array Printing algorithm, the overall time-complexity function is the maxinum of each algorithm's time-complexity function, which happens to be $O(n^2)$ (assming that comparisons are the dominant steps).\n\nPart B covers where one algorithm nests inside another. For example, suppose the Array Printing algorithm is called after Selection Sort performs an exchange. Assuming that the sort's time-complxity function if $O(n^2)$ (comparisons are dominant), the overall time complexity changes to $O(n^3)$.\n\nHow do you choose an efficient algorithm that means your application's needs? Start by obtaining the Big Oh-bounded time-complexity functions for the candidate algorithms being  considered, then deciding the range of $n$ values that will be input to these functions (and, hence (因此), the algorithms).\n\nBecause it helps to see the impact (冲击) of various $n$ values in a tatular (表格式的) format, I've constructed a table that correlates the number of steps with common Big Oh-bounded time-complexity functions and various $n$ value. This table is presented in Figure 3.\n\n![Figure 3. Correlating step counts with common Big Oh-bounded time-complexity functions and various n values](003.jpg)\n\nThe Big Oh-bouded time-complexity functions are sorted from the most efficient function (constant) at the top to the least efficient function (exponential 指数) at the bottom. As you move down the table, notice the functions becoming less efficient (with more steps to complete) for $n$ values starting at 16.\n\nIt would be great if all algorithm were $O(1)$ becuase the would all be equally efficient. Because this doesn't happen in the real world, you need to carefully choose the most efficient algorithm based on Big Oh-bounded time-complexity functions and the desired range of $n$ values.\n\nKeep in mind that more efficient algorithms may be harder to code than less efficient ones. If the range of $n$ input values doesn't result in too many steps, you may find that it's better to use a less efficient algorithm with a smaller input range than a more efficient algorithm with a lager input range. You'll see an example of this in Part 2.\n","slug":"JavaWorld/What is a data structure and how to write your first algorithm in Java","published":1,"updated":"2020-04-19T06:40:26.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mco00chm33pvit9ce3w","content":"<p>Java programmer use data structures to store and organize data, and we use algorithms to manipulate (操纵) the data in those structures. The more you understand about data structures and alogrithm, and how they work together, the more efficient your Java programs will be.</p>\n<p>This tutorial launches a short series introducing data structures and algorithm. You’ll learn what a data structures is and how data structures are classified. You’ll also learn what an algorithm is, how algorithms are represented, and how to use time and space complexity functions to compare similar algorithm.</p>\n<h2 id=\"What-is-a-data-structures\"><a href=\"#What-is-a-data-structures\" class=\"headerlink\" title=\"What is a data structures?\"></a>What is a data structures?</h2><p>Data structures are based on abstract data type (ADT), which Wikipedia defines as follows:</p>\n<blockquote>\n<p> (A) mathematical model for data types where a data type is defined by its behavior (semantics) from the point of view of a user of the data, specifically in terms of (从…方面) possible values, possible operations on data of this type, and the behavior of these operations.</p>\n</blockquote>\n<p>An ADT doesn’t care about the memory representation of its values or how its operations are implemented. It’s like a Java interface, which is a data type that’s disconnected from any implementation. in contrast, a data structure is a concrete (实在的) implementatin of one or more ADTs, similar to how Java classes implements interfaces.</p>\n<p>Examples of ADTs include Employee, Vehicle, Array, and List. Consider the List ADT (also know as the Sequence ADT), which describes an ordered collection of elements that share a common type. Each element in this collection has it own position and duplicate (复制) elements are allowed. Basic operations supported by the List ADT include:</p>\n<ul>\n<li>Creating a new and emtry list</li>\n<li>Appending a value to the end of the list</li>\n<li>Inserting a value within the list</li>\n<li>Deleting a value from the list</li>\n<li>Iterating over the list</li>\n<li>Destroying the list</li>\n</ul>\n<p>Data structures that can implement the List ADT include fixed-size and dynamically sized one-dimensional arrays and singly-linked lists.</p>\n<h3 id=\"Classifying-data-structures\"><a href=\"#Classifying-data-structures\" class=\"headerlink\" title=\"Classifying data structures\"></a>Classifying data structures</h3><p>There are many kinds of data structures, ranging from single variables to arrays or linked lists of objects containing multiple fields. All data structures can be classified as primitives (原始的) or aggregates (聚集), and some are classified as containers.</p>\n<h3 id=\"Primitives-vs-aggregates\"><a href=\"#Primitives-vs-aggregates\" class=\"headerlink\" title=\"Primitives vs aggregates\"></a>Primitives vs aggregates</h3><p>The simplest kind of data structures stores single data iterm; for example, a variable that stores a Boolean value or a variable that stores an integer. I refer to such data structures as primitives.</p>\n<p>Many data structures are capable of storing multiple data items. For example, an array can store multiple data itemsi its various slots, and an object can store multiple data items via its fields. I refer to these data structures as aggregates.</p>\n<p>All of the data structures we’ll look at in this series are aggregates.</p>\n<h3 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h3><p>Anything from which data items are stored and retrieved could be considered a data structures. Examples include the data structures derived from the previously mentioned Employee, Vechile, Array, and List ADTs.</p>\n<p>Many data structures are designed to describes various entities. Instances of an Employee class are data structures that exist to describe various employees, for instance. In contrast, some data structures exist as generic storage vessels (容器) for other data structures. For example, an array can store primitive values or object references. I refer to this letter category of data structures as containers.</p>\n<p>As well as being aggregates, all of the data structures we’ll look at in this series are containers.</p>\n<blockquote>\n<p>Data structures and algorithm in Java Collections<br>The Java Collections Framwork supports many kinds of container-oriented data strctures and associated algorithms.</p>\n</blockquote>\n<h3 id=\"Design-patterns-and-data-structures\"><a href=\"#Design-patterns-and-data-structures\" class=\"headerlink\" title=\"Design patterns and data structures\"></a>Design patterns and data structures</h3><p>It’s become fairly (相当地) common to use design patterns to introduce university students to data structures. A Brown University paper surveys (调查) serveral design patterns that are useful for designing high-quality data structures. Among other things, the paper demonstrates that the Adapter pattern is useful for designing stacks and queues. The demonstration code is shown in Listing 1.</p>\n<h3 id=\"Listing-1-Using-the-Adapter-pattern-for-stacks-and-queues\"><a href=\"#Listing-1-Using-the-Adapter-pattern-for-stacks-and-queues\" class=\"headerlink\" title=\"Listing 1. Using the Adapter pattern for stacks and queues\"></a>Listing 1. Using the Adapter pattern for stacks and queues</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DequeStack</span> <span class=\"keyword\">implements</span> <span class=\"title\">Stack</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Deque D; <span class=\"comment\">// holds the elements of the stack</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DequeStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        D = <span class=\"keyword\">new</span> MyDeque();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> D.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> D.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        D.insertLast(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">top</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> StackEmptyException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> D.lastElement();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(DequeEmptyException err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> StackEmptyException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">pop</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> StackEmptyException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> D.removeLast();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(DequeEmptyException err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> StackEmptyException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 excerpts (摘录) the Brown University paper’s DequeStack class, which demonstractes the Adapter pattern. Note that Stack and Deque are interfaces that describe Stack and Deque ADTs. MyDeque in a class that implements Deque.</p>\n<blockquote>\n<p>Overriding interface methods<br>The original code that Listing 1 is based on didn’t persent the source code to Stack, Deque, and MyDeque. For clarity, I’ve introduced @Override annotations to show that all of DequeStack’s non-constructor methods override Stack method.</p>\n</blockquote>\n<p>DequeStack adapts (改编) MyDeque so that it can implements Stack. All of DequeStack’s method are one-line calls to the Deque interface’s methods. However, there is a small wrinkle in which Deque exceptions are converted into Stack exceptions.</p>\n<h2 id=\"What-is-an-algorithm\"><a href=\"#What-is-an-algorithm\" class=\"headerlink\" title=\"What is an algorithm?\"></a>What is an algorithm?</h2><p>Historically used as a tool for mathematical computation, algorithms are deeply connected with computer science, and with data structures in particular. An algorithm is a sequence of instructions that accomplishes (完成) a task in a finite period of time. Qualities of an algorithm are as follows:</p>\n<ul>\n<li>Receives zero or more inputs</li>\n<li>Produces at least one output</li>\n<li>Consists of clear and unambiguous (清晰的) instructions (指令)</li>\n<li>Terminates after a finite (有限的) number of steps</li>\n<li>Is basic enough that a person can carry it out using a pencil and paper</li>\n</ul>\n<p>Note that while programs may be algorithmic. One example is a code sequence that prints a report. Mote famously, Euclid’s algorithm is used to calculate the mathematical greatest common divisor (最大公约数). A case could be even be made that a data structure’s basic operations (such as store value in array slot) are algorithms. In this series, for the most part, I’ll focus on higher-level algorithm used to process data structures, such as the Binary Search and Matrix Multiplication algorithms.</p>\n<h3 id=\"Flowcharts-and-pseudocode-伪码\"><a href=\"#Flowcharts-and-pseudocode-伪码\" class=\"headerlink\" title=\"Flowcharts and pseudocode (伪码)\"></a>Flowcharts and pseudocode (伪码)</h3><p>How do you represent an alogorithm? Writing code before fully understanding its underlying algorithm can lead to bugs, so what’s a beeter alternative? Two options are flowcharts and preudocode.</p>\n<h3 id=\"Using-flowcharts-to-represent-algorithms\"><a href=\"#Using-flowcharts-to-represent-algorithms\" class=\"headerlink\" title=\"Using flowcharts to represent algorithms\"></a>Using flowcharts to represent algorithms</h3><p>A flowcahrt is a visual representation of an algorithm’s control flow. This representation illustrates (阐明) that need to be executed, decisions that need to be made, logic flow (for iteration and other purposes), and terminals that indicate (表明) start and end points. Figure 1 reveals the various symbols that flowcharts use to visualize algorithms.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. Flowcharts use symbols to represent statement, decisions, logic flow, and terminals\"></p>\n<p>Consider an algorithm that initializes a counter to 0, reads characters until a newline (<code>\\n</code>) character is seen, increments the counter for each digit character that’s beed read, and prints the counter’s value after the newline character has been read. The flowchart in Figure 2 illustrates this algorithm’s control flow：<br><img src=\"002.jpg\" alt=\"Figure 2. This flowchart show how to count from 0 to 9\"></p>\n<p>A flowchart’s simplicity and its ability to present an algorithm’s control flow visually (so that it’s is easy to folow) are its major advantages. Flowcharts also have several disadvantages (不利), however:</p>\n<ul>\n<li>It’s easy to introduce errors or inaccuracies (误差) into highly-detailed flowcharts because of the tedium (啰嗦) associated with drawing them</li>\n<li>It takes time to position, label, and connect a flowchart’s symbols, even using tools to speed up this process. This delay might slow your understanding of an algorithm</li>\n<li>Flowcharts belong to the structured programming (结构化编程) era and aren’t as useful in an object-oriented. In constract, the Unified Modeling Language (UML) is more appropriate for creating object-oriented visual representations.</li>\n</ul>\n<h3 id=\"Using-pseudocode-to-represent-algorithms\"><a href=\"#Using-pseudocode-to-represent-algorithms\" class=\"headerlink\" title=\"Using pseudocode to represent algorithms\"></a>Using pseudocode to represent algorithms</h3><p>An alternative (可供替代的) to flowcharts is pseudocode, which is a textual representation of an algorithm that approximates (接近) the final souce code. Pseudocode is useful for quickly writing down an algorithm’s representation. Because syntax is not a concern, there are no hard-and-fast rules for writing pseudocode.</p>\n<p>You should strive (努力) for consistency (一致性) when writing pseudocode. Being consistent will make it much easier to translate the pseudocode into actual source code. For example, consider the following pseudocode representation of the previous counter-oriented flowchart:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE CHARACTER ch = &apos;&apos;</span><br><span class=\"line\">DECLARE INTEGER count = 0</span><br><span class=\"line\">DO</span><br><span class=\"line\">    READ ch</span><br><span class=\"line\">    IF ch GE &apos;0&apos; AND ch LE &apos;9&apos; THEN </span><br><span class=\"line\">        count = count + 1</span><br><span class=\"line\">    END IF</span><br><span class=\"line\">UNTIL ch EQ &apos;\\n&apos;</span><br><span class=\"line\">PRINT count</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>The pseudocode first presnets a couple of DECLARE statements that introduce variables ch and count, initialized to default values. It then presents a DO loop that executes UNTIL ch contains <code>\\n</code> (the newline character), at which point the loop ends and a PRINT statement outputs count’s value.</p>\n<p>For each loop iteration, READ causes a character to be read from the keyboard (or perhaps a file — in this case it doesn’t matter what constitues the underlying input source) and assigned to ch. If this character is a digit (ont of 0 through 9), count is incremented by 1.</p>\n<h3 id=\"Choosing-the-right-algorithm\"><a href=\"#Choosing-the-right-algorithm\" class=\"headerlink\" title=\"Choosing the right algorithm\"></a>Choosing the right algorithm</h3><p>The data structures and algorithms you use critically (严重地) affect two factors in your applications:</p>\n<ol>\n<li>Memory useage (for data structures)</li>\n<li>CPU time (for algorithms that interact (互动) with those data structures)</li>\n</ol>\n<p>It follows that you should be especially mindful of the algorithms and data structures you use for applications that will process lost of data. These include applications used for big data and the Internet of Things.</p>\n<blockquote>\n<p>Balancing memory and CPU<br>When choosing a data structure or algorithm, you will somtimes discover an inverse relationship between memory useage and CPU time: the less memory a data structure uses, the more CPU time associated algorithms need to process the data structure’s data items. Also, the more memory a data structure uses, the less CPU time associated algorithems will nedd to process the data items-leading to faster algorithm results.</p>\n</blockquote>\n<p>As much as possible, you should strive to balance memory use with CPU time. You can simplify this task by analyzing algorithm to determine their efficiency. How well does one algorithm preform against another of similar nature? Answering this question will help you make good choices given a choice between multiple algorithms.</p>\n<h3 id=\"Measuring-algorithm-efficiency\"><a href=\"#Measuring-algorithm-efficiency\" class=\"headerlink\" title=\"Measuring algorithm efficiency\"></a>Measuring algorithm efficiency</h3><p>Some algorithms preform better than others. For example, the Binary Search algorithm is almost always more efficient than the Linear Search algorithm. You want to choose the most efficient algorithm for your application’s needs, but that choice might not be as obvious as you would think.</p>\n<p>For instance, what does it mean if the Selection Sort algorithm takes 0.4 seconds to sort 10000 integers on a given machine? That benchmark is only valid for that particular machine, that particular implementation of the algorithm, and for the size of the input data.</p>\n<p>As computer scientist, we use time complextiy and space complexity to measure an algorithm’s efficiency, distilling these into complexity functions to abstract implementation and runtime enviroment details. Conplexity functions reveal the variance in an algorithm’s time and space reuirements based on the amount of input data:</p>\n<ul>\n<li>A time-complexity function measures an algorithm’s time complexity — meaning how long an algorithm takes to complete</li>\n<li>A space-complexity function measures an algorithm’s space complexity — meaning the amount of memory overhead (开销) required by the algorithm to preform its task</li>\n</ul>\n<p>Both complexity functions are based on the size of input (n), which somehow reflects the amount of input data. Consider the follwoing preudocode for array printing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER i, x[] = [ 10, 15, -1, 32 ]</span><br><span class=\"line\">FOR i = 0 TO LENGTH(x) - 1</span><br><span class=\"line\">   PRINT x[i]</span><br><span class=\"line\">NEXT i</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Time-complexity-and-time-complexity-functions\"><a href=\"#Time-complexity-and-time-complexity-functions\" class=\"headerlink\" title=\"Time complexity and time-complexity functions\"></a>Time complexity and time-complexity functions</h2><p>You can express the time complexty of this algorithm by specifying the time-complexity function $t(n) = an + b$, where $a$ (a constant multiplier) represents the amount of time to complete one loop  iteration, and $b$ represents the algorithm’s setup time. In this example, the time complexity is linear.</p>\n<p>The $t(n) = an + b$ function assumes that time complexity is measured in terms of a chronological (按时间顺序的) value (such as seconds). Because you’ll want to abstract machine details, you’ll often express time complexity as the number of setps to complete.</p>\n<p>How we define a step can vary from (不同于) one algorithm to another. In this case, if you indentified the single print instruction as the program’s step, you would rewrite the time-complexcity function in terms of the printing step: $t(n) = n$; for $n$ arrays elements, $n$ steps are needed to print the array.</p>\n<p>It’s important to take care when defining an algorithm’s steps, so that the definition is meaningful (有意义的) and correlates with the algorithm’s input size. For example, it makes sense to define printing as the steps for the array-printing algorithm, because printing dominates (控制) the runtime and depends on the input size (number of array elements to print).</p>\n<p>It’s also possible to define steps in terms of comparisons (比较) and exchanges. In a sorting algorithm, for instance, you might define steps in terms of comparisons if comparisons dominate the runtime or exchanges dominate the runtime.</p>\n<p>It’s fairly easy to choose a time-complexity function for the array-printing example, but it can be more difficult to find this function for more complicated algorithms. Use the following rules-of -thumb to simplify this task: </p>\n<ul>\n<li>Algorithms with single loops are typically linear — their time-complexity functions are specified in terms of $n$</li>\n<li>Algorithms with two nested loops are typically quadratic — their time-complexity functions are specified in terms of $n^2$</li>\n<li>Algorithms with a triply-nested loop are typically cubic — their time-complexity functions are spceified in terms of $n^3$</li>\n<li>The pattern continues with quadruply and higher nested loops</li>\n</ul>\n<p>There rules-of-thumb (经验法则) work best when a loop executes $n$ times (where $n$ is the size of the input data). This isn’t always the case, however, as demonstrated by the Selection Sort algorithm represented in pseudocode below:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER i, min, pass</span><br><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">FOR pass = <span class=\"number\">0</span> <span class=\"function\">TO <span class=\"title\">LENGTH</span><span class=\"params\">(x)</span> - 2</span></span><br><span class=\"line\"><span class=\"function\">   min </span>= pass</span><br><span class=\"line\">   FOR i = pass + <span class=\"number\">1</span> <span class=\"function\">TO <span class=\"title\">LENGTH</span><span class=\"params\">(x)</span> - 1</span></span><br><span class=\"line\"><span class=\"function\">      IF x[i] LT x[min] THEN</span></span><br><span class=\"line\"><span class=\"function\">         min </span>= i</span><br><span class=\"line\">      END IF</span><br><span class=\"line\">   NEXT i</span><br><span class=\"line\">   IF min NE pass THEN</span><br><span class=\"line\">      EXCHANGE x[min], x[pass]</span><br><span class=\"line\">   END IF</span><br><span class=\"line\">NEXT pass</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Because this algorithm consists of thw nested loops, you might think that its preformance is quadratic. That’t only partially correct, however, because the algorithm’s performanc depends on whether you choose comparisons (比较) or exchanges as the algorithm’s step:</p>\n<ul>\n<li>If you choose an exchange as one step (bacause you think that exchanges dominate the runtime) you end up with a linear time-complexity function bacause $n - 1$ exchagnes are required to sort $n$ data items. This function is specified as $t(n) = n - 1$.</li>\n<li>If you choose a comparison as one step (bacause you think that comparison deminate the runtime) you end up with $t(n) = (n - 1) + (n - 2) + … + 1$, which sortens to $t(n) = \\frac{n^2}{2} - \\frac{n}{2}$. Comparison occur in the inner loop, which executes $n-1$ times for the first outer loop iteration, $n-2$ for the second, and so on down to once for the final outer loop iteration.</li>\n</ul>\n<h2 id=\"Space-complexity-and-space-complexity-funtions\"><a href=\"#Space-complexity-and-space-complexity-funtions\" class=\"headerlink\" title=\"Space complexity and space-complexity funtions\"></a>Space complexity and space-complexity funtions</h2><p>An algorithm’s space complexity indicates the amount of extra memory needed to accomplish its task. For printing an array, a constant amount of extra memory (for code storege, stack space to store the return address whwen <code>PRINT</code> is called, and space for varialbe <code>i</code>‘s value) is needed no matter how lager the array.</p>\n<p>You can express the array-printing algorithm’s space complexity via space-complexity function $s(n) = c$, where $c$ signifies how much constant additional space is requried. This value represents overhead only; it doesn’t include space for the data being processed. In this case, it doesn’t include the array.</p>\n<p>Space complexity is expressed in terms of mechine-independent memory cells instead of mechine-dependent bytes. A memory cell holds some kind of data. For the array-printing algorithm, <code>i</code>‘s memory cell stores an integer value.</p>\n<h2 id=\"Comparing-algorithms\"><a href=\"#Comparing-algorithms\" class=\"headerlink\" title=\"Comparing algorithms\"></a>Comparing algorithms</h2><p>You use time complexity and space complexity functions to compare the algorihm to other of a similar nature (one sorting algorithm to another sorting algorithm, for example). In order to ensure a fair comparison, you must use the same definition for step and memory cell in each algorithm.</p>\n<p>Even when you chosen identical (完全同样的) step an memory cell definations, however, comparing algorithms can still prove tricky (难办的). Because complexities are often nonlinear, an algorithm’s input size can greatly affect the comparison result. As an example, consider two time-compleity functions:</p>\n<ul>\n<li>$t_1(n) = 10n^2 + 15n$</li>\n<li>$t_2(n) = 150n + 5$</li>\n</ul>\n<p>When $n$ equals 1, $t_1$ yields 25 steps, whereas $t_2$ yields 155 steps. In this case, $t_1$ is clearly better. This pattern continues until $n$ equals 14, at which point $t_1$ yields 2170 steps and $t_2$ yields 2105 steps. In this case, $t_2$ is the much better choice for this and successor value of $n$.</p>\n<h2 id=\"Using-Big-oh-to-represent-upper-bounds\"><a href=\"#Using-Big-oh-to-represent-upper-bounds\" class=\"headerlink\" title=\"Using Big oh to represent upper bounds\"></a>Using Big oh to represent upper bounds</h2><p>Computer scientists commonly compare algorithms as $n$ tends (趋于) to infinity (无限); this is knwon as asymptotic analysic (渐近分析). Complexity functions serve as the upper bound (上界) of the algorithm’s asymptotic behavior (as $n$ approaches (接近) infinity), and a notation (标记法) called Big Oh is used to represent these upper bounds. Here’s the formal (正规的) defination for Big Oh:</p>\n<blockquote>\n<p>A function $f(n)$ is $O(g(n))$ if and only if there exist two constants $c$ and $n_0$ such that $f(n) &lt;= cg(n)$ for all $n &gt;= n_0$</p>\n</blockquote>\n<p>Note: $n$, $f(n)$, $c$, and $n_0$ must be positive.</p>\n<p>$f(n)$ represents the algorithm’s computing time. When we say that this function is $O(g(n))$, we mean that (in terms of steps) it takes no longer than a constant multiplied by $g(n)$ for this function to execute. For example, here are the Big Oh notations for the previous time-complexity functions:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{equation}\\begin{split}\nt_1(n) &= O(n^2) \\\\\nt_2(n) &= O(n)\n\\end{split}\\end{equation}</script><blockquote>\n<p>Simplifying Big Oh<br>It’s common to throw away all terms (条件) except the largest and any constant multiplier for the largest term when specifiying $g(n)$. For example, you would speicfy $O(n)$ instead of $O(150n + 5)$</p>\n</blockquote>\n<h2 id=\"Comparing-algorithms-with-Big-Oh\"><a href=\"#Comparing-algorithms-with-Big-Oh\" class=\"headerlink\" title=\"Comparing algorithms with Big Oh\"></a>Comparing algorithms with Big Oh</h2><p>Suppose the Selection Sort algorithm if followed by the Array Printing algorithm. Because each algorithm offers it own time-complexity function, what is the overall time-complexity function for both algorithm? The answer is if $f_1(n) = O(g(n))$ and $f_2(n) = O(h(n))$ then:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{equation}\\begin{split}\n\n(A) f_1(n) + f_2(n)      &= max(O(g(n)), O(h(n))) \\\\\n(B) f_1(n) \\times f_2(n) &= O(g(n) \\times h(n))\n\n\\end{split}\\end{equation}</script><p>Part A covers cases where algorithm follow each other sequentially. For the Selection Sort algorithm followed by the Array Printing algorithm, the overall time-complexity function is the maxinum of each algorithm’s time-complexity function, which happens to be $O(n^2)$ (assming that comparisons are the dominant steps).</p>\n<p>Part B covers where one algorithm nests inside another. For example, suppose the Array Printing algorithm is called after Selection Sort performs an exchange. Assuming that the sort’s time-complxity function if $O(n^2)$ (comparisons are dominant), the overall time complexity changes to $O(n^3)$.</p>\n<p>How do you choose an efficient algorithm that means your application’s needs? Start by obtaining the Big Oh-bounded time-complexity functions for the candidate algorithms being  considered, then deciding the range of $n$ values that will be input to these functions (and, hence (因此), the algorithms).</p>\n<p>Because it helps to see the impact (冲击) of various $n$ values in a tatular (表格式的) format, I’ve constructed a table that correlates the number of steps with common Big Oh-bounded time-complexity functions and various $n$ value. This table is presented in Figure 3.</p>\n<p><img src=\"003.jpg\" alt=\"Figure 3. Correlating step counts with common Big Oh-bounded time-complexity functions and various n values\"></p>\n<p>The Big Oh-bouded time-complexity functions are sorted from the most efficient function (constant) at the top to the least efficient function (exponential 指数) at the bottom. As you move down the table, notice the functions becoming less efficient (with more steps to complete) for $n$ values starting at 16.</p>\n<p>It would be great if all algorithm were $O(1)$ becuase the would all be equally efficient. Because this doesn’t happen in the real world, you need to carefully choose the most efficient algorithm based on Big Oh-bounded time-complexity functions and the desired range of $n$ values.</p>\n<p>Keep in mind that more efficient algorithms may be harder to code than less efficient ones. If the range of $n$ input values doesn’t result in too many steps, you may find that it’s better to use a less efficient algorithm with a smaller input range than a more efficient algorithm with a lager input range. You’ll see an example of this in Part 2.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Java programmer use data structures to store and organize data, and we use algorithms to manipulate (操纵) the data in those structures. The more you understand about data structures and alogrithm, and how they work together, the more efficient your Java programs will be.</p>\n<p>This tutorial launches a short series introducing data structures and algorithm. You’ll learn what a data structures is and how data structures are classified. You’ll also learn what an algorithm is, how algorithms are represented, and how to use time and space complexity functions to compare similar algorithm.</p>\n<h2 id=\"What-is-a-data-structures\"><a href=\"#What-is-a-data-structures\" class=\"headerlink\" title=\"What is a data structures?\"></a>What is a data structures?</h2><p>Data structures are based on abstract data type (ADT), which Wikipedia defines as follows:</p>\n<blockquote>\n<p> (A) mathematical model for data types where a data type is defined by its behavior (semantics) from the point of view of a user of the data, specifically in terms of (从…方面) possible values, possible operations on data of this type, and the behavior of these operations.</p>\n</blockquote>\n<p>An ADT doesn’t care about the memory representation of its values or how its operations are implemented. It’s like a Java interface, which is a data type that’s disconnected from any implementation. in contrast, a data structure is a concrete (实在的) implementatin of one or more ADTs, similar to how Java classes implements interfaces.</p>\n<p>Examples of ADTs include Employee, Vehicle, Array, and List. Consider the List ADT (also know as the Sequence ADT), which describes an ordered collection of elements that share a common type. Each element in this collection has it own position and duplicate (复制) elements are allowed. Basic operations supported by the List ADT include:</p>\n<ul>\n<li>Creating a new and emtry list</li>\n<li>Appending a value to the end of the list</li>\n<li>Inserting a value within the list</li>\n<li>Deleting a value from the list</li>\n<li>Iterating over the list</li>\n<li>Destroying the list</li>\n</ul>\n<p>Data structures that can implement the List ADT include fixed-size and dynamically sized one-dimensional arrays and singly-linked lists.</p>\n<h3 id=\"Classifying-data-structures\"><a href=\"#Classifying-data-structures\" class=\"headerlink\" title=\"Classifying data structures\"></a>Classifying data structures</h3><p>There are many kinds of data structures, ranging from single variables to arrays or linked lists of objects containing multiple fields. All data structures can be classified as primitives (原始的) or aggregates (聚集), and some are classified as containers.</p>\n<h3 id=\"Primitives-vs-aggregates\"><a href=\"#Primitives-vs-aggregates\" class=\"headerlink\" title=\"Primitives vs aggregates\"></a>Primitives vs aggregates</h3><p>The simplest kind of data structures stores single data iterm; for example, a variable that stores a Boolean value or a variable that stores an integer. I refer to such data structures as primitives.</p>\n<p>Many data structures are capable of storing multiple data items. For example, an array can store multiple data itemsi its various slots, and an object can store multiple data items via its fields. I refer to these data structures as aggregates.</p>\n<p>All of the data structures we’ll look at in this series are aggregates.</p>\n<h3 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h3><p>Anything from which data items are stored and retrieved could be considered a data structures. Examples include the data structures derived from the previously mentioned Employee, Vechile, Array, and List ADTs.</p>\n<p>Many data structures are designed to describes various entities. Instances of an Employee class are data structures that exist to describe various employees, for instance. In contrast, some data structures exist as generic storage vessels (容器) for other data structures. For example, an array can store primitive values or object references. I refer to this letter category of data structures as containers.</p>\n<p>As well as being aggregates, all of the data structures we’ll look at in this series are containers.</p>\n<blockquote>\n<p>Data structures and algorithm in Java Collections<br>The Java Collections Framwork supports many kinds of container-oriented data strctures and associated algorithms.</p>\n</blockquote>\n<h3 id=\"Design-patterns-and-data-structures\"><a href=\"#Design-patterns-and-data-structures\" class=\"headerlink\" title=\"Design patterns and data structures\"></a>Design patterns and data structures</h3><p>It’s become fairly (相当地) common to use design patterns to introduce university students to data structures. A Brown University paper surveys (调查) serveral design patterns that are useful for designing high-quality data structures. Among other things, the paper demonstrates that the Adapter pattern is useful for designing stacks and queues. The demonstration code is shown in Listing 1.</p>\n<h3 id=\"Listing-1-Using-the-Adapter-pattern-for-stacks-and-queues\"><a href=\"#Listing-1-Using-the-Adapter-pattern-for-stacks-and-queues\" class=\"headerlink\" title=\"Listing 1. Using the Adapter pattern for stacks and queues\"></a>Listing 1. Using the Adapter pattern for stacks and queues</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DequeStack</span> <span class=\"keyword\">implements</span> <span class=\"title\">Stack</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Deque D; <span class=\"comment\">// holds the elements of the stack</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DequeStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        D = <span class=\"keyword\">new</span> MyDeque();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> D.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> D.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        D.insertLast(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">top</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> StackEmptyException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> D.lastElement();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(DequeEmptyException err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> StackEmptyException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">pop</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> StackEmptyException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> D.removeLast();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(DequeEmptyException err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> StackEmptyException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 1 excerpts (摘录) the Brown University paper’s DequeStack class, which demonstractes the Adapter pattern. Note that Stack and Deque are interfaces that describe Stack and Deque ADTs. MyDeque in a class that implements Deque.</p>\n<blockquote>\n<p>Overriding interface methods<br>The original code that Listing 1 is based on didn’t persent the source code to Stack, Deque, and MyDeque. For clarity, I’ve introduced @Override annotations to show that all of DequeStack’s non-constructor methods override Stack method.</p>\n</blockquote>\n<p>DequeStack adapts (改编) MyDeque so that it can implements Stack. All of DequeStack’s method are one-line calls to the Deque interface’s methods. However, there is a small wrinkle in which Deque exceptions are converted into Stack exceptions.</p>\n<h2 id=\"What-is-an-algorithm\"><a href=\"#What-is-an-algorithm\" class=\"headerlink\" title=\"What is an algorithm?\"></a>What is an algorithm?</h2><p>Historically used as a tool for mathematical computation, algorithms are deeply connected with computer science, and with data structures in particular. An algorithm is a sequence of instructions that accomplishes (完成) a task in a finite period of time. Qualities of an algorithm are as follows:</p>\n<ul>\n<li>Receives zero or more inputs</li>\n<li>Produces at least one output</li>\n<li>Consists of clear and unambiguous (清晰的) instructions (指令)</li>\n<li>Terminates after a finite (有限的) number of steps</li>\n<li>Is basic enough that a person can carry it out using a pencil and paper</li>\n</ul>\n<p>Note that while programs may be algorithmic. One example is a code sequence that prints a report. Mote famously, Euclid’s algorithm is used to calculate the mathematical greatest common divisor (最大公约数). A case could be even be made that a data structure’s basic operations (such as store value in array slot) are algorithms. In this series, for the most part, I’ll focus on higher-level algorithm used to process data structures, such as the Binary Search and Matrix Multiplication algorithms.</p>\n<h3 id=\"Flowcharts-and-pseudocode-伪码\"><a href=\"#Flowcharts-and-pseudocode-伪码\" class=\"headerlink\" title=\"Flowcharts and pseudocode (伪码)\"></a>Flowcharts and pseudocode (伪码)</h3><p>How do you represent an alogorithm? Writing code before fully understanding its underlying algorithm can lead to bugs, so what’s a beeter alternative? Two options are flowcharts and preudocode.</p>\n<h3 id=\"Using-flowcharts-to-represent-algorithms\"><a href=\"#Using-flowcharts-to-represent-algorithms\" class=\"headerlink\" title=\"Using flowcharts to represent algorithms\"></a>Using flowcharts to represent algorithms</h3><p>A flowcahrt is a visual representation of an algorithm’s control flow. This representation illustrates (阐明) that need to be executed, decisions that need to be made, logic flow (for iteration and other purposes), and terminals that indicate (表明) start and end points. Figure 1 reveals the various symbols that flowcharts use to visualize algorithms.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. Flowcharts use symbols to represent statement, decisions, logic flow, and terminals\"></p>\n<p>Consider an algorithm that initializes a counter to 0, reads characters until a newline (<code>\\n</code>) character is seen, increments the counter for each digit character that’s beed read, and prints the counter’s value after the newline character has been read. The flowchart in Figure 2 illustrates this algorithm’s control flow：<br><img src=\"002.jpg\" alt=\"Figure 2. This flowchart show how to count from 0 to 9\"></p>\n<p>A flowchart’s simplicity and its ability to present an algorithm’s control flow visually (so that it’s is easy to folow) are its major advantages. Flowcharts also have several disadvantages (不利), however:</p>\n<ul>\n<li>It’s easy to introduce errors or inaccuracies (误差) into highly-detailed flowcharts because of the tedium (啰嗦) associated with drawing them</li>\n<li>It takes time to position, label, and connect a flowchart’s symbols, even using tools to speed up this process. This delay might slow your understanding of an algorithm</li>\n<li>Flowcharts belong to the structured programming (结构化编程) era and aren’t as useful in an object-oriented. In constract, the Unified Modeling Language (UML) is more appropriate for creating object-oriented visual representations.</li>\n</ul>\n<h3 id=\"Using-pseudocode-to-represent-algorithms\"><a href=\"#Using-pseudocode-to-represent-algorithms\" class=\"headerlink\" title=\"Using pseudocode to represent algorithms\"></a>Using pseudocode to represent algorithms</h3><p>An alternative (可供替代的) to flowcharts is pseudocode, which is a textual representation of an algorithm that approximates (接近) the final souce code. Pseudocode is useful for quickly writing down an algorithm’s representation. Because syntax is not a concern, there are no hard-and-fast rules for writing pseudocode.</p>\n<p>You should strive (努力) for consistency (一致性) when writing pseudocode. Being consistent will make it much easier to translate the pseudocode into actual source code. For example, consider the following pseudocode representation of the previous counter-oriented flowchart:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE CHARACTER ch = &apos;&apos;</span><br><span class=\"line\">DECLARE INTEGER count = 0</span><br><span class=\"line\">DO</span><br><span class=\"line\">    READ ch</span><br><span class=\"line\">    IF ch GE &apos;0&apos; AND ch LE &apos;9&apos; THEN </span><br><span class=\"line\">        count = count + 1</span><br><span class=\"line\">    END IF</span><br><span class=\"line\">UNTIL ch EQ &apos;\\n&apos;</span><br><span class=\"line\">PRINT count</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>The pseudocode first presnets a couple of DECLARE statements that introduce variables ch and count, initialized to default values. It then presents a DO loop that executes UNTIL ch contains <code>\\n</code> (the newline character), at which point the loop ends and a PRINT statement outputs count’s value.</p>\n<p>For each loop iteration, READ causes a character to be read from the keyboard (or perhaps a file — in this case it doesn’t matter what constitues the underlying input source) and assigned to ch. If this character is a digit (ont of 0 through 9), count is incremented by 1.</p>\n<h3 id=\"Choosing-the-right-algorithm\"><a href=\"#Choosing-the-right-algorithm\" class=\"headerlink\" title=\"Choosing the right algorithm\"></a>Choosing the right algorithm</h3><p>The data structures and algorithms you use critically (严重地) affect two factors in your applications:</p>\n<ol>\n<li>Memory useage (for data structures)</li>\n<li>CPU time (for algorithms that interact (互动) with those data structures)</li>\n</ol>\n<p>It follows that you should be especially mindful of the algorithms and data structures you use for applications that will process lost of data. These include applications used for big data and the Internet of Things.</p>\n<blockquote>\n<p>Balancing memory and CPU<br>When choosing a data structure or algorithm, you will somtimes discover an inverse relationship between memory useage and CPU time: the less memory a data structure uses, the more CPU time associated algorithms need to process the data structure’s data items. Also, the more memory a data structure uses, the less CPU time associated algorithems will nedd to process the data items-leading to faster algorithm results.</p>\n</blockquote>\n<p>As much as possible, you should strive to balance memory use with CPU time. You can simplify this task by analyzing algorithm to determine their efficiency. How well does one algorithm preform against another of similar nature? Answering this question will help you make good choices given a choice between multiple algorithms.</p>\n<h3 id=\"Measuring-algorithm-efficiency\"><a href=\"#Measuring-algorithm-efficiency\" class=\"headerlink\" title=\"Measuring algorithm efficiency\"></a>Measuring algorithm efficiency</h3><p>Some algorithms preform better than others. For example, the Binary Search algorithm is almost always more efficient than the Linear Search algorithm. You want to choose the most efficient algorithm for your application’s needs, but that choice might not be as obvious as you would think.</p>\n<p>For instance, what does it mean if the Selection Sort algorithm takes 0.4 seconds to sort 10000 integers on a given machine? That benchmark is only valid for that particular machine, that particular implementation of the algorithm, and for the size of the input data.</p>\n<p>As computer scientist, we use time complextiy and space complexity to measure an algorithm’s efficiency, distilling these into complexity functions to abstract implementation and runtime enviroment details. Conplexity functions reveal the variance in an algorithm’s time and space reuirements based on the amount of input data:</p>\n<ul>\n<li>A time-complexity function measures an algorithm’s time complexity — meaning how long an algorithm takes to complete</li>\n<li>A space-complexity function measures an algorithm’s space complexity — meaning the amount of memory overhead (开销) required by the algorithm to preform its task</li>\n</ul>\n<p>Both complexity functions are based on the size of input (n), which somehow reflects the amount of input data. Consider the follwoing preudocode for array printing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER i, x[] = [ 10, 15, -1, 32 ]</span><br><span class=\"line\">FOR i = 0 TO LENGTH(x) - 1</span><br><span class=\"line\">   PRINT x[i]</span><br><span class=\"line\">NEXT i</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Time-complexity-and-time-complexity-functions\"><a href=\"#Time-complexity-and-time-complexity-functions\" class=\"headerlink\" title=\"Time complexity and time-complexity functions\"></a>Time complexity and time-complexity functions</h2><p>You can express the time complexty of this algorithm by specifying the time-complexity function $t(n) = an + b$, where $a$ (a constant multiplier) represents the amount of time to complete one loop  iteration, and $b$ represents the algorithm’s setup time. In this example, the time complexity is linear.</p>\n<p>The $t(n) = an + b$ function assumes that time complexity is measured in terms of a chronological (按时间顺序的) value (such as seconds). Because you’ll want to abstract machine details, you’ll often express time complexity as the number of setps to complete.</p>\n<p>How we define a step can vary from (不同于) one algorithm to another. In this case, if you indentified the single print instruction as the program’s step, you would rewrite the time-complexcity function in terms of the printing step: $t(n) = n$; for $n$ arrays elements, $n$ steps are needed to print the array.</p>\n<p>It’s important to take care when defining an algorithm’s steps, so that the definition is meaningful (有意义的) and correlates with the algorithm’s input size. For example, it makes sense to define printing as the steps for the array-printing algorithm, because printing dominates (控制) the runtime and depends on the input size (number of array elements to print).</p>\n<p>It’s also possible to define steps in terms of comparisons (比较) and exchanges. In a sorting algorithm, for instance, you might define steps in terms of comparisons if comparisons dominate the runtime or exchanges dominate the runtime.</p>\n<p>It’s fairly easy to choose a time-complexity function for the array-printing example, but it can be more difficult to find this function for more complicated algorithms. Use the following rules-of -thumb to simplify this task: </p>\n<ul>\n<li>Algorithms with single loops are typically linear — their time-complexity functions are specified in terms of $n$</li>\n<li>Algorithms with two nested loops are typically quadratic — their time-complexity functions are specified in terms of $n^2$</li>\n<li>Algorithms with a triply-nested loop are typically cubic — their time-complexity functions are spceified in terms of $n^3$</li>\n<li>The pattern continues with quadruply and higher nested loops</li>\n</ul>\n<p>There rules-of-thumb (经验法则) work best when a loop executes $n$ times (where $n$ is the size of the input data). This isn’t always the case, however, as demonstrated by the Selection Sort algorithm represented in pseudocode below:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER i, min, pass</span><br><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">FOR pass = <span class=\"number\">0</span> <span class=\"function\">TO <span class=\"title\">LENGTH</span><span class=\"params\">(x)</span> - 2</span></span><br><span class=\"line\"><span class=\"function\">   min </span>= pass</span><br><span class=\"line\">   FOR i = pass + <span class=\"number\">1</span> <span class=\"function\">TO <span class=\"title\">LENGTH</span><span class=\"params\">(x)</span> - 1</span></span><br><span class=\"line\"><span class=\"function\">      IF x[i] LT x[min] THEN</span></span><br><span class=\"line\"><span class=\"function\">         min </span>= i</span><br><span class=\"line\">      END IF</span><br><span class=\"line\">   NEXT i</span><br><span class=\"line\">   IF min NE pass THEN</span><br><span class=\"line\">      EXCHANGE x[min], x[pass]</span><br><span class=\"line\">   END IF</span><br><span class=\"line\">NEXT pass</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Because this algorithm consists of thw nested loops, you might think that its preformance is quadratic. That’t only partially correct, however, because the algorithm’s performanc depends on whether you choose comparisons (比较) or exchanges as the algorithm’s step:</p>\n<ul>\n<li>If you choose an exchange as one step (bacause you think that exchanges dominate the runtime) you end up with a linear time-complexity function bacause $n - 1$ exchagnes are required to sort $n$ data items. This function is specified as $t(n) = n - 1$.</li>\n<li>If you choose a comparison as one step (bacause you think that comparison deminate the runtime) you end up with $t(n) = (n - 1) + (n - 2) + … + 1$, which sortens to $t(n) = \\frac{n^2}{2} - \\frac{n}{2}$. Comparison occur in the inner loop, which executes $n-1$ times for the first outer loop iteration, $n-2$ for the second, and so on down to once for the final outer loop iteration.</li>\n</ul>\n<h2 id=\"Space-complexity-and-space-complexity-funtions\"><a href=\"#Space-complexity-and-space-complexity-funtions\" class=\"headerlink\" title=\"Space complexity and space-complexity funtions\"></a>Space complexity and space-complexity funtions</h2><p>An algorithm’s space complexity indicates the amount of extra memory needed to accomplish its task. For printing an array, a constant amount of extra memory (for code storege, stack space to store the return address whwen <code>PRINT</code> is called, and space for varialbe <code>i</code>‘s value) is needed no matter how lager the array.</p>\n<p>You can express the array-printing algorithm’s space complexity via space-complexity function $s(n) = c$, where $c$ signifies how much constant additional space is requried. This value represents overhead only; it doesn’t include space for the data being processed. In this case, it doesn’t include the array.</p>\n<p>Space complexity is expressed in terms of mechine-independent memory cells instead of mechine-dependent bytes. A memory cell holds some kind of data. For the array-printing algorithm, <code>i</code>‘s memory cell stores an integer value.</p>\n<h2 id=\"Comparing-algorithms\"><a href=\"#Comparing-algorithms\" class=\"headerlink\" title=\"Comparing algorithms\"></a>Comparing algorithms</h2><p>You use time complexity and space complexity functions to compare the algorihm to other of a similar nature (one sorting algorithm to another sorting algorithm, for example). In order to ensure a fair comparison, you must use the same definition for step and memory cell in each algorithm.</p>\n<p>Even when you chosen identical (完全同样的) step an memory cell definations, however, comparing algorithms can still prove tricky (难办的). Because complexities are often nonlinear, an algorithm’s input size can greatly affect the comparison result. As an example, consider two time-compleity functions:</p>\n<ul>\n<li>$t_1(n) = 10n^2 + 15n$</li>\n<li>$t_2(n) = 150n + 5$</li>\n</ul>\n<p>When $n$ equals 1, $t_1$ yields 25 steps, whereas $t_2$ yields 155 steps. In this case, $t_1$ is clearly better. This pattern continues until $n$ equals 14, at which point $t_1$ yields 2170 steps and $t_2$ yields 2105 steps. In this case, $t_2$ is the much better choice for this and successor value of $n$.</p>\n<h2 id=\"Using-Big-oh-to-represent-upper-bounds\"><a href=\"#Using-Big-oh-to-represent-upper-bounds\" class=\"headerlink\" title=\"Using Big oh to represent upper bounds\"></a>Using Big oh to represent upper bounds</h2><p>Computer scientists commonly compare algorithms as $n$ tends (趋于) to infinity (无限); this is knwon as asymptotic analysic (渐近分析). Complexity functions serve as the upper bound (上界) of the algorithm’s asymptotic behavior (as $n$ approaches (接近) infinity), and a notation (标记法) called Big Oh is used to represent these upper bounds. Here’s the formal (正规的) defination for Big Oh:</p>\n<blockquote>\n<p>A function $f(n)$ is $O(g(n))$ if and only if there exist two constants $c$ and $n_0$ such that $f(n) &lt;= cg(n)$ for all $n &gt;= n_0$</p>\n</blockquote>\n<p>Note: $n$, $f(n)$, $c$, and $n_0$ must be positive.</p>\n<p>$f(n)$ represents the algorithm’s computing time. When we say that this function is $O(g(n))$, we mean that (in terms of steps) it takes no longer than a constant multiplied by $g(n)$ for this function to execute. For example, here are the Big Oh notations for the previous time-complexity functions:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{equation}\\begin{split}\nt_1(n) &= O(n^2) \\\\\nt_2(n) &= O(n)\n\\end{split}\\end{equation}</script><blockquote>\n<p>Simplifying Big Oh<br>It’s common to throw away all terms (条件) except the largest and any constant multiplier for the largest term when specifiying $g(n)$. For example, you would speicfy $O(n)$ instead of $O(150n + 5)$</p>\n</blockquote>\n<h2 id=\"Comparing-algorithms-with-Big-Oh\"><a href=\"#Comparing-algorithms-with-Big-Oh\" class=\"headerlink\" title=\"Comparing algorithms with Big Oh\"></a>Comparing algorithms with Big Oh</h2><p>Suppose the Selection Sort algorithm if followed by the Array Printing algorithm. Because each algorithm offers it own time-complexity function, what is the overall time-complexity function for both algorithm? The answer is if $f_1(n) = O(g(n))$ and $f_2(n) = O(h(n))$ then:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{equation}\\begin{split}\n\n(A) f_1(n) + f_2(n)      &= max(O(g(n)), O(h(n))) \\\\\n(B) f_1(n) \\times f_2(n) &= O(g(n) \\times h(n))\n\n\\end{split}\\end{equation}</script><p>Part A covers cases where algorithm follow each other sequentially. For the Selection Sort algorithm followed by the Array Printing algorithm, the overall time-complexity function is the maxinum of each algorithm’s time-complexity function, which happens to be $O(n^2)$ (assming that comparisons are the dominant steps).</p>\n<p>Part B covers where one algorithm nests inside another. For example, suppose the Array Printing algorithm is called after Selection Sort performs an exchange. Assuming that the sort’s time-complxity function if $O(n^2)$ (comparisons are dominant), the overall time complexity changes to $O(n^3)$.</p>\n<p>How do you choose an efficient algorithm that means your application’s needs? Start by obtaining the Big Oh-bounded time-complexity functions for the candidate algorithms being  considered, then deciding the range of $n$ values that will be input to these functions (and, hence (因此), the algorithms).</p>\n<p>Because it helps to see the impact (冲击) of various $n$ values in a tatular (表格式的) format, I’ve constructed a table that correlates the number of steps with common Big Oh-bounded time-complexity functions and various $n$ value. This table is presented in Figure 3.</p>\n<p><img src=\"003.jpg\" alt=\"Figure 3. Correlating step counts with common Big Oh-bounded time-complexity functions and various n values\"></p>\n<p>The Big Oh-bouded time-complexity functions are sorted from the most efficient function (constant) at the top to the least efficient function (exponential 指数) at the bottom. As you move down the table, notice the functions becoming less efficient (with more steps to complete) for $n$ values starting at 16.</p>\n<p>It would be great if all algorithm were $O(1)$ becuase the would all be equally efficient. Because this doesn’t happen in the real world, you need to carefully choose the most efficient algorithm based on Big Oh-bounded time-complexity functions and the desired range of $n$ values.</p>\n<p>Keep in mind that more efficient algorithms may be harder to code than less efficient ones. If the range of $n$ input values doesn’t result in too many steps, you may find that it’s better to use a less efficient algorithm with a smaller input range than a more efficient algorithm with a lager input range. You’ll see an example of this in Part 2.</p>\n"},{"title":"五. 配置文件","date":"2019-07-19T16:00:00.000Z","_content":"\n配置文件由指令及其参数组成。 简单(单行)指令各自以分号结尾。 其他指令作为“容器”，将相关指令组合在一起，将其包围在花括号`{}`中。\n\n## location 指令\nhttp服务中，某些特定的URL对应的一系列配置项。\n\n- `root /var/www/html`\n  定义服务器的默认网站根目录位置。如果`location` URL 匹配的是子目录或文件，`root` 没什么作用，一般放在 `server` 指令里面或 `/` 下。\n- `index index.jsp index.html index.htm`\n  定义路径下默认访问的文件名，一般跟着 `root` 放。\n- `proxy_pass http://backend`\n  请求转向 backend 定义的服务器列表，即反向代理，对应 `upstream` 负载均衡器。也可以 `proxy_pass http://ip:port`。\n- `proxy_redirect off;proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;`\n\n```conf\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n```\n\n## 中文详解\n\n```conf\n#定义Nginx运行的用户和用户组\nuser www www;\n\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n \n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /usr/local/nginx/logs/error.log info;\n\n#进程pid文件\npid /usr/local/nginx/logs/nginx.pid;\n\n#指定进程可以打开的最大描述符：数目\n#工作模式与连接数上限\n#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。\n#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。\n#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。\nworker_rlimit_nofile 65535;\n\n\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型\n    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。\n    #补充说明：\n    #与apache相类，nginx针对不同的操作系统，有不同的事件模型\n    #A）标准事件模型\n    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll\n    #B）高效事件模型\n    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。\n    #Epoll：使用于Linux内核2.6版本及以后的系统。\n    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。\n    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。\n    use epoll;\n\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。\n    worker_connections 65535;\n\n    #keepalive超时时间。\n    keepalive_timeout 60;\n\n    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。\n    #分页大小可以用命令getconf PAGESIZE 取得。\n    #[root@web001 ~]# getconf PAGESIZE\n    #4096\n    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。\n    client_header_buffer_size 4k;\n\n    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。\n    open_file_cache max=65535 inactive=60s;\n\n    #这个是指多长时间检查一次缓存的有效信息。\n    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.\n    open_file_cache_valid 80s;\n\n    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。\n    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.\n    open_file_cache_min_uses 1;\n    \n    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误.\n    open_file_cache_errors on;\n}\n \n \n \n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp\n{\n    #文件扩展名与文件类型映射表\n    include mime.types;\n\n    #默认文件类型\n    default_type application/octet-stream;\n\n    #默认编码\n    #charset utf-8;\n\n    #服务器名字的hash表大小\n    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.\n    server_names_hash_bucket_size 128;\n\n    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。\n    client_header_buffer_size 32k;\n\n    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。\n    large_client_header_buffers 4 64k;\n\n    #设定通过nginx上传文件的大小\n    client_max_body_size 8m;\n\n    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。\n    sendfile on;\n\n    #开启目录列表访问，合适下载服务器，默认关闭。\n    autoindex on;\n\n    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用\n    tcp_nopush on;\n     \n    tcp_nodelay on;\n\n    #长连接超时时间，单位是秒\n    keepalive_timeout 120;\n\n    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n    #gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k;    #最小压缩文件大小\n    gzip_buffers 4 16k;    #压缩缓冲区\n    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2;    #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n    #开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n\n\n    #负载均衡配置\n    upstream jh.w3cschool.cn {\n     \n        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n\n        #nginx的upstream目前支持4种方式的分配\n        #1、轮询（默认）\n        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。\n        #2、weight\n        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。\n        #例如：\n        #upstream bakend {\n        #    server 192.168.0.14 weight=10;\n        #    server 192.168.0.15 weight=10;\n        #}\n        #2、ip_hash\n        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n        #例如：\n        #upstream bakend {\n        #    ip_hash;\n        #    server 192.168.0.14:88;\n        #    server 192.168.0.15:80;\n        #}\n        #3、fair（第三方）\n        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n        #upstream backend {\n        #    server server1;\n        #    server server2;\n        #    fair;\n        #}\n        #4、url_hash（第三方）\n        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。\n        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法\n        #upstream backend {\n        #    server squid1:3128;\n        #    server squid2:3128;\n        #    hash $request_uri;\n        #    hash_method crc32;\n        #}\n\n        #tips:\n        #upstream bakend{#定义负载均衡设备的Ip及设备状态}{\n        #    ip_hash;\n        #    server 127.0.0.1:9090 down;\n        #    server 127.0.0.1:8080 weight=2;\n        #    server 127.0.0.1:6060;\n        #    server 127.0.0.1:7070 backup;\n        #}\n        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;\n\n        #每个设备的状态设置为:\n        #1.down表示单前的server暂时不参与负载\n        #2.weight为weight越大，负载的权重就越大。\n        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误\n        #4.fail_timeout:max_fails次失败后，暂停的时间。\n        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n\n        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。\n        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug\n        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录\n        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡\n    }\n     \n     \n     \n    #虚拟主机的配置\n    server\n    {\n        #监听端口\n        listen 80;\n\n        #域名可以有多个，用空格隔开\n        server_name www.w3cschool.cn w3cschool.cn;\n        index index.html index.htm index.php;\n        root /data/www/w3cschool;\n\n        #对******进行负载均衡\n        location ~ .*.(php|php5)?$\n        {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            include fastcgi.conf;\n        }\n         \n        #图片缓存时间设置\n        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n        {\n            expires 10d;\n        }\n         \n        #JS和CSS缓存时间设置\n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n         \n        #日志格式设定\n        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；\n        #$remote_user：用来记录客户端用户名称；\n        #$time_local： 用来记录访问时间与时区；\n        #$request： 用来记录请求的url与http协议；\n        #$status： 用来记录请求状态；成功是200，\n        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；\n        #$http_referer：用来记录从那个页面链接访问过来的；\n        #$http_user_agent：记录客户浏览器的相关信息；\n        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。\n        log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n        '$status $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" $http_x_forwarded_for';\n         \n        #定义本虚拟主机的访问日志\n        access_log  /usr/local/nginx/logs/host.access.log  main;\n        access_log  /usr/local/nginx/logs/host.access.404.log  log404;\n         \n        #对 \"/\" 启用反向代理\n        location / {\n            proxy_pass http://127.0.0.1:88;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n             \n            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n             \n            #以下是一些反向代理的配置，可选。\n            proxy_set_header Host $host;\n\n            #允许客户端请求的最大单文件字节数\n            client_max_body_size 10m;\n\n            #缓冲区代理缓冲用户端请求的最大字节数，\n            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。\n            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误\n            client_body_buffer_size 128k;\n\n            #表示使nginx阻止HTTP应答代码为400或者更高的应答。\n            proxy_intercept_errors on;\n\n            #后端服务器连接的超时时间_发起握手等候响应超时时间\n            #nginx跟后端服务器连接超时时间(代理连接超时)\n            proxy_connect_timeout 90;\n\n            #后端服务器数据回传时间(代理发送超时)\n            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据\n            proxy_send_timeout 90;\n\n            #连接成功后，后端服务器响应时间(代理接收超时)\n            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）\n            proxy_read_timeout 90;\n\n            #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小\n            proxy_buffer_size 4k;\n\n            #proxy_buffers缓冲区，网页平均在32k以下的设置\n            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k\n            proxy_buffers 4 32k;\n\n            #高负荷下缓冲大小（proxy_buffers*2）\n            proxy_busy_buffers_size 64k;\n\n            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长\n            #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n            proxy_temp_file_write_size 64k;\n        }\n         \n         \n        #设定查看Nginx状态的地址\n        location /NginxStatus {\n            stub_status on;\n            access_log on;\n            auth_basic \"NginxStatus\";\n            auth_basic_user_file confpasswd;\n            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n        }\n         \n        #本地动静分离反向代理配置\n        #所有jsp的页面均交由tomcat或resin处理\n        location ~ .(jsp|jspx|do)?$ {\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass http://127.0.0.1:8080;\n        }\n         \n        #所有静态文件由nginx直接读取不经过tomcat或resin\n        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|\n        pdf|xls|mp3|wma)$\n        {\n            expires 15d; \n        }\n         \n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n    }\n}\n```\n\n## 常用配置\n\n1. 只接收 http 请求\n```conf\nserver {\n    listen 80;\n    server_name www.china-note.com;\n    return 301 https://$host$request_uri;\n    index index.html index.htm index.jsp;\n\n    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;\n}\n```\n\n1. 只接收 https 请求\n```conf\nserver {\n    listen 80;\n    server_name www.china-note.com;\n    return 301 https://$host$request_uri;\n    index index.html index.htm index.jsp;\n\n    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;\n}\n\nserver {\n    listen 443 ssl;\n    server_name www.china-note.com;\n    index index.html index.htm index.jsp;\n\n    ssl on;\n    ssl_certificate     /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.pem;\n    ssl_certificate_key /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n\n    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;\n\n    location ^~ /admin {\n        alias /data/deploy/Web/newProjects/overseasProperty/overseasPropertySystem/dist;\n        try_files $uri $uri/ /admin/index.html;\n    }\n\n    location ^~ /api {\n        proxy_pass http://localhost:60834;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header X-nginx-real-ip $remote_addr;\n        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;\n    }\n}\n```\n\n1. 同时接收 http 和 https 请求\n\n\n1. http 请求转 https\n```conf\nserver {\n    listen 80;\n    server_name www.china-note.com;\n    return 301 https://$host$request_uri;\n    index index.html index.htm index.jsp;\n\n    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;\n}\n\nserver {\n    listen 443 ssl;\n    server_name www.china-note.com;\n    index index.html index.htm index.jsp;\n\n    ssl on;\n    ssl_certificate     /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.pem;\n    ssl_certificate_key /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n\n    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;\n\n    location ^~ /admin {\n        alias            /data/deploy/Web/newProjects/overseasProperty/overseasPropertySystem/dist;\n        try_files $uri   $uri/ /admin/index.html;\n    }\n\n    location ^~ /api {\n        proxy_pass       http://localhost:60834;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header X-nginx-real-ip $remote_addr;\n        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;\n    }\n}\n```\n\n1. https 请求转 http","source":"_posts/Nginx 教程/5. 配置文件.md","raw":"---\ntitle: 五. 配置文件\n\ncategories:\n- Nginx 教程\n\ntag:\n- Nginx\n\ndate: 2019-07-20\n---\n\n配置文件由指令及其参数组成。 简单(单行)指令各自以分号结尾。 其他指令作为“容器”，将相关指令组合在一起，将其包围在花括号`{}`中。\n\n## location 指令\nhttp服务中，某些特定的URL对应的一系列配置项。\n\n- `root /var/www/html`\n  定义服务器的默认网站根目录位置。如果`location` URL 匹配的是子目录或文件，`root` 没什么作用，一般放在 `server` 指令里面或 `/` 下。\n- `index index.jsp index.html index.htm`\n  定义路径下默认访问的文件名，一般跟着 `root` 放。\n- `proxy_pass http://backend`\n  请求转向 backend 定义的服务器列表，即反向代理，对应 `upstream` 负载均衡器。也可以 `proxy_pass http://ip:port`。\n- `proxy_redirect off;proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;`\n\n```conf\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n```\n\n## 中文详解\n\n```conf\n#定义Nginx运行的用户和用户组\nuser www www;\n\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n \n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /usr/local/nginx/logs/error.log info;\n\n#进程pid文件\npid /usr/local/nginx/logs/nginx.pid;\n\n#指定进程可以打开的最大描述符：数目\n#工作模式与连接数上限\n#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。\n#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。\n#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。\nworker_rlimit_nofile 65535;\n\n\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型\n    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。\n    #补充说明：\n    #与apache相类，nginx针对不同的操作系统，有不同的事件模型\n    #A）标准事件模型\n    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll\n    #B）高效事件模型\n    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。\n    #Epoll：使用于Linux内核2.6版本及以后的系统。\n    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。\n    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。\n    use epoll;\n\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。\n    worker_connections 65535;\n\n    #keepalive超时时间。\n    keepalive_timeout 60;\n\n    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。\n    #分页大小可以用命令getconf PAGESIZE 取得。\n    #[root@web001 ~]# getconf PAGESIZE\n    #4096\n    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。\n    client_header_buffer_size 4k;\n\n    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。\n    open_file_cache max=65535 inactive=60s;\n\n    #这个是指多长时间检查一次缓存的有效信息。\n    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.\n    open_file_cache_valid 80s;\n\n    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。\n    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.\n    open_file_cache_min_uses 1;\n    \n    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误.\n    open_file_cache_errors on;\n}\n \n \n \n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp\n{\n    #文件扩展名与文件类型映射表\n    include mime.types;\n\n    #默认文件类型\n    default_type application/octet-stream;\n\n    #默认编码\n    #charset utf-8;\n\n    #服务器名字的hash表大小\n    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.\n    server_names_hash_bucket_size 128;\n\n    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。\n    client_header_buffer_size 32k;\n\n    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。\n    large_client_header_buffers 4 64k;\n\n    #设定通过nginx上传文件的大小\n    client_max_body_size 8m;\n\n    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。\n    sendfile on;\n\n    #开启目录列表访问，合适下载服务器，默认关闭。\n    autoindex on;\n\n    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用\n    tcp_nopush on;\n     \n    tcp_nodelay on;\n\n    #长连接超时时间，单位是秒\n    keepalive_timeout 120;\n\n    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n    #gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k;    #最小压缩文件大小\n    gzip_buffers 4 16k;    #压缩缓冲区\n    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2;    #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n    #开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n\n\n    #负载均衡配置\n    upstream jh.w3cschool.cn {\n     \n        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n\n        #nginx的upstream目前支持4种方式的分配\n        #1、轮询（默认）\n        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。\n        #2、weight\n        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。\n        #例如：\n        #upstream bakend {\n        #    server 192.168.0.14 weight=10;\n        #    server 192.168.0.15 weight=10;\n        #}\n        #2、ip_hash\n        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n        #例如：\n        #upstream bakend {\n        #    ip_hash;\n        #    server 192.168.0.14:88;\n        #    server 192.168.0.15:80;\n        #}\n        #3、fair（第三方）\n        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n        #upstream backend {\n        #    server server1;\n        #    server server2;\n        #    fair;\n        #}\n        #4、url_hash（第三方）\n        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。\n        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法\n        #upstream backend {\n        #    server squid1:3128;\n        #    server squid2:3128;\n        #    hash $request_uri;\n        #    hash_method crc32;\n        #}\n\n        #tips:\n        #upstream bakend{#定义负载均衡设备的Ip及设备状态}{\n        #    ip_hash;\n        #    server 127.0.0.1:9090 down;\n        #    server 127.0.0.1:8080 weight=2;\n        #    server 127.0.0.1:6060;\n        #    server 127.0.0.1:7070 backup;\n        #}\n        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;\n\n        #每个设备的状态设置为:\n        #1.down表示单前的server暂时不参与负载\n        #2.weight为weight越大，负载的权重就越大。\n        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误\n        #4.fail_timeout:max_fails次失败后，暂停的时间。\n        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n\n        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。\n        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug\n        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录\n        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡\n    }\n     \n     \n     \n    #虚拟主机的配置\n    server\n    {\n        #监听端口\n        listen 80;\n\n        #域名可以有多个，用空格隔开\n        server_name www.w3cschool.cn w3cschool.cn;\n        index index.html index.htm index.php;\n        root /data/www/w3cschool;\n\n        #对******进行负载均衡\n        location ~ .*.(php|php5)?$\n        {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            include fastcgi.conf;\n        }\n         \n        #图片缓存时间设置\n        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n        {\n            expires 10d;\n        }\n         \n        #JS和CSS缓存时间设置\n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n         \n        #日志格式设定\n        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；\n        #$remote_user：用来记录客户端用户名称；\n        #$time_local： 用来记录访问时间与时区；\n        #$request： 用来记录请求的url与http协议；\n        #$status： 用来记录请求状态；成功是200，\n        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；\n        #$http_referer：用来记录从那个页面链接访问过来的；\n        #$http_user_agent：记录客户浏览器的相关信息；\n        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。\n        log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n        '$status $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" $http_x_forwarded_for';\n         \n        #定义本虚拟主机的访问日志\n        access_log  /usr/local/nginx/logs/host.access.log  main;\n        access_log  /usr/local/nginx/logs/host.access.404.log  log404;\n         \n        #对 \"/\" 启用反向代理\n        location / {\n            proxy_pass http://127.0.0.1:88;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n             \n            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n             \n            #以下是一些反向代理的配置，可选。\n            proxy_set_header Host $host;\n\n            #允许客户端请求的最大单文件字节数\n            client_max_body_size 10m;\n\n            #缓冲区代理缓冲用户端请求的最大字节数，\n            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。\n            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误\n            client_body_buffer_size 128k;\n\n            #表示使nginx阻止HTTP应答代码为400或者更高的应答。\n            proxy_intercept_errors on;\n\n            #后端服务器连接的超时时间_发起握手等候响应超时时间\n            #nginx跟后端服务器连接超时时间(代理连接超时)\n            proxy_connect_timeout 90;\n\n            #后端服务器数据回传时间(代理发送超时)\n            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据\n            proxy_send_timeout 90;\n\n            #连接成功后，后端服务器响应时间(代理接收超时)\n            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）\n            proxy_read_timeout 90;\n\n            #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小\n            proxy_buffer_size 4k;\n\n            #proxy_buffers缓冲区，网页平均在32k以下的设置\n            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k\n            proxy_buffers 4 32k;\n\n            #高负荷下缓冲大小（proxy_buffers*2）\n            proxy_busy_buffers_size 64k;\n\n            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长\n            #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n            proxy_temp_file_write_size 64k;\n        }\n         \n         \n        #设定查看Nginx状态的地址\n        location /NginxStatus {\n            stub_status on;\n            access_log on;\n            auth_basic \"NginxStatus\";\n            auth_basic_user_file confpasswd;\n            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n        }\n         \n        #本地动静分离反向代理配置\n        #所有jsp的页面均交由tomcat或resin处理\n        location ~ .(jsp|jspx|do)?$ {\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass http://127.0.0.1:8080;\n        }\n         \n        #所有静态文件由nginx直接读取不经过tomcat或resin\n        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|\n        pdf|xls|mp3|wma)$\n        {\n            expires 15d; \n        }\n         \n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n    }\n}\n```\n\n## 常用配置\n\n1. 只接收 http 请求\n```conf\nserver {\n    listen 80;\n    server_name www.china-note.com;\n    return 301 https://$host$request_uri;\n    index index.html index.htm index.jsp;\n\n    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;\n}\n```\n\n1. 只接收 https 请求\n```conf\nserver {\n    listen 80;\n    server_name www.china-note.com;\n    return 301 https://$host$request_uri;\n    index index.html index.htm index.jsp;\n\n    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;\n}\n\nserver {\n    listen 443 ssl;\n    server_name www.china-note.com;\n    index index.html index.htm index.jsp;\n\n    ssl on;\n    ssl_certificate     /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.pem;\n    ssl_certificate_key /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n\n    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;\n\n    location ^~ /admin {\n        alias /data/deploy/Web/newProjects/overseasProperty/overseasPropertySystem/dist;\n        try_files $uri $uri/ /admin/index.html;\n    }\n\n    location ^~ /api {\n        proxy_pass http://localhost:60834;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header X-nginx-real-ip $remote_addr;\n        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;\n    }\n}\n```\n\n1. 同时接收 http 和 https 请求\n\n\n1. http 请求转 https\n```conf\nserver {\n    listen 80;\n    server_name www.china-note.com;\n    return 301 https://$host$request_uri;\n    index index.html index.htm index.jsp;\n\n    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;\n}\n\nserver {\n    listen 443 ssl;\n    server_name www.china-note.com;\n    index index.html index.htm index.jsp;\n\n    ssl on;\n    ssl_certificate     /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.pem;\n    ssl_certificate_key /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n\n    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;\n\n    location ^~ /admin {\n        alias            /data/deploy/Web/newProjects/overseasProperty/overseasPropertySystem/dist;\n        try_files $uri   $uri/ /admin/index.html;\n    }\n\n    location ^~ /api {\n        proxy_pass       http://localhost:60834;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header X-nginx-real-ip $remote_addr;\n        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;\n    }\n}\n```\n\n1. https 请求转 http","slug":"Nginx 教程/5. 配置文件","published":1,"updated":"2020-04-12T08:28:29.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mct00clm33ptl8x8n0a","content":"<p>配置文件由指令及其参数组成。 简单(单行)指令各自以分号结尾。 其他指令作为“容器”，将相关指令组合在一起，将其包围在花括号<code>{}</code>中。</p>\n<h2 id=\"location-指令\"><a href=\"#location-指令\" class=\"headerlink\" title=\"location 指令\"></a>location 指令</h2><p>http服务中，某些特定的URL对应的一系列配置项。</p>\n<ul>\n<li><code>root /var/www/html</code><br>定义服务器的默认网站根目录位置。如果<code>location</code> URL 匹配的是子目录或文件，<code>root</code> 没什么作用，一般放在 <code>server</code> 指令里面或 <code>/</code> 下。</li>\n<li><code>index index.jsp index.html index.htm</code><br>定义路径下默认访问的文件名，一般跟着 <code>root</code> 放。</li>\n<li><code>proxy_pass http://backend</code><br>请求转向 backend 定义的服务器列表，即反向代理，对应 <code>upstream</code> 负载均衡器。也可以 <code>proxy_pass http://ip:port</code>。</li>\n<li><code>proxy_redirect off;proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_redirect off;</span><br><span class=\"line\">proxy_set_header Host $host;</span><br><span class=\"line\">proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure>\n<h2 id=\"中文详解\"><a href=\"#中文详解\" class=\"headerlink\" title=\"中文详解\"></a>中文详解</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义Nginx运行的用户和用户组</span><br><span class=\"line\">user www www;</span><br><span class=\"line\"></span><br><span class=\"line\">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"> </span><br><span class=\"line\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">error_log /usr/local/nginx/logs/error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程pid文件</span><br><span class=\"line\">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定进程可以打开的最大描述符：数目</span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class=\"line\">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span><br><span class=\"line\">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class=\"line\">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class=\"line\">    #补充说明：</span><br><span class=\"line\">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class=\"line\">    #A）标准事件模型</span><br><span class=\"line\">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class=\"line\">    #B）高效事件模型</span><br><span class=\"line\">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class=\"line\">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class=\"line\">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class=\"line\">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\"></span><br><span class=\"line\">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class=\"line\">    worker_connections 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive超时时间。</span><br><span class=\"line\">    keepalive_timeout 60;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class=\"line\">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class=\"line\">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class=\"line\">    #4096</span><br><span class=\"line\">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class=\"line\">    client_header_buffer_size 4k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class=\"line\">    open_file_cache max=65535 inactive=60s;</span><br><span class=\"line\"></span><br><span class=\"line\">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class=\"line\">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class=\"line\">    open_file_cache_valid 80s;</span><br><span class=\"line\"></span><br><span class=\"line\">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class=\"line\">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class=\"line\">    open_file_cache_min_uses 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误.</span><br><span class=\"line\">    open_file_cache_errors on;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class=\"line\">http</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #文件扩展名与文件类型映射表</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认文件类型</span><br><span class=\"line\">    default_type application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认编码</span><br><span class=\"line\">    #charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">    #服务器名字的hash表大小</span><br><span class=\"line\">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class=\"line\">    server_names_hash_bucket_size 128;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class=\"line\">    client_header_buffer_size 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class=\"line\">    large_client_header_buffers 4 64k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设定通过nginx上传文件的大小</span><br><span class=\"line\">    client_max_body_size 8m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">    autoindex on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class=\"line\">    tcp_nopush on;</span><br><span class=\"line\">     </span><br><span class=\"line\">    tcp_nodelay on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #长连接超时时间，单位是秒</span><br><span class=\"line\">    keepalive_timeout 120;</span><br><span class=\"line\"></span><br><span class=\"line\">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class=\"line\">    fastcgi_connect_timeout 300;</span><br><span class=\"line\">    fastcgi_send_timeout 300;</span><br><span class=\"line\">    fastcgi_read_timeout 300;</span><br><span class=\"line\">    fastcgi_buffer_size 64k;</span><br><span class=\"line\">    fastcgi_buffers 4 64k;</span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class=\"line\">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class=\"line\">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class=\"line\">    gzip_comp_level 2;    #压缩等级</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启限制IP连接数的时候需要使用</span><br><span class=\"line\">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    #负载均衡配置</span><br><span class=\"line\">    upstream jh.w3cschool.cn &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class=\"line\">        server 192.168.80.121:80 weight=3;</span><br><span class=\"line\">        server 192.168.80.122:80 weight=2;</span><br><span class=\"line\">        server 192.168.80.123:80 weight=3;</span><br><span class=\"line\"></span><br><span class=\"line\">        #nginx的upstream目前支持4种方式的分配</span><br><span class=\"line\">        #1、轮询（默认）</span><br><span class=\"line\">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class=\"line\">        #2、weight</span><br><span class=\"line\">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class=\"line\">        #例如：</span><br><span class=\"line\">        #upstream bakend &#123;</span><br><span class=\"line\">        #    server 192.168.0.14 weight=10;</span><br><span class=\"line\">        #    server 192.168.0.15 weight=10;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #2、ip_hash</span><br><span class=\"line\">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class=\"line\">        #例如：</span><br><span class=\"line\">        #upstream bakend &#123;</span><br><span class=\"line\">        #    ip_hash;</span><br><span class=\"line\">        #    server 192.168.0.14:88;</span><br><span class=\"line\">        #    server 192.168.0.15:80;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #3、fair（第三方）</span><br><span class=\"line\">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class=\"line\">        #upstream backend &#123;</span><br><span class=\"line\">        #    server server1;</span><br><span class=\"line\">        #    server server2;</span><br><span class=\"line\">        #    fair;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #4、url_hash（第三方）</span><br><span class=\"line\">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class=\"line\">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class=\"line\">        #upstream backend &#123;</span><br><span class=\"line\">        #    server squid1:3128;</span><br><span class=\"line\">        #    server squid2:3128;</span><br><span class=\"line\">        #    hash $request_uri;</span><br><span class=\"line\">        #    hash_method crc32;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #tips:</span><br><span class=\"line\">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class=\"line\">        #    ip_hash;</span><br><span class=\"line\">        #    server 127.0.0.1:9090 down;</span><br><span class=\"line\">        #    server 127.0.0.1:8080 weight=2;</span><br><span class=\"line\">        #    server 127.0.0.1:6060;</span><br><span class=\"line\">        #    server 127.0.0.1:7070 backup;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class=\"line\"></span><br><span class=\"line\">        #每个设备的状态设置为:</span><br><span class=\"line\">        #1.down表示单前的server暂时不参与负载</span><br><span class=\"line\">        #2.weight为weight越大，负载的权重就越大。</span><br><span class=\"line\">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class=\"line\">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class=\"line\">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class=\"line\"></span><br><span class=\"line\">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class=\"line\">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class=\"line\">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class=\"line\">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">     </span><br><span class=\"line\">     </span><br><span class=\"line\">    #虚拟主机的配置</span><br><span class=\"line\">    server</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        #监听端口</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">        #域名可以有多个，用空格隔开</span><br><span class=\"line\">        server_name www.w3cschool.cn w3cschool.cn;</span><br><span class=\"line\">        index index.html index.htm index.php;</span><br><span class=\"line\">        root /data/www/w3cschool;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对******进行负载均衡</span><br><span class=\"line\">        location ~ .*.(php|php5)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index index.php;</span><br><span class=\"line\">            include fastcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #图片缓存时间设置</span><br><span class=\"line\">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 10d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #JS和CSS缓存时间设置</span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #日志格式设定</span><br><span class=\"line\">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class=\"line\">        #$remote_user：用来记录客户端用户名称；</span><br><span class=\"line\">        #$time_local： 用来记录访问时间与时区；</span><br><span class=\"line\">        #$request： 用来记录请求的url与http协议；</span><br><span class=\"line\">        #$status： 用来记录请求状态；成功是200，</span><br><span class=\"line\">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class=\"line\">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class=\"line\">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class=\"line\">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class=\"line\">        log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">        &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">        &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #定义本虚拟主机的访问日志</span><br><span class=\"line\">        access_log  /usr/local/nginx/logs/host.access.log  main;</span><br><span class=\"line\">        access_log  /usr/local/nginx/logs/host.access.404.log  log404;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #对 &quot;/&quot; 启用反向代理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">             </span><br><span class=\"line\">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">             </span><br><span class=\"line\">            #以下是一些反向代理的配置，可选。</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\"></span><br><span class=\"line\">            #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">            client_max_body_size 10m;</span><br><span class=\"line\"></span><br><span class=\"line\">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class=\"line\">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class=\"line\">            client_body_buffer_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class=\"line\">            proxy_intercept_errors on;</span><br><span class=\"line\"></span><br><span class=\"line\">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class=\"line\">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">            proxy_connect_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class=\"line\">            proxy_send_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class=\"line\">            proxy_read_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class=\"line\">            proxy_buffer_size 4k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class=\"line\">            proxy_buffers 4 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">            proxy_busy_buffers_size 64k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class=\"line\">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\">            proxy_temp_file_write_size 64k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">         </span><br><span class=\"line\">        #设定查看Nginx状态的地址</span><br><span class=\"line\">        location /NginxStatus &#123;</span><br><span class=\"line\">            stub_status on;</span><br><span class=\"line\">            access_log on;</span><br><span class=\"line\">            auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">            auth_basic_user_file confpasswd;</span><br><span class=\"line\">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #本地动静分离反向代理配置</span><br><span class=\"line\">        #所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">        location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class=\"line\">        pdf|xls|mp3|wma)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 15d; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h2><ol>\n<li><p>只接收 http 请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.china-note.com;</span><br><span class=\"line\">    return 301 https://$host$request_uri;</span><br><span class=\"line\">    index index.html index.htm index.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只接收 https 请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.china-note.com;</span><br><span class=\"line\">    return 301 https://$host$request_uri;</span><br><span class=\"line\">    index index.html index.htm index.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name www.china-note.com;</span><br><span class=\"line\">    index index.html index.htm index.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate     /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.pem;</span><br><span class=\"line\">    ssl_certificate_key /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.key;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_ciphers &apos;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /admin &#123;</span><br><span class=\"line\">        alias /data/deploy/Web/newProjects/overseasProperty/overseasPropertySystem/dist;</span><br><span class=\"line\">        try_files $uri $uri/ /admin/index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /api &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:60834;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">        proxy_set_header X-nginx-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同时接收 http 和 https 请求</p>\n</li>\n</ol>\n<ol>\n<li><p>http 请求转 https</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.china-note.com;</span><br><span class=\"line\">    return 301 https://$host$request_uri;</span><br><span class=\"line\">    index index.html index.htm index.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name www.china-note.com;</span><br><span class=\"line\">    index index.html index.htm index.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate     /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.pem;</span><br><span class=\"line\">    ssl_certificate_key /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.key;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_ciphers &apos;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /admin &#123;</span><br><span class=\"line\">        alias            /data/deploy/Web/newProjects/overseasProperty/overseasPropertySystem/dist;</span><br><span class=\"line\">        try_files $uri   $uri/ /admin/index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /api &#123;</span><br><span class=\"line\">        proxy_pass       http://localhost:60834;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">        proxy_set_header X-nginx-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>https 请求转 http</p>\n</li>\n</ol>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>配置文件由指令及其参数组成。 简单(单行)指令各自以分号结尾。 其他指令作为“容器”，将相关指令组合在一起，将其包围在花括号<code>{}</code>中。</p>\n<h2 id=\"location-指令\"><a href=\"#location-指令\" class=\"headerlink\" title=\"location 指令\"></a>location 指令</h2><p>http服务中，某些特定的URL对应的一系列配置项。</p>\n<ul>\n<li><code>root /var/www/html</code><br>定义服务器的默认网站根目录位置。如果<code>location</code> URL 匹配的是子目录或文件，<code>root</code> 没什么作用，一般放在 <code>server</code> 指令里面或 <code>/</code> 下。</li>\n<li><code>index index.jsp index.html index.htm</code><br>定义路径下默认访问的文件名，一般跟着 <code>root</code> 放。</li>\n<li><code>proxy_pass http://backend</code><br>请求转向 backend 定义的服务器列表，即反向代理，对应 <code>upstream</code> 负载均衡器。也可以 <code>proxy_pass http://ip:port</code>。</li>\n<li><code>proxy_redirect off;proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_redirect off;</span><br><span class=\"line\">proxy_set_header Host $host;</span><br><span class=\"line\">proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure>\n<h2 id=\"中文详解\"><a href=\"#中文详解\" class=\"headerlink\" title=\"中文详解\"></a>中文详解</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义Nginx运行的用户和用户组</span><br><span class=\"line\">user www www;</span><br><span class=\"line\"></span><br><span class=\"line\">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"> </span><br><span class=\"line\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">error_log /usr/local/nginx/logs/error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程pid文件</span><br><span class=\"line\">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定进程可以打开的最大描述符：数目</span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class=\"line\">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span><br><span class=\"line\">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class=\"line\">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class=\"line\">    #补充说明：</span><br><span class=\"line\">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class=\"line\">    #A）标准事件模型</span><br><span class=\"line\">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class=\"line\">    #B）高效事件模型</span><br><span class=\"line\">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class=\"line\">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class=\"line\">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class=\"line\">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\"></span><br><span class=\"line\">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class=\"line\">    worker_connections 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive超时时间。</span><br><span class=\"line\">    keepalive_timeout 60;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class=\"line\">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class=\"line\">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class=\"line\">    #4096</span><br><span class=\"line\">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class=\"line\">    client_header_buffer_size 4k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class=\"line\">    open_file_cache max=65535 inactive=60s;</span><br><span class=\"line\"></span><br><span class=\"line\">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class=\"line\">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class=\"line\">    open_file_cache_valid 80s;</span><br><span class=\"line\"></span><br><span class=\"line\">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class=\"line\">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class=\"line\">    open_file_cache_min_uses 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误.</span><br><span class=\"line\">    open_file_cache_errors on;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class=\"line\">http</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #文件扩展名与文件类型映射表</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认文件类型</span><br><span class=\"line\">    default_type application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认编码</span><br><span class=\"line\">    #charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">    #服务器名字的hash表大小</span><br><span class=\"line\">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class=\"line\">    server_names_hash_bucket_size 128;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class=\"line\">    client_header_buffer_size 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class=\"line\">    large_client_header_buffers 4 64k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设定通过nginx上传文件的大小</span><br><span class=\"line\">    client_max_body_size 8m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">    autoindex on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class=\"line\">    tcp_nopush on;</span><br><span class=\"line\">     </span><br><span class=\"line\">    tcp_nodelay on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #长连接超时时间，单位是秒</span><br><span class=\"line\">    keepalive_timeout 120;</span><br><span class=\"line\"></span><br><span class=\"line\">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class=\"line\">    fastcgi_connect_timeout 300;</span><br><span class=\"line\">    fastcgi_send_timeout 300;</span><br><span class=\"line\">    fastcgi_read_timeout 300;</span><br><span class=\"line\">    fastcgi_buffer_size 64k;</span><br><span class=\"line\">    fastcgi_buffers 4 64k;</span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class=\"line\">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class=\"line\">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class=\"line\">    gzip_comp_level 2;    #压缩等级</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启限制IP连接数的时候需要使用</span><br><span class=\"line\">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    #负载均衡配置</span><br><span class=\"line\">    upstream jh.w3cschool.cn &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class=\"line\">        server 192.168.80.121:80 weight=3;</span><br><span class=\"line\">        server 192.168.80.122:80 weight=2;</span><br><span class=\"line\">        server 192.168.80.123:80 weight=3;</span><br><span class=\"line\"></span><br><span class=\"line\">        #nginx的upstream目前支持4种方式的分配</span><br><span class=\"line\">        #1、轮询（默认）</span><br><span class=\"line\">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class=\"line\">        #2、weight</span><br><span class=\"line\">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class=\"line\">        #例如：</span><br><span class=\"line\">        #upstream bakend &#123;</span><br><span class=\"line\">        #    server 192.168.0.14 weight=10;</span><br><span class=\"line\">        #    server 192.168.0.15 weight=10;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #2、ip_hash</span><br><span class=\"line\">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class=\"line\">        #例如：</span><br><span class=\"line\">        #upstream bakend &#123;</span><br><span class=\"line\">        #    ip_hash;</span><br><span class=\"line\">        #    server 192.168.0.14:88;</span><br><span class=\"line\">        #    server 192.168.0.15:80;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #3、fair（第三方）</span><br><span class=\"line\">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class=\"line\">        #upstream backend &#123;</span><br><span class=\"line\">        #    server server1;</span><br><span class=\"line\">        #    server server2;</span><br><span class=\"line\">        #    fair;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #4、url_hash（第三方）</span><br><span class=\"line\">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class=\"line\">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class=\"line\">        #upstream backend &#123;</span><br><span class=\"line\">        #    server squid1:3128;</span><br><span class=\"line\">        #    server squid2:3128;</span><br><span class=\"line\">        #    hash $request_uri;</span><br><span class=\"line\">        #    hash_method crc32;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #tips:</span><br><span class=\"line\">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class=\"line\">        #    ip_hash;</span><br><span class=\"line\">        #    server 127.0.0.1:9090 down;</span><br><span class=\"line\">        #    server 127.0.0.1:8080 weight=2;</span><br><span class=\"line\">        #    server 127.0.0.1:6060;</span><br><span class=\"line\">        #    server 127.0.0.1:7070 backup;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class=\"line\"></span><br><span class=\"line\">        #每个设备的状态设置为:</span><br><span class=\"line\">        #1.down表示单前的server暂时不参与负载</span><br><span class=\"line\">        #2.weight为weight越大，负载的权重就越大。</span><br><span class=\"line\">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class=\"line\">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class=\"line\">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class=\"line\"></span><br><span class=\"line\">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class=\"line\">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class=\"line\">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class=\"line\">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">     </span><br><span class=\"line\">     </span><br><span class=\"line\">    #虚拟主机的配置</span><br><span class=\"line\">    server</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        #监听端口</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">        #域名可以有多个，用空格隔开</span><br><span class=\"line\">        server_name www.w3cschool.cn w3cschool.cn;</span><br><span class=\"line\">        index index.html index.htm index.php;</span><br><span class=\"line\">        root /data/www/w3cschool;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对******进行负载均衡</span><br><span class=\"line\">        location ~ .*.(php|php5)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index index.php;</span><br><span class=\"line\">            include fastcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #图片缓存时间设置</span><br><span class=\"line\">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 10d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #JS和CSS缓存时间设置</span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #日志格式设定</span><br><span class=\"line\">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class=\"line\">        #$remote_user：用来记录客户端用户名称；</span><br><span class=\"line\">        #$time_local： 用来记录访问时间与时区；</span><br><span class=\"line\">        #$request： 用来记录请求的url与http协议；</span><br><span class=\"line\">        #$status： 用来记录请求状态；成功是200，</span><br><span class=\"line\">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class=\"line\">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class=\"line\">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class=\"line\">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class=\"line\">        log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">        &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">        &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #定义本虚拟主机的访问日志</span><br><span class=\"line\">        access_log  /usr/local/nginx/logs/host.access.log  main;</span><br><span class=\"line\">        access_log  /usr/local/nginx/logs/host.access.404.log  log404;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #对 &quot;/&quot; 启用反向代理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">             </span><br><span class=\"line\">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">             </span><br><span class=\"line\">            #以下是一些反向代理的配置，可选。</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\"></span><br><span class=\"line\">            #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">            client_max_body_size 10m;</span><br><span class=\"line\"></span><br><span class=\"line\">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class=\"line\">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class=\"line\">            client_body_buffer_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class=\"line\">            proxy_intercept_errors on;</span><br><span class=\"line\"></span><br><span class=\"line\">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class=\"line\">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">            proxy_connect_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class=\"line\">            proxy_send_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class=\"line\">            proxy_read_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class=\"line\">            proxy_buffer_size 4k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class=\"line\">            proxy_buffers 4 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">            proxy_busy_buffers_size 64k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class=\"line\">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\">            proxy_temp_file_write_size 64k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">         </span><br><span class=\"line\">        #设定查看Nginx状态的地址</span><br><span class=\"line\">        location /NginxStatus &#123;</span><br><span class=\"line\">            stub_status on;</span><br><span class=\"line\">            access_log on;</span><br><span class=\"line\">            auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">            auth_basic_user_file confpasswd;</span><br><span class=\"line\">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #本地动静分离反向代理配置</span><br><span class=\"line\">        #所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">        location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class=\"line\">        pdf|xls|mp3|wma)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 15d; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h2><ol>\n<li><p>只接收 http 请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.china-note.com;</span><br><span class=\"line\">    return 301 https://$host$request_uri;</span><br><span class=\"line\">    index index.html index.htm index.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只接收 https 请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.china-note.com;</span><br><span class=\"line\">    return 301 https://$host$request_uri;</span><br><span class=\"line\">    index index.html index.htm index.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name www.china-note.com;</span><br><span class=\"line\">    index index.html index.htm index.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate     /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.pem;</span><br><span class=\"line\">    ssl_certificate_key /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.key;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_ciphers &apos;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /admin &#123;</span><br><span class=\"line\">        alias /data/deploy/Web/newProjects/overseasProperty/overseasPropertySystem/dist;</span><br><span class=\"line\">        try_files $uri $uri/ /admin/index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /api &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:60834;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">        proxy_set_header X-nginx-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同时接收 http 和 https 请求</p>\n</li>\n</ol>\n<ol>\n<li><p>http 请求转 https</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.china-note.com;</span><br><span class=\"line\">    return 301 https://$host$request_uri;</span><br><span class=\"line\">    index index.html index.htm index.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name www.china-note.com;</span><br><span class=\"line\">    index index.html index.htm index.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate     /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.pem;</span><br><span class=\"line\">    ssl_certificate_key /usr/local/nginx/conf/ssl/www.china-note.com/www.china-note.com.key;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_ciphers &apos;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /data/wwwlogs/www.china-note.com_nginx.log combined;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /admin &#123;</span><br><span class=\"line\">        alias            /data/deploy/Web/newProjects/overseasProperty/overseasPropertySystem/dist;</span><br><span class=\"line\">        try_files $uri   $uri/ /admin/index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /api &#123;</span><br><span class=\"line\">        proxy_pass       http://localhost:60834;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">        proxy_set_header X-nginx-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>https 请求转 http</p>\n</li>\n</ol>\n"},{"title":"Advanced features Part 5, Get started with lambda expressions in Java","date":"2020-03-04T16:00:05.000Z","_content":"Before Java SE 8, anonymous   classes were typically used to pass functionality to a method. This practice (实践) obfuscated (模糊化) source code, making it harder to understand. Java 8 eliminated (淘汰) this problem by introducing lambdas. This tutorial first introduces the lambda language feature, then provides a more detailed introducetion to functional programming with lambda expressions along with target types. You'll also learn how lambdas interact with scopes, local variables, the this and super keywords, and Java exceptions.\n\nNote that code examples in this tutorial are compatible with JDK 12.\n\n> Discovering types for yourself\n> I won't introduce any non-lambda language features in this tutorial that you haven't perviously learned about, but I will demonstrate lambdas via types taht I haven't perviously discussed in this series. One example is the java.lang.Math class. I will introduce these types in future Java 101 tutorials. For now, I suggest reading the JDK 12 API documentation to learn more about them.\n\n## Lambdas: A primer\nA lambda expression (lambda) describes a block of code (an anonymous function) that can be passed to constructors or methods for subsequent execution. The constructor or method receviers the lambdas as an argument. Consider the following example:\n```java\n() -> System.out.println(\"Hello\")\n```\n\nThis example identifies a lambda for outputting a message to the standard output stream. From left to right, `()` identifies the lambda's formal parameter list (there are no parameters in the example) `->` indicates that the expression is a lambda, and `System.out.println(\"Hello\")` is the code to be executed.\n\nLambdas simplify the use of functional interfaces, which are annotated interfaces that each declare one abstract method (although they can also declare any combination of default, static, and private methods.) For example, the standard class library provides a java.lang.Runnable interface with a single abstract `void run()` method. This functional interface's declaration appears below:\n```java\n@FunctionalInterface\npublic interface Runnable {\n    public abstract void run();\n}\n```\n\nThe class libaray annotates Runable with @FunctionalInterface, which is an instance of the java.lang.FunctionInterface annotation type. FuntcionalInterface is used to annotate those interfaces that are to be used in lambda contexts.\n\nA lambda doesn't have an explicit interface type. Instead, the compiler uses the surrounding context to infer which functional interface to instantiate when a lambda is specified -- the lambda is bound to that interface. For example, suppose I specified the following code fragment, which passes the previous lambda as an argument to the java.lang.Thread class's `Thread(Runnable target)` constructor:\n```java\nnew Thread(() -> System.out.println(\"Hello\"));\n```\n\nThe compiler determines that the lambda is being passed to `Thread(Runnable r)` because this is the only contructor that satisfies the lambda: Runnable is a functional interface, the lambda's emptry formal paramter list `()` matches `run()`'s emptry parameter list, and the return types `(void)` also agree. The lambda is bound to Runnable.\n\nListing 1 presents the source code to a small application that lets you play with this example.\n\n### Listing 1. LambdaDemo\n```java\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        new Thread(() -> System.out.println(\"Hello\").start());\n    }\n}\n```\n\nCompile Listing 1 and run the application. You should oberve the following output:\n```\nhello\n```\n\nLambdas can greatly simplify the amount of source code that you must write, and can also make source code much easier to understand. For example, without lambdas, you would probably specify Listing 2's more verbose code, which is based on an instance of an anonymous calss that implements Runnable.\n\n### Listing 2. LambdaDemo\n```java\npublic class LambdaDemo\n{\n   public static void main(String[] args)\n   {\n      Runnable r = new Runnable()\n                   {\n                      @Override\n                      public void run()\n                      {\n                         System.out.println(\"Hello\");\n                      }\n                   };\n      new Thread(r).start();\n   }\n}\n```\n\nAfter compiling this source code, run the application. You'll discover the same output as  previously shown.\n\n> Lambdas and the Streams API\n> As well as simplifying source code, lambdas play an important role in Java's functionally-oriented Streams API. The describe units of functionality that are passed to various API methods.\n\n## Java lambdas in depth\nTo use lambdas effectively, you must understand the syntax of lambda expression along with the notion of a target type. You also need to understand how lambdas interact with scopes, local variables, the this and super keywords, and exceptions. I'll cover all of these topics in the sections that follow.\n\n> How lambdas are implemented\n> Lambdas are implemented in terms of the Java virtual mechine's invokedynamic (动态类型语言) instruction (指令) and the java.lang.invoke API.\n\n## Lambda syntax\nEvery lambda conforms to the following syntax:\n```\n( formal-parameter-list ) -> { expression-or-statements }\n```\n\nThe formal-parameter-list is a comma-separated list of formal paramater, which must match the parameters of a funcitonal interface's single abstract method at runtime. If you omit their types, the compiler infers (推断) these types from the context in which the lambda is used. Consider the following examples:\n```java\n(double a, double b)// types explicitly specified\n(a, b)              // types inferred by compiler\n```\n\n> Lambdas and var\n> Starting with Java SE 11, you can repalce a type name with var. For example, you could specify `(var a, var b)`.\n\nYou must specify parentheses (括弧) for multiple or no formal parameters. However, you can omit the parentheses (although you don't have to) when specifying a single formal parameters. (This applies to the parameter name only -- parentheses  are required when the type is also specified.) Consider the follwoing addditional examples:\n```java\nx           // parentheses omitted due to single formal parameter\n(double x)  // parentheses required because type is also present\n()          // parentheses required when no formal parameters\n(x, y)      // parentheses required because of multiple formal parameters\n```\n\nThe formal-parameter-list if followed by a `->` token, which is followed by expression-or-statements -- an expression of a block of statements (either is known as the lambda's body). Unlike expression-based bodies, statement-based bodies must be placed between open and close brace characters(`{}`):\n```java\n(double radius) -> Math.PI * radius * radius\nradius -> { return Math.PI * radius * radius; }\nradius -> { System.out.println(radius); return Math.PI * radius * radius; }\n```\n\nThe first example's expression-based lambda body doesn't have to be placed between braces. The second example converts the expression-based body to a stattement-based body, in which return must be specified to return the expressions's value. The final example demonstractes multiple statements and cannot be expressed without braces.\n\n> Lambda bodies and semicolons\n> Note the absence or presence of semicolons (分号, `;`) in the previous examples. In each case, the lambda body isn't terminated with a semicolon because the lambda isn't statement. However, within a statement-based lambda body, each statement must be terminated with a ssemicolon.\n\nListing 3 presents a simple application that demonstrates lambda syntax; note that this listing builds on the previous two code examples.\n\n### Listing 3. LambdaDemo\n```java\n@FunctionalInterface\ninterface BinaryCalculator {\n    double calculate(double value1, double value2);\n}\n\n@FunctionalInterface\ninterface UnaryCalculator {\n    double calculate(double value);\n}\n\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        System.out.printf(\"18 + 36.5 = %f%n\", calculate((double v1, double v2) -> v1 + v2, 18, 36.5));\n        \n        System.out.printf(\"89 / 2.9 = %f%n\", calculate((v1, v2) -> v1 / v2, 89, 2.9));\n\n        System.out.printf(\"-89 = %f%n\", calculate(v -> -v, 89));\n      \n        System.out.printf(\"18 * 18 = %f%n\", calculate((double v) -> v * v, 18));\n    }\n\n    static double calculate(BinaryCalculator calc, double v1, double v2) {\n        return calc.calculate(v1, v2);\n    }\n\n    static double calculate(UnaryCalculator clac, double b) {\n        return calc.calculate(b);\n    }\n}\n```\n\nListing 3 first introduces the BinaryCalculator and UnaryCalculator functional interfaces whose `calculate()` methods perform calculations on two input arguments or on a single input argument, respectively. This listing also introduces a LambdaDemo calss whose `main()` method demonstrates these functional interfaces.\n\nThe functional interfaces are demonstrated in the `static double calculate(BinaryCalculator calc, double v1, double v2)` and `static double calculate(UnaryCalculator calc, double v)` methods. The lambdas pass code as data to these methods, which are received as BinaryCalculator or UnaryCalculator instances.\n\nCompiling Listing 3 and run the application. You should observe the following output:\n```\n18 + 36.5 = 54.500000\n89 / 2.9 = 30.689655\n-89 = -89.000000\n18 * 18 = 324.000000\n```\n\n## Target types\nA lambda is associated with an implicit target type, which identifies the type of object to which a lambda is bound. The target type must be a functional interface that's inferred from the context, which limit lambdas to appearing in the following context:\n- Variable declaration\n- Assignment\n- Return statement\n- Array initializer\n- Method or constructor arguments\n- Lambda body\n- Ternary (三元) conditional expression\n- Cast expression\n\nListing 4 presents an application that demonstrates these target type contexts.\n\n### Listing 4. LambdaDemo\n```java \npublic class LambdaDemo {\n    public static void main(String[] args) {\n        // Target type #1: variable declaration\n        Runnable r = () -> {System.out.println(\"running\");};\n        r.run();\n\n        // Target type #2: assignment\n        r = () -> System.out.printnl(\"running\");\n        r.run();\n\n        // Target type #3: return statement (in getFilter())\n        File[] files = new File(\".\").listFiles(getFilter(\"txt\"));\n        for (int i = 0; i < files.length; i++) {\n            System.out.println(files[i]);\n        }\n\n        // Target type #4: array initializer\n        FileSystem fs = FileSystems.getDefault();\n        final PathMatcher matchers[] = {\n            (path) -> path.toString().endWith(\"txt\"),\n            (path) -> path.toString().endWith(\"java\")\n        };\n        FileVistor<Path> visitor = new SimpleFileVisitor<Path>() {\n            @Override\n            public FileVisitResult visitFile(Path file, BasicFileAttributes attribs) {\n                Path name = file.getFileName();\n                for (int i = 0; i < matchers.length; i++) {\n                    if (matchers[i].matches(name)) {\n                        System.out.println(\"Found matched file: '%s'.%n\", file);\n                    }\n                }\n                return FileVisitResult.CONTINUE;\n            }\n        }\n        Files.walkFileTree(Paths.get(\".\"), visitor);\n\n        // Target type #5: method or constructor arguments\n        new Thread(() -> System.out.println(\"running\").start());\n\n        // Target type #6: lambda body (a nested lambda)\n        Callable<Runnable> callable = () -> () -> System.out.println(\"called\");\n        callable.call().run();\n\n        // Target type #7: ternary conditional expression\n        boolean ascendingSort = false;\n        Comparator<String> cmp = (ascendingSort) ? (s1, s2) -> s1.compareTo(s2)\n                                                 : (s1, s2) -> s2.compareTo(s1);\n                                                 \n        List<String> cities = Arrays.asList(\"Washington\", \"london\", \"Rome\", \"Berlin\", \"Jerusalem\", \"Ottawa\", \"Sydney\", \"Moscow\");\n        Collections.sort(cities, cmp);\n        for (int i = 0; i < cities.size(); i++) {\n            System.out.println(cities.get(i));\n        }\n\n        // Target type #8: cast expression\n        String user = AccessController.doPrivileged((PrivilegedAction<String>)() -> System.getProperty(\"user.name\"));\n        System.out.println(user);\n    }\n\n    static FileFilter getFilter(String ext) {\n        return (pathname) -> pathname.toString().endWith(ext);\n    }\n}\n```\n\nThe first example demonstrates a lombda in variable declaration context. it assigns lombda `() -> {System.out.println(\"running\");}` to variable r of Runnable interface type. The second example is similar, but demonstrates a lambda in an assignment context (to previously declared variable r).\n\nThe third example demonstrates a lambda in a return statement context. It invokes the getFilter() method with a specified file extension arguement to return a java.io.FileFilter object. This object is passed to java.io.file's listFiles() method, which invokes the filter for each file, ignoring files that don't match extension.\n\nThe getFilter() method returns a FileFilter object expressed via a lambda. The compiler notes that the lambda satisfies this functional interafce's `boolean accept(File pathname)` method (both have a single parameter and the lambda body returns a Boolean value) and binds the lambda to FileFilter.\n\nThe fourth example demonstrates lambda usage in an array initializer context. Two java.nio.file.PathMatcher objects are created based on lambdas. Each PathMatcher object matches files based on criteria (标准) specified by its lambda's body. Here is the relevant code:\n```java\nfinal PathMatcher matchers[] = {\n    (path) -> path.toString().endsWith(\"txt\"),\n    (path) -> path.toString().endsWith(\"java\")\n};\n```\n\nThe PathMatcher functional interface provides a `boolean matches(Path path)` method that agrees with the lambda's parameter list and its body's Boolean return type. This method is subsequently called to determine a match (based on file extension) for each encountered file during a visit of the current directory and subdirectories.\n\nThe fifth example demonstrates a lambda in a Thread constructor context. The sixth example demonstrates a lambda in a lambda context, which shows that lambdas can be nested. The Seventh example demonstrates a lambda in a ternery conditional expression (`?:`) context: one of two lambdas is selected based on an ascending or descending sort.\n\nThe eighth (and final) example demonstrates a lambada in a cast expression context. The `() -> System.getProperty(\"user.name\")` lambda is cast to `PrivilegedAction<String>` functional interface type. This cast addresses an ambiguity in the java.security.AccessController class, which declares the following mehtods:\n```java\nstatic <T> T doPrivileged(PrivilegedAction<T> action)\nstatic <T> T doPrivileged(PrivilegedExceptionAction<T> action)\n```\n\nThe problem is that each of interfaces PrivilegedAction and PrivilegedExceptionAction declares an identical `T run()` method. Because the compiler cannot figure out which interface is the target type, it reports an error in the absence of the cast.\n\nCompile Listing 4 and run the application. You should observe the following output, which assumes that LambdaDemo.java is the only .java file in the current directory and that this directory contains no .txt files:\n```\nrunning\nrunning\nFound matched file: '.\\LambdaDemo.java'.\nrunning\ncalled\nWashington\nSydney\nRome\nOttawa\nMoscow\nLondon\nJerusalem\nBerlin\njeffrey\n```\n\n## Lambdas and scopes\nThe term scope refers to that part of a program where a name is bound to a particular entiry (e.g., a variable). In another part of the program, the name may be bound to another enitty. A lambda body doesn't introduce a new scope. Instead, its scope is the enclosing scope.\n\n## Lambdas an loal variables\nA lambda body can define local variables. Because these variables are considered part of the enclosing scope, the compiler will report an error when it detects that the lambda body is redefinning a local variable. Listing 5 demonstrates this problem.\n\n### Listing 5. LambdaDemo\n```java\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        int limit = 10;\n        Runnable r = () -> {\n            int limit = 5;\n            for (int i = 0; i < limit; i++) {\n                System.out.println(i);\n            }\n        }\n    }\n}\n```\n\nBecause limit is already present in the enclosing scope (the main() method), the lambda body's redeinition of `limit (int limit =5;)` cause the compiler to report the following error message: error: variable limit is already defined in method main(String[] args).\n\n> Lambda bodies and local variables\n> Whether originating in a lambda body or in the enclosing scope, a local variable must be initialized before being used. Otherwise, the compiler will report an error.\n\nA local varialbe or parameter that's defined outside a lambda body and referenced from the body must be markded final or considered effectively final (the variable cannot to assigned to after initialization). Attempting to modify an effectively final varialbe causes the compiler to report an error, as demonstrated in Listing 6.\n\n### Listing 6. LambdaDemo\n```java\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        int limit = 10;\n        Runable r = () -> {\n            limit = 5;\n            for (int i = 0; i < limit; i++) {\n                System.out.println(i);\n            }\n        }\n    }\n}\n```\n\nlimit is effectively final. The lambda body's attempt to modify this variable causes the compiler to report an error. It does so because a final/effectively final variable will need to hang around until the lambda executes, which may not happen until long after the code in which the variable was defined returns. Non-final/non-effectively final variable no longer exist.\n\n## Lambdas and the 'this' and 'super' keywords\nAny this or super reference that is used in a lambda body is regarded as being equivalent to its usage in the enclosing scope (bacause a lambda doesn't inctroduce a new scope). However, this isn't the case with anonymous classes, which Listing 7 demonstrates.\n\n### Listing 7. LambdaDemo\n```java\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        new LambdaDemo().deWork();\n    }\n\n    public void doWork() {\n        System.out.printf(\"this - %s%n\", this);\n        Runnable r = new Runnable() {\n            @Override\n            public void run() {\n                System.out.printf(\"this = %s%n\", this);\n            }\n        };\n\n        new Thread(r).start();\n        new Thread(() -> System.out.printf(\"this = %n%f\", this)).start();\n    }\n}\n```\n\nListing 7's main() method instantiates LambdaDemo and invokes the object's doWork() method to output the object's this reference, instantiate an anonymous class that implements Runnable, create a Thread object that executes this runnable when its thread is started, and create another Thread object whose thread executes a lambda when started.\n\nCompile Listing 7 and run the application. You should observe something similar to the following output:\n```\nthis = LambdaDemo@776ec8df\nthis = LambdaDemo$1@48766bb\nthis = LambdaDemo@776ec8df\n```\n\nThe first line shows LambdaDemo's this reference, the second line shows a different this reference in the new Runnable scope, and the third output line shows the this reference in a lambda context. The third and first lines match because the lambda's scope is nested inside the doWrok() method; this has the same meaning throughout this method.\n\n## Lambdas and exceptions\nA lambda body isnot allowed to throw more exceptions than are specified in the throws clause of the functional interface method. If a lambda body throws an exception, the functional interface method's throws clause must declare the same exception type or its supertype. Consider Listing 8.\n\n### Listing 8. LambdaDemo\n```java\n@FunctionalInterface\ninterface Work {\n    void dosomething() thrwos IOException;\n}\n\npublic class LambdaDemo {\n    public static void main(String[] args) throws AWTException, IOException {\n        Work work = () -> {throw new IOException();};\n        work.doSomething();\n        work = () -> {throw new AWTException(\"\");};\n    }\n}\n```\n\nListing 8 declares a Work functional interface whose doSomething() method is declared to throw java.io.IOException. The main() method assigns a lambda that throws IOException to work, which is okay becuase IOException is listed in doSomething()'s throws clause.\n\nmain() next assigns a lambda that throws java.awt.AWTException to work. However, the compiler doesn't allow this assignment bacuase AWTException isn't part of doSomething()'s throws caluse (and is certainly not a subtype of IOException).\n\n## Predefined (预定义) functional interfaces\nYou might find yourself repeatedly creating similar functional interfaces. For example, you might carete a CheckConnection functional interface with a `boolean isConnected(Connection c)` method and a CheckAccout functional interface with a `boolean isPositiveBalance(Account acct)` method. This is wasteful.\n\nTHe previous examples expose the abstract concept of a predicate (a Boolean valued function). Anticipating such patterns. Oracle provides the java.util.function package of commonly-used functional interfaces. For example, this package's `Predicate<T>` functional interface can be used in place of CheckConnect and CheckAccount.\n\n`Predicate<T>` provides a `boolean test(T t)` method that evaluates this predicate on its argument (t), returning true when t matches the predicate, and returning false otherwise. Notice that `test()` provides the same kind of parameter list as `isConnected()` and `isPositiveBalance()`. Also, notice that they all have the same return type (boolean).\n\nThe application source code in Listing 9 demonstrates `Predicate<T>`.\n\n### Listing 9. LambdaDemo\n```java\nclass Account\n{\n   private int id, balance;\n   Account(int id, int balance)\n   {\n      this.balance = balance;\n      this.id = id;\n   }\n   int getBalance()\n   {\n      return balance;\n   }\n   int getID()\n   {\n      return id;\n   }\n   void print()\n   {\n      System.out.printf(\"Account: [%d], Balance: [%d]%n\", id, balance);\n   }\n}\npublic class LambdaDemo\n{\n   static List<Account> accounts;\n   public static void main(String[] args)\n   {\n      accounts = new ArrayList<>();\n      accounts.add(new Account(1000, 200));\n      accounts.add(new Account(2000, -500));\n      accounts.add(new Account(3000, 0));\n      accounts.add(new Account(4000, -80));\n      accounts.add(new Account(5000, 1000));\n      // Print all accounts\n      printAccounts(account -> true);\n      System.out.println();\n      // Print all accounts with negative balances.\n      printAccounts(account -> account.getBalance() < 0);\n      System.out.println();\n      // Print all accounts whose id is greater than 2000 and less than 5000.\n      printAccounts(account -> account.getID() > 2000 &&\n                               account.getID() < 5000);\n   }\n   static void printAccounts(Predicate<Account> tester)\n   {\n      for (Account account: accounts)\n         if (tester.test(account))\n            account.print();\n   }\n}\n```\n\nListing 9 creates an array-based list of accounts with positive, zero, and regative balances. It then demonstrates `Predicate<T>` by invoking `pringAccount()` with lambdas for printing out all accounts, only those accounts with negative balances, and only those accounts whose IDs are greater than 2000 and less than 5000.\n\nConsider lambda expresison `account -> true`. The compiler verifies that the lambda matches `Predicate<T>`'s `boolean test(T)` method, which it does--the lambda presents a single parameter (account) and its body always returns a Boolean value (true). For this lambda, `test()` is implemented to execute `return true`.\n\nCompiling Listing 9 and run the application. You should observe the following output:\n```\nAccount: [1000], Balance: [200]\nAccount: [2000], Balance: [-500]\nAccount: [3000], Balance: [0]\nAccount: [4000], Balance: [-80]\nAccount: [5000], Balance: [1000]\nAccount: [2000], Balance: [-500]\nAccount: [4000], Balance: [-80]\nAccount: [3000], Balance: [0]\nAccount: [4000], Balance: [-80]\n```\n\n`Predicate<T>` is just one of java.util.function's various predefinded functional interfaces. Another example is `Consumer<T>`, which represents an operation that accepts a single argument and returns no result. Unlike `Predicate<T>`, `Consumer<T>` is expected to operate via side-effects. In other words, it modifies its argument in some way.\n\n`Comsumer<T>`'s `void accept(T t)` method executes an operation on its argument (t). When appearing in the context of this functional interface, a lambda must conform to the `accept()` method's solitary parameter and return type. Listing 10 presents an example that demonstrates `Comsumer<T>` along with `Predicate<T>`.\n\n### Listing 10. LambdaDemo\n```java\n@Data   \nclass Account {\n    private int id, balance;\n\n    void print() {\n        System.out.printf(\"Account: [%d], Balance: [%d]%n\", id, balance);\n    }\n}\n\npublic class LambdaDemo {\n    static List<Account> accounts;\n\n    public static void main(String[] args) {\n        accounts = new ArrayList<>();\n        accounts.add(new Account(1000, 200));\n        accounts.add(new Account(2000, -500));\n        accounts.add(new Account(3000, 0));\n        accounts.add(new Account(4000, -80));\n        accounts.add(new Account(5000, 1000));\n    \n        // Deposit enough money in accounts with negative balances so that they\n        // end up with zero balances (and are no longer overdrawn).\n        adjustAccount(account -> account.getBalance() < 0, \n                      account -> account.deposit(-account.getBalance()));\n    }\n\n    static void adjustAccounts(Prediate<Account> tester, Comsumer<Account> adjuster) {\n        for (Account acount : accounts) {\n            if (tester.test(account)) {\n                adjuster.accept(account);\n                account.print();\n            }\n\n        }\n    }\n}\n```\n\nListing 10 continues on from the previous example by introducing an `adjustAccounts()` method that addresses overdrawn accounts by depositing enouth money to give them zero balances. `adjustAccounts()` takes two lambda arguments, which must comform to `Predicate<T>`'s and `Comsumer<T>`'s abstract method parameter lists and return types.\n\nThe compiler determines that the lambda arguments passed to `adjustAccounts()` are correct. The `test()` method is implemented to take an `Account acount` parameter and execute `return account.getBalance() < 0;`. Similarly, `accept()` is implemented to take the same parameter and execute `account.deposit(account.getBalance());`.\n\nCompile Listing 10 and run the application. You should observe the following output:\n```\nAccount: [2000], Balance: [0]\nAccount: [4000], Balance: [0]\n```\n\n> Primitive specializations of predefined functional interfaces\n> java.util.function includes primitive specializations of various functional interfaces. For example, DoubleConsumer is a primitive specialization of Consumer. Each primitive specialization funcitonal interface exists for performance reasons, to avoid unnecessary object creation and method calls when the inputs or outputs are primitive type-based values.\n\n## In conclusion\nIn this tutorial I've introduced you to programming with lambda expressions. I started with a high-level overview, then offered in-depth introductions to the core features and techniques associated with lambdas: target type, scopes, local variables, the this and super keyword, and exceptions.\n\nWhile lambda hava done much to simplify and modernize Java programming, in some cases their usage still results in unnecessary clutter.\n\n","source":"_posts/JavaWorld/Advanced features Part 5, Get started with lambda expressions in Java.md","raw":"---\ntitle : Advanced features Part 5, Get started with lambda expressions in Java\n\ntag:\n- Advanced Java language features\n\ncategories:\n- JavaWorld\n\ndate: 2020-03-05 00:00:05\n---\nBefore Java SE 8, anonymous   classes were typically used to pass functionality to a method. This practice (实践) obfuscated (模糊化) source code, making it harder to understand. Java 8 eliminated (淘汰) this problem by introducing lambdas. This tutorial first introduces the lambda language feature, then provides a more detailed introducetion to functional programming with lambda expressions along with target types. You'll also learn how lambdas interact with scopes, local variables, the this and super keywords, and Java exceptions.\n\nNote that code examples in this tutorial are compatible with JDK 12.\n\n> Discovering types for yourself\n> I won't introduce any non-lambda language features in this tutorial that you haven't perviously learned about, but I will demonstrate lambdas via types taht I haven't perviously discussed in this series. One example is the java.lang.Math class. I will introduce these types in future Java 101 tutorials. For now, I suggest reading the JDK 12 API documentation to learn more about them.\n\n## Lambdas: A primer\nA lambda expression (lambda) describes a block of code (an anonymous function) that can be passed to constructors or methods for subsequent execution. The constructor or method receviers the lambdas as an argument. Consider the following example:\n```java\n() -> System.out.println(\"Hello\")\n```\n\nThis example identifies a lambda for outputting a message to the standard output stream. From left to right, `()` identifies the lambda's formal parameter list (there are no parameters in the example) `->` indicates that the expression is a lambda, and `System.out.println(\"Hello\")` is the code to be executed.\n\nLambdas simplify the use of functional interfaces, which are annotated interfaces that each declare one abstract method (although they can also declare any combination of default, static, and private methods.) For example, the standard class library provides a java.lang.Runnable interface with a single abstract `void run()` method. This functional interface's declaration appears below:\n```java\n@FunctionalInterface\npublic interface Runnable {\n    public abstract void run();\n}\n```\n\nThe class libaray annotates Runable with @FunctionalInterface, which is an instance of the java.lang.FunctionInterface annotation type. FuntcionalInterface is used to annotate those interfaces that are to be used in lambda contexts.\n\nA lambda doesn't have an explicit interface type. Instead, the compiler uses the surrounding context to infer which functional interface to instantiate when a lambda is specified -- the lambda is bound to that interface. For example, suppose I specified the following code fragment, which passes the previous lambda as an argument to the java.lang.Thread class's `Thread(Runnable target)` constructor:\n```java\nnew Thread(() -> System.out.println(\"Hello\"));\n```\n\nThe compiler determines that the lambda is being passed to `Thread(Runnable r)` because this is the only contructor that satisfies the lambda: Runnable is a functional interface, the lambda's emptry formal paramter list `()` matches `run()`'s emptry parameter list, and the return types `(void)` also agree. The lambda is bound to Runnable.\n\nListing 1 presents the source code to a small application that lets you play with this example.\n\n### Listing 1. LambdaDemo\n```java\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        new Thread(() -> System.out.println(\"Hello\").start());\n    }\n}\n```\n\nCompile Listing 1 and run the application. You should oberve the following output:\n```\nhello\n```\n\nLambdas can greatly simplify the amount of source code that you must write, and can also make source code much easier to understand. For example, without lambdas, you would probably specify Listing 2's more verbose code, which is based on an instance of an anonymous calss that implements Runnable.\n\n### Listing 2. LambdaDemo\n```java\npublic class LambdaDemo\n{\n   public static void main(String[] args)\n   {\n      Runnable r = new Runnable()\n                   {\n                      @Override\n                      public void run()\n                      {\n                         System.out.println(\"Hello\");\n                      }\n                   };\n      new Thread(r).start();\n   }\n}\n```\n\nAfter compiling this source code, run the application. You'll discover the same output as  previously shown.\n\n> Lambdas and the Streams API\n> As well as simplifying source code, lambdas play an important role in Java's functionally-oriented Streams API. The describe units of functionality that are passed to various API methods.\n\n## Java lambdas in depth\nTo use lambdas effectively, you must understand the syntax of lambda expression along with the notion of a target type. You also need to understand how lambdas interact with scopes, local variables, the this and super keywords, and exceptions. I'll cover all of these topics in the sections that follow.\n\n> How lambdas are implemented\n> Lambdas are implemented in terms of the Java virtual mechine's invokedynamic (动态类型语言) instruction (指令) and the java.lang.invoke API.\n\n## Lambda syntax\nEvery lambda conforms to the following syntax:\n```\n( formal-parameter-list ) -> { expression-or-statements }\n```\n\nThe formal-parameter-list is a comma-separated list of formal paramater, which must match the parameters of a funcitonal interface's single abstract method at runtime. If you omit their types, the compiler infers (推断) these types from the context in which the lambda is used. Consider the following examples:\n```java\n(double a, double b)// types explicitly specified\n(a, b)              // types inferred by compiler\n```\n\n> Lambdas and var\n> Starting with Java SE 11, you can repalce a type name with var. For example, you could specify `(var a, var b)`.\n\nYou must specify parentheses (括弧) for multiple or no formal parameters. However, you can omit the parentheses (although you don't have to) when specifying a single formal parameters. (This applies to the parameter name only -- parentheses  are required when the type is also specified.) Consider the follwoing addditional examples:\n```java\nx           // parentheses omitted due to single formal parameter\n(double x)  // parentheses required because type is also present\n()          // parentheses required when no formal parameters\n(x, y)      // parentheses required because of multiple formal parameters\n```\n\nThe formal-parameter-list if followed by a `->` token, which is followed by expression-or-statements -- an expression of a block of statements (either is known as the lambda's body). Unlike expression-based bodies, statement-based bodies must be placed between open and close brace characters(`{}`):\n```java\n(double radius) -> Math.PI * radius * radius\nradius -> { return Math.PI * radius * radius; }\nradius -> { System.out.println(radius); return Math.PI * radius * radius; }\n```\n\nThe first example's expression-based lambda body doesn't have to be placed between braces. The second example converts the expression-based body to a stattement-based body, in which return must be specified to return the expressions's value. The final example demonstractes multiple statements and cannot be expressed without braces.\n\n> Lambda bodies and semicolons\n> Note the absence or presence of semicolons (分号, `;`) in the previous examples. In each case, the lambda body isn't terminated with a semicolon because the lambda isn't statement. However, within a statement-based lambda body, each statement must be terminated with a ssemicolon.\n\nListing 3 presents a simple application that demonstrates lambda syntax; note that this listing builds on the previous two code examples.\n\n### Listing 3. LambdaDemo\n```java\n@FunctionalInterface\ninterface BinaryCalculator {\n    double calculate(double value1, double value2);\n}\n\n@FunctionalInterface\ninterface UnaryCalculator {\n    double calculate(double value);\n}\n\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        System.out.printf(\"18 + 36.5 = %f%n\", calculate((double v1, double v2) -> v1 + v2, 18, 36.5));\n        \n        System.out.printf(\"89 / 2.9 = %f%n\", calculate((v1, v2) -> v1 / v2, 89, 2.9));\n\n        System.out.printf(\"-89 = %f%n\", calculate(v -> -v, 89));\n      \n        System.out.printf(\"18 * 18 = %f%n\", calculate((double v) -> v * v, 18));\n    }\n\n    static double calculate(BinaryCalculator calc, double v1, double v2) {\n        return calc.calculate(v1, v2);\n    }\n\n    static double calculate(UnaryCalculator clac, double b) {\n        return calc.calculate(b);\n    }\n}\n```\n\nListing 3 first introduces the BinaryCalculator and UnaryCalculator functional interfaces whose `calculate()` methods perform calculations on two input arguments or on a single input argument, respectively. This listing also introduces a LambdaDemo calss whose `main()` method demonstrates these functional interfaces.\n\nThe functional interfaces are demonstrated in the `static double calculate(BinaryCalculator calc, double v1, double v2)` and `static double calculate(UnaryCalculator calc, double v)` methods. The lambdas pass code as data to these methods, which are received as BinaryCalculator or UnaryCalculator instances.\n\nCompiling Listing 3 and run the application. You should observe the following output:\n```\n18 + 36.5 = 54.500000\n89 / 2.9 = 30.689655\n-89 = -89.000000\n18 * 18 = 324.000000\n```\n\n## Target types\nA lambda is associated with an implicit target type, which identifies the type of object to which a lambda is bound. The target type must be a functional interface that's inferred from the context, which limit lambdas to appearing in the following context:\n- Variable declaration\n- Assignment\n- Return statement\n- Array initializer\n- Method or constructor arguments\n- Lambda body\n- Ternary (三元) conditional expression\n- Cast expression\n\nListing 4 presents an application that demonstrates these target type contexts.\n\n### Listing 4. LambdaDemo\n```java \npublic class LambdaDemo {\n    public static void main(String[] args) {\n        // Target type #1: variable declaration\n        Runnable r = () -> {System.out.println(\"running\");};\n        r.run();\n\n        // Target type #2: assignment\n        r = () -> System.out.printnl(\"running\");\n        r.run();\n\n        // Target type #3: return statement (in getFilter())\n        File[] files = new File(\".\").listFiles(getFilter(\"txt\"));\n        for (int i = 0; i < files.length; i++) {\n            System.out.println(files[i]);\n        }\n\n        // Target type #4: array initializer\n        FileSystem fs = FileSystems.getDefault();\n        final PathMatcher matchers[] = {\n            (path) -> path.toString().endWith(\"txt\"),\n            (path) -> path.toString().endWith(\"java\")\n        };\n        FileVistor<Path> visitor = new SimpleFileVisitor<Path>() {\n            @Override\n            public FileVisitResult visitFile(Path file, BasicFileAttributes attribs) {\n                Path name = file.getFileName();\n                for (int i = 0; i < matchers.length; i++) {\n                    if (matchers[i].matches(name)) {\n                        System.out.println(\"Found matched file: '%s'.%n\", file);\n                    }\n                }\n                return FileVisitResult.CONTINUE;\n            }\n        }\n        Files.walkFileTree(Paths.get(\".\"), visitor);\n\n        // Target type #5: method or constructor arguments\n        new Thread(() -> System.out.println(\"running\").start());\n\n        // Target type #6: lambda body (a nested lambda)\n        Callable<Runnable> callable = () -> () -> System.out.println(\"called\");\n        callable.call().run();\n\n        // Target type #7: ternary conditional expression\n        boolean ascendingSort = false;\n        Comparator<String> cmp = (ascendingSort) ? (s1, s2) -> s1.compareTo(s2)\n                                                 : (s1, s2) -> s2.compareTo(s1);\n                                                 \n        List<String> cities = Arrays.asList(\"Washington\", \"london\", \"Rome\", \"Berlin\", \"Jerusalem\", \"Ottawa\", \"Sydney\", \"Moscow\");\n        Collections.sort(cities, cmp);\n        for (int i = 0; i < cities.size(); i++) {\n            System.out.println(cities.get(i));\n        }\n\n        // Target type #8: cast expression\n        String user = AccessController.doPrivileged((PrivilegedAction<String>)() -> System.getProperty(\"user.name\"));\n        System.out.println(user);\n    }\n\n    static FileFilter getFilter(String ext) {\n        return (pathname) -> pathname.toString().endWith(ext);\n    }\n}\n```\n\nThe first example demonstrates a lombda in variable declaration context. it assigns lombda `() -> {System.out.println(\"running\");}` to variable r of Runnable interface type. The second example is similar, but demonstrates a lambda in an assignment context (to previously declared variable r).\n\nThe third example demonstrates a lambda in a return statement context. It invokes the getFilter() method with a specified file extension arguement to return a java.io.FileFilter object. This object is passed to java.io.file's listFiles() method, which invokes the filter for each file, ignoring files that don't match extension.\n\nThe getFilter() method returns a FileFilter object expressed via a lambda. The compiler notes that the lambda satisfies this functional interafce's `boolean accept(File pathname)` method (both have a single parameter and the lambda body returns a Boolean value) and binds the lambda to FileFilter.\n\nThe fourth example demonstrates lambda usage in an array initializer context. Two java.nio.file.PathMatcher objects are created based on lambdas. Each PathMatcher object matches files based on criteria (标准) specified by its lambda's body. Here is the relevant code:\n```java\nfinal PathMatcher matchers[] = {\n    (path) -> path.toString().endsWith(\"txt\"),\n    (path) -> path.toString().endsWith(\"java\")\n};\n```\n\nThe PathMatcher functional interface provides a `boolean matches(Path path)` method that agrees with the lambda's parameter list and its body's Boolean return type. This method is subsequently called to determine a match (based on file extension) for each encountered file during a visit of the current directory and subdirectories.\n\nThe fifth example demonstrates a lambda in a Thread constructor context. The sixth example demonstrates a lambda in a lambda context, which shows that lambdas can be nested. The Seventh example demonstrates a lambda in a ternery conditional expression (`?:`) context: one of two lambdas is selected based on an ascending or descending sort.\n\nThe eighth (and final) example demonstrates a lambada in a cast expression context. The `() -> System.getProperty(\"user.name\")` lambda is cast to `PrivilegedAction<String>` functional interface type. This cast addresses an ambiguity in the java.security.AccessController class, which declares the following mehtods:\n```java\nstatic <T> T doPrivileged(PrivilegedAction<T> action)\nstatic <T> T doPrivileged(PrivilegedExceptionAction<T> action)\n```\n\nThe problem is that each of interfaces PrivilegedAction and PrivilegedExceptionAction declares an identical `T run()` method. Because the compiler cannot figure out which interface is the target type, it reports an error in the absence of the cast.\n\nCompile Listing 4 and run the application. You should observe the following output, which assumes that LambdaDemo.java is the only .java file in the current directory and that this directory contains no .txt files:\n```\nrunning\nrunning\nFound matched file: '.\\LambdaDemo.java'.\nrunning\ncalled\nWashington\nSydney\nRome\nOttawa\nMoscow\nLondon\nJerusalem\nBerlin\njeffrey\n```\n\n## Lambdas and scopes\nThe term scope refers to that part of a program where a name is bound to a particular entiry (e.g., a variable). In another part of the program, the name may be bound to another enitty. A lambda body doesn't introduce a new scope. Instead, its scope is the enclosing scope.\n\n## Lambdas an loal variables\nA lambda body can define local variables. Because these variables are considered part of the enclosing scope, the compiler will report an error when it detects that the lambda body is redefinning a local variable. Listing 5 demonstrates this problem.\n\n### Listing 5. LambdaDemo\n```java\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        int limit = 10;\n        Runnable r = () -> {\n            int limit = 5;\n            for (int i = 0; i < limit; i++) {\n                System.out.println(i);\n            }\n        }\n    }\n}\n```\n\nBecause limit is already present in the enclosing scope (the main() method), the lambda body's redeinition of `limit (int limit =5;)` cause the compiler to report the following error message: error: variable limit is already defined in method main(String[] args).\n\n> Lambda bodies and local variables\n> Whether originating in a lambda body or in the enclosing scope, a local variable must be initialized before being used. Otherwise, the compiler will report an error.\n\nA local varialbe or parameter that's defined outside a lambda body and referenced from the body must be markded final or considered effectively final (the variable cannot to assigned to after initialization). Attempting to modify an effectively final varialbe causes the compiler to report an error, as demonstrated in Listing 6.\n\n### Listing 6. LambdaDemo\n```java\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        int limit = 10;\n        Runable r = () -> {\n            limit = 5;\n            for (int i = 0; i < limit; i++) {\n                System.out.println(i);\n            }\n        }\n    }\n}\n```\n\nlimit is effectively final. The lambda body's attempt to modify this variable causes the compiler to report an error. It does so because a final/effectively final variable will need to hang around until the lambda executes, which may not happen until long after the code in which the variable was defined returns. Non-final/non-effectively final variable no longer exist.\n\n## Lambdas and the 'this' and 'super' keywords\nAny this or super reference that is used in a lambda body is regarded as being equivalent to its usage in the enclosing scope (bacause a lambda doesn't inctroduce a new scope). However, this isn't the case with anonymous classes, which Listing 7 demonstrates.\n\n### Listing 7. LambdaDemo\n```java\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        new LambdaDemo().deWork();\n    }\n\n    public void doWork() {\n        System.out.printf(\"this - %s%n\", this);\n        Runnable r = new Runnable() {\n            @Override\n            public void run() {\n                System.out.printf(\"this = %s%n\", this);\n            }\n        };\n\n        new Thread(r).start();\n        new Thread(() -> System.out.printf(\"this = %n%f\", this)).start();\n    }\n}\n```\n\nListing 7's main() method instantiates LambdaDemo and invokes the object's doWork() method to output the object's this reference, instantiate an anonymous class that implements Runnable, create a Thread object that executes this runnable when its thread is started, and create another Thread object whose thread executes a lambda when started.\n\nCompile Listing 7 and run the application. You should observe something similar to the following output:\n```\nthis = LambdaDemo@776ec8df\nthis = LambdaDemo$1@48766bb\nthis = LambdaDemo@776ec8df\n```\n\nThe first line shows LambdaDemo's this reference, the second line shows a different this reference in the new Runnable scope, and the third output line shows the this reference in a lambda context. The third and first lines match because the lambda's scope is nested inside the doWrok() method; this has the same meaning throughout this method.\n\n## Lambdas and exceptions\nA lambda body isnot allowed to throw more exceptions than are specified in the throws clause of the functional interface method. If a lambda body throws an exception, the functional interface method's throws clause must declare the same exception type or its supertype. Consider Listing 8.\n\n### Listing 8. LambdaDemo\n```java\n@FunctionalInterface\ninterface Work {\n    void dosomething() thrwos IOException;\n}\n\npublic class LambdaDemo {\n    public static void main(String[] args) throws AWTException, IOException {\n        Work work = () -> {throw new IOException();};\n        work.doSomething();\n        work = () -> {throw new AWTException(\"\");};\n    }\n}\n```\n\nListing 8 declares a Work functional interface whose doSomething() method is declared to throw java.io.IOException. The main() method assigns a lambda that throws IOException to work, which is okay becuase IOException is listed in doSomething()'s throws clause.\n\nmain() next assigns a lambda that throws java.awt.AWTException to work. However, the compiler doesn't allow this assignment bacuase AWTException isn't part of doSomething()'s throws caluse (and is certainly not a subtype of IOException).\n\n## Predefined (预定义) functional interfaces\nYou might find yourself repeatedly creating similar functional interfaces. For example, you might carete a CheckConnection functional interface with a `boolean isConnected(Connection c)` method and a CheckAccout functional interface with a `boolean isPositiveBalance(Account acct)` method. This is wasteful.\n\nTHe previous examples expose the abstract concept of a predicate (a Boolean valued function). Anticipating such patterns. Oracle provides the java.util.function package of commonly-used functional interfaces. For example, this package's `Predicate<T>` functional interface can be used in place of CheckConnect and CheckAccount.\n\n`Predicate<T>` provides a `boolean test(T t)` method that evaluates this predicate on its argument (t), returning true when t matches the predicate, and returning false otherwise. Notice that `test()` provides the same kind of parameter list as `isConnected()` and `isPositiveBalance()`. Also, notice that they all have the same return type (boolean).\n\nThe application source code in Listing 9 demonstrates `Predicate<T>`.\n\n### Listing 9. LambdaDemo\n```java\nclass Account\n{\n   private int id, balance;\n   Account(int id, int balance)\n   {\n      this.balance = balance;\n      this.id = id;\n   }\n   int getBalance()\n   {\n      return balance;\n   }\n   int getID()\n   {\n      return id;\n   }\n   void print()\n   {\n      System.out.printf(\"Account: [%d], Balance: [%d]%n\", id, balance);\n   }\n}\npublic class LambdaDemo\n{\n   static List<Account> accounts;\n   public static void main(String[] args)\n   {\n      accounts = new ArrayList<>();\n      accounts.add(new Account(1000, 200));\n      accounts.add(new Account(2000, -500));\n      accounts.add(new Account(3000, 0));\n      accounts.add(new Account(4000, -80));\n      accounts.add(new Account(5000, 1000));\n      // Print all accounts\n      printAccounts(account -> true);\n      System.out.println();\n      // Print all accounts with negative balances.\n      printAccounts(account -> account.getBalance() < 0);\n      System.out.println();\n      // Print all accounts whose id is greater than 2000 and less than 5000.\n      printAccounts(account -> account.getID() > 2000 &&\n                               account.getID() < 5000);\n   }\n   static void printAccounts(Predicate<Account> tester)\n   {\n      for (Account account: accounts)\n         if (tester.test(account))\n            account.print();\n   }\n}\n```\n\nListing 9 creates an array-based list of accounts with positive, zero, and regative balances. It then demonstrates `Predicate<T>` by invoking `pringAccount()` with lambdas for printing out all accounts, only those accounts with negative balances, and only those accounts whose IDs are greater than 2000 and less than 5000.\n\nConsider lambda expresison `account -> true`. The compiler verifies that the lambda matches `Predicate<T>`'s `boolean test(T)` method, which it does--the lambda presents a single parameter (account) and its body always returns a Boolean value (true). For this lambda, `test()` is implemented to execute `return true`.\n\nCompiling Listing 9 and run the application. You should observe the following output:\n```\nAccount: [1000], Balance: [200]\nAccount: [2000], Balance: [-500]\nAccount: [3000], Balance: [0]\nAccount: [4000], Balance: [-80]\nAccount: [5000], Balance: [1000]\nAccount: [2000], Balance: [-500]\nAccount: [4000], Balance: [-80]\nAccount: [3000], Balance: [0]\nAccount: [4000], Balance: [-80]\n```\n\n`Predicate<T>` is just one of java.util.function's various predefinded functional interfaces. Another example is `Consumer<T>`, which represents an operation that accepts a single argument and returns no result. Unlike `Predicate<T>`, `Consumer<T>` is expected to operate via side-effects. In other words, it modifies its argument in some way.\n\n`Comsumer<T>`'s `void accept(T t)` method executes an operation on its argument (t). When appearing in the context of this functional interface, a lambda must conform to the `accept()` method's solitary parameter and return type. Listing 10 presents an example that demonstrates `Comsumer<T>` along with `Predicate<T>`.\n\n### Listing 10. LambdaDemo\n```java\n@Data   \nclass Account {\n    private int id, balance;\n\n    void print() {\n        System.out.printf(\"Account: [%d], Balance: [%d]%n\", id, balance);\n    }\n}\n\npublic class LambdaDemo {\n    static List<Account> accounts;\n\n    public static void main(String[] args) {\n        accounts = new ArrayList<>();\n        accounts.add(new Account(1000, 200));\n        accounts.add(new Account(2000, -500));\n        accounts.add(new Account(3000, 0));\n        accounts.add(new Account(4000, -80));\n        accounts.add(new Account(5000, 1000));\n    \n        // Deposit enough money in accounts with negative balances so that they\n        // end up with zero balances (and are no longer overdrawn).\n        adjustAccount(account -> account.getBalance() < 0, \n                      account -> account.deposit(-account.getBalance()));\n    }\n\n    static void adjustAccounts(Prediate<Account> tester, Comsumer<Account> adjuster) {\n        for (Account acount : accounts) {\n            if (tester.test(account)) {\n                adjuster.accept(account);\n                account.print();\n            }\n\n        }\n    }\n}\n```\n\nListing 10 continues on from the previous example by introducing an `adjustAccounts()` method that addresses overdrawn accounts by depositing enouth money to give them zero balances. `adjustAccounts()` takes two lambda arguments, which must comform to `Predicate<T>`'s and `Comsumer<T>`'s abstract method parameter lists and return types.\n\nThe compiler determines that the lambda arguments passed to `adjustAccounts()` are correct. The `test()` method is implemented to take an `Account acount` parameter and execute `return account.getBalance() < 0;`. Similarly, `accept()` is implemented to take the same parameter and execute `account.deposit(account.getBalance());`.\n\nCompile Listing 10 and run the application. You should observe the following output:\n```\nAccount: [2000], Balance: [0]\nAccount: [4000], Balance: [0]\n```\n\n> Primitive specializations of predefined functional interfaces\n> java.util.function includes primitive specializations of various functional interfaces. For example, DoubleConsumer is a primitive specialization of Consumer. Each primitive specialization funcitonal interface exists for performance reasons, to avoid unnecessary object creation and method calls when the inputs or outputs are primitive type-based values.\n\n## In conclusion\nIn this tutorial I've introduced you to programming with lambda expressions. I started with a high-level overview, then offered in-depth introductions to the core features and techniques associated with lambdas: target type, scopes, local variables, the this and super keyword, and exceptions.\n\nWhile lambda hava done much to simplify and modernize Java programming, in some cases their usage still results in unnecessary clutter.\n\n","slug":"JavaWorld/Advanced features Part 5, Get started with lambda expressions in Java","published":1,"updated":"2020-04-19T12:25:17.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3md400cwm33pw0gqqpe5","content":"<p>Before Java SE 8, anonymous   classes were typically used to pass functionality to a method. This practice (实践) obfuscated (模糊化) source code, making it harder to understand. Java 8 eliminated (淘汰) this problem by introducing lambdas. This tutorial first introduces the lambda language feature, then provides a more detailed introducetion to functional programming with lambda expressions along with target types. You’ll also learn how lambdas interact with scopes, local variables, the this and super keywords, and Java exceptions.</p>\n<p>Note that code examples in this tutorial are compatible with JDK 12.</p>\n<blockquote>\n<p>Discovering types for yourself<br>I won’t introduce any non-lambda language features in this tutorial that you haven’t perviously learned about, but I will demonstrate lambdas via types taht I haven’t perviously discussed in this series. One example is the java.lang.Math class. I will introduce these types in future Java 101 tutorials. For now, I suggest reading the JDK 12 API documentation to learn more about them.</p>\n</blockquote>\n<h2 id=\"Lambdas-A-primer\"><a href=\"#Lambdas-A-primer\" class=\"headerlink\" title=\"Lambdas: A primer\"></a>Lambdas: A primer</h2><p>A lambda expression (lambda) describes a block of code (an anonymous function) that can be passed to constructors or methods for subsequent execution. The constructor or method receviers the lambdas as an argument. Consider the following example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">() -&gt; System.out.println(<span class=\"string\">\"Hello\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>This example identifies a lambda for outputting a message to the standard output stream. From left to right, <code>()</code> identifies the lambda’s formal parameter list (there are no parameters in the example) <code>-&gt;</code> indicates that the expression is a lambda, and <code>System.out.println(&quot;Hello&quot;)</code> is the code to be executed.</p>\n<p>Lambdas simplify the use of functional interfaces, which are annotated interfaces that each declare one abstract method (although they can also declare any combination of default, static, and private methods.) For example, the standard class library provides a java.lang.Runnable interface with a single abstract <code>void run()</code> method. This functional interface’s declaration appears below:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The class libaray annotates Runable with @FunctionalInterface, which is an instance of the java.lang.FunctionInterface annotation type. FuntcionalInterface is used to annotate those interfaces that are to be used in lambda contexts.</p>\n<p>A lambda doesn’t have an explicit interface type. Instead, the compiler uses the surrounding context to infer which functional interface to instantiate when a lambda is specified — the lambda is bound to that interface. For example, suppose I specified the following code fragment, which passes the previous lambda as an argument to the java.lang.Thread class’s <code>Thread(Runnable target)</code> constructor:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"Hello\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>The compiler determines that the lambda is being passed to <code>Thread(Runnable r)</code> because this is the only contructor that satisfies the lambda: Runnable is a functional interface, the lambda’s emptry formal paramter list <code>()</code> matches <code>run()</code>‘s emptry parameter list, and the return types <code>(void)</code> also agree. The lambda is bound to Runnable.</p>\n<p>Listing 1 presents the source code to a small application that lets you play with this example.</p>\n<h3 id=\"Listing-1-LambdaDemo\"><a href=\"#Listing-1-LambdaDemo\" class=\"headerlink\" title=\"Listing 1. LambdaDemo\"></a>Listing 1. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"Hello\"</span>).start());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Compile Listing 1 and run the application. You should oberve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br></pre></td></tr></table></figure></p>\n<p>Lambdas can greatly simplify the amount of source code that you must write, and can also make source code much easier to understand. For example, without lambdas, you would probably specify Listing 2’s more verbose code, which is based on an instance of an anonymous calss that implements Runnable.</p>\n<h3 id=\"Listing-2-LambdaDemo\"><a href=\"#Listing-2-LambdaDemo\" class=\"headerlink\" title=\"Listing 2. LambdaDemo\"></a>Listing 2. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      Runnable r = <span class=\"keyword\">new</span> Runnable()</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                      <span class=\"meta\">@Override</span></span><br><span class=\"line\">                      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">                      </span>&#123;</span><br><span class=\"line\">                         System.out.println(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                   &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Thread(r).start();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After compiling this source code, run the application. You’ll discover the same output as  previously shown.</p>\n<blockquote>\n<p>Lambdas and the Streams API<br>As well as simplifying source code, lambdas play an important role in Java’s functionally-oriented Streams API. The describe units of functionality that are passed to various API methods.</p>\n</blockquote>\n<h2 id=\"Java-lambdas-in-depth\"><a href=\"#Java-lambdas-in-depth\" class=\"headerlink\" title=\"Java lambdas in depth\"></a>Java lambdas in depth</h2><p>To use lambdas effectively, you must understand the syntax of lambda expression along with the notion of a target type. You also need to understand how lambdas interact with scopes, local variables, the this and super keywords, and exceptions. I’ll cover all of these topics in the sections that follow.</p>\n<blockquote>\n<p>How lambdas are implemented<br>Lambdas are implemented in terms of the Java virtual mechine’s invokedynamic (动态类型语言) instruction (指令) and the java.lang.invoke API.</p>\n</blockquote>\n<h2 id=\"Lambda-syntax\"><a href=\"#Lambda-syntax\" class=\"headerlink\" title=\"Lambda syntax\"></a>Lambda syntax</h2><p>Every lambda conforms to the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( formal-parameter-list ) -&gt; &#123; expression-or-statements &#125;</span><br></pre></td></tr></table></figure></p>\n<p>The formal-parameter-list is a comma-separated list of formal paramater, which must match the parameters of a funcitonal interface’s single abstract method at runtime. If you omit their types, the compiler infers (推断) these types from the context in which the lambda is used. Consider the following examples:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b)<span class=\"comment\">// types explicitly specified</span></span><br><span class=\"line\">(a, b)              <span class=\"comment\">// types inferred by compiler</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Lambdas and var<br>Starting with Java SE 11, you can repalce a type name with var. For example, you could specify <code>(var a, var b)</code>.</p>\n</blockquote>\n<p>You must specify parentheses (括弧) for multiple or no formal parameters. However, you can omit the parentheses (although you don’t have to) when specifying a single formal parameters. (This applies to the parameter name only — parentheses  are required when the type is also specified.) Consider the follwoing addditional examples:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x           <span class=\"comment\">// parentheses omitted due to single formal parameter</span></span><br><span class=\"line\">(<span class=\"keyword\">double</span> x)  <span class=\"comment\">// parentheses required because type is also present</span></span><br><span class=\"line\">()          <span class=\"comment\">// parentheses required when no formal parameters</span></span><br><span class=\"line\">(x, y)      <span class=\"comment\">// parentheses required because of multiple formal parameters</span></span><br></pre></td></tr></table></figure></p>\n<p>The formal-parameter-list if followed by a <code>-&gt;</code> token, which is followed by expression-or-statements — an expression of a block of statements (either is known as the lambda’s body). Unlike expression-based bodies, statement-based bodies must be placed between open and close brace characters(<code>{}</code>):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">double</span> radius) -&gt; Math.PI * radius * radius</span><br><span class=\"line\">radius -&gt; &#123; <span class=\"keyword\">return</span> Math.PI * radius * radius; &#125;</span><br><span class=\"line\">radius -&gt; &#123; System.out.println(radius); <span class=\"keyword\">return</span> Math.PI * radius * radius; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>The first example’s expression-based lambda body doesn’t have to be placed between braces. The second example converts the expression-based body to a stattement-based body, in which return must be specified to return the expressions’s value. The final example demonstractes multiple statements and cannot be expressed without braces.</p>\n<blockquote>\n<p>Lambda bodies and semicolons<br>Note the absence or presence of semicolons (分号, <code>;</code>) in the previous examples. In each case, the lambda body isn’t terminated with a semicolon because the lambda isn’t statement. However, within a statement-based lambda body, each statement must be terminated with a ssemicolon.</p>\n</blockquote>\n<p>Listing 3 presents a simple application that demonstrates lambda syntax; note that this listing builds on the previous two code examples.</p>\n<h3 id=\"Listing-3-LambdaDemo\"><a href=\"#Listing-3-LambdaDemo\" class=\"headerlink\" title=\"Listing 3. LambdaDemo\"></a>Listing 3. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BinaryCalculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">double</span> value1, <span class=\"keyword\">double</span> value2)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UnaryCalculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"18 + 36.5 = %f%n\"</span>, calculate((<span class=\"keyword\">double</span> v1, <span class=\"keyword\">double</span> v2) -&gt; v1 + v2, <span class=\"number\">18</span>, <span class=\"number\">36.5</span>));</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"89 / 2.9 = %f%n\"</span>, calculate((v1, v2) -&gt; v1 / v2, <span class=\"number\">89</span>, <span class=\"number\">2.9</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"-89 = %f%n\"</span>, calculate(v -&gt; -v, <span class=\"number\">89</span>));</span><br><span class=\"line\">      </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"18 * 18 = %f%n\"</span>, calculate((<span class=\"keyword\">double</span> v) -&gt; v * v, <span class=\"number\">18</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">calculate</span><span class=\"params\">(BinaryCalculator calc, <span class=\"keyword\">double</span> v1, <span class=\"keyword\">double</span> v2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> calc.calculate(v1, v2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">calculate</span><span class=\"params\">(UnaryCalculator clac, <span class=\"keyword\">double</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> calc.calculate(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 3 first introduces the BinaryCalculator and UnaryCalculator functional interfaces whose <code>calculate()</code> methods perform calculations on two input arguments or on a single input argument, respectively. This listing also introduces a LambdaDemo calss whose <code>main()</code> method demonstrates these functional interfaces.</p>\n<p>The functional interfaces are demonstrated in the <code>static double calculate(BinaryCalculator calc, double v1, double v2)</code> and <code>static double calculate(UnaryCalculator calc, double v)</code> methods. The lambdas pass code as data to these methods, which are received as BinaryCalculator or UnaryCalculator instances.</p>\n<p>Compiling Listing 3 and run the application. You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">18 + 36.5 = 54.500000</span><br><span class=\"line\">89 / 2.9 = 30.689655</span><br><span class=\"line\">-89 = -89.000000</span><br><span class=\"line\">18 * 18 = 324.000000</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Target-types\"><a href=\"#Target-types\" class=\"headerlink\" title=\"Target types\"></a>Target types</h2><p>A lambda is associated with an implicit target type, which identifies the type of object to which a lambda is bound. The target type must be a functional interface that’s inferred from the context, which limit lambdas to appearing in the following context:</p>\n<ul>\n<li>Variable declaration</li>\n<li>Assignment</li>\n<li>Return statement</li>\n<li>Array initializer</li>\n<li>Method or constructor arguments</li>\n<li>Lambda body</li>\n<li>Ternary (三元) conditional expression</li>\n<li>Cast expression</li>\n</ul>\n<p>Listing 4 presents an application that demonstrates these target type contexts.</p>\n<h3 id=\"Listing-4-LambdaDemo\"><a href=\"#Listing-4-LambdaDemo\" class=\"headerlink\" title=\"Listing 4. LambdaDemo\"></a>Listing 4. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Target type #1: variable declaration</span></span><br><span class=\"line\">        Runnable r = () -&gt; &#123;System.out.println(<span class=\"string\">\"running\"</span>);&#125;;</span><br><span class=\"line\">        r.run();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #2: assignment</span></span><br><span class=\"line\">        r = () -&gt; System.out.printnl(<span class=\"string\">\"running\"</span>);</span><br><span class=\"line\">        r.run();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #3: return statement (in getFilter())</span></span><br><span class=\"line\">        File[] files = <span class=\"keyword\">new</span> File(<span class=\"string\">\".\"</span>).listFiles(getFilter(<span class=\"string\">\"txt\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(files[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #4: array initializer</span></span><br><span class=\"line\">        FileSystem fs = FileSystems.getDefault();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PathMatcher matchers[] = &#123;</span><br><span class=\"line\">            (path) -&gt; path.toString().endWith(<span class=\"string\">\"txt\"</span>),</span><br><span class=\"line\">            (path) -&gt; path.toString().endWith(<span class=\"string\">\"java\"</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        FileVistor&lt;Path&gt; visitor = <span class=\"keyword\">new</span> SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> FileVisitResult <span class=\"title\">visitFile</span><span class=\"params\">(Path file, BasicFileAttributes attribs)</span> </span>&#123;</span><br><span class=\"line\">                Path name = file.getFileName();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matchers.length; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (matchers[i].matches(name)) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Found matched file: '%s'.%n\"</span>, file);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> FileVisitResult.CONTINUE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Files.walkFileTree(Paths.get(<span class=\"string\">\".\"</span>), visitor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #5: method or constructor arguments</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"running\"</span>).start());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #6: lambda body (a nested lambda)</span></span><br><span class=\"line\">        Callable&lt;Runnable&gt; callable = () -&gt; () -&gt; System.out.println(<span class=\"string\">\"called\"</span>);</span><br><span class=\"line\">        callable.call().run();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #7: ternary conditional expression</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ascendingSort = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Comparator&lt;String&gt; cmp = (ascendingSort) ? (s1, s2) -&gt; s1.compareTo(s2)</span><br><span class=\"line\">                                                 : (s1, s2) -&gt; s2.compareTo(s1);</span><br><span class=\"line\">                                                 </span><br><span class=\"line\">        List&lt;String&gt; cities = Arrays.asList(<span class=\"string\">\"Washington\"</span>, <span class=\"string\">\"london\"</span>, <span class=\"string\">\"Rome\"</span>, <span class=\"string\">\"Berlin\"</span>, <span class=\"string\">\"Jerusalem\"</span>, <span class=\"string\">\"Ottawa\"</span>, <span class=\"string\">\"Sydney\"</span>, <span class=\"string\">\"Moscow\"</span>);</span><br><span class=\"line\">        Collections.sort(cities, cmp);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cities.size(); i++) &#123;</span><br><span class=\"line\">            System.out.println(cities.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #8: cast expression</span></span><br><span class=\"line\">        String user = AccessController.doPrivileged((PrivilegedAction&lt;String&gt;)() -&gt; System.getProperty(<span class=\"string\">\"user.name\"</span>));</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> FileFilter <span class=\"title\">getFilter</span><span class=\"params\">(String ext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (pathname) -&gt; pathname.toString().endWith(ext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The first example demonstrates a lombda in variable declaration context. it assigns lombda <code>() -&gt; {System.out.println(&quot;running&quot;);}</code> to variable r of Runnable interface type. The second example is similar, but demonstrates a lambda in an assignment context (to previously declared variable r).</p>\n<p>The third example demonstrates a lambda in a return statement context. It invokes the getFilter() method with a specified file extension arguement to return a java.io.FileFilter object. This object is passed to java.io.file’s listFiles() method, which invokes the filter for each file, ignoring files that don’t match extension.</p>\n<p>The getFilter() method returns a FileFilter object expressed via a lambda. The compiler notes that the lambda satisfies this functional interafce’s <code>boolean accept(File pathname)</code> method (both have a single parameter and the lambda body returns a Boolean value) and binds the lambda to FileFilter.</p>\n<p>The fourth example demonstrates lambda usage in an array initializer context. Two java.nio.file.PathMatcher objects are created based on lambdas. Each PathMatcher object matches files based on criteria (标准) specified by its lambda’s body. Here is the relevant code:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> PathMatcher matchers[] = &#123;</span><br><span class=\"line\">    (path) -&gt; path.toString().endsWith(<span class=\"string\">\"txt\"</span>),</span><br><span class=\"line\">    (path) -&gt; path.toString().endsWith(<span class=\"string\">\"java\"</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>The PathMatcher functional interface provides a <code>boolean matches(Path path)</code> method that agrees with the lambda’s parameter list and its body’s Boolean return type. This method is subsequently called to determine a match (based on file extension) for each encountered file during a visit of the current directory and subdirectories.</p>\n<p>The fifth example demonstrates a lambda in a Thread constructor context. The sixth example demonstrates a lambda in a lambda context, which shows that lambdas can be nested. The Seventh example demonstrates a lambda in a ternery conditional expression (<code>?:</code>) context: one of two lambdas is selected based on an ascending or descending sort.</p>\n<p>The eighth (and final) example demonstrates a lambada in a cast expression context. The <code>() -&gt; System.getProperty(&quot;user.name&quot;)</code> lambda is cast to <code>PrivilegedAction&lt;String&gt;</code> functional interface type. This cast addresses an ambiguity in the java.security.AccessController class, which declares the following mehtods:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">doPrivileged</span><span class=\"params\">(PrivilegedAction&lt;T&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title\">doPrivileged</span><span class=\"params\">(PrivilegedExceptionAction&lt;T&gt; action)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>The problem is that each of interfaces PrivilegedAction and PrivilegedExceptionAction declares an identical <code>T run()</code> method. Because the compiler cannot figure out which interface is the target type, it reports an error in the absence of the cast.</p>\n<p>Compile Listing 4 and run the application. You should observe the following output, which assumes that LambdaDemo.java is the only .java file in the current directory and that this directory contains no .txt files:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">running</span><br><span class=\"line\">running</span><br><span class=\"line\">Found matched file: &apos;.\\LambdaDemo.java&apos;.</span><br><span class=\"line\">running</span><br><span class=\"line\">called</span><br><span class=\"line\">Washington</span><br><span class=\"line\">Sydney</span><br><span class=\"line\">Rome</span><br><span class=\"line\">Ottawa</span><br><span class=\"line\">Moscow</span><br><span class=\"line\">London</span><br><span class=\"line\">Jerusalem</span><br><span class=\"line\">Berlin</span><br><span class=\"line\">jeffrey</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Lambdas-and-scopes\"><a href=\"#Lambdas-and-scopes\" class=\"headerlink\" title=\"Lambdas and scopes\"></a>Lambdas and scopes</h2><p>The term scope refers to that part of a program where a name is bound to a particular entiry (e.g., a variable). In another part of the program, the name may be bound to another enitty. A lambda body doesn’t introduce a new scope. Instead, its scope is the enclosing scope.</p>\n<h2 id=\"Lambdas-an-loal-variables\"><a href=\"#Lambdas-an-loal-variables\" class=\"headerlink\" title=\"Lambdas an loal variables\"></a>Lambdas an loal variables</h2><p>A lambda body can define local variables. Because these variables are considered part of the enclosing scope, the compiler will report an error when it detects that the lambda body is redefinning a local variable. Listing 5 demonstrates this problem.</p>\n<h3 id=\"Listing-5-LambdaDemo\"><a href=\"#Listing-5-LambdaDemo\" class=\"headerlink\" title=\"Listing 5. LambdaDemo\"></a>Listing 5. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> limit = <span class=\"number\">10</span>;</span><br><span class=\"line\">        Runnable r = () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> limit = <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; limit; i++) &#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Because limit is already present in the enclosing scope (the main() method), the lambda body’s redeinition of <code>limit (int limit =5;)</code> cause the compiler to report the following error message: error: variable limit is already defined in method main(String[] args).</p>\n<blockquote>\n<p>Lambda bodies and local variables<br>Whether originating in a lambda body or in the enclosing scope, a local variable must be initialized before being used. Otherwise, the compiler will report an error.</p>\n</blockquote>\n<p>A local varialbe or parameter that’s defined outside a lambda body and referenced from the body must be markded final or considered effectively final (the variable cannot to assigned to after initialization). Attempting to modify an effectively final varialbe causes the compiler to report an error, as demonstrated in Listing 6.</p>\n<h3 id=\"Listing-6-LambdaDemo\"><a href=\"#Listing-6-LambdaDemo\" class=\"headerlink\" title=\"Listing 6. LambdaDemo\"></a>Listing 6. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> limit = <span class=\"number\">10</span>;</span><br><span class=\"line\">        Runable r = () -&gt; &#123;</span><br><span class=\"line\">            limit = <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; limit; i++) &#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>limit is effectively final. The lambda body’s attempt to modify this variable causes the compiler to report an error. It does so because a final/effectively final variable will need to hang around until the lambda executes, which may not happen until long after the code in which the variable was defined returns. Non-final/non-effectively final variable no longer exist.</p>\n<h2 id=\"Lambdas-and-the-‘this’-and-‘super’-keywords\"><a href=\"#Lambdas-and-the-‘this’-and-‘super’-keywords\" class=\"headerlink\" title=\"Lambdas and the ‘this’ and ‘super’ keywords\"></a>Lambdas and the ‘this’ and ‘super’ keywords</h2><p>Any this or super reference that is used in a lambda body is regarded as being equivalent to its usage in the enclosing scope (bacause a lambda doesn’t inctroduce a new scope). However, this isn’t the case with anonymous classes, which Listing 7 demonstrates.</p>\n<h3 id=\"Listing-7-LambdaDemo\"><a href=\"#Listing-7-LambdaDemo\" class=\"headerlink\" title=\"Listing 7. LambdaDemo\"></a>Listing 7. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> LambdaDemo().deWork();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"this - %s%n\"</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Runnable r = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"this = %s%n\"</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(r).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; System.out.printf(<span class=\"string\">\"this = %n%f\"</span>, <span class=\"keyword\">this</span>)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 7’s main() method instantiates LambdaDemo and invokes the object’s doWork() method to output the object’s this reference, instantiate an anonymous class that implements Runnable, create a Thread object that executes this runnable when its thread is started, and create another Thread object whose thread executes a lambda when started.</p>\n<p>Compile Listing 7 and run the application. You should observe something similar to the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this = LambdaDemo@776ec8df</span><br><span class=\"line\">this = LambdaDemo$1@48766bb</span><br><span class=\"line\">this = LambdaDemo@776ec8df</span><br></pre></td></tr></table></figure></p>\n<p>The first line shows LambdaDemo’s this reference, the second line shows a different this reference in the new Runnable scope, and the third output line shows the this reference in a lambda context. The third and first lines match because the lambda’s scope is nested inside the doWrok() method; this has the same meaning throughout this method.</p>\n<h2 id=\"Lambdas-and-exceptions\"><a href=\"#Lambdas-and-exceptions\" class=\"headerlink\" title=\"Lambdas and exceptions\"></a>Lambdas and exceptions</h2><p>A lambda body isnot allowed to throw more exceptions than are specified in the throws clause of the functional interface method. If a lambda body throws an exception, the functional interface method’s throws clause must declare the same exception type or its supertype. Consider Listing 8.</p>\n<h3 id=\"Listing-8-LambdaDemo\"><a href=\"#Listing-8-LambdaDemo\" class=\"headerlink\" title=\"Listing 8. LambdaDemo\"></a>Listing 8. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Work</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dosomething</span><span class=\"params\">()</span> thrwos IOException</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> AWTException, IOException </span>&#123;</span><br><span class=\"line\">        Work work = () -&gt; &#123;<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException();&#125;;</span><br><span class=\"line\">        work.doSomething();</span><br><span class=\"line\">        work = () -&gt; &#123;<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AWTException(<span class=\"string\">\"\"</span>);&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 8 declares a Work functional interface whose doSomething() method is declared to throw java.io.IOException. The main() method assigns a lambda that throws IOException to work, which is okay becuase IOException is listed in doSomething()’s throws clause.</p>\n<p>main() next assigns a lambda that throws java.awt.AWTException to work. However, the compiler doesn’t allow this assignment bacuase AWTException isn’t part of doSomething()’s throws caluse (and is certainly not a subtype of IOException).</p>\n<h2 id=\"Predefined-预定义-functional-interfaces\"><a href=\"#Predefined-预定义-functional-interfaces\" class=\"headerlink\" title=\"Predefined (预定义) functional interfaces\"></a>Predefined (预定义) functional interfaces</h2><p>You might find yourself repeatedly creating similar functional interfaces. For example, you might carete a CheckConnection functional interface with a <code>boolean isConnected(Connection c)</code> method and a CheckAccout functional interface with a <code>boolean isPositiveBalance(Account acct)</code> method. This is wasteful.</p>\n<p>THe previous examples expose the abstract concept of a predicate (a Boolean valued function). Anticipating such patterns. Oracle provides the java.util.function package of commonly-used functional interfaces. For example, this package’s <code>Predicate&lt;T&gt;</code> functional interface can be used in place of CheckConnect and CheckAccount.</p>\n<p><code>Predicate&lt;T&gt;</code> provides a <code>boolean test(T t)</code> method that evaluates this predicate on its argument (t), returning true when t matches the predicate, and returning false otherwise. Notice that <code>test()</code> provides the same kind of parameter list as <code>isConnected()</code> and <code>isPositiveBalance()</code>. Also, notice that they all have the same return type (boolean).</p>\n<p>The application source code in Listing 9 demonstrates <code>Predicate&lt;T&gt;</code>.</p>\n<h3 id=\"Listing-9-LambdaDemo\"><a href=\"#Listing-9-LambdaDemo\" class=\"headerlink\" title=\"Listing 9. LambdaDemo\"></a>Listing 9. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id, balance;</span><br><span class=\"line\">   Account(<span class=\"keyword\">int</span> id, <span class=\"keyword\">int</span> balance)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.balance = balance;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getBalance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getID</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      System.out.printf(<span class=\"string\">\"Account: [%d], Balance: [%d]%n\"</span>, id, balance);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> List&lt;Account&gt; accounts;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      accounts = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">1000</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">      accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">2000</span>, -<span class=\"number\">500</span>));</span><br><span class=\"line\">      accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">3000</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">      accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">4000</span>, -<span class=\"number\">80</span>));</span><br><span class=\"line\">      accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">5000</span>, <span class=\"number\">1000</span>));</span><br><span class=\"line\">      <span class=\"comment\">// Print all accounts</span></span><br><span class=\"line\">      printAccounts(account -&gt; <span class=\"keyword\">true</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      <span class=\"comment\">// Print all accounts with negative balances.</span></span><br><span class=\"line\">      printAccounts(account -&gt; account.getBalance() &lt; <span class=\"number\">0</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      <span class=\"comment\">// Print all accounts whose id is greater than 2000 and less than 5000.</span></span><br><span class=\"line\">      printAccounts(account -&gt; account.getID() &gt; <span class=\"number\">2000</span> &amp;&amp;</span><br><span class=\"line\">                               account.getID() &lt; <span class=\"number\">5000</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printAccounts</span><span class=\"params\">(Predicate&lt;Account&gt; tester)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Account account: accounts)</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (tester.test(account))</span><br><span class=\"line\">            account.print();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 9 creates an array-based list of accounts with positive, zero, and regative balances. It then demonstrates <code>Predicate&lt;T&gt;</code> by invoking <code>pringAccount()</code> with lambdas for printing out all accounts, only those accounts with negative balances, and only those accounts whose IDs are greater than 2000 and less than 5000.</p>\n<p>Consider lambda expresison <code>account -&gt; true</code>. The compiler verifies that the lambda matches <code>Predicate&lt;T&gt;</code>‘s <code>boolean test(T)</code> method, which it does—the lambda presents a single parameter (account) and its body always returns a Boolean value (true). For this lambda, <code>test()</code> is implemented to execute <code>return true</code>.</p>\n<p>Compiling Listing 9 and run the application. You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Account: [1000], Balance: [200]</span><br><span class=\"line\">Account: [2000], Balance: [-500]</span><br><span class=\"line\">Account: [3000], Balance: [0]</span><br><span class=\"line\">Account: [4000], Balance: [-80]</span><br><span class=\"line\">Account: [5000], Balance: [1000]</span><br><span class=\"line\">Account: [2000], Balance: [-500]</span><br><span class=\"line\">Account: [4000], Balance: [-80]</span><br><span class=\"line\">Account: [3000], Balance: [0]</span><br><span class=\"line\">Account: [4000], Balance: [-80]</span><br></pre></td></tr></table></figure></p>\n<p><code>Predicate&lt;T&gt;</code> is just one of java.util.function’s various predefinded functional interfaces. Another example is <code>Consumer&lt;T&gt;</code>, which represents an operation that accepts a single argument and returns no result. Unlike <code>Predicate&lt;T&gt;</code>, <code>Consumer&lt;T&gt;</code> is expected to operate via side-effects. In other words, it modifies its argument in some way.</p>\n<p><code>Comsumer&lt;T&gt;</code>‘s <code>void accept(T t)</code> method executes an operation on its argument (t). When appearing in the context of this functional interface, a lambda must conform to the <code>accept()</code> method’s solitary parameter and return type. Listing 10 presents an example that demonstrates <code>Comsumer&lt;T&gt;</code> along with <code>Predicate&lt;T&gt;</code>.</p>\n<h3 id=\"Listing-10-LambdaDemo\"><a href=\"#Listing-10-LambdaDemo\" class=\"headerlink\" title=\"Listing 10. LambdaDemo\"></a>Listing 10. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>   </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id, balance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Account: [%d], Balance: [%d]%n\"</span>, id, balance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;Account&gt; accounts;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        accounts = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">1000</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">        accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">2000</span>, -<span class=\"number\">500</span>));</span><br><span class=\"line\">        accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">3000</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">        accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">4000</span>, -<span class=\"number\">80</span>));</span><br><span class=\"line\">        accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">5000</span>, <span class=\"number\">1000</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// Deposit enough money in accounts with negative balances so that they</span></span><br><span class=\"line\">        <span class=\"comment\">// end up with zero balances (and are no longer overdrawn).</span></span><br><span class=\"line\">        adjustAccount(account -&gt; account.getBalance() &lt; <span class=\"number\">0</span>, </span><br><span class=\"line\">                      account -&gt; account.deposit(-account.getBalance()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustAccounts</span><span class=\"params\">(Prediate&lt;Account&gt; tester, Comsumer&lt;Account&gt; adjuster)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Account acount : accounts) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tester.test(account)) &#123;</span><br><span class=\"line\">                adjuster.accept(account);</span><br><span class=\"line\">                account.print();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 10 continues on from the previous example by introducing an <code>adjustAccounts()</code> method that addresses overdrawn accounts by depositing enouth money to give them zero balances. <code>adjustAccounts()</code> takes two lambda arguments, which must comform to <code>Predicate&lt;T&gt;</code>‘s and <code>Comsumer&lt;T&gt;</code>‘s abstract method parameter lists and return types.</p>\n<p>The compiler determines that the lambda arguments passed to <code>adjustAccounts()</code> are correct. The <code>test()</code> method is implemented to take an <code>Account acount</code> parameter and execute <code>return account.getBalance() &lt; 0;</code>. Similarly, <code>accept()</code> is implemented to take the same parameter and execute <code>account.deposit(account.getBalance());</code>.</p>\n<p>Compile Listing 10 and run the application. You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Account: [2000], Balance: [0]</span><br><span class=\"line\">Account: [4000], Balance: [0]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Primitive specializations of predefined functional interfaces<br>java.util.function includes primitive specializations of various functional interfaces. For example, DoubleConsumer is a primitive specialization of Consumer. Each primitive specialization funcitonal interface exists for performance reasons, to avoid unnecessary object creation and method calls when the inputs or outputs are primitive type-based values.</p>\n</blockquote>\n<h2 id=\"In-conclusion\"><a href=\"#In-conclusion\" class=\"headerlink\" title=\"In conclusion\"></a>In conclusion</h2><p>In this tutorial I’ve introduced you to programming with lambda expressions. I started with a high-level overview, then offered in-depth introductions to the core features and techniques associated with lambdas: target type, scopes, local variables, the this and super keyword, and exceptions.</p>\n<p>While lambda hava done much to simplify and modernize Java programming, in some cases their usage still results in unnecessary clutter.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Before Java SE 8, anonymous   classes were typically used to pass functionality to a method. This practice (实践) obfuscated (模糊化) source code, making it harder to understand. Java 8 eliminated (淘汰) this problem by introducing lambdas. This tutorial first introduces the lambda language feature, then provides a more detailed introducetion to functional programming with lambda expressions along with target types. You’ll also learn how lambdas interact with scopes, local variables, the this and super keywords, and Java exceptions.</p>\n<p>Note that code examples in this tutorial are compatible with JDK 12.</p>\n<blockquote>\n<p>Discovering types for yourself<br>I won’t introduce any non-lambda language features in this tutorial that you haven’t perviously learned about, but I will demonstrate lambdas via types taht I haven’t perviously discussed in this series. One example is the java.lang.Math class. I will introduce these types in future Java 101 tutorials. For now, I suggest reading the JDK 12 API documentation to learn more about them.</p>\n</blockquote>\n<h2 id=\"Lambdas-A-primer\"><a href=\"#Lambdas-A-primer\" class=\"headerlink\" title=\"Lambdas: A primer\"></a>Lambdas: A primer</h2><p>A lambda expression (lambda) describes a block of code (an anonymous function) that can be passed to constructors or methods for subsequent execution. The constructor or method receviers the lambdas as an argument. Consider the following example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">() -&gt; System.out.println(<span class=\"string\">\"Hello\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>This example identifies a lambda for outputting a message to the standard output stream. From left to right, <code>()</code> identifies the lambda’s formal parameter list (there are no parameters in the example) <code>-&gt;</code> indicates that the expression is a lambda, and <code>System.out.println(&quot;Hello&quot;)</code> is the code to be executed.</p>\n<p>Lambdas simplify the use of functional interfaces, which are annotated interfaces that each declare one abstract method (although they can also declare any combination of default, static, and private methods.) For example, the standard class library provides a java.lang.Runnable interface with a single abstract <code>void run()</code> method. This functional interface’s declaration appears below:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The class libaray annotates Runable with @FunctionalInterface, which is an instance of the java.lang.FunctionInterface annotation type. FuntcionalInterface is used to annotate those interfaces that are to be used in lambda contexts.</p>\n<p>A lambda doesn’t have an explicit interface type. Instead, the compiler uses the surrounding context to infer which functional interface to instantiate when a lambda is specified — the lambda is bound to that interface. For example, suppose I specified the following code fragment, which passes the previous lambda as an argument to the java.lang.Thread class’s <code>Thread(Runnable target)</code> constructor:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"Hello\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>The compiler determines that the lambda is being passed to <code>Thread(Runnable r)</code> because this is the only contructor that satisfies the lambda: Runnable is a functional interface, the lambda’s emptry formal paramter list <code>()</code> matches <code>run()</code>‘s emptry parameter list, and the return types <code>(void)</code> also agree. The lambda is bound to Runnable.</p>\n<p>Listing 1 presents the source code to a small application that lets you play with this example.</p>\n<h3 id=\"Listing-1-LambdaDemo\"><a href=\"#Listing-1-LambdaDemo\" class=\"headerlink\" title=\"Listing 1. LambdaDemo\"></a>Listing 1. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"Hello\"</span>).start());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Compile Listing 1 and run the application. You should oberve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br></pre></td></tr></table></figure></p>\n<p>Lambdas can greatly simplify the amount of source code that you must write, and can also make source code much easier to understand. For example, without lambdas, you would probably specify Listing 2’s more verbose code, which is based on an instance of an anonymous calss that implements Runnable.</p>\n<h3 id=\"Listing-2-LambdaDemo\"><a href=\"#Listing-2-LambdaDemo\" class=\"headerlink\" title=\"Listing 2. LambdaDemo\"></a>Listing 2. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      Runnable r = <span class=\"keyword\">new</span> Runnable()</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                      <span class=\"meta\">@Override</span></span><br><span class=\"line\">                      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">                      </span>&#123;</span><br><span class=\"line\">                         System.out.println(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                   &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Thread(r).start();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After compiling this source code, run the application. You’ll discover the same output as  previously shown.</p>\n<blockquote>\n<p>Lambdas and the Streams API<br>As well as simplifying source code, lambdas play an important role in Java’s functionally-oriented Streams API. The describe units of functionality that are passed to various API methods.</p>\n</blockquote>\n<h2 id=\"Java-lambdas-in-depth\"><a href=\"#Java-lambdas-in-depth\" class=\"headerlink\" title=\"Java lambdas in depth\"></a>Java lambdas in depth</h2><p>To use lambdas effectively, you must understand the syntax of lambda expression along with the notion of a target type. You also need to understand how lambdas interact with scopes, local variables, the this and super keywords, and exceptions. I’ll cover all of these topics in the sections that follow.</p>\n<blockquote>\n<p>How lambdas are implemented<br>Lambdas are implemented in terms of the Java virtual mechine’s invokedynamic (动态类型语言) instruction (指令) and the java.lang.invoke API.</p>\n</blockquote>\n<h2 id=\"Lambda-syntax\"><a href=\"#Lambda-syntax\" class=\"headerlink\" title=\"Lambda syntax\"></a>Lambda syntax</h2><p>Every lambda conforms to the following syntax:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( formal-parameter-list ) -&gt; &#123; expression-or-statements &#125;</span><br></pre></td></tr></table></figure></p>\n<p>The formal-parameter-list is a comma-separated list of formal paramater, which must match the parameters of a funcitonal interface’s single abstract method at runtime. If you omit their types, the compiler infers (推断) these types from the context in which the lambda is used. Consider the following examples:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b)<span class=\"comment\">// types explicitly specified</span></span><br><span class=\"line\">(a, b)              <span class=\"comment\">// types inferred by compiler</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Lambdas and var<br>Starting with Java SE 11, you can repalce a type name with var. For example, you could specify <code>(var a, var b)</code>.</p>\n</blockquote>\n<p>You must specify parentheses (括弧) for multiple or no formal parameters. However, you can omit the parentheses (although you don’t have to) when specifying a single formal parameters. (This applies to the parameter name only — parentheses  are required when the type is also specified.) Consider the follwoing addditional examples:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x           <span class=\"comment\">// parentheses omitted due to single formal parameter</span></span><br><span class=\"line\">(<span class=\"keyword\">double</span> x)  <span class=\"comment\">// parentheses required because type is also present</span></span><br><span class=\"line\">()          <span class=\"comment\">// parentheses required when no formal parameters</span></span><br><span class=\"line\">(x, y)      <span class=\"comment\">// parentheses required because of multiple formal parameters</span></span><br></pre></td></tr></table></figure></p>\n<p>The formal-parameter-list if followed by a <code>-&gt;</code> token, which is followed by expression-or-statements — an expression of a block of statements (either is known as the lambda’s body). Unlike expression-based bodies, statement-based bodies must be placed between open and close brace characters(<code>{}</code>):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">double</span> radius) -&gt; Math.PI * radius * radius</span><br><span class=\"line\">radius -&gt; &#123; <span class=\"keyword\">return</span> Math.PI * radius * radius; &#125;</span><br><span class=\"line\">radius -&gt; &#123; System.out.println(radius); <span class=\"keyword\">return</span> Math.PI * radius * radius; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>The first example’s expression-based lambda body doesn’t have to be placed between braces. The second example converts the expression-based body to a stattement-based body, in which return must be specified to return the expressions’s value. The final example demonstractes multiple statements and cannot be expressed without braces.</p>\n<blockquote>\n<p>Lambda bodies and semicolons<br>Note the absence or presence of semicolons (分号, <code>;</code>) in the previous examples. In each case, the lambda body isn’t terminated with a semicolon because the lambda isn’t statement. However, within a statement-based lambda body, each statement must be terminated with a ssemicolon.</p>\n</blockquote>\n<p>Listing 3 presents a simple application that demonstrates lambda syntax; note that this listing builds on the previous two code examples.</p>\n<h3 id=\"Listing-3-LambdaDemo\"><a href=\"#Listing-3-LambdaDemo\" class=\"headerlink\" title=\"Listing 3. LambdaDemo\"></a>Listing 3. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BinaryCalculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">double</span> value1, <span class=\"keyword\">double</span> value2)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UnaryCalculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"18 + 36.5 = %f%n\"</span>, calculate((<span class=\"keyword\">double</span> v1, <span class=\"keyword\">double</span> v2) -&gt; v1 + v2, <span class=\"number\">18</span>, <span class=\"number\">36.5</span>));</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"89 / 2.9 = %f%n\"</span>, calculate((v1, v2) -&gt; v1 / v2, <span class=\"number\">89</span>, <span class=\"number\">2.9</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"-89 = %f%n\"</span>, calculate(v -&gt; -v, <span class=\"number\">89</span>));</span><br><span class=\"line\">      </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"18 * 18 = %f%n\"</span>, calculate((<span class=\"keyword\">double</span> v) -&gt; v * v, <span class=\"number\">18</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">calculate</span><span class=\"params\">(BinaryCalculator calc, <span class=\"keyword\">double</span> v1, <span class=\"keyword\">double</span> v2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> calc.calculate(v1, v2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">calculate</span><span class=\"params\">(UnaryCalculator clac, <span class=\"keyword\">double</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> calc.calculate(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 3 first introduces the BinaryCalculator and UnaryCalculator functional interfaces whose <code>calculate()</code> methods perform calculations on two input arguments or on a single input argument, respectively. This listing also introduces a LambdaDemo calss whose <code>main()</code> method demonstrates these functional interfaces.</p>\n<p>The functional interfaces are demonstrated in the <code>static double calculate(BinaryCalculator calc, double v1, double v2)</code> and <code>static double calculate(UnaryCalculator calc, double v)</code> methods. The lambdas pass code as data to these methods, which are received as BinaryCalculator or UnaryCalculator instances.</p>\n<p>Compiling Listing 3 and run the application. You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">18 + 36.5 = 54.500000</span><br><span class=\"line\">89 / 2.9 = 30.689655</span><br><span class=\"line\">-89 = -89.000000</span><br><span class=\"line\">18 * 18 = 324.000000</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Target-types\"><a href=\"#Target-types\" class=\"headerlink\" title=\"Target types\"></a>Target types</h2><p>A lambda is associated with an implicit target type, which identifies the type of object to which a lambda is bound. The target type must be a functional interface that’s inferred from the context, which limit lambdas to appearing in the following context:</p>\n<ul>\n<li>Variable declaration</li>\n<li>Assignment</li>\n<li>Return statement</li>\n<li>Array initializer</li>\n<li>Method or constructor arguments</li>\n<li>Lambda body</li>\n<li>Ternary (三元) conditional expression</li>\n<li>Cast expression</li>\n</ul>\n<p>Listing 4 presents an application that demonstrates these target type contexts.</p>\n<h3 id=\"Listing-4-LambdaDemo\"><a href=\"#Listing-4-LambdaDemo\" class=\"headerlink\" title=\"Listing 4. LambdaDemo\"></a>Listing 4. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Target type #1: variable declaration</span></span><br><span class=\"line\">        Runnable r = () -&gt; &#123;System.out.println(<span class=\"string\">\"running\"</span>);&#125;;</span><br><span class=\"line\">        r.run();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #2: assignment</span></span><br><span class=\"line\">        r = () -&gt; System.out.printnl(<span class=\"string\">\"running\"</span>);</span><br><span class=\"line\">        r.run();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #3: return statement (in getFilter())</span></span><br><span class=\"line\">        File[] files = <span class=\"keyword\">new</span> File(<span class=\"string\">\".\"</span>).listFiles(getFilter(<span class=\"string\">\"txt\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(files[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #4: array initializer</span></span><br><span class=\"line\">        FileSystem fs = FileSystems.getDefault();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PathMatcher matchers[] = &#123;</span><br><span class=\"line\">            (path) -&gt; path.toString().endWith(<span class=\"string\">\"txt\"</span>),</span><br><span class=\"line\">            (path) -&gt; path.toString().endWith(<span class=\"string\">\"java\"</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        FileVistor&lt;Path&gt; visitor = <span class=\"keyword\">new</span> SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> FileVisitResult <span class=\"title\">visitFile</span><span class=\"params\">(Path file, BasicFileAttributes attribs)</span> </span>&#123;</span><br><span class=\"line\">                Path name = file.getFileName();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matchers.length; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (matchers[i].matches(name)) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Found matched file: '%s'.%n\"</span>, file);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> FileVisitResult.CONTINUE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Files.walkFileTree(Paths.get(<span class=\"string\">\".\"</span>), visitor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #5: method or constructor arguments</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"running\"</span>).start());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #6: lambda body (a nested lambda)</span></span><br><span class=\"line\">        Callable&lt;Runnable&gt; callable = () -&gt; () -&gt; System.out.println(<span class=\"string\">\"called\"</span>);</span><br><span class=\"line\">        callable.call().run();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #7: ternary conditional expression</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ascendingSort = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Comparator&lt;String&gt; cmp = (ascendingSort) ? (s1, s2) -&gt; s1.compareTo(s2)</span><br><span class=\"line\">                                                 : (s1, s2) -&gt; s2.compareTo(s1);</span><br><span class=\"line\">                                                 </span><br><span class=\"line\">        List&lt;String&gt; cities = Arrays.asList(<span class=\"string\">\"Washington\"</span>, <span class=\"string\">\"london\"</span>, <span class=\"string\">\"Rome\"</span>, <span class=\"string\">\"Berlin\"</span>, <span class=\"string\">\"Jerusalem\"</span>, <span class=\"string\">\"Ottawa\"</span>, <span class=\"string\">\"Sydney\"</span>, <span class=\"string\">\"Moscow\"</span>);</span><br><span class=\"line\">        Collections.sort(cities, cmp);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cities.size(); i++) &#123;</span><br><span class=\"line\">            System.out.println(cities.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Target type #8: cast expression</span></span><br><span class=\"line\">        String user = AccessController.doPrivileged((PrivilegedAction&lt;String&gt;)() -&gt; System.getProperty(<span class=\"string\">\"user.name\"</span>));</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> FileFilter <span class=\"title\">getFilter</span><span class=\"params\">(String ext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (pathname) -&gt; pathname.toString().endWith(ext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The first example demonstrates a lombda in variable declaration context. it assigns lombda <code>() -&gt; {System.out.println(&quot;running&quot;);}</code> to variable r of Runnable interface type. The second example is similar, but demonstrates a lambda in an assignment context (to previously declared variable r).</p>\n<p>The third example demonstrates a lambda in a return statement context. It invokes the getFilter() method with a specified file extension arguement to return a java.io.FileFilter object. This object is passed to java.io.file’s listFiles() method, which invokes the filter for each file, ignoring files that don’t match extension.</p>\n<p>The getFilter() method returns a FileFilter object expressed via a lambda. The compiler notes that the lambda satisfies this functional interafce’s <code>boolean accept(File pathname)</code> method (both have a single parameter and the lambda body returns a Boolean value) and binds the lambda to FileFilter.</p>\n<p>The fourth example demonstrates lambda usage in an array initializer context. Two java.nio.file.PathMatcher objects are created based on lambdas. Each PathMatcher object matches files based on criteria (标准) specified by its lambda’s body. Here is the relevant code:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> PathMatcher matchers[] = &#123;</span><br><span class=\"line\">    (path) -&gt; path.toString().endsWith(<span class=\"string\">\"txt\"</span>),</span><br><span class=\"line\">    (path) -&gt; path.toString().endsWith(<span class=\"string\">\"java\"</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>The PathMatcher functional interface provides a <code>boolean matches(Path path)</code> method that agrees with the lambda’s parameter list and its body’s Boolean return type. This method is subsequently called to determine a match (based on file extension) for each encountered file during a visit of the current directory and subdirectories.</p>\n<p>The fifth example demonstrates a lambda in a Thread constructor context. The sixth example demonstrates a lambda in a lambda context, which shows that lambdas can be nested. The Seventh example demonstrates a lambda in a ternery conditional expression (<code>?:</code>) context: one of two lambdas is selected based on an ascending or descending sort.</p>\n<p>The eighth (and final) example demonstrates a lambada in a cast expression context. The <code>() -&gt; System.getProperty(&quot;user.name&quot;)</code> lambda is cast to <code>PrivilegedAction&lt;String&gt;</code> functional interface type. This cast addresses an ambiguity in the java.security.AccessController class, which declares the following mehtods:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">doPrivileged</span><span class=\"params\">(PrivilegedAction&lt;T&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title\">doPrivileged</span><span class=\"params\">(PrivilegedExceptionAction&lt;T&gt; action)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>The problem is that each of interfaces PrivilegedAction and PrivilegedExceptionAction declares an identical <code>T run()</code> method. Because the compiler cannot figure out which interface is the target type, it reports an error in the absence of the cast.</p>\n<p>Compile Listing 4 and run the application. You should observe the following output, which assumes that LambdaDemo.java is the only .java file in the current directory and that this directory contains no .txt files:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">running</span><br><span class=\"line\">running</span><br><span class=\"line\">Found matched file: &apos;.\\LambdaDemo.java&apos;.</span><br><span class=\"line\">running</span><br><span class=\"line\">called</span><br><span class=\"line\">Washington</span><br><span class=\"line\">Sydney</span><br><span class=\"line\">Rome</span><br><span class=\"line\">Ottawa</span><br><span class=\"line\">Moscow</span><br><span class=\"line\">London</span><br><span class=\"line\">Jerusalem</span><br><span class=\"line\">Berlin</span><br><span class=\"line\">jeffrey</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Lambdas-and-scopes\"><a href=\"#Lambdas-and-scopes\" class=\"headerlink\" title=\"Lambdas and scopes\"></a>Lambdas and scopes</h2><p>The term scope refers to that part of a program where a name is bound to a particular entiry (e.g., a variable). In another part of the program, the name may be bound to another enitty. A lambda body doesn’t introduce a new scope. Instead, its scope is the enclosing scope.</p>\n<h2 id=\"Lambdas-an-loal-variables\"><a href=\"#Lambdas-an-loal-variables\" class=\"headerlink\" title=\"Lambdas an loal variables\"></a>Lambdas an loal variables</h2><p>A lambda body can define local variables. Because these variables are considered part of the enclosing scope, the compiler will report an error when it detects that the lambda body is redefinning a local variable. Listing 5 demonstrates this problem.</p>\n<h3 id=\"Listing-5-LambdaDemo\"><a href=\"#Listing-5-LambdaDemo\" class=\"headerlink\" title=\"Listing 5. LambdaDemo\"></a>Listing 5. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> limit = <span class=\"number\">10</span>;</span><br><span class=\"line\">        Runnable r = () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> limit = <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; limit; i++) &#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Because limit is already present in the enclosing scope (the main() method), the lambda body’s redeinition of <code>limit (int limit =5;)</code> cause the compiler to report the following error message: error: variable limit is already defined in method main(String[] args).</p>\n<blockquote>\n<p>Lambda bodies and local variables<br>Whether originating in a lambda body or in the enclosing scope, a local variable must be initialized before being used. Otherwise, the compiler will report an error.</p>\n</blockquote>\n<p>A local varialbe or parameter that’s defined outside a lambda body and referenced from the body must be markded final or considered effectively final (the variable cannot to assigned to after initialization). Attempting to modify an effectively final varialbe causes the compiler to report an error, as demonstrated in Listing 6.</p>\n<h3 id=\"Listing-6-LambdaDemo\"><a href=\"#Listing-6-LambdaDemo\" class=\"headerlink\" title=\"Listing 6. LambdaDemo\"></a>Listing 6. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> limit = <span class=\"number\">10</span>;</span><br><span class=\"line\">        Runable r = () -&gt; &#123;</span><br><span class=\"line\">            limit = <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; limit; i++) &#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>limit is effectively final. The lambda body’s attempt to modify this variable causes the compiler to report an error. It does so because a final/effectively final variable will need to hang around until the lambda executes, which may not happen until long after the code in which the variable was defined returns. Non-final/non-effectively final variable no longer exist.</p>\n<h2 id=\"Lambdas-and-the-‘this’-and-‘super’-keywords\"><a href=\"#Lambdas-and-the-‘this’-and-‘super’-keywords\" class=\"headerlink\" title=\"Lambdas and the ‘this’ and ‘super’ keywords\"></a>Lambdas and the ‘this’ and ‘super’ keywords</h2><p>Any this or super reference that is used in a lambda body is regarded as being equivalent to its usage in the enclosing scope (bacause a lambda doesn’t inctroduce a new scope). However, this isn’t the case with anonymous classes, which Listing 7 demonstrates.</p>\n<h3 id=\"Listing-7-LambdaDemo\"><a href=\"#Listing-7-LambdaDemo\" class=\"headerlink\" title=\"Listing 7. LambdaDemo\"></a>Listing 7. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> LambdaDemo().deWork();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"this - %s%n\"</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Runnable r = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"this = %s%n\"</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(r).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; System.out.printf(<span class=\"string\">\"this = %n%f\"</span>, <span class=\"keyword\">this</span>)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 7’s main() method instantiates LambdaDemo and invokes the object’s doWork() method to output the object’s this reference, instantiate an anonymous class that implements Runnable, create a Thread object that executes this runnable when its thread is started, and create another Thread object whose thread executes a lambda when started.</p>\n<p>Compile Listing 7 and run the application. You should observe something similar to the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this = LambdaDemo@776ec8df</span><br><span class=\"line\">this = LambdaDemo$1@48766bb</span><br><span class=\"line\">this = LambdaDemo@776ec8df</span><br></pre></td></tr></table></figure></p>\n<p>The first line shows LambdaDemo’s this reference, the second line shows a different this reference in the new Runnable scope, and the third output line shows the this reference in a lambda context. The third and first lines match because the lambda’s scope is nested inside the doWrok() method; this has the same meaning throughout this method.</p>\n<h2 id=\"Lambdas-and-exceptions\"><a href=\"#Lambdas-and-exceptions\" class=\"headerlink\" title=\"Lambdas and exceptions\"></a>Lambdas and exceptions</h2><p>A lambda body isnot allowed to throw more exceptions than are specified in the throws clause of the functional interface method. If a lambda body throws an exception, the functional interface method’s throws clause must declare the same exception type or its supertype. Consider Listing 8.</p>\n<h3 id=\"Listing-8-LambdaDemo\"><a href=\"#Listing-8-LambdaDemo\" class=\"headerlink\" title=\"Listing 8. LambdaDemo\"></a>Listing 8. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Work</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dosomething</span><span class=\"params\">()</span> thrwos IOException</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> AWTException, IOException </span>&#123;</span><br><span class=\"line\">        Work work = () -&gt; &#123;<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException();&#125;;</span><br><span class=\"line\">        work.doSomething();</span><br><span class=\"line\">        work = () -&gt; &#123;<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AWTException(<span class=\"string\">\"\"</span>);&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 8 declares a Work functional interface whose doSomething() method is declared to throw java.io.IOException. The main() method assigns a lambda that throws IOException to work, which is okay becuase IOException is listed in doSomething()’s throws clause.</p>\n<p>main() next assigns a lambda that throws java.awt.AWTException to work. However, the compiler doesn’t allow this assignment bacuase AWTException isn’t part of doSomething()’s throws caluse (and is certainly not a subtype of IOException).</p>\n<h2 id=\"Predefined-预定义-functional-interfaces\"><a href=\"#Predefined-预定义-functional-interfaces\" class=\"headerlink\" title=\"Predefined (预定义) functional interfaces\"></a>Predefined (预定义) functional interfaces</h2><p>You might find yourself repeatedly creating similar functional interfaces. For example, you might carete a CheckConnection functional interface with a <code>boolean isConnected(Connection c)</code> method and a CheckAccout functional interface with a <code>boolean isPositiveBalance(Account acct)</code> method. This is wasteful.</p>\n<p>THe previous examples expose the abstract concept of a predicate (a Boolean valued function). Anticipating such patterns. Oracle provides the java.util.function package of commonly-used functional interfaces. For example, this package’s <code>Predicate&lt;T&gt;</code> functional interface can be used in place of CheckConnect and CheckAccount.</p>\n<p><code>Predicate&lt;T&gt;</code> provides a <code>boolean test(T t)</code> method that evaluates this predicate on its argument (t), returning true when t matches the predicate, and returning false otherwise. Notice that <code>test()</code> provides the same kind of parameter list as <code>isConnected()</code> and <code>isPositiveBalance()</code>. Also, notice that they all have the same return type (boolean).</p>\n<p>The application source code in Listing 9 demonstrates <code>Predicate&lt;T&gt;</code>.</p>\n<h3 id=\"Listing-9-LambdaDemo\"><a href=\"#Listing-9-LambdaDemo\" class=\"headerlink\" title=\"Listing 9. LambdaDemo\"></a>Listing 9. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id, balance;</span><br><span class=\"line\">   Account(<span class=\"keyword\">int</span> id, <span class=\"keyword\">int</span> balance)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.balance = balance;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getBalance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getID</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      System.out.printf(<span class=\"string\">\"Account: [%d], Balance: [%d]%n\"</span>, id, balance);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> List&lt;Account&gt; accounts;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      accounts = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">1000</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">      accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">2000</span>, -<span class=\"number\">500</span>));</span><br><span class=\"line\">      accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">3000</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">      accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">4000</span>, -<span class=\"number\">80</span>));</span><br><span class=\"line\">      accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">5000</span>, <span class=\"number\">1000</span>));</span><br><span class=\"line\">      <span class=\"comment\">// Print all accounts</span></span><br><span class=\"line\">      printAccounts(account -&gt; <span class=\"keyword\">true</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      <span class=\"comment\">// Print all accounts with negative balances.</span></span><br><span class=\"line\">      printAccounts(account -&gt; account.getBalance() &lt; <span class=\"number\">0</span>);</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      <span class=\"comment\">// Print all accounts whose id is greater than 2000 and less than 5000.</span></span><br><span class=\"line\">      printAccounts(account -&gt; account.getID() &gt; <span class=\"number\">2000</span> &amp;&amp;</span><br><span class=\"line\">                               account.getID() &lt; <span class=\"number\">5000</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printAccounts</span><span class=\"params\">(Predicate&lt;Account&gt; tester)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Account account: accounts)</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (tester.test(account))</span><br><span class=\"line\">            account.print();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 9 creates an array-based list of accounts with positive, zero, and regative balances. It then demonstrates <code>Predicate&lt;T&gt;</code> by invoking <code>pringAccount()</code> with lambdas for printing out all accounts, only those accounts with negative balances, and only those accounts whose IDs are greater than 2000 and less than 5000.</p>\n<p>Consider lambda expresison <code>account -&gt; true</code>. The compiler verifies that the lambda matches <code>Predicate&lt;T&gt;</code>‘s <code>boolean test(T)</code> method, which it does—the lambda presents a single parameter (account) and its body always returns a Boolean value (true). For this lambda, <code>test()</code> is implemented to execute <code>return true</code>.</p>\n<p>Compiling Listing 9 and run the application. You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Account: [1000], Balance: [200]</span><br><span class=\"line\">Account: [2000], Balance: [-500]</span><br><span class=\"line\">Account: [3000], Balance: [0]</span><br><span class=\"line\">Account: [4000], Balance: [-80]</span><br><span class=\"line\">Account: [5000], Balance: [1000]</span><br><span class=\"line\">Account: [2000], Balance: [-500]</span><br><span class=\"line\">Account: [4000], Balance: [-80]</span><br><span class=\"line\">Account: [3000], Balance: [0]</span><br><span class=\"line\">Account: [4000], Balance: [-80]</span><br></pre></td></tr></table></figure></p>\n<p><code>Predicate&lt;T&gt;</code> is just one of java.util.function’s various predefinded functional interfaces. Another example is <code>Consumer&lt;T&gt;</code>, which represents an operation that accepts a single argument and returns no result. Unlike <code>Predicate&lt;T&gt;</code>, <code>Consumer&lt;T&gt;</code> is expected to operate via side-effects. In other words, it modifies its argument in some way.</p>\n<p><code>Comsumer&lt;T&gt;</code>‘s <code>void accept(T t)</code> method executes an operation on its argument (t). When appearing in the context of this functional interface, a lambda must conform to the <code>accept()</code> method’s solitary parameter and return type. Listing 10 presents an example that demonstrates <code>Comsumer&lt;T&gt;</code> along with <code>Predicate&lt;T&gt;</code>.</p>\n<h3 id=\"Listing-10-LambdaDemo\"><a href=\"#Listing-10-LambdaDemo\" class=\"headerlink\" title=\"Listing 10. LambdaDemo\"></a>Listing 10. LambdaDemo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>   </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id, balance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Account: [%d], Balance: [%d]%n\"</span>, id, balance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;Account&gt; accounts;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        accounts = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">1000</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">        accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">2000</span>, -<span class=\"number\">500</span>));</span><br><span class=\"line\">        accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">3000</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">        accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">4000</span>, -<span class=\"number\">80</span>));</span><br><span class=\"line\">        accounts.add(<span class=\"keyword\">new</span> Account(<span class=\"number\">5000</span>, <span class=\"number\">1000</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// Deposit enough money in accounts with negative balances so that they</span></span><br><span class=\"line\">        <span class=\"comment\">// end up with zero balances (and are no longer overdrawn).</span></span><br><span class=\"line\">        adjustAccount(account -&gt; account.getBalance() &lt; <span class=\"number\">0</span>, </span><br><span class=\"line\">                      account -&gt; account.deposit(-account.getBalance()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustAccounts</span><span class=\"params\">(Prediate&lt;Account&gt; tester, Comsumer&lt;Account&gt; adjuster)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Account acount : accounts) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tester.test(account)) &#123;</span><br><span class=\"line\">                adjuster.accept(account);</span><br><span class=\"line\">                account.print();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Listing 10 continues on from the previous example by introducing an <code>adjustAccounts()</code> method that addresses overdrawn accounts by depositing enouth money to give them zero balances. <code>adjustAccounts()</code> takes two lambda arguments, which must comform to <code>Predicate&lt;T&gt;</code>‘s and <code>Comsumer&lt;T&gt;</code>‘s abstract method parameter lists and return types.</p>\n<p>The compiler determines that the lambda arguments passed to <code>adjustAccounts()</code> are correct. The <code>test()</code> method is implemented to take an <code>Account acount</code> parameter and execute <code>return account.getBalance() &lt; 0;</code>. Similarly, <code>accept()</code> is implemented to take the same parameter and execute <code>account.deposit(account.getBalance());</code>.</p>\n<p>Compile Listing 10 and run the application. You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Account: [2000], Balance: [0]</span><br><span class=\"line\">Account: [4000], Balance: [0]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Primitive specializations of predefined functional interfaces<br>java.util.function includes primitive specializations of various functional interfaces. For example, DoubleConsumer is a primitive specialization of Consumer. Each primitive specialization funcitonal interface exists for performance reasons, to avoid unnecessary object creation and method calls when the inputs or outputs are primitive type-based values.</p>\n</blockquote>\n<h2 id=\"In-conclusion\"><a href=\"#In-conclusion\" class=\"headerlink\" title=\"In conclusion\"></a>In conclusion</h2><p>In this tutorial I’ve introduced you to programming with lambda expressions. I started with a high-level overview, then offered in-depth introductions to the core features and techniques associated with lambdas: target type, scopes, local variables, the this and super keyword, and exceptions.</p>\n<p>While lambda hava done much to simplify and modernize Java programming, in some cases their usage still results in unnecessary clutter.</p>\n"},{"title":"Spring Series Part 2, Spring MVC","date":"2020-04-19T03:00:02.000Z","_content":"Spring MVC is the Spring framework's traditional library for building Java Web applications. It is one of the most popular web frameworks for building fully functional Java web applications and RESTful web services. In this tutorial, you'll get an overview of Spring MVC and learn how to build Java Web applications using Spring Boot, Spring Initializr, and Thymeleaf.\n\n## Spring Boot with Spring Initializr\nWe'll fastrack our Spring MVC web application with the help of Spring Boot and Spring Initializr. Given input for the type of application to be built, Spring Initializr uses the most common dependencies and defaults to setup and configure a baisc Spring Boot application. You can also add custom dependencies and Spring Initializr will include and manage them, ensuring version compatibility with both third-party software and Spring. Spring Boot applications run standalone, without requiring you to provide a runtime environment.\n\nIn this case, since we're building a web application, Spring Boot will automatically include and configure Tomcat as part of the app's runtime. We can also customize the app by adding an H2 database driver to our Maven POM file. Spring Boot will then automatically create an embedded database and DataSource instance in the application context. Once the dependencies are set, Spring Boot will provide default configurations fro the application. Of course we can change the configurations if we want to, but thanks to Spring Boot we hava a headstart: a fully configured, working application right out of the box.\n\nonce we've selected and configured our dependencies, we'll pass those selections to Spring Initializr, which will provide a downloadable ZIP file containing a base Spring Boot project.\n\n## Spring MBC with H2 database engine\nWe'll start by creating a basic Spring MVC web application that persists data to an H2 embedded database.\n\n### Step 1. Setup adn configure the app\nNavigate to Spring Initializr at start.spring.io and select Generate a Maven Project with java and Spring Boot 2.0.X, where X is the latest Spring Boot version (2.0.3 at time of this writing). Make sure you select Spring Boot 2.x so that you can implement Spring Web MVC 5. Spring Boot 1.4 and Spring Boot 1.5 will implement Spring 4.\n\nEnter a group name the format matching your web address, such as com.geekcap.javaworld, and enter an artifact name, such as spring5mvc-example. Figure 1 shows you my configuration.\n\n![Figure 1. Configure for Spring Initializr](001.jpg)\n\nTo add dependencies to the web app, you may either enter a comma-separated list of dependencies into the **Search for dependencies** text field or click on **Switch to the full version**. We'll take the easier route by clicking on **Switch to the full version**. The dependencies are divided into groups, such as Core, Web, and Template Engines. For this example, select the checkboxes for: **Web --> Web, Template Engines --> Thymeleaf, SQL --> JPA, and SQL --> H2**. Here's what each of those selections will add to the application:\n- Web: Spring MVC and Tomcat\n- Thymeleaf: Thymeleaf web template engine\n- JPA: Spring JPA, Hibernate, and Spring Data\n- H2: The H2 embedded database\n\nWhen you're finished, click the Generate Project button at the bottom of page. Spring Initializr will create a readymade ZIP file with all the required project sources, which you can download.\n\n### Step 2. Import the Spring Initializr project to Your IDE\nExtract the ZIP file from Spring Initializr, then import the project into your favorite IDE. For example, to import the project into IntelliJ, choose **File --> New Project**, as shown in Figure 2.\n\n![Figure 2. Importing the project into IntelliJ](002.jpg)\n\n### Step 3. Setup your Maven POM\nNext, navigate to **Import project from external module**, choose **Maven**, and press **Next**. Be sure to choose a Java 1.8 project SDK, then hit **Finish**.\n\n## The Spring Boot starter app\nnow let's take a look at the Spring Boot starter application that has been generated by our (minimal) efforts so far.\n\nTo start, Listing 1 shows the Maven POM file.\n\n### Listing 1. Maven pom.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.geekcap.javaworld</groupId>\n\t<artifactId>spring5mvc-example</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\t<name>spring5mvc-example</name>\n\t<description>Demo project for Spring Boot</description>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.0.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.h2database</groupId>\n\t\t\t<artifactId>h2</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>\n```\n\nNotice that the POM file uses a special parent POM: spring-boot-starter-parent. We'll use the parent POM to manage the versions of all our dependencies and ensure versions are compatible. The repositories at the end of the POM file reference teh Spring **snapshot** and **milestone** repositories. We need these because Spring Boot 2.x is still a milestone release at the time of this writing.\n\nThe dependencies are quite minimal, and most are prefaced with spring-boot-starter:\n- spring-boot-starter-data-jpa\n- spring-boot-starter-thymeleaf\n- spring-boot-starter-web\n- spring-boot-starter-test\n\nEach of these starter dependencies brings in all of the sub-dependencies it needs. Figure 3 shows the partially expanded dependency view in IntelliJ.\n\n![Figure 3. Spring starter project dependencies](003.jpg)\n\nThe POM file includes the following dependencies:\n- spring-boot-starter-data-jpa includes Hibernate and Spring Data\n- spring-boot-starter-thymeleaf includes the Thymeleaf template engine\n- spring-boot-starter-web includes spring-boot-starter-tomcat, an embedded version of Apache Tomcat\n- spring-boot-starter-json includes the Jackson JSON libraries\n- spring-web and spring-webmvc includes Spring MVC\n- spring-boot-starter-test includes testing libraries such as JUnit and Mockito\n\nWhen Spring Boot sees these dependencies in the CLASSPATH, it initiates automatic configuration. For example, when it find spring-boot-starter-web, it creates an embedded version of Tomcat, and when if finds H2 and spring-boot-starter-jpa it creates an H2 embedded database and a Hibernate EntityManager. It then wires the EntityManager into Spring Data.\n\nSpring Boot also creates a single class that can be used to run the application. The class for the example application is shown in Listing 2.\n\n### Listing 2. SpringExampleApplication\n```java\n@SpringBootApplication\npublic class Spring5mvcExampleApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(Spring5mvcExampleApplication.class, args);\n    }\n}\n```\n\nThe class leverages the `SpringApplication.run()` method, passing in the class to run (Spring5mvcExampleApplication in this exmaple). The @SpringBootApplication annotation includes the following annotations:\n- @Configuration informs Spring that the Spring2mvcExample class contains configuration information. (This annotation can be used to create beans that will get registered with the Spring context.)\n- @EnableAutoConfiguration tells Spring to automatically configure resources from dependencies found in the CLASSPATH, such as H2 and Tomcat\n- ComponentScan tells Spring to can packages in the CLASSPATH under the current package (com.geekcap.javaworld.spring5mvcexample) for Spring annotated components such as @Service and @Controller\n\nSpring scans the CLASSPATH and automatically creates components such as the embeded Tomcat server and H2 database. It then populates the Spring context with the application components found in the package scan. In essence, Spring Boot makes it very easy to select and configure the services, components, controllers, entities, and so forth that you need for your application. Once you've done that, Spring will automatically find them, make them available in the Spring context, and autowire everthing together.\n\nWe've got our Spring Boot starter project setup and ready to go. In the next section we'll create the Spring MVC components for our Java Web application.\n\n> What is the Spring context?\n> The Spring context is a registry of all available Spring beans. Classes are identified as Spring beans by annotating them with specific Spring annotations. Examples include @Service, which identifies a business service, @Controller, which identifies a Spring MVC controller (i.e., handles web requests), and @Entity, which is a JPA annotation used to identify classes that are mapped to database tables.\n\n> Once these beans are annotated they need to be registered with the Spring context, which Spring Boot does by performing a package scan of all classes in packages in your project. As the Spring context is being built, it implements the **inversion-of-control (IoC) design pattern** through dependency injection: when a Spring bean needs a dependency, such as a service or repository, the bean can either define a constructor that accepts the dependent bean or it can leverage the @Autowired annotation to tell Spring that it needs that dependency. Spring resolves all dependencies and \"autowires\" the application together.\n\n> Dependency Injection is a powerful design pattern because, rather than creating and managing dependencies inside your code -- which can be messy and leads to tightly coupled classes -- you can instead delegate control to the Spring container. Your class simply tells the container what dependencies it needs to run and the container provides the appropriate dependencies to your class at runtime.\n\n## About Spring MVC 5\nSpring MVC implements the poluar Model-View-Controller pattern, which you've probably seen in other web framework. The Model-View-Controller pattern separates concerns into the categories:\n- Model represents your domain object\n- View renders your model tp a view, such as to an HTML page\n- Controller sits between your view and model and translates change requests in the view into changes in the model, and vice versa. In practical terms, the controller accepts incoming requests, potentially updates the model, and send your model objects to a \"view\" to render back to the client\n\nIn Spring MVC, controllers are identified by the @Controller annotation and accompanied by a @Requestmapping annotation. The annotation defines the HTTP verb (standard HTTP commands like GET, POST, PUT, and DELELE) and URI for which the request-mapping method will be applied. Spring 4 introduced shortcut request mappings, which make things even easier. We'll use these mappings -- @GetMapping, @PostMapping, @PutMapping, @PatchMapping, and @DeleteMapping -- for our example appliation.\n\n## The model in Spring MVC\nFor our application, we'll define a simple model object, a Widget, store it in an embeded H2 database, and build a controller to menage widgets. Let's start with the Widget class, which is shown in Listing 3.\n\n### Listing 3. Widget\n```java\n@Entity\npublic class Widget {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private String name;\n    private String description;\n    public Widget() {\n    }\n    public Widget(Long id, String name, String description) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n    }\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getDescription() {\n        return description;\n    }\n    public void setDescription(String description) {\n        this.description = description;\n    }\n} \n```\n\nThe widget class in a plain old Java object (POJO) that is annotated with JPA (Java Persistence API) annotations. In this case there are three annotations:\n- **@Entity** identifies Widget as an entity that can be persisted to a database\n- **@Id** identifies the **id** field as the primary key of the entity\n- **@GeneratedValue** tells the JPA **EntityManager** that the key should be automatically generated in the database\n\nNote that **EntityManager** is created automatically for us because we included JPA in the Spring Initializr.\n\nThe **Widget** class manages three fields:\n- **id** is the ID, or primary key of the widget\n- **name** is the name of the widget\n- **description** is a description of the widget\n\nTo persist widgets to and from our embedded (内嵌) database, we need to leverage (施加影响) Spring Data. Basically, we'll define an interface that extends one of Spring Data's interfaces, such as **CrudRepository**, and Spring Data will provide an implementation of that interface as runtime.\n\nThe **CrudRepository** interface includes the following methods:\n- **findById** finds the entity in the database with the specified ID\n- **findAll** returns all entities of the repository type from the database (note that there are other Spring Data repository interfaces, such as **PagingAndSortingRepository**, that can help manage larger data sets)\n- **findAllById** passed a collection of IDs, this method returns all entities for those IDs\n- **save** persists an entity to the database (create or update)\n- **saveAll** saves a collection of entities to the database\n- **delete** deletes the specifies entity\n- **deleteById** deletes the entity with the specified ID\n- **deleteAll** delete all entities managed by the repository\n- **count** returns the number of entities that are in the database\n- **existsById** returns true if an entity with the specified ID exists in the database\n\nFor our example, we'll create a **WidgetRepository** interface that extends **CrudRepository**, as shown in Listing 4.\n\n### Listing 4. WidgetRepository\n```java\npublic interface WidgetRepository extends CrudRepository<Widget, Long> {\n}   \n```\n\nThe **WidgetRepository** allows us to perform all create, read, upadte, and delete (CRUD) operations on widgets. The two parameters passed to the **CrudRepository** are **Widget**, which represents the type of entity that the repository manages, and **Long**, which is the type of the primary key for the **Widget** entity. (This is a simple implementation) that scratches the surface of what you can do with Spring Data. I encourage you to learn more about this useful Spring project.)\n\n## The Controller in Spring MVC\nWith our **Widget** entity and **WidgetRepository** in hand, we're ready to build a controller. Listing 5 shows the source code for the **WidgetController**.\n\n### Listing 5. WidgetController\n```java\n@Controller\npublic class WidgetController {\n    @Autowired\n    private WidgetRepository widgetRepository;\n    /**\n     * Load the new widget page.\n     * @param model\n     * @return\n     */\n    @GetMapping(\"/widget/new\")\n    public String newWidget(Model model) {\n        model.addAttribute(\"widget\", new Widget());\n        return \"widgetform\";\n    }\n    /**\n     * Create a new widget.\n     * @param widget\n     * @param model\n     * @return\n     */\n    @PostMapping(\"/widget\")\n    public String createWidget(Widget widget, Model model) {\n        widgetRepository.save(widget);\n        return \"redirect:/widget/\" + widget.getId();\n    }\n    /**\n     * Get a widget by ID.\n     * @param id\n     * @param model\n     * @return\n     */\n    @GetMapping(\"/widget/{id}\")\n    public String getWidgetById(@PathVariable Long id, Model model) {\n        model.addAttribute(\"widget\", widgetRepository.findById(id).orElse(new Widget()));\n        return \"widget\";\n    }\n    /**\n     * Get all widgets.\n     * @param model\n     * @return\n     */\n    @GetMapping(\"/widgets\")\n    public String getWidgets(Model model) {\n        model.addAttribute(\"widgets\", widgetRepository.findAll());\n        return \"widgets\";\n    }\n    /**\n     * Load the edit widget page for the widget with the specified ID.\n     * @param id\n     * @param model\n     * @return\n     */\n    @GetMapping(\"/widget/edit/{id}\")\n    public String editWidget(@PathVariable Long id, Model model) {\n        model.addAttribute(\"widget\", widgetRepository.findById(id).orElse(new Widget()));\n        return \"widgetform\";\n    }\n    /**\n     * Update a widget.\n     * @param widget\n     * @return\n     */\n    @PostMapping(\"/widget/{id}\")\n    public String updateWidget(Widget widget) {\n        widgetRepository.save(widget);\n        return \"redirect:/widget/\" + widget.getId();\n    }\n    /**\n     * Delete a widget by ID.\n     * @param id\n     * @return\n     */\n    @GetMapping(\"/widget/delete/{id}\")\n    public String deleteWidget(@PathVariable  Long id) {\n        widgetRepository.deleteById(id);\n        return \"redirect:/widgets\";\n    }\n}\n```\n\nThe **WidgetController** is annotated with the **@Controller** annotation. When Spring performs a package can of the classes, it will find the **@Controller** annotation, create an instance of this class, and add it to the Spring context, configured to handle web requests. This **WidgetController** defines a **WidgetRepository** implementation created by Spring Data and automatically wire the repository into the controller.\n\nThe **WidgetController** then difines a set of methods to handle requests, using the **@GetMapping** and **PostMapping** annotations. These annotations accept the URI path that each method is handling, defining the HTTP verb accordingly. Because we are using the Thymeleaf engine, each method returns a String naming the template to render. Templates are stored in **src/main/resources/templates** as HTML files with specific Thymeleaf markup, which is shown below.\n\nThe method that return a direct template name are all passed a **Model** object. The **Model** object implements a Spring UI interface and provides methods to add attributes to the model. These attributes will be made available to the template to be rendered. For example, in the **getWidgetById** method, we retrieve a **Widget** from the database and set it in the **Model** with the key **widget**. The template can then access that **Widget** using the **widget** key.\n\n## Controller methods and the view template\nNext let's walk through each **WidgetController** method and its corresponding view template. The homepage for the application is the **/widgets** page, which shows a list of all widgets in the database. The **getWidgets** method retrieves all widgets by calling the **WidgetRepository**'s **findAll** method, sets it as  the **widgets** attribute in the model, and returns **widgets**. Listing 6 shows the **widgets.html** tempalte file.\n\n### Listing 6. widgets.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>Widgets</title>\n    <link href=\"../static/css/bootstrap.min.css\" th:href=\"@{css/bootstrap.min.css}\" rel=\"stylesheet\">\n</head>\n<body>\n    <div class=\"container\">\n        <table class=\"table\">\n            <h2>Widgets</h2>\n            <tr>\n                <th>ID</th>\n                <th>Name</th>\n                <th>Description</th>\n                <th>View</th>\n                <th>Edit</th>\n                <th>Delete</th>\n            </tr>\n            <tr th:each=\"widget : ${widgets}\">\n                <td th:text=\"${widget.id}\">Widget ID</td>\n                <td th:text=\"${widget.name}\">Widget Name</td>\n                <td th:text=\"${widget.description}\">Widget Description</td>\n                <td><a class=\"btn btn-default\" href=\"#\" th:href=\"${'/widget/' + widget.id}\">View</a> </td>\n                <td><a class=\"btn btn-default\" href=\"#\" th:href=\"${'/widget/edit/' + widget.id}\">Edit</a> </td>\n                <td><a class=\"btn btn-default\" href=\"#\" th:href=\"${'/widget/delete/' + widget.id}\">Delete</a> </td>\n            </tr>\n        </table>\n        <a th:href=\"${'/widget/new'}\" class=\"btn btn-default\">New</a>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n    <script src=\"../static/js/bootstrap.min.js\" th:src=\"@{js/bootstrap.min.js}\"></script>\n</body>\n</html>\n```\n\nThymeleaf templates are HTML files that import the **http://www.thymeleaf.org** XML namespace, as seen in the **html** tag. With this namespace include (as **th**), Thymeleaf allows us to add tags to existing HTML elements. This enables you to create and style your HTML files without running your application in Tomcat.\n\nFor this example, we've added the Twitter Bootstrap library, which makes it eaiser to create a nice layout. Rather than constantly restarting Tomcat to view pages, this lets us build the page using an editor, then render the page in a browser. In order to work with your JavaScript and CSS lacally you also need to include the JavaScript **href** and script source **src** values that point to your relative CSS and JavaScript files, respectively. The **th:href** and **th:src** attributes will be resolved to actual URI paths by Thymeleaf in a live application, and will overwrite the **href** and **src** attribute values when the page is rendered.\n\nThe HTML file in Listing 6 contains a table that shows a summary of each widget, with buttons to view the details of a widget, edit a widget, or delete a widget. We use the model to pass in a collection of widgets, and we access those by adding the **th:each** attribute of the **tr** (table row) tag, where **th:each** is Thymeleaf's implementation of a **for-each** contruct. This will create one row for each item in our collection. The **th:each** attribute is passed the value **widget : ${widgets}**. This retrieves the \"widgets\" collection from the model and assigns each widget to a local variable, \"widget\", that will be used inside the row. We can then extract values from the widget using the **${widget.propertyName}** syntax.\n\nFor the first three rows, we include the **th:text** attribute in each table cell (**td**), extracting fields from the widget. For the last three rows, we add hyperlink to our other controller URIs:\n- **/widget/{id}** shows the widget with the specified ID\n- **/widget/edit/{id}** shows the widget with the specified ID in an editable form\n- **/widget/delete/{id}** deletes the widget with the specified ID, then shows the updated list of widgets\n\nThe bottom of the page adds a **New** button that allows the user to create a new widget. Widgets are created through the **/widget/new** URL and presented in the same form as the **/widget/edit/{id}** URI.\n\nFigure 4 shows a screenshot of the widget list page.\n\n![Figure 4. Widget list page](004.jpg)\n\nWhen the user presses the **View** button, the **getWidgetById** method is called:\n```java\n@GetMapping(\"/widget/{id}\")\npublic String getWidgetById(@PathVariable Long id, Model model) {\n    model.addAttribute(\"widget\", widgetRepository.findById(id).orElse(new Widget()));\n    return \"widget\";\n}\n```\n\nThe method is mapped to a GET request for **/widget/{id}** and the **id** is extracted using the **@PathVariable** annotation. If you have multiple variables in your path, you can include them using the **@PathVariable** annotation with a variable name that matches the path variable name. In this case, the **getWidgetById** method retrieves the widget with the specified ID from the **widgetRepository**, then assigns it to the model's \"widget\" property.\n\nYou might have noted that the **WidgetReporitory.findById** method returns an `Optional`s in Java wrap objects: if the object is persent then you can retrieve it using the **get()** method; if the object is not present then the **Optional** will be equal to **Optional.emtry()**. You can determine if the result has an object by calling the **isPresent()** method. Alternatively, as I did in this case, you could leverage the **orElse()** method, which returns the object if it is present. Otherwise, it returns the widget created inside the **orElse** method. In a production application you would want to return a valid widget or return an error page. For now, we can simply return an emptry widget. Finally, this method returns \"widget\", which tells Spring MVC to render this **Widget** using the \"widget.html\" template, shown in Listing 7.\n\n### Listing 7. widget.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>Widget Details</title>\n    <link href=\"../static/css/bootstrap.min.css\" th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\">\n</head>\n<body>\n    <div class=\"container\">\n        <ol class=\"breadcrumb\">\n            <li><a href=\"#\" th:href=\"${'/widgets'}\">Home</a></li>\n        </ol>\n        <div class=\"row\"><h2>Widget Details</h2></div>\n        <form class=\"form-horizontal\">\n            <div class=\"form-group\">\n                <label class=\"col-sm-2 control-label\">ID:</label>\n                <div class=\"col-sm-10\">\n                    <p class=\"form-control-static\" th:text=\"${widget.id}\">Widget ID</p>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"col-sm-2 control-label\">Name:</label>\n                <div class=\"col-sm-10\">\n                    <p class=\"form-control-static\" th:text=\"${widget.name}\">Widget Name</p>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"col-sm-2 control-label\">Description:</label>\n                <div class=\"col-sm-10\">\n                    <p class=\"form-control-static\" th:text=\"${widget.description}\">Widget Description</p>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <a href=\"#\" class=\"btn btn-default\" th:href=\"${'/widget/edit/' + widget.id}\">Edit</a>\n                </div>\n            </div>\n        </form>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n    <script src=\"../static/js/bootstrap.min.js\" th:src=\"@{/js/bootstrap.min.js}\"></script>\n</body>\n</html>\n```\n\nAside from the Bootstrap markup, this HTML file shows the three widget fields in paragraph elements using the **th:text** Thymeleaf attribute with the **${widget.propertyName}** notation. If you are not familiar with Bootstrap, don't let the form trick you into thinking this a a proper HTML form that accepts fields; it js just a layout paradigm. \n\nThe only other two things I added are:\n- A breadcrumb that allows the user to naviagate back to the homepage (widget list), using an anchor tag with the **th:href** attribute that points to the **/widgets** page\n- A button (disguised as an anchor tag but render as a button using the Bootstrap class **btn btn-default** CSS) with a **th:href** attribute pointing to **${'/widget/edit' + widget.id}**. This notation performs a **String** concatenation of **/widget/edit** with the ID of the widget, resulting in something like **/widget/edit/1**.\n\nAn example of this apge is shown in Figure 5.\n\n![Figure 5. Widget edit page](005.jpg)\n\nIf the user presses the **Edit** button, the **editWidget** method is called:\n```java\n@GetMapping(\"/widget/edit/{id}\")\npublic String editWidget(@PathVariable Long id, Model model) {\n    model.addAttribute(\"widget\", widgetRepository.findById(id).orElse(new Widget()));\n    return \"widgetform\";\n}\n```\n\nThis method maps to the **/widget/edit/{id}** URI, retrieves the widget from the database, sets it an the model's \"widget\" attribute, and tells Spring to render it using the \"widgetform.html\" Thymeleaf, shown in Listing 8.\n\n### Listing 8. widgetform.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Create/Edit Widget</title>\n    <link href=\"../static/css/bootstrap.min.css\" th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\">\n</head>\n<body>\n<h2>Create / Edit Widget</h2>\n<div class=\"container\">\n    <form th:object=\"${widget}\" th:action=\"@{/widget}\" method=\"post\">\n        <input type=\"hidden\" th:field=\"*{id}\" />\n        <div class=\"form-group\">\n            <label>Name</label>\n            <input type=\"text\" th:field=\"*{name}\" class=\"form-control\" placeholder=\"Name\">\n        </div>\n        <div class=\"form-group\">\n            <label>Description</label>\n            <input type=\"text\" th:field=\"*{description}\" class=\"form-control\" placeholder=\"Description\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n    </form>\n</div>\n<script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n<script src=\"../static/js/bootstrap.min.js\" th:src=\"@{/js/bootstrap.min.js}\"></script>\n</body>\n</html>\n```\n\nThe template introduces a proper Thymeleaf form. To build a form with Thymeleaf, you specify the object that the form is operation on, using the **th:object** attribute of the **form**, and then you can access that object's properties using **th:field** attribute in form elements. These field attributes are accessed using the ***{propertyName}** notation, which refers back to the form's object. In this example, we define a hidden text field to hold the ID (we don't want the user changing the primary key in the database) and we aa the name and description fields. At the end of the document we add a submit button, which submits the form to the **th:action**, which points to **@{/widget}**. Notice that we use the **@** symbol to reference and the **$** symbol to reference model objects.\n\nWe are able to leverage the \"widgetform\" for both creating new Widgets adn editing existing Widgets by adding an empty **Widget** object in the **newWidget** method:\n```java\n@GetMapping(\"/widget/new\")\npublic String newWidget(Model model) {\n    model.addAttribute(\"widget\", new Widget());\n    return \"widgetform\";\n}\n```\n\nBecause we pass an empty **Widget** object through the \"widget\" model attribute, the form will not fail if a Widget is not present. This allows us to reuse the same form both for creating and editing widgets.\n\nNow that we have our controller and templates definded, we're ready to run the application. To run a Spring Boot application, execute the following Maven command:\n```bash\nmvn spring-boot:run\n```\n\nYou should see Spring start Tomcat, create an embedded H2 database with the name **testdb** and then show a summary of the URI mappings for your **Widgetontroller**.\n\nTo see your application in action, open a browser to the following URL:\n```\nhttp://localhost:8080/widgets\n```\n\nWhen you are ready to release and run your application in production, you can build your project with then standard **mvn clean install** and then run the resultan executable JAR file:\n```bash\nmvn clean install\njava -jar target/spring5mvc-example-0.0.1-SNAPSHOT.jar\n```\n\n## Conclusion\nSpring MVC is the traditional Spring framework library for building Java web applications. This article introduced you to Spring MVC web developement using Spring Boot, Spring initializr, and the Thymeleaf view rendering engine.","source":"_posts/JavaWorld/Spring Series Part 2, Spring MVC.md","raw":"---\ntitle: Spring Series Part 2, Spring MVC\n\ntag:\n- The Spring Series\n\ncategories:\n- JavaWorld\n\ndate: 2020-04-19 11:00:02\n---\nSpring MVC is the Spring framework's traditional library for building Java Web applications. It is one of the most popular web frameworks for building fully functional Java web applications and RESTful web services. In this tutorial, you'll get an overview of Spring MVC and learn how to build Java Web applications using Spring Boot, Spring Initializr, and Thymeleaf.\n\n## Spring Boot with Spring Initializr\nWe'll fastrack our Spring MVC web application with the help of Spring Boot and Spring Initializr. Given input for the type of application to be built, Spring Initializr uses the most common dependencies and defaults to setup and configure a baisc Spring Boot application. You can also add custom dependencies and Spring Initializr will include and manage them, ensuring version compatibility with both third-party software and Spring. Spring Boot applications run standalone, without requiring you to provide a runtime environment.\n\nIn this case, since we're building a web application, Spring Boot will automatically include and configure Tomcat as part of the app's runtime. We can also customize the app by adding an H2 database driver to our Maven POM file. Spring Boot will then automatically create an embedded database and DataSource instance in the application context. Once the dependencies are set, Spring Boot will provide default configurations fro the application. Of course we can change the configurations if we want to, but thanks to Spring Boot we hava a headstart: a fully configured, working application right out of the box.\n\nonce we've selected and configured our dependencies, we'll pass those selections to Spring Initializr, which will provide a downloadable ZIP file containing a base Spring Boot project.\n\n## Spring MBC with H2 database engine\nWe'll start by creating a basic Spring MVC web application that persists data to an H2 embedded database.\n\n### Step 1. Setup adn configure the app\nNavigate to Spring Initializr at start.spring.io and select Generate a Maven Project with java and Spring Boot 2.0.X, where X is the latest Spring Boot version (2.0.3 at time of this writing). Make sure you select Spring Boot 2.x so that you can implement Spring Web MVC 5. Spring Boot 1.4 and Spring Boot 1.5 will implement Spring 4.\n\nEnter a group name the format matching your web address, such as com.geekcap.javaworld, and enter an artifact name, such as spring5mvc-example. Figure 1 shows you my configuration.\n\n![Figure 1. Configure for Spring Initializr](001.jpg)\n\nTo add dependencies to the web app, you may either enter a comma-separated list of dependencies into the **Search for dependencies** text field or click on **Switch to the full version**. We'll take the easier route by clicking on **Switch to the full version**. The dependencies are divided into groups, such as Core, Web, and Template Engines. For this example, select the checkboxes for: **Web --> Web, Template Engines --> Thymeleaf, SQL --> JPA, and SQL --> H2**. Here's what each of those selections will add to the application:\n- Web: Spring MVC and Tomcat\n- Thymeleaf: Thymeleaf web template engine\n- JPA: Spring JPA, Hibernate, and Spring Data\n- H2: The H2 embedded database\n\nWhen you're finished, click the Generate Project button at the bottom of page. Spring Initializr will create a readymade ZIP file with all the required project sources, which you can download.\n\n### Step 2. Import the Spring Initializr project to Your IDE\nExtract the ZIP file from Spring Initializr, then import the project into your favorite IDE. For example, to import the project into IntelliJ, choose **File --> New Project**, as shown in Figure 2.\n\n![Figure 2. Importing the project into IntelliJ](002.jpg)\n\n### Step 3. Setup your Maven POM\nNext, navigate to **Import project from external module**, choose **Maven**, and press **Next**. Be sure to choose a Java 1.8 project SDK, then hit **Finish**.\n\n## The Spring Boot starter app\nnow let's take a look at the Spring Boot starter application that has been generated by our (minimal) efforts so far.\n\nTo start, Listing 1 shows the Maven POM file.\n\n### Listing 1. Maven pom.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.geekcap.javaworld</groupId>\n\t<artifactId>spring5mvc-example</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\t<name>spring5mvc-example</name>\n\t<description>Demo project for Spring Boot</description>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.0.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.h2database</groupId>\n\t\t\t<artifactId>h2</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>\n```\n\nNotice that the POM file uses a special parent POM: spring-boot-starter-parent. We'll use the parent POM to manage the versions of all our dependencies and ensure versions are compatible. The repositories at the end of the POM file reference teh Spring **snapshot** and **milestone** repositories. We need these because Spring Boot 2.x is still a milestone release at the time of this writing.\n\nThe dependencies are quite minimal, and most are prefaced with spring-boot-starter:\n- spring-boot-starter-data-jpa\n- spring-boot-starter-thymeleaf\n- spring-boot-starter-web\n- spring-boot-starter-test\n\nEach of these starter dependencies brings in all of the sub-dependencies it needs. Figure 3 shows the partially expanded dependency view in IntelliJ.\n\n![Figure 3. Spring starter project dependencies](003.jpg)\n\nThe POM file includes the following dependencies:\n- spring-boot-starter-data-jpa includes Hibernate and Spring Data\n- spring-boot-starter-thymeleaf includes the Thymeleaf template engine\n- spring-boot-starter-web includes spring-boot-starter-tomcat, an embedded version of Apache Tomcat\n- spring-boot-starter-json includes the Jackson JSON libraries\n- spring-web and spring-webmvc includes Spring MVC\n- spring-boot-starter-test includes testing libraries such as JUnit and Mockito\n\nWhen Spring Boot sees these dependencies in the CLASSPATH, it initiates automatic configuration. For example, when it find spring-boot-starter-web, it creates an embedded version of Tomcat, and when if finds H2 and spring-boot-starter-jpa it creates an H2 embedded database and a Hibernate EntityManager. It then wires the EntityManager into Spring Data.\n\nSpring Boot also creates a single class that can be used to run the application. The class for the example application is shown in Listing 2.\n\n### Listing 2. SpringExampleApplication\n```java\n@SpringBootApplication\npublic class Spring5mvcExampleApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(Spring5mvcExampleApplication.class, args);\n    }\n}\n```\n\nThe class leverages the `SpringApplication.run()` method, passing in the class to run (Spring5mvcExampleApplication in this exmaple). The @SpringBootApplication annotation includes the following annotations:\n- @Configuration informs Spring that the Spring2mvcExample class contains configuration information. (This annotation can be used to create beans that will get registered with the Spring context.)\n- @EnableAutoConfiguration tells Spring to automatically configure resources from dependencies found in the CLASSPATH, such as H2 and Tomcat\n- ComponentScan tells Spring to can packages in the CLASSPATH under the current package (com.geekcap.javaworld.spring5mvcexample) for Spring annotated components such as @Service and @Controller\n\nSpring scans the CLASSPATH and automatically creates components such as the embeded Tomcat server and H2 database. It then populates the Spring context with the application components found in the package scan. In essence, Spring Boot makes it very easy to select and configure the services, components, controllers, entities, and so forth that you need for your application. Once you've done that, Spring will automatically find them, make them available in the Spring context, and autowire everthing together.\n\nWe've got our Spring Boot starter project setup and ready to go. In the next section we'll create the Spring MVC components for our Java Web application.\n\n> What is the Spring context?\n> The Spring context is a registry of all available Spring beans. Classes are identified as Spring beans by annotating them with specific Spring annotations. Examples include @Service, which identifies a business service, @Controller, which identifies a Spring MVC controller (i.e., handles web requests), and @Entity, which is a JPA annotation used to identify classes that are mapped to database tables.\n\n> Once these beans are annotated they need to be registered with the Spring context, which Spring Boot does by performing a package scan of all classes in packages in your project. As the Spring context is being built, it implements the **inversion-of-control (IoC) design pattern** through dependency injection: when a Spring bean needs a dependency, such as a service or repository, the bean can either define a constructor that accepts the dependent bean or it can leverage the @Autowired annotation to tell Spring that it needs that dependency. Spring resolves all dependencies and \"autowires\" the application together.\n\n> Dependency Injection is a powerful design pattern because, rather than creating and managing dependencies inside your code -- which can be messy and leads to tightly coupled classes -- you can instead delegate control to the Spring container. Your class simply tells the container what dependencies it needs to run and the container provides the appropriate dependencies to your class at runtime.\n\n## About Spring MVC 5\nSpring MVC implements the poluar Model-View-Controller pattern, which you've probably seen in other web framework. The Model-View-Controller pattern separates concerns into the categories:\n- Model represents your domain object\n- View renders your model tp a view, such as to an HTML page\n- Controller sits between your view and model and translates change requests in the view into changes in the model, and vice versa. In practical terms, the controller accepts incoming requests, potentially updates the model, and send your model objects to a \"view\" to render back to the client\n\nIn Spring MVC, controllers are identified by the @Controller annotation and accompanied by a @Requestmapping annotation. The annotation defines the HTTP verb (standard HTTP commands like GET, POST, PUT, and DELELE) and URI for which the request-mapping method will be applied. Spring 4 introduced shortcut request mappings, which make things even easier. We'll use these mappings -- @GetMapping, @PostMapping, @PutMapping, @PatchMapping, and @DeleteMapping -- for our example appliation.\n\n## The model in Spring MVC\nFor our application, we'll define a simple model object, a Widget, store it in an embeded H2 database, and build a controller to menage widgets. Let's start with the Widget class, which is shown in Listing 3.\n\n### Listing 3. Widget\n```java\n@Entity\npublic class Widget {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private String name;\n    private String description;\n    public Widget() {\n    }\n    public Widget(Long id, String name, String description) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n    }\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getDescription() {\n        return description;\n    }\n    public void setDescription(String description) {\n        this.description = description;\n    }\n} \n```\n\nThe widget class in a plain old Java object (POJO) that is annotated with JPA (Java Persistence API) annotations. In this case there are three annotations:\n- **@Entity** identifies Widget as an entity that can be persisted to a database\n- **@Id** identifies the **id** field as the primary key of the entity\n- **@GeneratedValue** tells the JPA **EntityManager** that the key should be automatically generated in the database\n\nNote that **EntityManager** is created automatically for us because we included JPA in the Spring Initializr.\n\nThe **Widget** class manages three fields:\n- **id** is the ID, or primary key of the widget\n- **name** is the name of the widget\n- **description** is a description of the widget\n\nTo persist widgets to and from our embedded (内嵌) database, we need to leverage (施加影响) Spring Data. Basically, we'll define an interface that extends one of Spring Data's interfaces, such as **CrudRepository**, and Spring Data will provide an implementation of that interface as runtime.\n\nThe **CrudRepository** interface includes the following methods:\n- **findById** finds the entity in the database with the specified ID\n- **findAll** returns all entities of the repository type from the database (note that there are other Spring Data repository interfaces, such as **PagingAndSortingRepository**, that can help manage larger data sets)\n- **findAllById** passed a collection of IDs, this method returns all entities for those IDs\n- **save** persists an entity to the database (create or update)\n- **saveAll** saves a collection of entities to the database\n- **delete** deletes the specifies entity\n- **deleteById** deletes the entity with the specified ID\n- **deleteAll** delete all entities managed by the repository\n- **count** returns the number of entities that are in the database\n- **existsById** returns true if an entity with the specified ID exists in the database\n\nFor our example, we'll create a **WidgetRepository** interface that extends **CrudRepository**, as shown in Listing 4.\n\n### Listing 4. WidgetRepository\n```java\npublic interface WidgetRepository extends CrudRepository<Widget, Long> {\n}   \n```\n\nThe **WidgetRepository** allows us to perform all create, read, upadte, and delete (CRUD) operations on widgets. The two parameters passed to the **CrudRepository** are **Widget**, which represents the type of entity that the repository manages, and **Long**, which is the type of the primary key for the **Widget** entity. (This is a simple implementation) that scratches the surface of what you can do with Spring Data. I encourage you to learn more about this useful Spring project.)\n\n## The Controller in Spring MVC\nWith our **Widget** entity and **WidgetRepository** in hand, we're ready to build a controller. Listing 5 shows the source code for the **WidgetController**.\n\n### Listing 5. WidgetController\n```java\n@Controller\npublic class WidgetController {\n    @Autowired\n    private WidgetRepository widgetRepository;\n    /**\n     * Load the new widget page.\n     * @param model\n     * @return\n     */\n    @GetMapping(\"/widget/new\")\n    public String newWidget(Model model) {\n        model.addAttribute(\"widget\", new Widget());\n        return \"widgetform\";\n    }\n    /**\n     * Create a new widget.\n     * @param widget\n     * @param model\n     * @return\n     */\n    @PostMapping(\"/widget\")\n    public String createWidget(Widget widget, Model model) {\n        widgetRepository.save(widget);\n        return \"redirect:/widget/\" + widget.getId();\n    }\n    /**\n     * Get a widget by ID.\n     * @param id\n     * @param model\n     * @return\n     */\n    @GetMapping(\"/widget/{id}\")\n    public String getWidgetById(@PathVariable Long id, Model model) {\n        model.addAttribute(\"widget\", widgetRepository.findById(id).orElse(new Widget()));\n        return \"widget\";\n    }\n    /**\n     * Get all widgets.\n     * @param model\n     * @return\n     */\n    @GetMapping(\"/widgets\")\n    public String getWidgets(Model model) {\n        model.addAttribute(\"widgets\", widgetRepository.findAll());\n        return \"widgets\";\n    }\n    /**\n     * Load the edit widget page for the widget with the specified ID.\n     * @param id\n     * @param model\n     * @return\n     */\n    @GetMapping(\"/widget/edit/{id}\")\n    public String editWidget(@PathVariable Long id, Model model) {\n        model.addAttribute(\"widget\", widgetRepository.findById(id).orElse(new Widget()));\n        return \"widgetform\";\n    }\n    /**\n     * Update a widget.\n     * @param widget\n     * @return\n     */\n    @PostMapping(\"/widget/{id}\")\n    public String updateWidget(Widget widget) {\n        widgetRepository.save(widget);\n        return \"redirect:/widget/\" + widget.getId();\n    }\n    /**\n     * Delete a widget by ID.\n     * @param id\n     * @return\n     */\n    @GetMapping(\"/widget/delete/{id}\")\n    public String deleteWidget(@PathVariable  Long id) {\n        widgetRepository.deleteById(id);\n        return \"redirect:/widgets\";\n    }\n}\n```\n\nThe **WidgetController** is annotated with the **@Controller** annotation. When Spring performs a package can of the classes, it will find the **@Controller** annotation, create an instance of this class, and add it to the Spring context, configured to handle web requests. This **WidgetController** defines a **WidgetRepository** implementation created by Spring Data and automatically wire the repository into the controller.\n\nThe **WidgetController** then difines a set of methods to handle requests, using the **@GetMapping** and **PostMapping** annotations. These annotations accept the URI path that each method is handling, defining the HTTP verb accordingly. Because we are using the Thymeleaf engine, each method returns a String naming the template to render. Templates are stored in **src/main/resources/templates** as HTML files with specific Thymeleaf markup, which is shown below.\n\nThe method that return a direct template name are all passed a **Model** object. The **Model** object implements a Spring UI interface and provides methods to add attributes to the model. These attributes will be made available to the template to be rendered. For example, in the **getWidgetById** method, we retrieve a **Widget** from the database and set it in the **Model** with the key **widget**. The template can then access that **Widget** using the **widget** key.\n\n## Controller methods and the view template\nNext let's walk through each **WidgetController** method and its corresponding view template. The homepage for the application is the **/widgets** page, which shows a list of all widgets in the database. The **getWidgets** method retrieves all widgets by calling the **WidgetRepository**'s **findAll** method, sets it as  the **widgets** attribute in the model, and returns **widgets**. Listing 6 shows the **widgets.html** tempalte file.\n\n### Listing 6. widgets.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>Widgets</title>\n    <link href=\"../static/css/bootstrap.min.css\" th:href=\"@{css/bootstrap.min.css}\" rel=\"stylesheet\">\n</head>\n<body>\n    <div class=\"container\">\n        <table class=\"table\">\n            <h2>Widgets</h2>\n            <tr>\n                <th>ID</th>\n                <th>Name</th>\n                <th>Description</th>\n                <th>View</th>\n                <th>Edit</th>\n                <th>Delete</th>\n            </tr>\n            <tr th:each=\"widget : ${widgets}\">\n                <td th:text=\"${widget.id}\">Widget ID</td>\n                <td th:text=\"${widget.name}\">Widget Name</td>\n                <td th:text=\"${widget.description}\">Widget Description</td>\n                <td><a class=\"btn btn-default\" href=\"#\" th:href=\"${'/widget/' + widget.id}\">View</a> </td>\n                <td><a class=\"btn btn-default\" href=\"#\" th:href=\"${'/widget/edit/' + widget.id}\">Edit</a> </td>\n                <td><a class=\"btn btn-default\" href=\"#\" th:href=\"${'/widget/delete/' + widget.id}\">Delete</a> </td>\n            </tr>\n        </table>\n        <a th:href=\"${'/widget/new'}\" class=\"btn btn-default\">New</a>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n    <script src=\"../static/js/bootstrap.min.js\" th:src=\"@{js/bootstrap.min.js}\"></script>\n</body>\n</html>\n```\n\nThymeleaf templates are HTML files that import the **http://www.thymeleaf.org** XML namespace, as seen in the **html** tag. With this namespace include (as **th**), Thymeleaf allows us to add tags to existing HTML elements. This enables you to create and style your HTML files without running your application in Tomcat.\n\nFor this example, we've added the Twitter Bootstrap library, which makes it eaiser to create a nice layout. Rather than constantly restarting Tomcat to view pages, this lets us build the page using an editor, then render the page in a browser. In order to work with your JavaScript and CSS lacally you also need to include the JavaScript **href** and script source **src** values that point to your relative CSS and JavaScript files, respectively. The **th:href** and **th:src** attributes will be resolved to actual URI paths by Thymeleaf in a live application, and will overwrite the **href** and **src** attribute values when the page is rendered.\n\nThe HTML file in Listing 6 contains a table that shows a summary of each widget, with buttons to view the details of a widget, edit a widget, or delete a widget. We use the model to pass in a collection of widgets, and we access those by adding the **th:each** attribute of the **tr** (table row) tag, where **th:each** is Thymeleaf's implementation of a **for-each** contruct. This will create one row for each item in our collection. The **th:each** attribute is passed the value **widget : ${widgets}**. This retrieves the \"widgets\" collection from the model and assigns each widget to a local variable, \"widget\", that will be used inside the row. We can then extract values from the widget using the **${widget.propertyName}** syntax.\n\nFor the first three rows, we include the **th:text** attribute in each table cell (**td**), extracting fields from the widget. For the last three rows, we add hyperlink to our other controller URIs:\n- **/widget/{id}** shows the widget with the specified ID\n- **/widget/edit/{id}** shows the widget with the specified ID in an editable form\n- **/widget/delete/{id}** deletes the widget with the specified ID, then shows the updated list of widgets\n\nThe bottom of the page adds a **New** button that allows the user to create a new widget. Widgets are created through the **/widget/new** URL and presented in the same form as the **/widget/edit/{id}** URI.\n\nFigure 4 shows a screenshot of the widget list page.\n\n![Figure 4. Widget list page](004.jpg)\n\nWhen the user presses the **View** button, the **getWidgetById** method is called:\n```java\n@GetMapping(\"/widget/{id}\")\npublic String getWidgetById(@PathVariable Long id, Model model) {\n    model.addAttribute(\"widget\", widgetRepository.findById(id).orElse(new Widget()));\n    return \"widget\";\n}\n```\n\nThe method is mapped to a GET request for **/widget/{id}** and the **id** is extracted using the **@PathVariable** annotation. If you have multiple variables in your path, you can include them using the **@PathVariable** annotation with a variable name that matches the path variable name. In this case, the **getWidgetById** method retrieves the widget with the specified ID from the **widgetRepository**, then assigns it to the model's \"widget\" property.\n\nYou might have noted that the **WidgetReporitory.findById** method returns an `Optional`s in Java wrap objects: if the object is persent then you can retrieve it using the **get()** method; if the object is not present then the **Optional** will be equal to **Optional.emtry()**. You can determine if the result has an object by calling the **isPresent()** method. Alternatively, as I did in this case, you could leverage the **orElse()** method, which returns the object if it is present. Otherwise, it returns the widget created inside the **orElse** method. In a production application you would want to return a valid widget or return an error page. For now, we can simply return an emptry widget. Finally, this method returns \"widget\", which tells Spring MVC to render this **Widget** using the \"widget.html\" template, shown in Listing 7.\n\n### Listing 7. widget.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>Widget Details</title>\n    <link href=\"../static/css/bootstrap.min.css\" th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\">\n</head>\n<body>\n    <div class=\"container\">\n        <ol class=\"breadcrumb\">\n            <li><a href=\"#\" th:href=\"${'/widgets'}\">Home</a></li>\n        </ol>\n        <div class=\"row\"><h2>Widget Details</h2></div>\n        <form class=\"form-horizontal\">\n            <div class=\"form-group\">\n                <label class=\"col-sm-2 control-label\">ID:</label>\n                <div class=\"col-sm-10\">\n                    <p class=\"form-control-static\" th:text=\"${widget.id}\">Widget ID</p>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"col-sm-2 control-label\">Name:</label>\n                <div class=\"col-sm-10\">\n                    <p class=\"form-control-static\" th:text=\"${widget.name}\">Widget Name</p>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"col-sm-2 control-label\">Description:</label>\n                <div class=\"col-sm-10\">\n                    <p class=\"form-control-static\" th:text=\"${widget.description}\">Widget Description</p>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <a href=\"#\" class=\"btn btn-default\" th:href=\"${'/widget/edit/' + widget.id}\">Edit</a>\n                </div>\n            </div>\n        </form>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n    <script src=\"../static/js/bootstrap.min.js\" th:src=\"@{/js/bootstrap.min.js}\"></script>\n</body>\n</html>\n```\n\nAside from the Bootstrap markup, this HTML file shows the three widget fields in paragraph elements using the **th:text** Thymeleaf attribute with the **${widget.propertyName}** notation. If you are not familiar with Bootstrap, don't let the form trick you into thinking this a a proper HTML form that accepts fields; it js just a layout paradigm. \n\nThe only other two things I added are:\n- A breadcrumb that allows the user to naviagate back to the homepage (widget list), using an anchor tag with the **th:href** attribute that points to the **/widgets** page\n- A button (disguised as an anchor tag but render as a button using the Bootstrap class **btn btn-default** CSS) with a **th:href** attribute pointing to **${'/widget/edit' + widget.id}**. This notation performs a **String** concatenation of **/widget/edit** with the ID of the widget, resulting in something like **/widget/edit/1**.\n\nAn example of this apge is shown in Figure 5.\n\n![Figure 5. Widget edit page](005.jpg)\n\nIf the user presses the **Edit** button, the **editWidget** method is called:\n```java\n@GetMapping(\"/widget/edit/{id}\")\npublic String editWidget(@PathVariable Long id, Model model) {\n    model.addAttribute(\"widget\", widgetRepository.findById(id).orElse(new Widget()));\n    return \"widgetform\";\n}\n```\n\nThis method maps to the **/widget/edit/{id}** URI, retrieves the widget from the database, sets it an the model's \"widget\" attribute, and tells Spring to render it using the \"widgetform.html\" Thymeleaf, shown in Listing 8.\n\n### Listing 8. widgetform.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Create/Edit Widget</title>\n    <link href=\"../static/css/bootstrap.min.css\" th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\">\n</head>\n<body>\n<h2>Create / Edit Widget</h2>\n<div class=\"container\">\n    <form th:object=\"${widget}\" th:action=\"@{/widget}\" method=\"post\">\n        <input type=\"hidden\" th:field=\"*{id}\" />\n        <div class=\"form-group\">\n            <label>Name</label>\n            <input type=\"text\" th:field=\"*{name}\" class=\"form-control\" placeholder=\"Name\">\n        </div>\n        <div class=\"form-group\">\n            <label>Description</label>\n            <input type=\"text\" th:field=\"*{description}\" class=\"form-control\" placeholder=\"Description\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n    </form>\n</div>\n<script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n<script src=\"../static/js/bootstrap.min.js\" th:src=\"@{/js/bootstrap.min.js}\"></script>\n</body>\n</html>\n```\n\nThe template introduces a proper Thymeleaf form. To build a form with Thymeleaf, you specify the object that the form is operation on, using the **th:object** attribute of the **form**, and then you can access that object's properties using **th:field** attribute in form elements. These field attributes are accessed using the ***{propertyName}** notation, which refers back to the form's object. In this example, we define a hidden text field to hold the ID (we don't want the user changing the primary key in the database) and we aa the name and description fields. At the end of the document we add a submit button, which submits the form to the **th:action**, which points to **@{/widget}**. Notice that we use the **@** symbol to reference and the **$** symbol to reference model objects.\n\nWe are able to leverage the \"widgetform\" for both creating new Widgets adn editing existing Widgets by adding an empty **Widget** object in the **newWidget** method:\n```java\n@GetMapping(\"/widget/new\")\npublic String newWidget(Model model) {\n    model.addAttribute(\"widget\", new Widget());\n    return \"widgetform\";\n}\n```\n\nBecause we pass an empty **Widget** object through the \"widget\" model attribute, the form will not fail if a Widget is not present. This allows us to reuse the same form both for creating and editing widgets.\n\nNow that we have our controller and templates definded, we're ready to run the application. To run a Spring Boot application, execute the following Maven command:\n```bash\nmvn spring-boot:run\n```\n\nYou should see Spring start Tomcat, create an embedded H2 database with the name **testdb** and then show a summary of the URI mappings for your **Widgetontroller**.\n\nTo see your application in action, open a browser to the following URL:\n```\nhttp://localhost:8080/widgets\n```\n\nWhen you are ready to release and run your application in production, you can build your project with then standard **mvn clean install** and then run the resultan executable JAR file:\n```bash\nmvn clean install\njava -jar target/spring5mvc-example-0.0.1-SNAPSHOT.jar\n```\n\n## Conclusion\nSpring MVC is the traditional Spring framework library for building Java web applications. This article introduced you to Spring MVC web developement using Spring Boot, Spring initializr, and the Thymeleaf view rendering engine.","slug":"JavaWorld/Spring Series Part 2, Spring MVC","published":1,"updated":"2020-05-01T07:42:35.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3md800cxm33p0zygjkm8","content":"<p>Spring MVC is the Spring framework’s traditional library for building Java Web applications. It is one of the most popular web frameworks for building fully functional Java web applications and RESTful web services. In this tutorial, you’ll get an overview of Spring MVC and learn how to build Java Web applications using Spring Boot, Spring Initializr, and Thymeleaf.</p>\n<h2 id=\"Spring-Boot-with-Spring-Initializr\"><a href=\"#Spring-Boot-with-Spring-Initializr\" class=\"headerlink\" title=\"Spring Boot with Spring Initializr\"></a>Spring Boot with Spring Initializr</h2><p>We’ll fastrack our Spring MVC web application with the help of Spring Boot and Spring Initializr. Given input for the type of application to be built, Spring Initializr uses the most common dependencies and defaults to setup and configure a baisc Spring Boot application. You can also add custom dependencies and Spring Initializr will include and manage them, ensuring version compatibility with both third-party software and Spring. Spring Boot applications run standalone, without requiring you to provide a runtime environment.</p>\n<p>In this case, since we’re building a web application, Spring Boot will automatically include and configure Tomcat as part of the app’s runtime. We can also customize the app by adding an H2 database driver to our Maven POM file. Spring Boot will then automatically create an embedded database and DataSource instance in the application context. Once the dependencies are set, Spring Boot will provide default configurations fro the application. Of course we can change the configurations if we want to, but thanks to Spring Boot we hava a headstart: a fully configured, working application right out of the box.</p>\n<p>once we’ve selected and configured our dependencies, we’ll pass those selections to Spring Initializr, which will provide a downloadable ZIP file containing a base Spring Boot project.</p>\n<h2 id=\"Spring-MBC-with-H2-database-engine\"><a href=\"#Spring-MBC-with-H2-database-engine\" class=\"headerlink\" title=\"Spring MBC with H2 database engine\"></a>Spring MBC with H2 database engine</h2><p>We’ll start by creating a basic Spring MVC web application that persists data to an H2 embedded database.</p>\n<h3 id=\"Step-1-Setup-adn-configure-the-app\"><a href=\"#Step-1-Setup-adn-configure-the-app\" class=\"headerlink\" title=\"Step 1. Setup adn configure the app\"></a>Step 1. Setup adn configure the app</h3><p>Navigate to Spring Initializr at start.spring.io and select Generate a Maven Project with java and Spring Boot 2.0.X, where X is the latest Spring Boot version (2.0.3 at time of this writing). Make sure you select Spring Boot 2.x so that you can implement Spring Web MVC 5. Spring Boot 1.4 and Spring Boot 1.5 will implement Spring 4.</p>\n<p>Enter a group name the format matching your web address, such as com.geekcap.javaworld, and enter an artifact name, such as spring5mvc-example. Figure 1 shows you my configuration.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. Configure for Spring Initializr\"></p>\n<p>To add dependencies to the web app, you may either enter a comma-separated list of dependencies into the <strong>Search for dependencies</strong> text field or click on <strong>Switch to the full version</strong>. We’ll take the easier route by clicking on <strong>Switch to the full version</strong>. The dependencies are divided into groups, such as Core, Web, and Template Engines. For this example, select the checkboxes for: <strong>Web —&gt; Web, Template Engines —&gt; Thymeleaf, SQL —&gt; JPA, and SQL —&gt; H2</strong>. Here’s what each of those selections will add to the application:</p>\n<ul>\n<li>Web: Spring MVC and Tomcat</li>\n<li>Thymeleaf: Thymeleaf web template engine</li>\n<li>JPA: Spring JPA, Hibernate, and Spring Data</li>\n<li>H2: The H2 embedded database</li>\n</ul>\n<p>When you’re finished, click the Generate Project button at the bottom of page. Spring Initializr will create a readymade ZIP file with all the required project sources, which you can download.</p>\n<h3 id=\"Step-2-Import-the-Spring-Initializr-project-to-Your-IDE\"><a href=\"#Step-2-Import-the-Spring-Initializr-project-to-Your-IDE\" class=\"headerlink\" title=\"Step 2. Import the Spring Initializr project to Your IDE\"></a>Step 2. Import the Spring Initializr project to Your IDE</h3><p>Extract the ZIP file from Spring Initializr, then import the project into your favorite IDE. For example, to import the project into IntelliJ, choose <strong>File —&gt; New Project</strong>, as shown in Figure 2.</p>\n<p><img src=\"002.jpg\" alt=\"Figure 2. Importing the project into IntelliJ\"></p>\n<h3 id=\"Step-3-Setup-your-Maven-POM\"><a href=\"#Step-3-Setup-your-Maven-POM\" class=\"headerlink\" title=\"Step 3. Setup your Maven POM\"></a>Step 3. Setup your Maven POM</h3><p>Next, navigate to <strong>Import project from external module</strong>, choose <strong>Maven</strong>, and press <strong>Next</strong>. Be sure to choose a Java 1.8 project SDK, then hit <strong>Finish</strong>.</p>\n<h2 id=\"The-Spring-Boot-starter-app\"><a href=\"#The-Spring-Boot-starter-app\" class=\"headerlink\" title=\"The Spring Boot starter app\"></a>The Spring Boot starter app</h2><p>now let’s take a look at the Spring Boot starter application that has been generated by our (minimal) efforts so far.</p>\n<p>To start, Listing 1 shows the Maven POM file.</p>\n<h3 id=\"Listing-1-Maven-pom-xml\"><a href=\"#Listing-1-Maven-pom-xml\" class=\"headerlink\" title=\"Listing 1. Maven pom.xml\"></a>Listing 1. Maven pom.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.geekcap.javaworld<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring5mvc-example<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring5mvc-example<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Notice that the POM file uses a special parent POM: spring-boot-starter-parent. We’ll use the parent POM to manage the versions of all our dependencies and ensure versions are compatible. The repositories at the end of the POM file reference teh Spring <strong>snapshot</strong> and <strong>milestone</strong> repositories. We need these because Spring Boot 2.x is still a milestone release at the time of this writing.</p>\n<p>The dependencies are quite minimal, and most are prefaced with spring-boot-starter:</p>\n<ul>\n<li>spring-boot-starter-data-jpa</li>\n<li>spring-boot-starter-thymeleaf</li>\n<li>spring-boot-starter-web</li>\n<li>spring-boot-starter-test</li>\n</ul>\n<p>Each of these starter dependencies brings in all of the sub-dependencies it needs. Figure 3 shows the partially expanded dependency view in IntelliJ.</p>\n<p><img src=\"003.jpg\" alt=\"Figure 3. Spring starter project dependencies\"></p>\n<p>The POM file includes the following dependencies:</p>\n<ul>\n<li>spring-boot-starter-data-jpa includes Hibernate and Spring Data</li>\n<li>spring-boot-starter-thymeleaf includes the Thymeleaf template engine</li>\n<li>spring-boot-starter-web includes spring-boot-starter-tomcat, an embedded version of Apache Tomcat</li>\n<li>spring-boot-starter-json includes the Jackson JSON libraries</li>\n<li>spring-web and spring-webmvc includes Spring MVC</li>\n<li>spring-boot-starter-test includes testing libraries such as JUnit and Mockito</li>\n</ul>\n<p>When Spring Boot sees these dependencies in the CLASSPATH, it initiates automatic configuration. For example, when it find spring-boot-starter-web, it creates an embedded version of Tomcat, and when if finds H2 and spring-boot-starter-jpa it creates an H2 embedded database and a Hibernate EntityManager. It then wires the EntityManager into Spring Data.</p>\n<p>Spring Boot also creates a single class that can be used to run the application. The class for the example application is shown in Listing 2.</p>\n<h3 id=\"Listing-2-SpringExampleApplication\"><a href=\"#Listing-2-SpringExampleApplication\" class=\"headerlink\" title=\"Listing 2. SpringExampleApplication\"></a>Listing 2. SpringExampleApplication</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Spring5mvcExampleApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Spring5mvcExampleApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The class leverages the <code>SpringApplication.run()</code> method, passing in the class to run (Spring5mvcExampleApplication in this exmaple). The @SpringBootApplication annotation includes the following annotations:</p>\n<ul>\n<li>@Configuration informs Spring that the Spring2mvcExample class contains configuration information. (This annotation can be used to create beans that will get registered with the Spring context.)</li>\n<li>@EnableAutoConfiguration tells Spring to automatically configure resources from dependencies found in the CLASSPATH, such as H2 and Tomcat</li>\n<li>ComponentScan tells Spring to can packages in the CLASSPATH under the current package (com.geekcap.javaworld.spring5mvcexample) for Spring annotated components such as @Service and @Controller</li>\n</ul>\n<p>Spring scans the CLASSPATH and automatically creates components such as the embeded Tomcat server and H2 database. It then populates the Spring context with the application components found in the package scan. In essence, Spring Boot makes it very easy to select and configure the services, components, controllers, entities, and so forth that you need for your application. Once you’ve done that, Spring will automatically find them, make them available in the Spring context, and autowire everthing together.</p>\n<p>We’ve got our Spring Boot starter project setup and ready to go. In the next section we’ll create the Spring MVC components for our Java Web application.</p>\n<blockquote>\n<p>What is the Spring context?<br>The Spring context is a registry of all available Spring beans. Classes are identified as Spring beans by annotating them with specific Spring annotations. Examples include @Service, which identifies a business service, @Controller, which identifies a Spring MVC controller (i.e., handles web requests), and @Entity, which is a JPA annotation used to identify classes that are mapped to database tables.</p>\n<p>Once these beans are annotated they need to be registered with the Spring context, which Spring Boot does by performing a package scan of all classes in packages in your project. As the Spring context is being built, it implements the <strong>inversion-of-control (IoC) design pattern</strong> through dependency injection: when a Spring bean needs a dependency, such as a service or repository, the bean can either define a constructor that accepts the dependent bean or it can leverage the @Autowired annotation to tell Spring that it needs that dependency. Spring resolves all dependencies and “autowires” the application together.</p>\n<p>Dependency Injection is a powerful design pattern because, rather than creating and managing dependencies inside your code — which can be messy and leads to tightly coupled classes — you can instead delegate control to the Spring container. Your class simply tells the container what dependencies it needs to run and the container provides the appropriate dependencies to your class at runtime.</p>\n</blockquote>\n<h2 id=\"About-Spring-MVC-5\"><a href=\"#About-Spring-MVC-5\" class=\"headerlink\" title=\"About Spring MVC 5\"></a>About Spring MVC 5</h2><p>Spring MVC implements the poluar Model-View-Controller pattern, which you’ve probably seen in other web framework. The Model-View-Controller pattern separates concerns into the categories:</p>\n<ul>\n<li>Model represents your domain object</li>\n<li>View renders your model tp a view, such as to an HTML page</li>\n<li>Controller sits between your view and model and translates change requests in the view into changes in the model, and vice versa. In practical terms, the controller accepts incoming requests, potentially updates the model, and send your model objects to a “view” to render back to the client</li>\n</ul>\n<p>In Spring MVC, controllers are identified by the @Controller annotation and accompanied by a @Requestmapping annotation. The annotation defines the HTTP verb (standard HTTP commands like GET, POST, PUT, and DELELE) and URI for which the request-mapping method will be applied. Spring 4 introduced shortcut request mappings, which make things even easier. We’ll use these mappings — @GetMapping, @PostMapping, @PutMapping, @PatchMapping, and @DeleteMapping — for our example appliation.</p>\n<h2 id=\"The-model-in-Spring-MVC\"><a href=\"#The-model-in-Spring-MVC\" class=\"headerlink\" title=\"The model in Spring MVC\"></a>The model in Spring MVC</h2><p>For our application, we’ll define a simple model object, a Widget, store it in an embeded H2 database, and build a controller to menage widgets. Let’s start with the Widget class, which is shown in Listing 3.</p>\n<h3 id=\"Listing-3-Widget\"><a href=\"#Listing-3-Widget\" class=\"headerlink\" title=\"Listing 3. Widget\"></a>Listing 3. Widget</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Widget</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Widget</span><span class=\"params\">(Long id, String name, String description)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.description = description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Long id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">(String description)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.description = description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The widget class in a plain old Java object (POJO) that is annotated with JPA (Java Persistence API) annotations. In this case there are three annotations:</p>\n<ul>\n<li><strong>@Entity</strong> identifies Widget as an entity that can be persisted to a database</li>\n<li><strong>@Id</strong> identifies the <strong>id</strong> field as the primary key of the entity</li>\n<li><strong>@GeneratedValue</strong> tells the JPA <strong>EntityManager</strong> that the key should be automatically generated in the database</li>\n</ul>\n<p>Note that <strong>EntityManager</strong> is created automatically for us because we included JPA in the Spring Initializr.</p>\n<p>The <strong>Widget</strong> class manages three fields:</p>\n<ul>\n<li><strong>id</strong> is the ID, or primary key of the widget</li>\n<li><strong>name</strong> is the name of the widget</li>\n<li><strong>description</strong> is a description of the widget</li>\n</ul>\n<p>To persist widgets to and from our embedded (内嵌) database, we need to leverage (施加影响) Spring Data. Basically, we’ll define an interface that extends one of Spring Data’s interfaces, such as <strong>CrudRepository</strong>, and Spring Data will provide an implementation of that interface as runtime.</p>\n<p>The <strong>CrudRepository</strong> interface includes the following methods:</p>\n<ul>\n<li><strong>findById</strong> finds the entity in the database with the specified ID</li>\n<li><strong>findAll</strong> returns all entities of the repository type from the database (note that there are other Spring Data repository interfaces, such as <strong>PagingAndSortingRepository</strong>, that can help manage larger data sets)</li>\n<li><strong>findAllById</strong> passed a collection of IDs, this method returns all entities for those IDs</li>\n<li><strong>save</strong> persists an entity to the database (create or update)</li>\n<li><strong>saveAll</strong> saves a collection of entities to the database</li>\n<li><strong>delete</strong> deletes the specifies entity</li>\n<li><strong>deleteById</strong> deletes the entity with the specified ID</li>\n<li><strong>deleteAll</strong> delete all entities managed by the repository</li>\n<li><strong>count</strong> returns the number of entities that are in the database</li>\n<li><strong>existsById</strong> returns true if an entity with the specified ID exists in the database</li>\n</ul>\n<p>For our example, we’ll create a <strong>WidgetRepository</strong> interface that extends <strong>CrudRepository</strong>, as shown in Listing 4.</p>\n<h3 id=\"Listing-4-WidgetRepository\"><a href=\"#Listing-4-WidgetRepository\" class=\"headerlink\" title=\"Listing 4. WidgetRepository\"></a>Listing 4. WidgetRepository</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">WidgetRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">Widget</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The <strong>WidgetRepository</strong> allows us to perform all create, read, upadte, and delete (CRUD) operations on widgets. The two parameters passed to the <strong>CrudRepository</strong> are <strong>Widget</strong>, which represents the type of entity that the repository manages, and <strong>Long</strong>, which is the type of the primary key for the <strong>Widget</strong> entity. (This is a simple implementation) that scratches the surface of what you can do with Spring Data. I encourage you to learn more about this useful Spring project.)</p>\n<h2 id=\"The-Controller-in-Spring-MVC\"><a href=\"#The-Controller-in-Spring-MVC\" class=\"headerlink\" title=\"The Controller in Spring MVC\"></a>The Controller in Spring MVC</h2><p>With our <strong>Widget</strong> entity and <strong>WidgetRepository</strong> in hand, we’re ready to build a controller. Listing 5 shows the source code for the <strong>WidgetController</strong>.</p>\n<h3 id=\"Listing-5-WidgetController\"><a href=\"#Listing-5-WidgetController\" class=\"headerlink\" title=\"Listing 5. WidgetController\"></a>Listing 5. WidgetController</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> WidgetRepository widgetRepository;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Load the new widget page.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/new\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">newWidget</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"widget\"</span>, <span class=\"keyword\">new</span> Widget());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"widgetform\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create a new widget.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> widget</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/widget\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">createWidget</span><span class=\"params\">(Widget widget, Model model)</span> </span>&#123;</span><br><span class=\"line\">        widgetRepository.save(widget);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/widget/\"</span> + widget.getId();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get a widget by ID.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getWidgetById</span><span class=\"params\">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"widget\"</span>, widgetRepository.findById(id).orElse(<span class=\"keyword\">new</span> Widget()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"widget\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get all widgets.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widgets\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getWidgets</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"widgets\"</span>, widgetRepository.findAll());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"widgets\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Load the edit widget page for the widget with the specified ID.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/edit/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editWidget</span><span class=\"params\">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"widget\"</span>, widgetRepository.findById(id).orElse(<span class=\"keyword\">new</span> Widget()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"widgetform\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Update a widget.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> widget</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/widget/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateWidget</span><span class=\"params\">(Widget widget)</span> </span>&#123;</span><br><span class=\"line\">        widgetRepository.save(widget);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/widget/\"</span> + widget.getId();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete a widget by ID.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/delete/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteWidget</span><span class=\"params\">(@PathVariable  Long id)</span> </span>&#123;</span><br><span class=\"line\">        widgetRepository.deleteById(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/widgets\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The <strong>WidgetController</strong> is annotated with the <strong>@Controller</strong> annotation. When Spring performs a package can of the classes, it will find the <strong>@Controller</strong> annotation, create an instance of this class, and add it to the Spring context, configured to handle web requests. This <strong>WidgetController</strong> defines a <strong>WidgetRepository</strong> implementation created by Spring Data and automatically wire the repository into the controller.</p>\n<p>The <strong>WidgetController</strong> then difines a set of methods to handle requests, using the <strong>@GetMapping</strong> and <strong>PostMapping</strong> annotations. These annotations accept the URI path that each method is handling, defining the HTTP verb accordingly. Because we are using the Thymeleaf engine, each method returns a String naming the template to render. Templates are stored in <strong>src/main/resources/templates</strong> as HTML files with specific Thymeleaf markup, which is shown below.</p>\n<p>The method that return a direct template name are all passed a <strong>Model</strong> object. The <strong>Model</strong> object implements a Spring UI interface and provides methods to add attributes to the model. These attributes will be made available to the template to be rendered. For example, in the <strong>getWidgetById</strong> method, we retrieve a <strong>Widget</strong> from the database and set it in the <strong>Model</strong> with the key <strong>widget</strong>. The template can then access that <strong>Widget</strong> using the <strong>widget</strong> key.</p>\n<h2 id=\"Controller-methods-and-the-view-template\"><a href=\"#Controller-methods-and-the-view-template\" class=\"headerlink\" title=\"Controller methods and the view template\"></a>Controller methods and the view template</h2><p>Next let’s walk through each <strong>WidgetController</strong> method and its corresponding view template. The homepage for the application is the <strong>/widgets</strong> page, which shows a list of all widgets in the database. The <strong>getWidgets</strong> method retrieves all widgets by calling the <strong>WidgetRepository</strong>‘s <strong>findAll</strong> method, sets it as  the <strong>widgets</strong> attribute in the model, and returns <strong>widgets</strong>. Listing 6 shows the <strong>widgets.html</strong> tempalte file.</p>\n<h3 id=\"Listing-6-widgets-html\"><a href=\"#Listing-6-widgets-html\" class=\"headerlink\" title=\"Listing 6. widgets.html\"></a>Listing 6. widgets.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Widgets<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../static/css/bootstrap.min.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;css/bootstrap.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Widgets<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>ID<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>View<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Edit<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"widget : $&#123;widgets&#125;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.id&#125;\"</span>&gt;</span>Widget ID<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.name&#125;\"</span>&gt;</span>Widget Name<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.description&#125;\"</span>&gt;</span>Widget Description<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widget/' + widget.id&#125;\"</span>&gt;</span>View<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widget/edit/' + widget.id&#125;\"</span>&gt;</span>Edit<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widget/delete/' + widget.id&#125;\"</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widget/new'&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>New<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../static/js/bootstrap.min.js\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Thymeleaf templates are HTML files that import the <strong><a href=\"http://www.thymeleaf.org\">http://www.thymeleaf.org</a></strong> XML namespace, as seen in the <strong>html</strong> tag. With this namespace include (as <strong>th</strong>), Thymeleaf allows us to add tags to existing HTML elements. This enables you to create and style your HTML files without running your application in Tomcat.</p>\n<p>For this example, we’ve added the Twitter Bootstrap library, which makes it eaiser to create a nice layout. Rather than constantly restarting Tomcat to view pages, this lets us build the page using an editor, then render the page in a browser. In order to work with your JavaScript and CSS lacally you also need to include the JavaScript <strong>href</strong> and script source <strong>src</strong> values that point to your relative CSS and JavaScript files, respectively. The <strong>th:href</strong> and <strong>th:src</strong> attributes will be resolved to actual URI paths by Thymeleaf in a live application, and will overwrite the <strong>href</strong> and <strong>src</strong> attribute values when the page is rendered.</p>\n<p>The HTML file in Listing 6 contains a table that shows a summary of each widget, with buttons to view the details of a widget, edit a widget, or delete a widget. We use the model to pass in a collection of widgets, and we access those by adding the <strong>th:each</strong> attribute of the <strong>tr</strong> (table row) tag, where <strong>th:each</strong> is Thymeleaf’s implementation of a <strong>for-each</strong> contruct. This will create one row for each item in our collection. The <strong>th:each</strong> attribute is passed the value <strong>widget : ${widgets}</strong>. This retrieves the “widgets” collection from the model and assigns each widget to a local variable, “widget”, that will be used inside the row. We can then extract values from the widget using the <strong>${widget.propertyName}</strong> syntax.</p>\n<p>For the first three rows, we include the <strong>th:text</strong> attribute in each table cell (<strong>td</strong>), extracting fields from the widget. For the last three rows, we add hyperlink to our other controller URIs:</p>\n<ul>\n<li><strong>/widget/{id}</strong> shows the widget with the specified ID</li>\n<li><strong>/widget/edit/{id}</strong> shows the widget with the specified ID in an editable form</li>\n<li><strong>/widget/delete/{id}</strong> deletes the widget with the specified ID, then shows the updated list of widgets</li>\n</ul>\n<p>The bottom of the page adds a <strong>New</strong> button that allows the user to create a new widget. Widgets are created through the <strong>/widget/new</strong> URL and presented in the same form as the <strong>/widget/edit/{id}</strong> URI.</p>\n<p>Figure 4 shows a screenshot of the widget list page.</p>\n<p><img src=\"004.jpg\" alt=\"Figure 4. Widget list page\"></p>\n<p>When the user presses the <strong>View</strong> button, the <strong>getWidgetById</strong> method is called:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getWidgetById</span><span class=\"params\">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"widget\"</span>, widgetRepository.findById(id).orElse(<span class=\"keyword\">new</span> Widget()));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"widget\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The method is mapped to a GET request for <strong>/widget/{id}</strong> and the <strong>id</strong> is extracted using the <strong>@PathVariable</strong> annotation. If you have multiple variables in your path, you can include them using the <strong>@PathVariable</strong> annotation with a variable name that matches the path variable name. In this case, the <strong>getWidgetById</strong> method retrieves the widget with the specified ID from the <strong>widgetRepository</strong>, then assigns it to the model’s “widget” property.</p>\n<p>You might have noted that the <strong>WidgetReporitory.findById</strong> method returns an <code>Optional</code>s in Java wrap objects: if the object is persent then you can retrieve it using the <strong>get()</strong> method; if the object is not present then the <strong>Optional</strong> will be equal to <strong>Optional.emtry()</strong>. You can determine if the result has an object by calling the <strong>isPresent()</strong> method. Alternatively, as I did in this case, you could leverage the <strong>orElse()</strong> method, which returns the object if it is present. Otherwise, it returns the widget created inside the <strong>orElse</strong> method. In a production application you would want to return a valid widget or return an error page. For now, we can simply return an emptry widget. Finally, this method returns “widget”, which tells Spring MVC to render this <strong>Widget</strong> using the “widget.html” template, shown in Listing 7.</p>\n<h3 id=\"Listing-7-widget-html\"><a href=\"#Listing-7-widget-html\" class=\"headerlink\" title=\"Listing 7. widget.html\"></a>Listing 7. widget.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Widget Details<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../static/css/bootstrap.min.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">class</span>=<span class=\"string\">\"breadcrumb\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widgets'&#125;\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Widget Details<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-horizontal\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>ID:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control-static\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.id&#125;\"</span>&gt;</span>Widget ID<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control-static\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.name&#125;\"</span>&gt;</span>Widget Name<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Description:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control-static\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.description&#125;\"</span>&gt;</span>Widget Description<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-offset-2 col-sm-10\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widget/edit/' + widget.id&#125;\"</span>&gt;</span>Edit<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../static/js/bootstrap.min.js\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Aside from the Bootstrap markup, this HTML file shows the three widget fields in paragraph elements using the <strong>th:text</strong> Thymeleaf attribute with the <strong>${widget.propertyName}</strong> notation. If you are not familiar with Bootstrap, don’t let the form trick you into thinking this a a proper HTML form that accepts fields; it js just a layout paradigm. </p>\n<p>The only other two things I added are:</p>\n<ul>\n<li>A breadcrumb that allows the user to naviagate back to the homepage (widget list), using an anchor tag with the <strong>th:href</strong> attribute that points to the <strong>/widgets</strong> page</li>\n<li>A button (disguised as an anchor tag but render as a button using the Bootstrap class <strong>btn btn-default</strong> CSS) with a <strong>th:href</strong> attribute pointing to <strong>${‘/widget/edit’ + widget.id}</strong>. This notation performs a <strong>String</strong> concatenation of <strong>/widget/edit</strong> with the ID of the widget, resulting in something like <strong>/widget/edit/1</strong>.</li>\n</ul>\n<p>An example of this apge is shown in Figure 5.</p>\n<p><img src=\"005.jpg\" alt=\"Figure 5. Widget edit page\"></p>\n<p>If the user presses the <strong>Edit</strong> button, the <strong>editWidget</strong> method is called:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/edit/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editWidget</span><span class=\"params\">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"widget\"</span>, widgetRepository.findById(id).orElse(<span class=\"keyword\">new</span> Widget()));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"widgetform\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This method maps to the <strong>/widget/edit/{id}</strong> URI, retrieves the widget from the database, sets it an the model’s “widget” attribute, and tells Spring to render it using the “widgetform.html” Thymeleaf, shown in Listing 8.</p>\n<h3 id=\"Listing-8-widgetform-html\"><a href=\"#Listing-8-widgetform-html\" class=\"headerlink\" title=\"Listing 8. widgetform.html\"></a>Listing 8. widgetform.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Create/Edit Widget<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../static/css/bootstrap.min.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Create / Edit Widget<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;widget&#125;\"</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/widget&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;id&#125;\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;name&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Name\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;description&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Description\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../static/js/bootstrap.min.js\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The template introduces a proper Thymeleaf form. To build a form with Thymeleaf, you specify the object that the form is operation on, using the <strong>th:object</strong> attribute of the <strong>form</strong>, and then you can access that object’s properties using <strong>th:field</strong> attribute in form elements. These field attributes are accessed using the <strong>*{propertyName}</strong> notation, which refers back to the form’s object. In this example, we define a hidden text field to hold the ID (we don’t want the user changing the primary key in the database) and we aa the name and description fields. At the end of the document we add a submit button, which submits the form to the <strong>th:action</strong>, which points to <strong>@{/widget}</strong>. Notice that we use the <strong>@</strong> symbol to reference and the <strong>$</strong> symbol to reference model objects.</p>\n<p>We are able to leverage the “widgetform” for both creating new Widgets adn editing existing Widgets by adding an empty <strong>Widget</strong> object in the <strong>newWidget</strong> method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/new\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">newWidget</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"widget\"</span>, <span class=\"keyword\">new</span> Widget());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"widgetform\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Because we pass an empty <strong>Widget</strong> object through the “widget” model attribute, the form will not fail if a Widget is not present. This allows us to reuse the same form both for creating and editing widgets.</p>\n<p>Now that we have our controller and templates definded, we’re ready to run the application. To run a Spring Boot application, execute the following Maven command:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p>\n<p>You should see Spring start Tomcat, create an embedded H2 database with the name <strong>testdb</strong> and then show a summary of the URI mappings for your <strong>Widgetontroller</strong>.</p>\n<p>To see your application in action, open a browser to the following URL:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/widgets</span><br></pre></td></tr></table></figure></p>\n<p>When you are ready to release and run your application in production, you can build your project with then standard <strong>mvn clean install</strong> and then run the resultan executable JAR file:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install</span><br><span class=\"line\">java -jar target/spring5mvc-example-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Spring MVC is the traditional Spring framework library for building Java web applications. This article introduced you to Spring MVC web developement using Spring Boot, Spring initializr, and the Thymeleaf view rendering engine.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Spring MVC is the Spring framework’s traditional library for building Java Web applications. It is one of the most popular web frameworks for building fully functional Java web applications and RESTful web services. In this tutorial, you’ll get an overview of Spring MVC and learn how to build Java Web applications using Spring Boot, Spring Initializr, and Thymeleaf.</p>\n<h2 id=\"Spring-Boot-with-Spring-Initializr\"><a href=\"#Spring-Boot-with-Spring-Initializr\" class=\"headerlink\" title=\"Spring Boot with Spring Initializr\"></a>Spring Boot with Spring Initializr</h2><p>We’ll fastrack our Spring MVC web application with the help of Spring Boot and Spring Initializr. Given input for the type of application to be built, Spring Initializr uses the most common dependencies and defaults to setup and configure a baisc Spring Boot application. You can also add custom dependencies and Spring Initializr will include and manage them, ensuring version compatibility with both third-party software and Spring. Spring Boot applications run standalone, without requiring you to provide a runtime environment.</p>\n<p>In this case, since we’re building a web application, Spring Boot will automatically include and configure Tomcat as part of the app’s runtime. We can also customize the app by adding an H2 database driver to our Maven POM file. Spring Boot will then automatically create an embedded database and DataSource instance in the application context. Once the dependencies are set, Spring Boot will provide default configurations fro the application. Of course we can change the configurations if we want to, but thanks to Spring Boot we hava a headstart: a fully configured, working application right out of the box.</p>\n<p>once we’ve selected and configured our dependencies, we’ll pass those selections to Spring Initializr, which will provide a downloadable ZIP file containing a base Spring Boot project.</p>\n<h2 id=\"Spring-MBC-with-H2-database-engine\"><a href=\"#Spring-MBC-with-H2-database-engine\" class=\"headerlink\" title=\"Spring MBC with H2 database engine\"></a>Spring MBC with H2 database engine</h2><p>We’ll start by creating a basic Spring MVC web application that persists data to an H2 embedded database.</p>\n<h3 id=\"Step-1-Setup-adn-configure-the-app\"><a href=\"#Step-1-Setup-adn-configure-the-app\" class=\"headerlink\" title=\"Step 1. Setup adn configure the app\"></a>Step 1. Setup adn configure the app</h3><p>Navigate to Spring Initializr at start.spring.io and select Generate a Maven Project with java and Spring Boot 2.0.X, where X is the latest Spring Boot version (2.0.3 at time of this writing). Make sure you select Spring Boot 2.x so that you can implement Spring Web MVC 5. Spring Boot 1.4 and Spring Boot 1.5 will implement Spring 4.</p>\n<p>Enter a group name the format matching your web address, such as com.geekcap.javaworld, and enter an artifact name, such as spring5mvc-example. Figure 1 shows you my configuration.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. Configure for Spring Initializr\"></p>\n<p>To add dependencies to the web app, you may either enter a comma-separated list of dependencies into the <strong>Search for dependencies</strong> text field or click on <strong>Switch to the full version</strong>. We’ll take the easier route by clicking on <strong>Switch to the full version</strong>. The dependencies are divided into groups, such as Core, Web, and Template Engines. For this example, select the checkboxes for: <strong>Web —&gt; Web, Template Engines —&gt; Thymeleaf, SQL —&gt; JPA, and SQL —&gt; H2</strong>. Here’s what each of those selections will add to the application:</p>\n<ul>\n<li>Web: Spring MVC and Tomcat</li>\n<li>Thymeleaf: Thymeleaf web template engine</li>\n<li>JPA: Spring JPA, Hibernate, and Spring Data</li>\n<li>H2: The H2 embedded database</li>\n</ul>\n<p>When you’re finished, click the Generate Project button at the bottom of page. Spring Initializr will create a readymade ZIP file with all the required project sources, which you can download.</p>\n<h3 id=\"Step-2-Import-the-Spring-Initializr-project-to-Your-IDE\"><a href=\"#Step-2-Import-the-Spring-Initializr-project-to-Your-IDE\" class=\"headerlink\" title=\"Step 2. Import the Spring Initializr project to Your IDE\"></a>Step 2. Import the Spring Initializr project to Your IDE</h3><p>Extract the ZIP file from Spring Initializr, then import the project into your favorite IDE. For example, to import the project into IntelliJ, choose <strong>File —&gt; New Project</strong>, as shown in Figure 2.</p>\n<p><img src=\"002.jpg\" alt=\"Figure 2. Importing the project into IntelliJ\"></p>\n<h3 id=\"Step-3-Setup-your-Maven-POM\"><a href=\"#Step-3-Setup-your-Maven-POM\" class=\"headerlink\" title=\"Step 3. Setup your Maven POM\"></a>Step 3. Setup your Maven POM</h3><p>Next, navigate to <strong>Import project from external module</strong>, choose <strong>Maven</strong>, and press <strong>Next</strong>. Be sure to choose a Java 1.8 project SDK, then hit <strong>Finish</strong>.</p>\n<h2 id=\"The-Spring-Boot-starter-app\"><a href=\"#The-Spring-Boot-starter-app\" class=\"headerlink\" title=\"The Spring Boot starter app\"></a>The Spring Boot starter app</h2><p>now let’s take a look at the Spring Boot starter application that has been generated by our (minimal) efforts so far.</p>\n<p>To start, Listing 1 shows the Maven POM file.</p>\n<h3 id=\"Listing-1-Maven-pom-xml\"><a href=\"#Listing-1-Maven-pom-xml\" class=\"headerlink\" title=\"Listing 1. Maven pom.xml\"></a>Listing 1. Maven pom.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.geekcap.javaworld<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring5mvc-example<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring5mvc-example<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Notice that the POM file uses a special parent POM: spring-boot-starter-parent. We’ll use the parent POM to manage the versions of all our dependencies and ensure versions are compatible. The repositories at the end of the POM file reference teh Spring <strong>snapshot</strong> and <strong>milestone</strong> repositories. We need these because Spring Boot 2.x is still a milestone release at the time of this writing.</p>\n<p>The dependencies are quite minimal, and most are prefaced with spring-boot-starter:</p>\n<ul>\n<li>spring-boot-starter-data-jpa</li>\n<li>spring-boot-starter-thymeleaf</li>\n<li>spring-boot-starter-web</li>\n<li>spring-boot-starter-test</li>\n</ul>\n<p>Each of these starter dependencies brings in all of the sub-dependencies it needs. Figure 3 shows the partially expanded dependency view in IntelliJ.</p>\n<p><img src=\"003.jpg\" alt=\"Figure 3. Spring starter project dependencies\"></p>\n<p>The POM file includes the following dependencies:</p>\n<ul>\n<li>spring-boot-starter-data-jpa includes Hibernate and Spring Data</li>\n<li>spring-boot-starter-thymeleaf includes the Thymeleaf template engine</li>\n<li>spring-boot-starter-web includes spring-boot-starter-tomcat, an embedded version of Apache Tomcat</li>\n<li>spring-boot-starter-json includes the Jackson JSON libraries</li>\n<li>spring-web and spring-webmvc includes Spring MVC</li>\n<li>spring-boot-starter-test includes testing libraries such as JUnit and Mockito</li>\n</ul>\n<p>When Spring Boot sees these dependencies in the CLASSPATH, it initiates automatic configuration. For example, when it find spring-boot-starter-web, it creates an embedded version of Tomcat, and when if finds H2 and spring-boot-starter-jpa it creates an H2 embedded database and a Hibernate EntityManager. It then wires the EntityManager into Spring Data.</p>\n<p>Spring Boot also creates a single class that can be used to run the application. The class for the example application is shown in Listing 2.</p>\n<h3 id=\"Listing-2-SpringExampleApplication\"><a href=\"#Listing-2-SpringExampleApplication\" class=\"headerlink\" title=\"Listing 2. SpringExampleApplication\"></a>Listing 2. SpringExampleApplication</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Spring5mvcExampleApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Spring5mvcExampleApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The class leverages the <code>SpringApplication.run()</code> method, passing in the class to run (Spring5mvcExampleApplication in this exmaple). The @SpringBootApplication annotation includes the following annotations:</p>\n<ul>\n<li>@Configuration informs Spring that the Spring2mvcExample class contains configuration information. (This annotation can be used to create beans that will get registered with the Spring context.)</li>\n<li>@EnableAutoConfiguration tells Spring to automatically configure resources from dependencies found in the CLASSPATH, such as H2 and Tomcat</li>\n<li>ComponentScan tells Spring to can packages in the CLASSPATH under the current package (com.geekcap.javaworld.spring5mvcexample) for Spring annotated components such as @Service and @Controller</li>\n</ul>\n<p>Spring scans the CLASSPATH and automatically creates components such as the embeded Tomcat server and H2 database. It then populates the Spring context with the application components found in the package scan. In essence, Spring Boot makes it very easy to select and configure the services, components, controllers, entities, and so forth that you need for your application. Once you’ve done that, Spring will automatically find them, make them available in the Spring context, and autowire everthing together.</p>\n<p>We’ve got our Spring Boot starter project setup and ready to go. In the next section we’ll create the Spring MVC components for our Java Web application.</p>\n<blockquote>\n<p>What is the Spring context?<br>The Spring context is a registry of all available Spring beans. Classes are identified as Spring beans by annotating them with specific Spring annotations. Examples include @Service, which identifies a business service, @Controller, which identifies a Spring MVC controller (i.e., handles web requests), and @Entity, which is a JPA annotation used to identify classes that are mapped to database tables.</p>\n<p>Once these beans are annotated they need to be registered with the Spring context, which Spring Boot does by performing a package scan of all classes in packages in your project. As the Spring context is being built, it implements the <strong>inversion-of-control (IoC) design pattern</strong> through dependency injection: when a Spring bean needs a dependency, such as a service or repository, the bean can either define a constructor that accepts the dependent bean or it can leverage the @Autowired annotation to tell Spring that it needs that dependency. Spring resolves all dependencies and “autowires” the application together.</p>\n<p>Dependency Injection is a powerful design pattern because, rather than creating and managing dependencies inside your code — which can be messy and leads to tightly coupled classes — you can instead delegate control to the Spring container. Your class simply tells the container what dependencies it needs to run and the container provides the appropriate dependencies to your class at runtime.</p>\n</blockquote>\n<h2 id=\"About-Spring-MVC-5\"><a href=\"#About-Spring-MVC-5\" class=\"headerlink\" title=\"About Spring MVC 5\"></a>About Spring MVC 5</h2><p>Spring MVC implements the poluar Model-View-Controller pattern, which you’ve probably seen in other web framework. The Model-View-Controller pattern separates concerns into the categories:</p>\n<ul>\n<li>Model represents your domain object</li>\n<li>View renders your model tp a view, such as to an HTML page</li>\n<li>Controller sits between your view and model and translates change requests in the view into changes in the model, and vice versa. In practical terms, the controller accepts incoming requests, potentially updates the model, and send your model objects to a “view” to render back to the client</li>\n</ul>\n<p>In Spring MVC, controllers are identified by the @Controller annotation and accompanied by a @Requestmapping annotation. The annotation defines the HTTP verb (standard HTTP commands like GET, POST, PUT, and DELELE) and URI for which the request-mapping method will be applied. Spring 4 introduced shortcut request mappings, which make things even easier. We’ll use these mappings — @GetMapping, @PostMapping, @PutMapping, @PatchMapping, and @DeleteMapping — for our example appliation.</p>\n<h2 id=\"The-model-in-Spring-MVC\"><a href=\"#The-model-in-Spring-MVC\" class=\"headerlink\" title=\"The model in Spring MVC\"></a>The model in Spring MVC</h2><p>For our application, we’ll define a simple model object, a Widget, store it in an embeded H2 database, and build a controller to menage widgets. Let’s start with the Widget class, which is shown in Listing 3.</p>\n<h3 id=\"Listing-3-Widget\"><a href=\"#Listing-3-Widget\" class=\"headerlink\" title=\"Listing 3. Widget\"></a>Listing 3. Widget</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Widget</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Widget</span><span class=\"params\">(Long id, String name, String description)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.description = description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Long id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">(String description)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.description = description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The widget class in a plain old Java object (POJO) that is annotated with JPA (Java Persistence API) annotations. In this case there are three annotations:</p>\n<ul>\n<li><strong>@Entity</strong> identifies Widget as an entity that can be persisted to a database</li>\n<li><strong>@Id</strong> identifies the <strong>id</strong> field as the primary key of the entity</li>\n<li><strong>@GeneratedValue</strong> tells the JPA <strong>EntityManager</strong> that the key should be automatically generated in the database</li>\n</ul>\n<p>Note that <strong>EntityManager</strong> is created automatically for us because we included JPA in the Spring Initializr.</p>\n<p>The <strong>Widget</strong> class manages three fields:</p>\n<ul>\n<li><strong>id</strong> is the ID, or primary key of the widget</li>\n<li><strong>name</strong> is the name of the widget</li>\n<li><strong>description</strong> is a description of the widget</li>\n</ul>\n<p>To persist widgets to and from our embedded (内嵌) database, we need to leverage (施加影响) Spring Data. Basically, we’ll define an interface that extends one of Spring Data’s interfaces, such as <strong>CrudRepository</strong>, and Spring Data will provide an implementation of that interface as runtime.</p>\n<p>The <strong>CrudRepository</strong> interface includes the following methods:</p>\n<ul>\n<li><strong>findById</strong> finds the entity in the database with the specified ID</li>\n<li><strong>findAll</strong> returns all entities of the repository type from the database (note that there are other Spring Data repository interfaces, such as <strong>PagingAndSortingRepository</strong>, that can help manage larger data sets)</li>\n<li><strong>findAllById</strong> passed a collection of IDs, this method returns all entities for those IDs</li>\n<li><strong>save</strong> persists an entity to the database (create or update)</li>\n<li><strong>saveAll</strong> saves a collection of entities to the database</li>\n<li><strong>delete</strong> deletes the specifies entity</li>\n<li><strong>deleteById</strong> deletes the entity with the specified ID</li>\n<li><strong>deleteAll</strong> delete all entities managed by the repository</li>\n<li><strong>count</strong> returns the number of entities that are in the database</li>\n<li><strong>existsById</strong> returns true if an entity with the specified ID exists in the database</li>\n</ul>\n<p>For our example, we’ll create a <strong>WidgetRepository</strong> interface that extends <strong>CrudRepository</strong>, as shown in Listing 4.</p>\n<h3 id=\"Listing-4-WidgetRepository\"><a href=\"#Listing-4-WidgetRepository\" class=\"headerlink\" title=\"Listing 4. WidgetRepository\"></a>Listing 4. WidgetRepository</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">WidgetRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">Widget</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The <strong>WidgetRepository</strong> allows us to perform all create, read, upadte, and delete (CRUD) operations on widgets. The two parameters passed to the <strong>CrudRepository</strong> are <strong>Widget</strong>, which represents the type of entity that the repository manages, and <strong>Long</strong>, which is the type of the primary key for the <strong>Widget</strong> entity. (This is a simple implementation) that scratches the surface of what you can do with Spring Data. I encourage you to learn more about this useful Spring project.)</p>\n<h2 id=\"The-Controller-in-Spring-MVC\"><a href=\"#The-Controller-in-Spring-MVC\" class=\"headerlink\" title=\"The Controller in Spring MVC\"></a>The Controller in Spring MVC</h2><p>With our <strong>Widget</strong> entity and <strong>WidgetRepository</strong> in hand, we’re ready to build a controller. Listing 5 shows the source code for the <strong>WidgetController</strong>.</p>\n<h3 id=\"Listing-5-WidgetController\"><a href=\"#Listing-5-WidgetController\" class=\"headerlink\" title=\"Listing 5. WidgetController\"></a>Listing 5. WidgetController</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> WidgetRepository widgetRepository;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Load the new widget page.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/new\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">newWidget</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"widget\"</span>, <span class=\"keyword\">new</span> Widget());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"widgetform\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create a new widget.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> widget</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/widget\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">createWidget</span><span class=\"params\">(Widget widget, Model model)</span> </span>&#123;</span><br><span class=\"line\">        widgetRepository.save(widget);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/widget/\"</span> + widget.getId();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get a widget by ID.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getWidgetById</span><span class=\"params\">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"widget\"</span>, widgetRepository.findById(id).orElse(<span class=\"keyword\">new</span> Widget()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"widget\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get all widgets.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widgets\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getWidgets</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"widgets\"</span>, widgetRepository.findAll());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"widgets\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Load the edit widget page for the widget with the specified ID.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/edit/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editWidget</span><span class=\"params\">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"widget\"</span>, widgetRepository.findById(id).orElse(<span class=\"keyword\">new</span> Widget()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"widgetform\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Update a widget.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> widget</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/widget/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateWidget</span><span class=\"params\">(Widget widget)</span> </span>&#123;</span><br><span class=\"line\">        widgetRepository.save(widget);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/widget/\"</span> + widget.getId();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete a widget by ID.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/delete/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteWidget</span><span class=\"params\">(@PathVariable  Long id)</span> </span>&#123;</span><br><span class=\"line\">        widgetRepository.deleteById(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/widgets\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The <strong>WidgetController</strong> is annotated with the <strong>@Controller</strong> annotation. When Spring performs a package can of the classes, it will find the <strong>@Controller</strong> annotation, create an instance of this class, and add it to the Spring context, configured to handle web requests. This <strong>WidgetController</strong> defines a <strong>WidgetRepository</strong> implementation created by Spring Data and automatically wire the repository into the controller.</p>\n<p>The <strong>WidgetController</strong> then difines a set of methods to handle requests, using the <strong>@GetMapping</strong> and <strong>PostMapping</strong> annotations. These annotations accept the URI path that each method is handling, defining the HTTP verb accordingly. Because we are using the Thymeleaf engine, each method returns a String naming the template to render. Templates are stored in <strong>src/main/resources/templates</strong> as HTML files with specific Thymeleaf markup, which is shown below.</p>\n<p>The method that return a direct template name are all passed a <strong>Model</strong> object. The <strong>Model</strong> object implements a Spring UI interface and provides methods to add attributes to the model. These attributes will be made available to the template to be rendered. For example, in the <strong>getWidgetById</strong> method, we retrieve a <strong>Widget</strong> from the database and set it in the <strong>Model</strong> with the key <strong>widget</strong>. The template can then access that <strong>Widget</strong> using the <strong>widget</strong> key.</p>\n<h2 id=\"Controller-methods-and-the-view-template\"><a href=\"#Controller-methods-and-the-view-template\" class=\"headerlink\" title=\"Controller methods and the view template\"></a>Controller methods and the view template</h2><p>Next let’s walk through each <strong>WidgetController</strong> method and its corresponding view template. The homepage for the application is the <strong>/widgets</strong> page, which shows a list of all widgets in the database. The <strong>getWidgets</strong> method retrieves all widgets by calling the <strong>WidgetRepository</strong>‘s <strong>findAll</strong> method, sets it as  the <strong>widgets</strong> attribute in the model, and returns <strong>widgets</strong>. Listing 6 shows the <strong>widgets.html</strong> tempalte file.</p>\n<h3 id=\"Listing-6-widgets-html\"><a href=\"#Listing-6-widgets-html\" class=\"headerlink\" title=\"Listing 6. widgets.html\"></a>Listing 6. widgets.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Widgets<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../static/css/bootstrap.min.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;css/bootstrap.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Widgets<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>ID<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>View<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Edit<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"widget : $&#123;widgets&#125;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.id&#125;\"</span>&gt;</span>Widget ID<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.name&#125;\"</span>&gt;</span>Widget Name<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.description&#125;\"</span>&gt;</span>Widget Description<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widget/' + widget.id&#125;\"</span>&gt;</span>View<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widget/edit/' + widget.id&#125;\"</span>&gt;</span>Edit<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widget/delete/' + widget.id&#125;\"</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widget/new'&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>New<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../static/js/bootstrap.min.js\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Thymeleaf templates are HTML files that import the <strong><a href=\"http://www.thymeleaf.org\">http://www.thymeleaf.org</a></strong> XML namespace, as seen in the <strong>html</strong> tag. With this namespace include (as <strong>th</strong>), Thymeleaf allows us to add tags to existing HTML elements. This enables you to create and style your HTML files without running your application in Tomcat.</p>\n<p>For this example, we’ve added the Twitter Bootstrap library, which makes it eaiser to create a nice layout. Rather than constantly restarting Tomcat to view pages, this lets us build the page using an editor, then render the page in a browser. In order to work with your JavaScript and CSS lacally you also need to include the JavaScript <strong>href</strong> and script source <strong>src</strong> values that point to your relative CSS and JavaScript files, respectively. The <strong>th:href</strong> and <strong>th:src</strong> attributes will be resolved to actual URI paths by Thymeleaf in a live application, and will overwrite the <strong>href</strong> and <strong>src</strong> attribute values when the page is rendered.</p>\n<p>The HTML file in Listing 6 contains a table that shows a summary of each widget, with buttons to view the details of a widget, edit a widget, or delete a widget. We use the model to pass in a collection of widgets, and we access those by adding the <strong>th:each</strong> attribute of the <strong>tr</strong> (table row) tag, where <strong>th:each</strong> is Thymeleaf’s implementation of a <strong>for-each</strong> contruct. This will create one row for each item in our collection. The <strong>th:each</strong> attribute is passed the value <strong>widget : ${widgets}</strong>. This retrieves the “widgets” collection from the model and assigns each widget to a local variable, “widget”, that will be used inside the row. We can then extract values from the widget using the <strong>${widget.propertyName}</strong> syntax.</p>\n<p>For the first three rows, we include the <strong>th:text</strong> attribute in each table cell (<strong>td</strong>), extracting fields from the widget. For the last three rows, we add hyperlink to our other controller URIs:</p>\n<ul>\n<li><strong>/widget/{id}</strong> shows the widget with the specified ID</li>\n<li><strong>/widget/edit/{id}</strong> shows the widget with the specified ID in an editable form</li>\n<li><strong>/widget/delete/{id}</strong> deletes the widget with the specified ID, then shows the updated list of widgets</li>\n</ul>\n<p>The bottom of the page adds a <strong>New</strong> button that allows the user to create a new widget. Widgets are created through the <strong>/widget/new</strong> URL and presented in the same form as the <strong>/widget/edit/{id}</strong> URI.</p>\n<p>Figure 4 shows a screenshot of the widget list page.</p>\n<p><img src=\"004.jpg\" alt=\"Figure 4. Widget list page\"></p>\n<p>When the user presses the <strong>View</strong> button, the <strong>getWidgetById</strong> method is called:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getWidgetById</span><span class=\"params\">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"widget\"</span>, widgetRepository.findById(id).orElse(<span class=\"keyword\">new</span> Widget()));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"widget\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The method is mapped to a GET request for <strong>/widget/{id}</strong> and the <strong>id</strong> is extracted using the <strong>@PathVariable</strong> annotation. If you have multiple variables in your path, you can include them using the <strong>@PathVariable</strong> annotation with a variable name that matches the path variable name. In this case, the <strong>getWidgetById</strong> method retrieves the widget with the specified ID from the <strong>widgetRepository</strong>, then assigns it to the model’s “widget” property.</p>\n<p>You might have noted that the <strong>WidgetReporitory.findById</strong> method returns an <code>Optional</code>s in Java wrap objects: if the object is persent then you can retrieve it using the <strong>get()</strong> method; if the object is not present then the <strong>Optional</strong> will be equal to <strong>Optional.emtry()</strong>. You can determine if the result has an object by calling the <strong>isPresent()</strong> method. Alternatively, as I did in this case, you could leverage the <strong>orElse()</strong> method, which returns the object if it is present. Otherwise, it returns the widget created inside the <strong>orElse</strong> method. In a production application you would want to return a valid widget or return an error page. For now, we can simply return an emptry widget. Finally, this method returns “widget”, which tells Spring MVC to render this <strong>Widget</strong> using the “widget.html” template, shown in Listing 7.</p>\n<h3 id=\"Listing-7-widget-html\"><a href=\"#Listing-7-widget-html\" class=\"headerlink\" title=\"Listing 7. widget.html\"></a>Listing 7. widget.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Widget Details<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../static/css/bootstrap.min.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">class</span>=<span class=\"string\">\"breadcrumb\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widgets'&#125;\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Widget Details<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-horizontal\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>ID:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control-static\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.id&#125;\"</span>&gt;</span>Widget ID<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control-static\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.name&#125;\"</span>&gt;</span>Widget Name<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Description:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control-static\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;widget.description&#125;\"</span>&gt;</span>Widget Description<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-offset-2 col-sm-10\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/widget/edit/' + widget.id&#125;\"</span>&gt;</span>Edit<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../static/js/bootstrap.min.js\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Aside from the Bootstrap markup, this HTML file shows the three widget fields in paragraph elements using the <strong>th:text</strong> Thymeleaf attribute with the <strong>${widget.propertyName}</strong> notation. If you are not familiar with Bootstrap, don’t let the form trick you into thinking this a a proper HTML form that accepts fields; it js just a layout paradigm. </p>\n<p>The only other two things I added are:</p>\n<ul>\n<li>A breadcrumb that allows the user to naviagate back to the homepage (widget list), using an anchor tag with the <strong>th:href</strong> attribute that points to the <strong>/widgets</strong> page</li>\n<li>A button (disguised as an anchor tag but render as a button using the Bootstrap class <strong>btn btn-default</strong> CSS) with a <strong>th:href</strong> attribute pointing to <strong>${‘/widget/edit’ + widget.id}</strong>. This notation performs a <strong>String</strong> concatenation of <strong>/widget/edit</strong> with the ID of the widget, resulting in something like <strong>/widget/edit/1</strong>.</li>\n</ul>\n<p>An example of this apge is shown in Figure 5.</p>\n<p><img src=\"005.jpg\" alt=\"Figure 5. Widget edit page\"></p>\n<p>If the user presses the <strong>Edit</strong> button, the <strong>editWidget</strong> method is called:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/edit/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editWidget</span><span class=\"params\">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"widget\"</span>, widgetRepository.findById(id).orElse(<span class=\"keyword\">new</span> Widget()));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"widgetform\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This method maps to the <strong>/widget/edit/{id}</strong> URI, retrieves the widget from the database, sets it an the model’s “widget” attribute, and tells Spring to render it using the “widgetform.html” Thymeleaf, shown in Listing 8.</p>\n<h3 id=\"Listing-8-widgetform-html\"><a href=\"#Listing-8-widgetform-html\" class=\"headerlink\" title=\"Listing 8. widgetform.html\"></a>Listing 8. widgetform.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Create/Edit Widget<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../static/css/bootstrap.min.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Create / Edit Widget<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;widget&#125;\"</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/widget&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;id&#125;\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;name&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Name\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;description&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Description\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../static/js/bootstrap.min.js\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The template introduces a proper Thymeleaf form. To build a form with Thymeleaf, you specify the object that the form is operation on, using the <strong>th:object</strong> attribute of the <strong>form</strong>, and then you can access that object’s properties using <strong>th:field</strong> attribute in form elements. These field attributes are accessed using the <strong>*{propertyName}</strong> notation, which refers back to the form’s object. In this example, we define a hidden text field to hold the ID (we don’t want the user changing the primary key in the database) and we aa the name and description fields. At the end of the document we add a submit button, which submits the form to the <strong>th:action</strong>, which points to <strong>@{/widget}</strong>. Notice that we use the <strong>@</strong> symbol to reference and the <strong>$</strong> symbol to reference model objects.</p>\n<p>We are able to leverage the “widgetform” for both creating new Widgets adn editing existing Widgets by adding an empty <strong>Widget</strong> object in the <strong>newWidget</strong> method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/widget/new\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">newWidget</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"widget\"</span>, <span class=\"keyword\">new</span> Widget());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"widgetform\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Because we pass an empty <strong>Widget</strong> object through the “widget” model attribute, the form will not fail if a Widget is not present. This allows us to reuse the same form both for creating and editing widgets.</p>\n<p>Now that we have our controller and templates definded, we’re ready to run the application. To run a Spring Boot application, execute the following Maven command:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p>\n<p>You should see Spring start Tomcat, create an embedded H2 database with the name <strong>testdb</strong> and then show a summary of the URI mappings for your <strong>Widgetontroller</strong>.</p>\n<p>To see your application in action, open a browser to the following URL:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/widgets</span><br></pre></td></tr></table></figure></p>\n<p>When you are ready to release and run your application in production, you can build your project with then standard <strong>mvn clean install</strong> and then run the resultan executable JAR file:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install</span><br><span class=\"line\">java -jar target/spring5mvc-example-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Spring MVC is the traditional Spring framework library for building Java web applications. This article introduced you to Spring MVC web developement using Spring Boot, Spring initializr, and the Thymeleaf view rendering engine.</p>\n"},{"title":"What is an array and how are arrays represented in Java","mathjax":true,"date":"2020-04-05T16:00:02.000Z","_content":"An array is a fundamental data strecture category, and a building block for more complex data structures. In this second tutorial in the data structures and algorithms series, you will learn how arrays are understood and used in Java programming. I'll start with the concept of an array and how arrays are represented in the Java language. I'll then introduce you to one-dimensional arrays and the tree ways that you can use them in your Java programs. Finally, we'll explore five algorithms used to search and sort one-dimentional arrays: Linear Search, Binary Search, Bubble Sort, Selection Sort, and Insertion Srot.\n\nNote that this tutorial builds on Data Structures and algorithms, Part 1, which introduced the theoretical side of data structures and the algorithms associated with them. That tutorial includes an in-depth discussion of algorithms and how to use space and time complexity factors to evaluate and select the most efficient algorithm for your Java program. We'll get much more hands-on in this turorial, because I assume you've already read Part 1.\n\n## What is an array?\nAn array is a sequence of elements where each element is associated with at least on index. An element is a group of memory locations that store a single data item. An index is a nonnegative integer, which is this case is used to uniquely identify an element. This relationship is simmilar to how a box number uniquely identifies a house on a given street.\n\nThe number of indexes associated with any element is the array's dimension. In this article, we'll be talking about one-dimensional arrays. The next article in this series introduces multi-dimensional arrays.\n\nJava supports arrays. Each element ocuupies the same number of bytes, and the exact (精确) number depends on the types of the element's data item. Furthermore, all elements share the same type.\n\n> Java arrays are not resizable\n> Java Arrays hava a fixed size, You cannot change an array's size after creating it. Instead, if you needed to change an array's size, you would create another array of the desired size an copy all desired elements from the original array to the new one.\n\n## One-dimensional arrays\nThe simplest kind of array has one dimension. A one-dimensional array associates each element with one index. One-dimensional arrays are used to store lists of data items. There are three techniques for creating one-dimensinal arrays in Java:\n- Use only an initializer\n- Use only keyword new\n- Use keyword new with an initiazlier\n\n### Creating a one-dimensinal array with only an initializer\nHere's the syntax to create a one-dimensional array using just an initializer:\n```java\n{ 'J', 'a', 'v', 'a' }\n```\n\nThe syntax that one-dimensional array is an optional, comma-separated (分开的) list of expressions appearing between open and close brace characters. Futhermore, all expressions must evaluate to compatible types. For example, in a two-element one-dimensional array of doubles, both elements might be of type double, or one element might be a double while the other element is a float or an integer type (such as int).\n\n### Creating a one-dimensional array with the keyword new\nThe keyword new allocates memory for an array and returns its reference. Here's the syntax for this approach:\n```java\nnew char[4]\n```\n\nThe syntax states that a one-dimensional array is a region of (positive) int_exper elements that share the same type. furthermore, all elements are zeroed, and are interpreted as 0, 0L, 0F, 0.0, false, null.\n\n### Creating a one-dimensional array with the new keyword and an initializer\nHere's the syntax to create a one-dimensional array using the keyword new with an initializer. As you seee, it blends the syntax from the previous two approaches:\n```java\nnew char[] { 'J', 'a', 'v', 'a' }\n```\n\nIn this case, because the number of elements can be determined from the comma-separated list of expressions, it isn't necessary (or allowed) to provide an int_expr between the square brackets.\n\nSomething to note is that the syntax fro creating an array with only an initializer is no different in effect from the syntax using an initializer an a keyword. The initializer-only syntax is an example of syntactic sugar, which means syntax that make the language sweeter, or easier, to use.\n\n## Array variables\nBy itself, a newly-created one-dimensional array is useless. Its reference must be assigned to an array variable of a compatibe type, either directly or via a method call. The following two lines of syntax how you would declare this variable.\n\nEach syntax declares an array variable that stores a reference to a one-dimensional array. Although you can use either syntax, placing the square brackets after type is preferred (推荐).\n\nExamples:\n```java\nchar[] name1 = { 'J', 'a', 'v', 'a' };\nchar[] name2 = new char[4];\nchar[] name3 = new char[] { 'J', 'a', 'v', 'a' };\noutput(new char[] { 2, 3 }); // output({ 2, 3 }); results in a compiler error\nstatic void output(char[] name)\n{\n   // ...\n}\n```\n\nIn the examples, name1, name2, name3 and name are array variables. The single pair of square brackets states that each stores references to one-dimensional arrays.\n\nKeyword char indicates that each element must store a value of char type. However, you can specify a non-char value if Java can convert it to char. For example, `char[] chars = {'A', 10}` is legal because 10 is a samll enough positive in (meaning that it fits into the char range of 0 through 65535) to be converted to a char. In constact, `char[] chars = {'A', 80000}` would be illegal.\n\nAn array variable is associated with a `.length` property that returns the length of the associated one-dimensional array as a positive int; for example, `name1.length` return 4.\n\nGiven an array variable, you can access any element in a one-dimensional array by specifying an expression that argees with the following syntax:\n```java\narray_var '[' index ']'\n```\n\nHere, index is a positive int that ranges from 0 (Java arrays are zero-based) to one less than the vlaue returned from the `.length` property.\n\nExample:\n```java\nchar ch = names[0]; // Get value.\nnames[1] = 'A';     // Set value.\n```\n\nIf you specify a negative index or an index that is greater than or equal to the value returned by the array variable's `.length` property, Java creates and throws a ArrayIndexOutOfBoundsException object.\n\n## Algorithms for searching and sorting\nIt is a very common task to search one-dimensional arrays for specify data items, and there are a variety of algorithms for doing it. One of the most popular search algorithms is called Linear Search. Another option is Binary Search, which is usually more performant but also more demanding: in order to use Binary Search, the array's data items must first be sorted, or ordered. Although not very performant, Bubble Sort, Selction Sort, and Insertion Sort are all simple algorithms for sorting a one-dimensional array. Each works well enough for shorter arrays.\n\n> Space complexity\n> Each of the algorithms discussed in this section - Linear Search, Binary Search, Bubble Sort, Selection Sort, and Insertion Sort -- exhibits a $O(1)$ (constant) space complexity for variable storage.\n\n## The Linear Search algorithm\nLinear Search searches a one--dimensional array of $n$ data items for a specific one. It functions by comparing data items from the lowest index to the highest until it finds the specified data item, or until there are no more data items to compare.\n\nThe following pseudocode expresses Linear Search used for a one-dimensional array of integers:\n```\nDECLARE INTEGER i, srch = ...\nDECLARE INTEGER x[] = [ ... ]\nFOR i = 0 TO LENGTH(x) - 1\n   IF x[i] EQ srch THEN\n      PRINT \"Found \", srch\n      END\n   END IF\nNEXT i\nPRINT \"Not found\", srch\nEND\n```\n\nConsider a one-dimensional unordered array of five integers [1, 4, 3, 2, 6], where integer 1 is located at index 0 and integer 6 is located at index 4. The pseudocode preforms the following tasks to find integer 3 in this array:\n1. Compare the integer at index 0 (1) with 3.\n1. Because there's no match, compare the integer at index 1 (4) with 3.\n1. Because there's still no match, compare the integer at index 2 (3) with 3.\n1. Because there's a match, print Found 3 and exit.\n\nLiear Search has a time complexity of $O(n)$, which is pronounced Big Oh of $n$. For $n$ data items, this algorithm requires a maximum of $n$ comparisons. On average, it performs $\\frac n2$ comparisons. Linear Search offers linear performance.\n\n> Efficiency\n> A downside of (负面) the Linear Search algorithm is that it is inefficient (效率低的). For an array of 4,000,000 data items, it would perform an average of 2,000,000 comparisons to find the specified item.\n\n## Explore Linear Search\nTo let you experiment with Linear Search, I've created the LinearSearch Java application in Listing 1.\n\n### Listing 1. A Java example with the Linear Search algorithm\n```java\n{\n   public static void main(String[] args)\n   {\n      // Validate command line arguments count.\n\n      if (args.length != 2)\n      {\n         System.err.println(\"usage: java LinearSearch integers integer\");\n         return;\n      }\n\n      // Read integers from first command-line argument. Return if integers \n      // could not be read.\n\n      int[] ints = readIntegers(args[0]);\n      if (ints == null)\n         return;\n\n      // Read search integer; NumberFormatException is thrown if the integer\n      // isn't valid.\n\n      int srchint = Integer.parseInt(args[1]);\n\n      // Perform the search and output the result.\n\n      System.out.println(srchint + (search(ints, srchint) ? \" found\"\n                                                          : \" not found\"));\n   }\n\n   private static int[] readIntegers(String s)\n   {\n      String[] tokens = s.split(\",\");\n      int[] integers = new int[tokens.length];\n      for (int i = 0; i < tokens.length; i++)\n         integers[i] = Integer.parseInt(tokens[i]);\n      return integers;\n   }\n\n   private static boolean search(int[] x, int srchint)\n   {\n      for (int i = 0; i < x.length; i++)\n         if (srchint == x[i])\n            return true;\n\n      return false;\n   }\n}\n```\n\nThe LinearSearch application reads a comma-separated list of integers from its first command-line argument. It searchs the array for the integer identified by the second command-line argument, and outputs a found/not found message.\n\n> Beware of the number format exception\n> Specify digits and +/- sign characters only in each command-line argument. Otherwise, this application (and the subsequent search and sort applicaitons) will create and throw a NumberFormatException object.\n\nTo experiment with this application, start by compiling Listing 1:\n```bash\njavac LinearSearch.java\n```\n\nNext, run the resulting application as follows:\n```bash\njava LinearSearch \"4,5,8\" 5\n```\n\nYou should observe the following output:\n```\n5 found\n```\n\nRun the resulting application a second time, as follows:\n```bash\njava LinearSearch \"4,5,8\" 15\n```\n\nYou should observe the following output:\n```\n15 not found\n```\n\n## The Binary Search algorithm\nThe Binary Search algorithm searches an ordered one-dimensional array of $n$ data items for a specific data item. This algorithm consists of the following steps:   \n1. Set low and high index variables to the indexes of the array's first and last data items, respectively (分别)\n1. Terminate if the low index is greater than the high index. The serached-for data item is not in the array\n1. Calculate the middle index by summing the low and high indexes and dividing the sum by 2\n1. Compare the searched-for data item with the middle-indexed data item. Terminate if they are the same. The searched-for data item has been foud\n1. If the searched-for data item is greater than the middle-indexed data item, set the low index to the middle index plus one and transfer execution to Step 2. Binary Search repeats the search in the upper half of the array\n1. The searched-for data item must be smaller than the middle-indexed data item, so set the high index to the middle index minus on and transfer execution to Step 2. Binary Search repeats the earch in the lower half of the array\n\nHere is pseudocode representing the Binary Search algorithm for a one-dimensional array of integers:\n```\nDECLARE INTEGER x[] = [ ... ]\nDECLARE INTEGER loIndex = 0\nDECLARE INTEGER hiIndex = LENGTH(x) - 1\nDECLARE INTEGER midIndex, srch = ...\nWHILE loIndex LE hiIndex\n   midIndex = (loIndex + hiIndex) / 2\n   IF srch GT x[midIndex] THEN\n      loIndex = midIndex + 1\n   ELSE\n   IF srch LT x[midIndex] THEN\n      hiIndex = midIndex - 1\n   ELSE\n      EXIT WHILE\n   END IF\nEND WHILE\nIF loIndex GT hiIndex THEN\n   PRINT srch, \" not found\"\nELSE\n   PRINT srch, \" found\"\nEND IF\nEND\n```\n\nBinary Search isn't hard to understand. For example, consider a one-dimensional ordered array of six integers [3, 4, 5, 6, 7, 8], where integer 3 is located at idnex 0 and integer 8 is located at index 5. The pseudocode does the following to find integer 6 in this array:\n1. Obtain the low index (0) and high index (5)\n1. Calculate the middle index: (0 + 5) / 2 = 2\n1. Because the integer at index 2 (5) is less than 6, set the low index to 2 + 1 = 3\n1. Calculate the middle index: (3 + 5) / 2 = 4\n1. Because the integer at idnex 4 (7) is greater than 6, set the high idnex to 4 - 1 = 3\n1. Calculate the middle index: (3 + 3) / 2 = 3\n1. Becuase the integer at index 3 (6) equals 6, print 3 found and exit\n\nBinary Search has a time complexity of $O(log_2n)$, which is pronounced Big Oh of log $n$ to the base 2. For $n$ data items, Binary Search required a maximum of $1 + log_2n$ comparisons, making this algorithm vastly more efficient than Linear Serach, in most cases. The algorithm offers logarithmic performance (for more about logarithmic performance, see Figure 3 int Part 1 of this series).\n\n> When Linear Search outperforms Bineary Search\n> Although Binary Search is typically more efficient than Linear Search, Binary Search isn't as efficient for short arrays. This was discovered by famous computer scientist Donald Knuth.\n\nListing 2 is a BinarySearch Java application that lets you experiment with Binary Search.\n\n### Listing 2. A Java example with the Binary Search algorithm\n```java\n{\n   public static void main(String[] args)\n   {\n      // Validate command line arguments count.\n\n      if (args.length != 2)\n      {\n         System.err.println(\"usage: java BinarySearch integers integer\");\n         return;\n      }\n\n      // Read integers from first command-line argument. Return if integers \n      // could not be read.\n\n      int[] ints = readIntegers(args[0]);\n      if (ints == null)\n         return;\n\n      // Read search integer; NumberFormatException is thrown if the integer\n      // isn't valid.\n\n      int srchint = Integer.parseInt(args[1]);\n\n      // Perform the search and output the result.\n\n      System.out.println(srchint + (search(ints, srchint) ? \" found\"\n                                                          : \" not found\"));\n   }\n\n   private static int[] readIntegers(String s)\n   {\n      String[] tokens = s.split(\",\");\n      int[] integers = new int[tokens.length];\n      for (int i = 0; i < tokens.length; i++)\n         integers[i] = Integer.parseInt(tokens[i]);\n      return integers;\n   }\n\n   private static boolean search(int[] x, int srchint)\n   {\n     int hiIndex = x.length - 1, loIndex = 0, midIndex;\n\n      while (loIndex <= hiIndex)\n      {\n         midIndex = (loIndex + hiIndex) / 2;\n         if (srchint > x[midIndex])\n            loIndex = midIndex + 1;\n         else\n         if (srchint < x[midIndex])\n            hiIndex = midIndex - 1;\n         else\n            return true;\n      }\n\n      return false;\n   }\n}\n```\n\nThe BinarySearch application reads a comma-separated list of integers from its first command-line argument. It searchs the array for the integer identified by the second command-line argument, and outputs a found/not found message.\n\n> A bug in Binary Search\n> Joshua Bloch (author of Effictive Java) discovered a bug in the Binary Search algorithm, which can lead to a thrown instance of the ArrayIndexOutOfBoundsException class in Java. This bug manifests itself for arrays whose lengths are $2^{30}$ (roughly one billion) or greater.\n\nCompile the code in Listing 2 as follows:\n```bash\njavac BinarySearch.java\n```\n\nRun the resulting application as follows:\n```bash\njava BinarySearch \"4,5,8\" 5\n```\n\nYou should observe the following output:\n```\n15 not found\n```\n\n## The Bubble Sort algorithm\nThe Bubble Sort algorithm orders a one-dimensional array of $n$ data items into ascending or descending order. An outer loop makes $n-1$ passes over the array. Each pass uses an inner loop to exchange data items such that the next smallest (ascending) or largest (descending) data item \"bubbles\" towrads the beginning of the array.\n\nThe \"Bubbling\" action occurs in the inner loop, where each iteration compares the pass-numbered data item with each successive data item. If a successor data item is smaller (ascending sort) or larger (descending sort) than the pass-numbered data item, the successor data item is exchanged with the pass-numbered data item. \n\nHere is pseudocode representing  Bubble Sort in a one-dimensional array of integers/ascending sort context:\n```\nDECLARE INTEGER i, pass\nDECLARE INTEGER x[] = [ ... ]\nFOR pass = 0 TO LENGTH(x) - 2\n   FOR i = LENGTH(x) - 1 DOWNTO pass + 1\n      IF x[i] LT x[pass] THEN // switch to > for descending sort\n         EXCHANGE x[i], x[pass]\n      END IF\n   NEXT i\nNEXT pass\nEND\n```\n\nBubble Sort is faily easy to understand. For example, consider a one-dimensional, unordered array of four integers: [18 16, 90, -3], where integer 18 is located at index 0 and integer -3 is located at index 3. When requested to sort this array into ascending order, Bubble Sort would execute as follow:\n```\nPass 0               Pass 1               Pass 2\n======               ======               ======\n18  16  90  -3       -3  16  90  18       -3  16  90  18\n^           ^            ^       ^                ^   ^\n|           |            |       |                |   |\n-------------            ---------                -----\n-3  16  90  18       -3  16  90  18       -3  16  18  90\n^       ^                ^   ^ \n|       |                |   |\n---------                -----\n-3  16  90  18       -3  16  90  18\n^   ^\n|   |\n-----\n-3  16  90  18\n```\n\nIn terms of comparisons and also in terms of exchanges, Bubble Sort has a time complexity of $O(n^2)$, which is pronounced \"Big Oh of $n$ squared\". Bubble Sort offers quadratic performance, which isn't a problem for shorter-length arrays -- espicially when you consider that Bubble Sort is easy to code. (See Part 1 for more about quadratic performance.)\n\nThe BubbleSort Java application in Listing lets you experiment with Bubble Sort.\n\n### Listing 3. A Java example with the Bubble Sort algorithm\n```java\n{\n   public static void main(String[] args) {\n      // Validate command line arguments count.\n      if (args.length != 1) {\n         System.err.println(\"usage: java BubbleSort integers\");\n         return;\n      }\n\n      // Read integers from first command-line argument. Return if integers could not be read.\n      int[] ints = readInteger(args[0]);\n      if (ints == null) {\n         return;\n      }\n\n      // Output integer array's length and number of inversions statistics to standard outpou device.\n      System.out.println(\"N = \" + ints.length);\n      int inversions = 0;\n      for (int i = 0; i < ints.length - 1; i++) {\n         for (int j = i + 1; j < ints.length; j++) {\n            if (int[i] > int[j]) {\n               inversions ++;\n            }\n         }\n      } \n      System.out.println(\"I = \" + inversions);\n\n      // Output unsorted integer values to standard output, sort the array, and output sorted values to standard output.\n      dum(ints);\n      sort(ints);\n      dump(intns);\n   }\n\n   private static int[] readIntegers(String s) {\n      String[] tokens = s.split(\",\");\n      int[] integers = new int[tokens.length];\n      for (int i = 0; i < tokens.length; i++)\n         integers[i] = Integer.parseInt(tokens[i]);\n      return integers;\n    }\n\n   private static void dump(int[] a) {\n      for (int i = 0; i < a.length; i++)\n         System.out.print(a[i] + \" \");\n      System.out.print('\\n');\n   }\n\n   private static void sort(int[] x) {\n         for (int pass = 0; pass < x.length - 1; pass++) {\n            for (int i = x.length -1; i > pass; i++) {\n               if (x[i] < x[pass]>) {\n                  int temp = x[i];\n                  x[i] = x[pass];\n                  x[pass] = temp;\n               }\n            }\n         }\n   }\n}\n```\n\nBubbleSort reads a comma-separated list of integers from its command-line argument. It outputs the array length, calculates and outputs the number of inversions (larger items to the left of smaller items in the unsorted array), outputs the unsorted array, sorts the array, and outputs the sorted array. (Selection Sort and Insertion Sort, which I'll introduce next, behave similary.)\n\nCompile Listing 3 as follows:\n```bash\njavac BubbleSort.java\n```\n\nRun the resulting application as follows:\n```bash\njava BubbleSort \"18,16,90,-3\"\n```\n\nYou should observe the following output:\n```\nN = 4\nI = 4\n18 16 90 -3\n-3 16 18 90\n```\n\n## The Selection Sort algorithm\nThe Selection Sort algorithm orders a one-dimensional array of $n$ data items into ascending order or descending order. An outer loop makes $n - 1$ passes over the array. Each pass uses an inner loop to find the next smallest (ascending sort) or lastest (descending sort) data item, which is exchanged with the pass-numbered data item.\n\nSelection Sort assumes that the data item at the pass-numbered index is the smallest (ascending sort) or the largest (descending sort) of the remaining data items. It searches the rest of the array for a data item that's smaller/larger than this data item, and performs an exchange at the end of the search when a smaller/larger data item is found.\n\nThe following pseudocode expresses Selection Sort in a one-dimensinal array of integers/ascending sort context:\n```\nDECLARE INTEGER i, min, pass\nDECLARE INTEGER x[] = [ ... ]\nFOR pass = 0 TO LENGTH(x) - 2\n   min = pass\n   FOR i = pass + 1 TO LENGTH(x) - 1\n      IF x[i] LT x[min] THEN\n         min = i\n      END IF\n   NEXT i\n   IF min NE pass THEN\n      EXCHANGE x[min], x[pass]\n   END IF\nNEXT pass\nEND\n```\n\nSelection Sort is faily easy to understand. For example, consider a one-dimensional unordered array of four integers: [18, 16, 90, -3], where integer 18 is located at index 0  and integer -3 is located at index 3. When requested to sort this array into  ascending order, the Selection Sort pseudocode performs the sort as follows:\n```\nPass 0                        Pass 1                        Pass 2\n======                        ======                        ======\n18  16  90  -3                -3  16  90  18                -3  16  90  18\n^                                 ^                                 ^\n|                                 |                                 |\nmin = 0                           min = 1                           min = 2\n\n18  16  90  -3                -3  16  90  18                -3  16  90  18\n    ^                                 ^                                 ^\n    |                                 |                                 |\n    16 < 18, min = 1                  90 > 16, min = 1                  18 < 90, min = 3\n                                                                    ^   ^\n18  16  90  -3                -3  16  90  18                        |   |\n        ^                                 ^                         -----\n        |                                 |                 -3  16  18  90\n        90 > 16, min = 1                  18 > 16, min = 1\n\n18  16  90  -3                               \n            ^   \n            |\n            -3 < 16 min = 3\n^           ^\n|           |\n------------- \n-3  16  90  18\n```\n\nSelection Sort has a time complexity of $O(n^2)$ comparisons and $O(n)$ exchanges. The algorithm offers quadratic performance in terms of comparisons and linear performance in terms of exchanges, which makes it somewhat more efficient than Bubble Sort.\n\nListing 4 shows the SelectionSort application in Java code.\n\n### Listing 4. A Java example with the Selection Sort algorithm\n```\npublic final class SelectionSort\n{\n   public static void main(String[] args)\n   {\n      // Validate command line arguments count.\n\n      if (args.length != 1)\n      {\n         System.err.println(\"usage: java SelectionSort integers\");\n         return;\n      }\n\n      // Read integers from first command-line argument. Return if integers \n      // could not be read.\n\n      int[] ints = readIntegers(args[0]);\n      if (ints == null)\n         return;\n\n      // Output integer array's length and number of inversions statistics to\n      // standard output device.\n\n      System.out.println(\"N = \" + ints.length);\n      int inversions = 0;\n      for (int i = 0; i < ints.length - 1; i++)\n         for (int j = i + 1; j < ints.length; j++)\n            if (ints[i] > ints[j])\n               inversions++;\n      System.out.println(\"I = \" + inversions);\n\n      // Output unsorted integer values to standard output, sort the array, \n      // and output sorted values to standard output.\n\n      dump(ints);\n      sort(ints);\n      dump(ints);\n   }\n\n   static void dump(int[] a)\n   {\n      for (int i = 0; i < a.length; i++)\n         System.out.print(a[i] + \" \");\n      System.out.print('\\n');\n   }\n\n   static int[] readIntegers(String s)\n   {\n      String[] tokens = s.split(\",\");\n      int[] integers = new int[tokens.length];\n      for (int i = 0; i < tokens.length; i++)\n         integers[i] = Integer.parseInt(tokens[i]);\n      return integers;\n    }\n\n   static void sort(int[] x)\n   {\n      for (int pass = 0; pass < x.length - 1; pass++)\n      {\n         int min = pass;\n\n         for (int i = pass + 1; i < x.length; i++)\n            if (x[i] < x[min])\n               min = i;\n\n         if (min != pass)\n         {\n            int temp = x[min];\n            x[min] = x[pass];\n            x[pass] = temp;\n         }\n      }\n   }\n}\n```\n\nCompile Listing 4 as follows:\n```bash\njavac SelectionSort.java\n```\n\nRun the resulting application as follows:\n```bash\njava SelectionSort \"18,16,90,-3\"\n```\n\nYou should oberve the following output:\n```\nN = 4\nI = 4\n18 16 90 -3\n-3 16 18 90\n```\n\n## The Insertion Sort algorithm\nThe Insertion Sort algorithm orders a one-dimensional array of $n$ daata items into ascending order or descending order. An outer loop makes $n - 1$ passes over the array. Each pass selects the next data item to be inserted into the appropriate position. It uses an inner loop to find this position, shifting data items to make room.\n\nInsertion Sort begins by dividing the data structure into sorted and unsorted sections. Initially, the sorted section contains the data item at index 0; hte unsorted section contains all other data ites. During the sort, each unsorted section data item is inserted into the proper position in the sorted section and the unsorted section shrinks (收缩) by on data item.\n\nHere is pseudocode for the Insertion Sort algorithm in a one-dimensinal array of integers, where you are doing an ascending sort:\n```\nDECLARE INTEGER a, i, j\nDECLARE INTEGER x[] = [ ... ]\nFOR i = 1 TO LENGTH(x) - 1\n   a = x[i]\n   j = i\n   WHILE j GT 0 AND x[j - 1] GT a\n      x[j] = x[j - 1]\n      j = j - 1\n   END WHILE\n   x[j] = a\nNEXT i\nEND\n```\n\nLike Bubble Sort, Insertion Sort is fairly easy to understand. For example, consider a one-dimensional unordered array of four integers: [18, 16, 90, -3], where integer 18 is located at index 0 and integer -3 is located at index 3. When instructed to sort this array into ascending order, the algorithm performs the sort as follows:\n```\ni = 1                 i = 2                 i = 3\n      =====                 =====                 =====\n18 | 16   90   -3     16   18 | 90   -3     16   18   90 | -3     -3   16   18   90\n     ^                          ^                          ^\n     |                          |                          | \n     a,j                        a,j                        a,j\n```\n\nThe sorted section appears on the left and initially consists of [18]. The unsorted section apprears on the right and initially consists of [16, 90, -3].\n\nInsertion Sort has a time complexity of $O(n)$ comparisons for the bast case (data is already sorted or nearly sorted) and $O(n^2)$ for the average and worst cases. The algorithm offers linear (best case) or quadratic (average/worst case) performance.\n\nListing 5 shows the source code for the InsertionSort application.\n\n### Listing 5. A Java example with the Insertion Sort algorithm\n```java\n{\n   public static void main(String[] args)\n   {\n      // Validate command line arguments count.\n\n      if (args.length != 1)\n      {\n         System.err.println(\"usage: java InsertionSort integers\");\n         return;\n      }\n\n      // Read integers from first command-line argument. Return if integers \n      // could not be read.\n\n      int[] ints = readIntegers(args[0]);\n      if (ints == null)\n         return;\n\n      // Output integer array's length and number of inversions statistics to\n      // standard output device.\n\n      System.out.println(\"N = \" + ints.length);\n      int inversions = 0;\n      for (int i = 0; i < ints.length - 1; i++)\n         for (int j = i + 1; j < ints.length; j++)\n            if (ints[i] > ints[j])\n               inversions++;\n      System.out.println(\"I = \" + inversions);\n\n      // Output unsorted integer values to standard output, sort the array, \n      // and output sorted values to standard output.\n\n      dump(ints);\n      sort(ints);\n      dump(ints);\n   }\n\n   static void dump(int[] a)\n   {\n      for (int i = 0; i < a.length; i++)\n         System.out.print(a[i] + \" \");\n      System.out.print('\\n');\n   }\n\n   static int[] readIntegers(String s)\n   {\n      String[] tokens = s.split(\",\");\n      int[] integers = new int[tokens.length];\n      for (int i = 0; i < tokens.length; i++)\n         integers[i] = Integer.parseInt(tokens[i]);\n      return integers;\n    }\n\n   static void sort(int[] x)\n   {\n      int j, a;\n\n      // For all integer values except the leftmost value ...\n\n      for (int i = 1; i < x.length; i++)\n      {\n         // Get integer value a.\n\n         a = x[i];\n\n         // Get index of a. This is the initial insert position, which is\n         // used if a is larger than all values in the sorted section.\n\n         j = i;\n\n         // While values exist to the left of a's insert position and the\n         // value immediately to the left of that insert position is\n         // numerically greater than a's value ...\n\n         while (j > 0 && x[j - 1] > a)\n         {\n            // Shift left value -- x[j - 1] -- one position to its right --\n            // x[j].\n\n            x[j] = x[j - 1];\n\n            // Update insert position to shifted value's original position\n            // (one position to the left).\n\n            j--;\n         }\n\n         // Insert a at insert position (which is either the initial insert\n         // position or the final insert position), where a is greater than\n         // or equal to all values to its left.\n\n         x[j] = a;\n      }\n   }\n}\n```\n\nCompile Listing 5 as follows:\n```bash\njavac InsertionSort.java\n```\n\nRun the resulting appilcaiton as follows:\n```bash\njava InsertionSort \"18,16,90,-3\"\n```\n\nYou should observe the following output:\n```\nN = 4\nI = 4\n18 16 90 -3\n-3 16 18 90\n```","source":"_posts/JavaWorld/What is an array and how are arrays represented in Java.md","raw":"---\ntitle: What is an array and how are arrays represented in Java\n\ntag:\n- Data structures and algorithms in Java\n\ncategories:\n- JavaWorld\n\nmathjax: true\n\n\ndate: 2020-04-06 00:00:02\n---\nAn array is a fundamental data strecture category, and a building block for more complex data structures. In this second tutorial in the data structures and algorithms series, you will learn how arrays are understood and used in Java programming. I'll start with the concept of an array and how arrays are represented in the Java language. I'll then introduce you to one-dimensional arrays and the tree ways that you can use them in your Java programs. Finally, we'll explore five algorithms used to search and sort one-dimentional arrays: Linear Search, Binary Search, Bubble Sort, Selection Sort, and Insertion Srot.\n\nNote that this tutorial builds on Data Structures and algorithms, Part 1, which introduced the theoretical side of data structures and the algorithms associated with them. That tutorial includes an in-depth discussion of algorithms and how to use space and time complexity factors to evaluate and select the most efficient algorithm for your Java program. We'll get much more hands-on in this turorial, because I assume you've already read Part 1.\n\n## What is an array?\nAn array is a sequence of elements where each element is associated with at least on index. An element is a group of memory locations that store a single data item. An index is a nonnegative integer, which is this case is used to uniquely identify an element. This relationship is simmilar to how a box number uniquely identifies a house on a given street.\n\nThe number of indexes associated with any element is the array's dimension. In this article, we'll be talking about one-dimensional arrays. The next article in this series introduces multi-dimensional arrays.\n\nJava supports arrays. Each element ocuupies the same number of bytes, and the exact (精确) number depends on the types of the element's data item. Furthermore, all elements share the same type.\n\n> Java arrays are not resizable\n> Java Arrays hava a fixed size, You cannot change an array's size after creating it. Instead, if you needed to change an array's size, you would create another array of the desired size an copy all desired elements from the original array to the new one.\n\n## One-dimensional arrays\nThe simplest kind of array has one dimension. A one-dimensional array associates each element with one index. One-dimensional arrays are used to store lists of data items. There are three techniques for creating one-dimensinal arrays in Java:\n- Use only an initializer\n- Use only keyword new\n- Use keyword new with an initiazlier\n\n### Creating a one-dimensinal array with only an initializer\nHere's the syntax to create a one-dimensional array using just an initializer:\n```java\n{ 'J', 'a', 'v', 'a' }\n```\n\nThe syntax that one-dimensional array is an optional, comma-separated (分开的) list of expressions appearing between open and close brace characters. Futhermore, all expressions must evaluate to compatible types. For example, in a two-element one-dimensional array of doubles, both elements might be of type double, or one element might be a double while the other element is a float or an integer type (such as int).\n\n### Creating a one-dimensional array with the keyword new\nThe keyword new allocates memory for an array and returns its reference. Here's the syntax for this approach:\n```java\nnew char[4]\n```\n\nThe syntax states that a one-dimensional array is a region of (positive) int_exper elements that share the same type. furthermore, all elements are zeroed, and are interpreted as 0, 0L, 0F, 0.0, false, null.\n\n### Creating a one-dimensional array with the new keyword and an initializer\nHere's the syntax to create a one-dimensional array using the keyword new with an initializer. As you seee, it blends the syntax from the previous two approaches:\n```java\nnew char[] { 'J', 'a', 'v', 'a' }\n```\n\nIn this case, because the number of elements can be determined from the comma-separated list of expressions, it isn't necessary (or allowed) to provide an int_expr between the square brackets.\n\nSomething to note is that the syntax fro creating an array with only an initializer is no different in effect from the syntax using an initializer an a keyword. The initializer-only syntax is an example of syntactic sugar, which means syntax that make the language sweeter, or easier, to use.\n\n## Array variables\nBy itself, a newly-created one-dimensional array is useless. Its reference must be assigned to an array variable of a compatibe type, either directly or via a method call. The following two lines of syntax how you would declare this variable.\n\nEach syntax declares an array variable that stores a reference to a one-dimensional array. Although you can use either syntax, placing the square brackets after type is preferred (推荐).\n\nExamples:\n```java\nchar[] name1 = { 'J', 'a', 'v', 'a' };\nchar[] name2 = new char[4];\nchar[] name3 = new char[] { 'J', 'a', 'v', 'a' };\noutput(new char[] { 2, 3 }); // output({ 2, 3 }); results in a compiler error\nstatic void output(char[] name)\n{\n   // ...\n}\n```\n\nIn the examples, name1, name2, name3 and name are array variables. The single pair of square brackets states that each stores references to one-dimensional arrays.\n\nKeyword char indicates that each element must store a value of char type. However, you can specify a non-char value if Java can convert it to char. For example, `char[] chars = {'A', 10}` is legal because 10 is a samll enough positive in (meaning that it fits into the char range of 0 through 65535) to be converted to a char. In constact, `char[] chars = {'A', 80000}` would be illegal.\n\nAn array variable is associated with a `.length` property that returns the length of the associated one-dimensional array as a positive int; for example, `name1.length` return 4.\n\nGiven an array variable, you can access any element in a one-dimensional array by specifying an expression that argees with the following syntax:\n```java\narray_var '[' index ']'\n```\n\nHere, index is a positive int that ranges from 0 (Java arrays are zero-based) to one less than the vlaue returned from the `.length` property.\n\nExample:\n```java\nchar ch = names[0]; // Get value.\nnames[1] = 'A';     // Set value.\n```\n\nIf you specify a negative index or an index that is greater than or equal to the value returned by the array variable's `.length` property, Java creates and throws a ArrayIndexOutOfBoundsException object.\n\n## Algorithms for searching and sorting\nIt is a very common task to search one-dimensional arrays for specify data items, and there are a variety of algorithms for doing it. One of the most popular search algorithms is called Linear Search. Another option is Binary Search, which is usually more performant but also more demanding: in order to use Binary Search, the array's data items must first be sorted, or ordered. Although not very performant, Bubble Sort, Selction Sort, and Insertion Sort are all simple algorithms for sorting a one-dimensional array. Each works well enough for shorter arrays.\n\n> Space complexity\n> Each of the algorithms discussed in this section - Linear Search, Binary Search, Bubble Sort, Selection Sort, and Insertion Sort -- exhibits a $O(1)$ (constant) space complexity for variable storage.\n\n## The Linear Search algorithm\nLinear Search searches a one--dimensional array of $n$ data items for a specific one. It functions by comparing data items from the lowest index to the highest until it finds the specified data item, or until there are no more data items to compare.\n\nThe following pseudocode expresses Linear Search used for a one-dimensional array of integers:\n```\nDECLARE INTEGER i, srch = ...\nDECLARE INTEGER x[] = [ ... ]\nFOR i = 0 TO LENGTH(x) - 1\n   IF x[i] EQ srch THEN\n      PRINT \"Found \", srch\n      END\n   END IF\nNEXT i\nPRINT \"Not found\", srch\nEND\n```\n\nConsider a one-dimensional unordered array of five integers [1, 4, 3, 2, 6], where integer 1 is located at index 0 and integer 6 is located at index 4. The pseudocode preforms the following tasks to find integer 3 in this array:\n1. Compare the integer at index 0 (1) with 3.\n1. Because there's no match, compare the integer at index 1 (4) with 3.\n1. Because there's still no match, compare the integer at index 2 (3) with 3.\n1. Because there's a match, print Found 3 and exit.\n\nLiear Search has a time complexity of $O(n)$, which is pronounced Big Oh of $n$. For $n$ data items, this algorithm requires a maximum of $n$ comparisons. On average, it performs $\\frac n2$ comparisons. Linear Search offers linear performance.\n\n> Efficiency\n> A downside of (负面) the Linear Search algorithm is that it is inefficient (效率低的). For an array of 4,000,000 data items, it would perform an average of 2,000,000 comparisons to find the specified item.\n\n## Explore Linear Search\nTo let you experiment with Linear Search, I've created the LinearSearch Java application in Listing 1.\n\n### Listing 1. A Java example with the Linear Search algorithm\n```java\n{\n   public static void main(String[] args)\n   {\n      // Validate command line arguments count.\n\n      if (args.length != 2)\n      {\n         System.err.println(\"usage: java LinearSearch integers integer\");\n         return;\n      }\n\n      // Read integers from first command-line argument. Return if integers \n      // could not be read.\n\n      int[] ints = readIntegers(args[0]);\n      if (ints == null)\n         return;\n\n      // Read search integer; NumberFormatException is thrown if the integer\n      // isn't valid.\n\n      int srchint = Integer.parseInt(args[1]);\n\n      // Perform the search and output the result.\n\n      System.out.println(srchint + (search(ints, srchint) ? \" found\"\n                                                          : \" not found\"));\n   }\n\n   private static int[] readIntegers(String s)\n   {\n      String[] tokens = s.split(\",\");\n      int[] integers = new int[tokens.length];\n      for (int i = 0; i < tokens.length; i++)\n         integers[i] = Integer.parseInt(tokens[i]);\n      return integers;\n   }\n\n   private static boolean search(int[] x, int srchint)\n   {\n      for (int i = 0; i < x.length; i++)\n         if (srchint == x[i])\n            return true;\n\n      return false;\n   }\n}\n```\n\nThe LinearSearch application reads a comma-separated list of integers from its first command-line argument. It searchs the array for the integer identified by the second command-line argument, and outputs a found/not found message.\n\n> Beware of the number format exception\n> Specify digits and +/- sign characters only in each command-line argument. Otherwise, this application (and the subsequent search and sort applicaitons) will create and throw a NumberFormatException object.\n\nTo experiment with this application, start by compiling Listing 1:\n```bash\njavac LinearSearch.java\n```\n\nNext, run the resulting application as follows:\n```bash\njava LinearSearch \"4,5,8\" 5\n```\n\nYou should observe the following output:\n```\n5 found\n```\n\nRun the resulting application a second time, as follows:\n```bash\njava LinearSearch \"4,5,8\" 15\n```\n\nYou should observe the following output:\n```\n15 not found\n```\n\n## The Binary Search algorithm\nThe Binary Search algorithm searches an ordered one-dimensional array of $n$ data items for a specific data item. This algorithm consists of the following steps:   \n1. Set low and high index variables to the indexes of the array's first and last data items, respectively (分别)\n1. Terminate if the low index is greater than the high index. The serached-for data item is not in the array\n1. Calculate the middle index by summing the low and high indexes and dividing the sum by 2\n1. Compare the searched-for data item with the middle-indexed data item. Terminate if they are the same. The searched-for data item has been foud\n1. If the searched-for data item is greater than the middle-indexed data item, set the low index to the middle index plus one and transfer execution to Step 2. Binary Search repeats the search in the upper half of the array\n1. The searched-for data item must be smaller than the middle-indexed data item, so set the high index to the middle index minus on and transfer execution to Step 2. Binary Search repeats the earch in the lower half of the array\n\nHere is pseudocode representing the Binary Search algorithm for a one-dimensional array of integers:\n```\nDECLARE INTEGER x[] = [ ... ]\nDECLARE INTEGER loIndex = 0\nDECLARE INTEGER hiIndex = LENGTH(x) - 1\nDECLARE INTEGER midIndex, srch = ...\nWHILE loIndex LE hiIndex\n   midIndex = (loIndex + hiIndex) / 2\n   IF srch GT x[midIndex] THEN\n      loIndex = midIndex + 1\n   ELSE\n   IF srch LT x[midIndex] THEN\n      hiIndex = midIndex - 1\n   ELSE\n      EXIT WHILE\n   END IF\nEND WHILE\nIF loIndex GT hiIndex THEN\n   PRINT srch, \" not found\"\nELSE\n   PRINT srch, \" found\"\nEND IF\nEND\n```\n\nBinary Search isn't hard to understand. For example, consider a one-dimensional ordered array of six integers [3, 4, 5, 6, 7, 8], where integer 3 is located at idnex 0 and integer 8 is located at index 5. The pseudocode does the following to find integer 6 in this array:\n1. Obtain the low index (0) and high index (5)\n1. Calculate the middle index: (0 + 5) / 2 = 2\n1. Because the integer at index 2 (5) is less than 6, set the low index to 2 + 1 = 3\n1. Calculate the middle index: (3 + 5) / 2 = 4\n1. Because the integer at idnex 4 (7) is greater than 6, set the high idnex to 4 - 1 = 3\n1. Calculate the middle index: (3 + 3) / 2 = 3\n1. Becuase the integer at index 3 (6) equals 6, print 3 found and exit\n\nBinary Search has a time complexity of $O(log_2n)$, which is pronounced Big Oh of log $n$ to the base 2. For $n$ data items, Binary Search required a maximum of $1 + log_2n$ comparisons, making this algorithm vastly more efficient than Linear Serach, in most cases. The algorithm offers logarithmic performance (for more about logarithmic performance, see Figure 3 int Part 1 of this series).\n\n> When Linear Search outperforms Bineary Search\n> Although Binary Search is typically more efficient than Linear Search, Binary Search isn't as efficient for short arrays. This was discovered by famous computer scientist Donald Knuth.\n\nListing 2 is a BinarySearch Java application that lets you experiment with Binary Search.\n\n### Listing 2. A Java example with the Binary Search algorithm\n```java\n{\n   public static void main(String[] args)\n   {\n      // Validate command line arguments count.\n\n      if (args.length != 2)\n      {\n         System.err.println(\"usage: java BinarySearch integers integer\");\n         return;\n      }\n\n      // Read integers from first command-line argument. Return if integers \n      // could not be read.\n\n      int[] ints = readIntegers(args[0]);\n      if (ints == null)\n         return;\n\n      // Read search integer; NumberFormatException is thrown if the integer\n      // isn't valid.\n\n      int srchint = Integer.parseInt(args[1]);\n\n      // Perform the search and output the result.\n\n      System.out.println(srchint + (search(ints, srchint) ? \" found\"\n                                                          : \" not found\"));\n   }\n\n   private static int[] readIntegers(String s)\n   {\n      String[] tokens = s.split(\",\");\n      int[] integers = new int[tokens.length];\n      for (int i = 0; i < tokens.length; i++)\n         integers[i] = Integer.parseInt(tokens[i]);\n      return integers;\n   }\n\n   private static boolean search(int[] x, int srchint)\n   {\n     int hiIndex = x.length - 1, loIndex = 0, midIndex;\n\n      while (loIndex <= hiIndex)\n      {\n         midIndex = (loIndex + hiIndex) / 2;\n         if (srchint > x[midIndex])\n            loIndex = midIndex + 1;\n         else\n         if (srchint < x[midIndex])\n            hiIndex = midIndex - 1;\n         else\n            return true;\n      }\n\n      return false;\n   }\n}\n```\n\nThe BinarySearch application reads a comma-separated list of integers from its first command-line argument. It searchs the array for the integer identified by the second command-line argument, and outputs a found/not found message.\n\n> A bug in Binary Search\n> Joshua Bloch (author of Effictive Java) discovered a bug in the Binary Search algorithm, which can lead to a thrown instance of the ArrayIndexOutOfBoundsException class in Java. This bug manifests itself for arrays whose lengths are $2^{30}$ (roughly one billion) or greater.\n\nCompile the code in Listing 2 as follows:\n```bash\njavac BinarySearch.java\n```\n\nRun the resulting application as follows:\n```bash\njava BinarySearch \"4,5,8\" 5\n```\n\nYou should observe the following output:\n```\n15 not found\n```\n\n## The Bubble Sort algorithm\nThe Bubble Sort algorithm orders a one-dimensional array of $n$ data items into ascending or descending order. An outer loop makes $n-1$ passes over the array. Each pass uses an inner loop to exchange data items such that the next smallest (ascending) or largest (descending) data item \"bubbles\" towrads the beginning of the array.\n\nThe \"Bubbling\" action occurs in the inner loop, where each iteration compares the pass-numbered data item with each successive data item. If a successor data item is smaller (ascending sort) or larger (descending sort) than the pass-numbered data item, the successor data item is exchanged with the pass-numbered data item. \n\nHere is pseudocode representing  Bubble Sort in a one-dimensional array of integers/ascending sort context:\n```\nDECLARE INTEGER i, pass\nDECLARE INTEGER x[] = [ ... ]\nFOR pass = 0 TO LENGTH(x) - 2\n   FOR i = LENGTH(x) - 1 DOWNTO pass + 1\n      IF x[i] LT x[pass] THEN // switch to > for descending sort\n         EXCHANGE x[i], x[pass]\n      END IF\n   NEXT i\nNEXT pass\nEND\n```\n\nBubble Sort is faily easy to understand. For example, consider a one-dimensional, unordered array of four integers: [18 16, 90, -3], where integer 18 is located at index 0 and integer -3 is located at index 3. When requested to sort this array into ascending order, Bubble Sort would execute as follow:\n```\nPass 0               Pass 1               Pass 2\n======               ======               ======\n18  16  90  -3       -3  16  90  18       -3  16  90  18\n^           ^            ^       ^                ^   ^\n|           |            |       |                |   |\n-------------            ---------                -----\n-3  16  90  18       -3  16  90  18       -3  16  18  90\n^       ^                ^   ^ \n|       |                |   |\n---------                -----\n-3  16  90  18       -3  16  90  18\n^   ^\n|   |\n-----\n-3  16  90  18\n```\n\nIn terms of comparisons and also in terms of exchanges, Bubble Sort has a time complexity of $O(n^2)$, which is pronounced \"Big Oh of $n$ squared\". Bubble Sort offers quadratic performance, which isn't a problem for shorter-length arrays -- espicially when you consider that Bubble Sort is easy to code. (See Part 1 for more about quadratic performance.)\n\nThe BubbleSort Java application in Listing lets you experiment with Bubble Sort.\n\n### Listing 3. A Java example with the Bubble Sort algorithm\n```java\n{\n   public static void main(String[] args) {\n      // Validate command line arguments count.\n      if (args.length != 1) {\n         System.err.println(\"usage: java BubbleSort integers\");\n         return;\n      }\n\n      // Read integers from first command-line argument. Return if integers could not be read.\n      int[] ints = readInteger(args[0]);\n      if (ints == null) {\n         return;\n      }\n\n      // Output integer array's length and number of inversions statistics to standard outpou device.\n      System.out.println(\"N = \" + ints.length);\n      int inversions = 0;\n      for (int i = 0; i < ints.length - 1; i++) {\n         for (int j = i + 1; j < ints.length; j++) {\n            if (int[i] > int[j]) {\n               inversions ++;\n            }\n         }\n      } \n      System.out.println(\"I = \" + inversions);\n\n      // Output unsorted integer values to standard output, sort the array, and output sorted values to standard output.\n      dum(ints);\n      sort(ints);\n      dump(intns);\n   }\n\n   private static int[] readIntegers(String s) {\n      String[] tokens = s.split(\",\");\n      int[] integers = new int[tokens.length];\n      for (int i = 0; i < tokens.length; i++)\n         integers[i] = Integer.parseInt(tokens[i]);\n      return integers;\n    }\n\n   private static void dump(int[] a) {\n      for (int i = 0; i < a.length; i++)\n         System.out.print(a[i] + \" \");\n      System.out.print('\\n');\n   }\n\n   private static void sort(int[] x) {\n         for (int pass = 0; pass < x.length - 1; pass++) {\n            for (int i = x.length -1; i > pass; i++) {\n               if (x[i] < x[pass]>) {\n                  int temp = x[i];\n                  x[i] = x[pass];\n                  x[pass] = temp;\n               }\n            }\n         }\n   }\n}\n```\n\nBubbleSort reads a comma-separated list of integers from its command-line argument. It outputs the array length, calculates and outputs the number of inversions (larger items to the left of smaller items in the unsorted array), outputs the unsorted array, sorts the array, and outputs the sorted array. (Selection Sort and Insertion Sort, which I'll introduce next, behave similary.)\n\nCompile Listing 3 as follows:\n```bash\njavac BubbleSort.java\n```\n\nRun the resulting application as follows:\n```bash\njava BubbleSort \"18,16,90,-3\"\n```\n\nYou should observe the following output:\n```\nN = 4\nI = 4\n18 16 90 -3\n-3 16 18 90\n```\n\n## The Selection Sort algorithm\nThe Selection Sort algorithm orders a one-dimensional array of $n$ data items into ascending order or descending order. An outer loop makes $n - 1$ passes over the array. Each pass uses an inner loop to find the next smallest (ascending sort) or lastest (descending sort) data item, which is exchanged with the pass-numbered data item.\n\nSelection Sort assumes that the data item at the pass-numbered index is the smallest (ascending sort) or the largest (descending sort) of the remaining data items. It searches the rest of the array for a data item that's smaller/larger than this data item, and performs an exchange at the end of the search when a smaller/larger data item is found.\n\nThe following pseudocode expresses Selection Sort in a one-dimensinal array of integers/ascending sort context:\n```\nDECLARE INTEGER i, min, pass\nDECLARE INTEGER x[] = [ ... ]\nFOR pass = 0 TO LENGTH(x) - 2\n   min = pass\n   FOR i = pass + 1 TO LENGTH(x) - 1\n      IF x[i] LT x[min] THEN\n         min = i\n      END IF\n   NEXT i\n   IF min NE pass THEN\n      EXCHANGE x[min], x[pass]\n   END IF\nNEXT pass\nEND\n```\n\nSelection Sort is faily easy to understand. For example, consider a one-dimensional unordered array of four integers: [18, 16, 90, -3], where integer 18 is located at index 0  and integer -3 is located at index 3. When requested to sort this array into  ascending order, the Selection Sort pseudocode performs the sort as follows:\n```\nPass 0                        Pass 1                        Pass 2\n======                        ======                        ======\n18  16  90  -3                -3  16  90  18                -3  16  90  18\n^                                 ^                                 ^\n|                                 |                                 |\nmin = 0                           min = 1                           min = 2\n\n18  16  90  -3                -3  16  90  18                -3  16  90  18\n    ^                                 ^                                 ^\n    |                                 |                                 |\n    16 < 18, min = 1                  90 > 16, min = 1                  18 < 90, min = 3\n                                                                    ^   ^\n18  16  90  -3                -3  16  90  18                        |   |\n        ^                                 ^                         -----\n        |                                 |                 -3  16  18  90\n        90 > 16, min = 1                  18 > 16, min = 1\n\n18  16  90  -3                               \n            ^   \n            |\n            -3 < 16 min = 3\n^           ^\n|           |\n------------- \n-3  16  90  18\n```\n\nSelection Sort has a time complexity of $O(n^2)$ comparisons and $O(n)$ exchanges. The algorithm offers quadratic performance in terms of comparisons and linear performance in terms of exchanges, which makes it somewhat more efficient than Bubble Sort.\n\nListing 4 shows the SelectionSort application in Java code.\n\n### Listing 4. A Java example with the Selection Sort algorithm\n```\npublic final class SelectionSort\n{\n   public static void main(String[] args)\n   {\n      // Validate command line arguments count.\n\n      if (args.length != 1)\n      {\n         System.err.println(\"usage: java SelectionSort integers\");\n         return;\n      }\n\n      // Read integers from first command-line argument. Return if integers \n      // could not be read.\n\n      int[] ints = readIntegers(args[0]);\n      if (ints == null)\n         return;\n\n      // Output integer array's length and number of inversions statistics to\n      // standard output device.\n\n      System.out.println(\"N = \" + ints.length);\n      int inversions = 0;\n      for (int i = 0; i < ints.length - 1; i++)\n         for (int j = i + 1; j < ints.length; j++)\n            if (ints[i] > ints[j])\n               inversions++;\n      System.out.println(\"I = \" + inversions);\n\n      // Output unsorted integer values to standard output, sort the array, \n      // and output sorted values to standard output.\n\n      dump(ints);\n      sort(ints);\n      dump(ints);\n   }\n\n   static void dump(int[] a)\n   {\n      for (int i = 0; i < a.length; i++)\n         System.out.print(a[i] + \" \");\n      System.out.print('\\n');\n   }\n\n   static int[] readIntegers(String s)\n   {\n      String[] tokens = s.split(\",\");\n      int[] integers = new int[tokens.length];\n      for (int i = 0; i < tokens.length; i++)\n         integers[i] = Integer.parseInt(tokens[i]);\n      return integers;\n    }\n\n   static void sort(int[] x)\n   {\n      for (int pass = 0; pass < x.length - 1; pass++)\n      {\n         int min = pass;\n\n         for (int i = pass + 1; i < x.length; i++)\n            if (x[i] < x[min])\n               min = i;\n\n         if (min != pass)\n         {\n            int temp = x[min];\n            x[min] = x[pass];\n            x[pass] = temp;\n         }\n      }\n   }\n}\n```\n\nCompile Listing 4 as follows:\n```bash\njavac SelectionSort.java\n```\n\nRun the resulting application as follows:\n```bash\njava SelectionSort \"18,16,90,-3\"\n```\n\nYou should oberve the following output:\n```\nN = 4\nI = 4\n18 16 90 -3\n-3 16 18 90\n```\n\n## The Insertion Sort algorithm\nThe Insertion Sort algorithm orders a one-dimensional array of $n$ daata items into ascending order or descending order. An outer loop makes $n - 1$ passes over the array. Each pass selects the next data item to be inserted into the appropriate position. It uses an inner loop to find this position, shifting data items to make room.\n\nInsertion Sort begins by dividing the data structure into sorted and unsorted sections. Initially, the sorted section contains the data item at index 0; hte unsorted section contains all other data ites. During the sort, each unsorted section data item is inserted into the proper position in the sorted section and the unsorted section shrinks (收缩) by on data item.\n\nHere is pseudocode for the Insertion Sort algorithm in a one-dimensinal array of integers, where you are doing an ascending sort:\n```\nDECLARE INTEGER a, i, j\nDECLARE INTEGER x[] = [ ... ]\nFOR i = 1 TO LENGTH(x) - 1\n   a = x[i]\n   j = i\n   WHILE j GT 0 AND x[j - 1] GT a\n      x[j] = x[j - 1]\n      j = j - 1\n   END WHILE\n   x[j] = a\nNEXT i\nEND\n```\n\nLike Bubble Sort, Insertion Sort is fairly easy to understand. For example, consider a one-dimensional unordered array of four integers: [18, 16, 90, -3], where integer 18 is located at index 0 and integer -3 is located at index 3. When instructed to sort this array into ascending order, the algorithm performs the sort as follows:\n```\ni = 1                 i = 2                 i = 3\n      =====                 =====                 =====\n18 | 16   90   -3     16   18 | 90   -3     16   18   90 | -3     -3   16   18   90\n     ^                          ^                          ^\n     |                          |                          | \n     a,j                        a,j                        a,j\n```\n\nThe sorted section appears on the left and initially consists of [18]. The unsorted section apprears on the right and initially consists of [16, 90, -3].\n\nInsertion Sort has a time complexity of $O(n)$ comparisons for the bast case (data is already sorted or nearly sorted) and $O(n^2)$ for the average and worst cases. The algorithm offers linear (best case) or quadratic (average/worst case) performance.\n\nListing 5 shows the source code for the InsertionSort application.\n\n### Listing 5. A Java example with the Insertion Sort algorithm\n```java\n{\n   public static void main(String[] args)\n   {\n      // Validate command line arguments count.\n\n      if (args.length != 1)\n      {\n         System.err.println(\"usage: java InsertionSort integers\");\n         return;\n      }\n\n      // Read integers from first command-line argument. Return if integers \n      // could not be read.\n\n      int[] ints = readIntegers(args[0]);\n      if (ints == null)\n         return;\n\n      // Output integer array's length and number of inversions statistics to\n      // standard output device.\n\n      System.out.println(\"N = \" + ints.length);\n      int inversions = 0;\n      for (int i = 0; i < ints.length - 1; i++)\n         for (int j = i + 1; j < ints.length; j++)\n            if (ints[i] > ints[j])\n               inversions++;\n      System.out.println(\"I = \" + inversions);\n\n      // Output unsorted integer values to standard output, sort the array, \n      // and output sorted values to standard output.\n\n      dump(ints);\n      sort(ints);\n      dump(ints);\n   }\n\n   static void dump(int[] a)\n   {\n      for (int i = 0; i < a.length; i++)\n         System.out.print(a[i] + \" \");\n      System.out.print('\\n');\n   }\n\n   static int[] readIntegers(String s)\n   {\n      String[] tokens = s.split(\",\");\n      int[] integers = new int[tokens.length];\n      for (int i = 0; i < tokens.length; i++)\n         integers[i] = Integer.parseInt(tokens[i]);\n      return integers;\n    }\n\n   static void sort(int[] x)\n   {\n      int j, a;\n\n      // For all integer values except the leftmost value ...\n\n      for (int i = 1; i < x.length; i++)\n      {\n         // Get integer value a.\n\n         a = x[i];\n\n         // Get index of a. This is the initial insert position, which is\n         // used if a is larger than all values in the sorted section.\n\n         j = i;\n\n         // While values exist to the left of a's insert position and the\n         // value immediately to the left of that insert position is\n         // numerically greater than a's value ...\n\n         while (j > 0 && x[j - 1] > a)\n         {\n            // Shift left value -- x[j - 1] -- one position to its right --\n            // x[j].\n\n            x[j] = x[j - 1];\n\n            // Update insert position to shifted value's original position\n            // (one position to the left).\n\n            j--;\n         }\n\n         // Insert a at insert position (which is either the initial insert\n         // position or the final insert position), where a is greater than\n         // or equal to all values to its left.\n\n         x[j] = a;\n      }\n   }\n}\n```\n\nCompile Listing 5 as follows:\n```bash\njavac InsertionSort.java\n```\n\nRun the resulting appilcaiton as follows:\n```bash\njava InsertionSort \"18,16,90,-3\"\n```\n\nYou should observe the following output:\n```\nN = 4\nI = 4\n18 16 90 -3\n-3 16 18 90\n```","slug":"JavaWorld/What is an array and how are arrays represented in Java","published":1,"updated":"2020-04-19T06:40:26.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3mda00czm33prwaovdyz","content":"<p>An array is a fundamental data strecture category, and a building block for more complex data structures. In this second tutorial in the data structures and algorithms series, you will learn how arrays are understood and used in Java programming. I’ll start with the concept of an array and how arrays are represented in the Java language. I’ll then introduce you to one-dimensional arrays and the tree ways that you can use them in your Java programs. Finally, we’ll explore five algorithms used to search and sort one-dimentional arrays: Linear Search, Binary Search, Bubble Sort, Selection Sort, and Insertion Srot.</p>\n<p>Note that this tutorial builds on Data Structures and algorithms, Part 1, which introduced the theoretical side of data structures and the algorithms associated with them. That tutorial includes an in-depth discussion of algorithms and how to use space and time complexity factors to evaluate and select the most efficient algorithm for your Java program. We’ll get much more hands-on in this turorial, because I assume you’ve already read Part 1.</p>\n<h2 id=\"What-is-an-array\"><a href=\"#What-is-an-array\" class=\"headerlink\" title=\"What is an array?\"></a>What is an array?</h2><p>An array is a sequence of elements where each element is associated with at least on index. An element is a group of memory locations that store a single data item. An index is a nonnegative integer, which is this case is used to uniquely identify an element. This relationship is simmilar to how a box number uniquely identifies a house on a given street.</p>\n<p>The number of indexes associated with any element is the array’s dimension. In this article, we’ll be talking about one-dimensional arrays. The next article in this series introduces multi-dimensional arrays.</p>\n<p>Java supports arrays. Each element ocuupies the same number of bytes, and the exact (精确) number depends on the types of the element’s data item. Furthermore, all elements share the same type.</p>\n<blockquote>\n<p>Java arrays are not resizable<br>Java Arrays hava a fixed size, You cannot change an array’s size after creating it. Instead, if you needed to change an array’s size, you would create another array of the desired size an copy all desired elements from the original array to the new one.</p>\n</blockquote>\n<h2 id=\"One-dimensional-arrays\"><a href=\"#One-dimensional-arrays\" class=\"headerlink\" title=\"One-dimensional arrays\"></a>One-dimensional arrays</h2><p>The simplest kind of array has one dimension. A one-dimensional array associates each element with one index. One-dimensional arrays are used to store lists of data items. There are three techniques for creating one-dimensinal arrays in Java:</p>\n<ul>\n<li>Use only an initializer</li>\n<li>Use only keyword new</li>\n<li>Use keyword new with an initiazlier</li>\n</ul>\n<h3 id=\"Creating-a-one-dimensinal-array-with-only-an-initializer\"><a href=\"#Creating-a-one-dimensinal-array-with-only-an-initializer\" class=\"headerlink\" title=\"Creating a one-dimensinal array with only an initializer\"></a>Creating a one-dimensinal array with only an initializer</h3><p>Here’s the syntax to create a one-dimensional array using just an initializer:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"string\">'J'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'a'</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>The syntax that one-dimensional array is an optional, comma-separated (分开的) list of expressions appearing between open and close brace characters. Futhermore, all expressions must evaluate to compatible types. For example, in a two-element one-dimensional array of doubles, both elements might be of type double, or one element might be a double while the other element is a float or an integer type (such as int).</p>\n<h3 id=\"Creating-a-one-dimensional-array-with-the-keyword-new\"><a href=\"#Creating-a-one-dimensional-array-with-the-keyword-new\" class=\"headerlink\" title=\"Creating a one-dimensional array with the keyword new\"></a>Creating a one-dimensional array with the keyword new</h3><p>The keyword new allocates memory for an array and returns its reference. Here’s the syntax for this approach:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure></p>\n<p>The syntax states that a one-dimensional array is a region of (positive) int_exper elements that share the same type. furthermore, all elements are zeroed, and are interpreted as 0, 0L, 0F, 0.0, false, null.</p>\n<h3 id=\"Creating-a-one-dimensional-array-with-the-new-keyword-and-an-initializer\"><a href=\"#Creating-a-one-dimensional-array-with-the-new-keyword-and-an-initializer\" class=\"headerlink\" title=\"Creating a one-dimensional array with the new keyword and an initializer\"></a>Creating a one-dimensional array with the new keyword and an initializer</h3><p>Here’s the syntax to create a one-dimensional array using the keyword new with an initializer. As you seee, it blends the syntax from the previous two approaches:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'J'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'a'</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>In this case, because the number of elements can be determined from the comma-separated list of expressions, it isn’t necessary (or allowed) to provide an int_expr between the square brackets.</p>\n<p>Something to note is that the syntax fro creating an array with only an initializer is no different in effect from the syntax using an initializer an a keyword. The initializer-only syntax is an example of syntactic sugar, which means syntax that make the language sweeter, or easier, to use.</p>\n<h2 id=\"Array-variables\"><a href=\"#Array-variables\" class=\"headerlink\" title=\"Array variables\"></a>Array variables</h2><p>By itself, a newly-created one-dimensional array is useless. Its reference must be assigned to an array variable of a compatibe type, either directly or via a method call. The following two lines of syntax how you would declare this variable.</p>\n<p>Each syntax declares an array variable that stores a reference to a one-dimensional array. Although you can use either syntax, placing the square brackets after type is preferred (推荐).</p>\n<p>Examples:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] name1 = &#123; <span class=\"string\">'J'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'a'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">char</span>[] name2 = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">char</span>[] name3 = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'J'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'a'</span> &#125;;</span><br><span class=\"line\">output(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;); <span class=\"comment\">// output(&#123; 2, 3 &#125;); results in a compiler error</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">output</span><span class=\"params\">(<span class=\"keyword\">char</span>[] name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In the examples, name1, name2, name3 and name are array variables. The single pair of square brackets states that each stores references to one-dimensional arrays.</p>\n<p>Keyword char indicates that each element must store a value of char type. However, you can specify a non-char value if Java can convert it to char. For example, <code>char[] chars = {&#39;A&#39;, 10}</code> is legal because 10 is a samll enough positive in (meaning that it fits into the char range of 0 through 65535) to be converted to a char. In constact, <code>char[] chars = {&#39;A&#39;, 80000}</code> would be illegal.</p>\n<p>An array variable is associated with a <code>.length</code> property that returns the length of the associated one-dimensional array as a positive int; for example, <code>name1.length</code> return 4.</p>\n<p>Given an array variable, you can access any element in a one-dimensional array by specifying an expression that argees with the following syntax:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_var <span class=\"string\">'['</span> index <span class=\"string\">']'</span></span><br></pre></td></tr></table></figure></p>\n<p>Here, index is a positive int that ranges from 0 (Java arrays are zero-based) to one less than the vlaue returned from the <code>.length</code> property.</p>\n<p>Example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> ch = names[<span class=\"number\">0</span>]; <span class=\"comment\">// Get value.</span></span><br><span class=\"line\">names[<span class=\"number\">1</span>] = <span class=\"string\">'A'</span>;     <span class=\"comment\">// Set value.</span></span><br></pre></td></tr></table></figure></p>\n<p>If you specify a negative index or an index that is greater than or equal to the value returned by the array variable’s <code>.length</code> property, Java creates and throws a ArrayIndexOutOfBoundsException object.</p>\n<h2 id=\"Algorithms-for-searching-and-sorting\"><a href=\"#Algorithms-for-searching-and-sorting\" class=\"headerlink\" title=\"Algorithms for searching and sorting\"></a>Algorithms for searching and sorting</h2><p>It is a very common task to search one-dimensional arrays for specify data items, and there are a variety of algorithms for doing it. One of the most popular search algorithms is called Linear Search. Another option is Binary Search, which is usually more performant but also more demanding: in order to use Binary Search, the array’s data items must first be sorted, or ordered. Although not very performant, Bubble Sort, Selction Sort, and Insertion Sort are all simple algorithms for sorting a one-dimensional array. Each works well enough for shorter arrays.</p>\n<blockquote>\n<p>Space complexity<br>Each of the algorithms discussed in this section - Linear Search, Binary Search, Bubble Sort, Selection Sort, and Insertion Sort — exhibits a $O(1)$ (constant) space complexity for variable storage.</p>\n</blockquote>\n<h2 id=\"The-Linear-Search-algorithm\"><a href=\"#The-Linear-Search-algorithm\" class=\"headerlink\" title=\"The Linear Search algorithm\"></a>The Linear Search algorithm</h2><p>Linear Search searches a one—dimensional array of $n$ data items for a specific one. It functions by comparing data items from the lowest index to the highest until it finds the specified data item, or until there are no more data items to compare.</p>\n<p>The following pseudocode expresses Linear Search used for a one-dimensional array of integers:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER i, srch = ...</span><br><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">FOR i = 0 TO LENGTH(x) - 1</span><br><span class=\"line\">   IF x[i] EQ srch THEN</span><br><span class=\"line\">      PRINT &quot;Found &quot;, srch</span><br><span class=\"line\">      END</span><br><span class=\"line\">   END IF</span><br><span class=\"line\">NEXT i</span><br><span class=\"line\">PRINT &quot;Not found&quot;, srch</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Consider a one-dimensional unordered array of five integers [1, 4, 3, 2, 6], where integer 1 is located at index 0 and integer 6 is located at index 4. The pseudocode preforms the following tasks to find integer 3 in this array:</p>\n<ol>\n<li>Compare the integer at index 0 (1) with 3.</li>\n<li>Because there’s no match, compare the integer at index 1 (4) with 3.</li>\n<li>Because there’s still no match, compare the integer at index 2 (3) with 3.</li>\n<li>Because there’s a match, print Found 3 and exit.</li>\n</ol>\n<p>Liear Search has a time complexity of $O(n)$, which is pronounced Big Oh of $n$. For $n$ data items, this algorithm requires a maximum of $n$ comparisons. On average, it performs $\\frac n2$ comparisons. Linear Search offers linear performance.</p>\n<blockquote>\n<p>Efficiency<br>A downside of (负面) the Linear Search algorithm is that it is inefficient (效率低的). For an array of 4,000,000 data items, it would perform an average of 2,000,000 comparisons to find the specified item.</p>\n</blockquote>\n<h2 id=\"Explore-Linear-Search\"><a href=\"#Explore-Linear-Search\" class=\"headerlink\" title=\"Explore Linear Search\"></a>Explore Linear Search</h2><p>To let you experiment with Linear Search, I’ve created the LinearSearch Java application in Listing 1.</p>\n<h3 id=\"Listing-1-A-Java-example-with-the-Linear-Search-algorithm\"><a href=\"#Listing-1-A-Java-example-with-the-Linear-Search-algorithm\" class=\"headerlink\" title=\"Listing 1. A Java example with the Linear Search algorithm\"></a>Listing 1. A Java example with the Linear Search algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Validate command line arguments count.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args.length != <span class=\"number\">2</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"usage: java LinearSearch integers integer\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read integers from first command-line argument. Return if integers </span></span><br><span class=\"line\">      <span class=\"comment\">// could not be read.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] ints = readIntegers(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ints == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read search integer; NumberFormatException is thrown if the integer</span></span><br><span class=\"line\">      <span class=\"comment\">// isn't valid.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> srchint = Integer.parseInt(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Perform the search and output the result.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(srchint + (search(ints, srchint) ? <span class=\"string\">\" found\"</span></span><br><span class=\"line\">                                                          : <span class=\"string\">\" not found\"</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] readIntegers(String s)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      String[] tokens = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] integers = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[tokens.length];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tokens.length; i++)</span><br><span class=\"line\">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> integers;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, <span class=\"keyword\">int</span> srchint)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (srchint == x[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The LinearSearch application reads a comma-separated list of integers from its first command-line argument. It searchs the array for the integer identified by the second command-line argument, and outputs a found/not found message.</p>\n<blockquote>\n<p>Beware of the number format exception<br>Specify digits and +/- sign characters only in each command-line argument. Otherwise, this application (and the subsequent search and sort applicaitons) will create and throw a NumberFormatException object.</p>\n</blockquote>\n<p>To experiment with this application, start by compiling Listing 1:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac LinearSearch.java</span><br></pre></td></tr></table></figure></p>\n<p>Next, run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LinearSearch <span class=\"string\">\"4,5,8\"</span> 5</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 found</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application a second time, as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LinearSearch <span class=\"string\">\"4,5,8\"</span> 15</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15 not found</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"The-Binary-Search-algorithm\"><a href=\"#The-Binary-Search-algorithm\" class=\"headerlink\" title=\"The Binary Search algorithm\"></a>The Binary Search algorithm</h2><p>The Binary Search algorithm searches an ordered one-dimensional array of $n$ data items for a specific data item. This algorithm consists of the following steps:   </p>\n<ol>\n<li>Set low and high index variables to the indexes of the array’s first and last data items, respectively (分别)</li>\n<li>Terminate if the low index is greater than the high index. The serached-for data item is not in the array</li>\n<li>Calculate the middle index by summing the low and high indexes and dividing the sum by 2</li>\n<li>Compare the searched-for data item with the middle-indexed data item. Terminate if they are the same. The searched-for data item has been foud</li>\n<li>If the searched-for data item is greater than the middle-indexed data item, set the low index to the middle index plus one and transfer execution to Step 2. Binary Search repeats the search in the upper half of the array</li>\n<li>The searched-for data item must be smaller than the middle-indexed data item, so set the high index to the middle index minus on and transfer execution to Step 2. Binary Search repeats the earch in the lower half of the array</li>\n</ol>\n<p>Here is pseudocode representing the Binary Search algorithm for a one-dimensional array of integers:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">DECLARE INTEGER loIndex = 0</span><br><span class=\"line\">DECLARE INTEGER hiIndex = LENGTH(x) - 1</span><br><span class=\"line\">DECLARE INTEGER midIndex, srch = ...</span><br><span class=\"line\">WHILE loIndex LE hiIndex</span><br><span class=\"line\">   midIndex = (loIndex + hiIndex) / 2</span><br><span class=\"line\">   IF srch GT x[midIndex] THEN</span><br><span class=\"line\">      loIndex = midIndex + 1</span><br><span class=\"line\">   ELSE</span><br><span class=\"line\">   IF srch LT x[midIndex] THEN</span><br><span class=\"line\">      hiIndex = midIndex - 1</span><br><span class=\"line\">   ELSE</span><br><span class=\"line\">      EXIT WHILE</span><br><span class=\"line\">   END IF</span><br><span class=\"line\">END WHILE</span><br><span class=\"line\">IF loIndex GT hiIndex THEN</span><br><span class=\"line\">   PRINT srch, &quot; not found&quot;</span><br><span class=\"line\">ELSE</span><br><span class=\"line\">   PRINT srch, &quot; found&quot;</span><br><span class=\"line\">END IF</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Binary Search isn’t hard to understand. For example, consider a one-dimensional ordered array of six integers [3, 4, 5, 6, 7, 8], where integer 3 is located at idnex 0 and integer 8 is located at index 5. The pseudocode does the following to find integer 6 in this array:</p>\n<ol>\n<li>Obtain the low index (0) and high index (5)</li>\n<li>Calculate the middle index: (0 + 5) / 2 = 2</li>\n<li>Because the integer at index 2 (5) is less than 6, set the low index to 2 + 1 = 3</li>\n<li>Calculate the middle index: (3 + 5) / 2 = 4</li>\n<li>Because the integer at idnex 4 (7) is greater than 6, set the high idnex to 4 - 1 = 3</li>\n<li>Calculate the middle index: (3 + 3) / 2 = 3</li>\n<li>Becuase the integer at index 3 (6) equals 6, print 3 found and exit</li>\n</ol>\n<p>Binary Search has a time complexity of $O(log_2n)$, which is pronounced Big Oh of log $n$ to the base 2. For $n$ data items, Binary Search required a maximum of $1 + log_2n$ comparisons, making this algorithm vastly more efficient than Linear Serach, in most cases. The algorithm offers logarithmic performance (for more about logarithmic performance, see Figure 3 int Part 1 of this series).</p>\n<blockquote>\n<p>When Linear Search outperforms Bineary Search<br>Although Binary Search is typically more efficient than Linear Search, Binary Search isn’t as efficient for short arrays. This was discovered by famous computer scientist Donald Knuth.</p>\n</blockquote>\n<p>Listing 2 is a BinarySearch Java application that lets you experiment with Binary Search.</p>\n<h3 id=\"Listing-2-A-Java-example-with-the-Binary-Search-algorithm\"><a href=\"#Listing-2-A-Java-example-with-the-Binary-Search-algorithm\" class=\"headerlink\" title=\"Listing 2. A Java example with the Binary Search algorithm\"></a>Listing 2. A Java example with the Binary Search algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Validate command line arguments count.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args.length != <span class=\"number\">2</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"usage: java BinarySearch integers integer\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read integers from first command-line argument. Return if integers </span></span><br><span class=\"line\">      <span class=\"comment\">// could not be read.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] ints = readIntegers(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ints == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read search integer; NumberFormatException is thrown if the integer</span></span><br><span class=\"line\">      <span class=\"comment\">// isn't valid.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> srchint = Integer.parseInt(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Perform the search and output the result.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(srchint + (search(ints, srchint) ? <span class=\"string\">\" found\"</span></span><br><span class=\"line\">                                                          : <span class=\"string\">\" not found\"</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] readIntegers(String s)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      String[] tokens = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] integers = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[tokens.length];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tokens.length; i++)</span><br><span class=\"line\">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> integers;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, <span class=\"keyword\">int</span> srchint)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> hiIndex = x.length - <span class=\"number\">1</span>, loIndex = <span class=\"number\">0</span>, midIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (loIndex &lt;= hiIndex)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         midIndex = (loIndex + hiIndex) / <span class=\"number\">2</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (srchint &gt; x[midIndex])</span><br><span class=\"line\">            loIndex = midIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (srchint &lt; x[midIndex])</span><br><span class=\"line\">            hiIndex = midIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The BinarySearch application reads a comma-separated list of integers from its first command-line argument. It searchs the array for the integer identified by the second command-line argument, and outputs a found/not found message.</p>\n<blockquote>\n<p>A bug in Binary Search<br>Joshua Bloch (author of Effictive Java) discovered a bug in the Binary Search algorithm, which can lead to a thrown instance of the ArrayIndexOutOfBoundsException class in Java. This bug manifests itself for arrays whose lengths are $2^{30}$ (roughly one billion) or greater.</p>\n</blockquote>\n<p>Compile the code in Listing 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac BinarySearch.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java BinarySearch <span class=\"string\">\"4,5,8\"</span> 5</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15 not found</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"The-Bubble-Sort-algorithm\"><a href=\"#The-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"The Bubble Sort algorithm\"></a>The Bubble Sort algorithm</h2><p>The Bubble Sort algorithm orders a one-dimensional array of $n$ data items into ascending or descending order. An outer loop makes $n-1$ passes over the array. Each pass uses an inner loop to exchange data items such that the next smallest (ascending) or largest (descending) data item “bubbles” towrads the beginning of the array.</p>\n<p>The “Bubbling” action occurs in the inner loop, where each iteration compares the pass-numbered data item with each successive data item. If a successor data item is smaller (ascending sort) or larger (descending sort) than the pass-numbered data item, the successor data item is exchanged with the pass-numbered data item. </p>\n<p>Here is pseudocode representing  Bubble Sort in a one-dimensional array of integers/ascending sort context:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER i, pass</span><br><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">FOR pass = 0 TO LENGTH(x) - 2</span><br><span class=\"line\">   FOR i = LENGTH(x) - 1 DOWNTO pass + 1</span><br><span class=\"line\">      IF x[i] LT x[pass] THEN // switch to &gt; for descending sort</span><br><span class=\"line\">         EXCHANGE x[i], x[pass]</span><br><span class=\"line\">      END IF</span><br><span class=\"line\">   NEXT i</span><br><span class=\"line\">NEXT pass</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Bubble Sort is faily easy to understand. For example, consider a one-dimensional, unordered array of four integers: [18 16, 90, -3], where integer 18 is located at index 0 and integer -3 is located at index 3. When requested to sort this array into ascending order, Bubble Sort would execute as follow:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pass 0               Pass 1               Pass 2</span><br><span class=\"line\">======               ======               ======</span><br><span class=\"line\">18  16  90  -3       -3  16  90  18       -3  16  90  18</span><br><span class=\"line\">^           ^            ^       ^                ^   ^</span><br><span class=\"line\">|           |            |       |                |   |</span><br><span class=\"line\">-------------            ---------                -----</span><br><span class=\"line\">-3  16  90  18       -3  16  90  18       -3  16  18  90</span><br><span class=\"line\">^       ^                ^   ^ </span><br><span class=\"line\">|       |                |   |</span><br><span class=\"line\">---------                -----</span><br><span class=\"line\">-3  16  90  18       -3  16  90  18</span><br><span class=\"line\">^   ^</span><br><span class=\"line\">|   |</span><br><span class=\"line\">-----</span><br><span class=\"line\">-3  16  90  18</span><br></pre></td></tr></table></figure></p>\n<p>In terms of comparisons and also in terms of exchanges, Bubble Sort has a time complexity of $O(n^2)$, which is pronounced “Big Oh of $n$ squared”. Bubble Sort offers quadratic performance, which isn’t a problem for shorter-length arrays — espicially when you consider that Bubble Sort is easy to code. (See Part 1 for more about quadratic performance.)</p>\n<p>The BubbleSort Java application in Listing lets you experiment with Bubble Sort.</p>\n<h3 id=\"Listing-3-A-Java-example-with-the-Bubble-Sort-algorithm\"><a href=\"#Listing-3-A-Java-example-with-the-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"Listing 3. A Java example with the Bubble Sort algorithm\"></a>Listing 3. A Java example with the Bubble Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Validate command line arguments count.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args.length != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"usage: java BubbleSort integers\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read integers from first command-line argument. Return if integers could not be read.</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] ints = readInteger(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ints == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Output integer array's length and number of inversions statistics to standard outpou device.</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"N = \"</span> + ints.length);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> inversions = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ints.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; ints.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">int</span>[i] &gt; <span class=\"keyword\">int</span>[j]) &#123;</span><br><span class=\"line\">               inversions ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"I = \"</span> + inversions);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Output unsorted integer values to standard output, sort the array, and output sorted values to standard output.</span></span><br><span class=\"line\">      dum(ints);</span><br><span class=\"line\">      sort(ints);</span><br><span class=\"line\">      dump(intns);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] readIntegers(String s) &#123;</span><br><span class=\"line\">      String[] tokens = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] integers = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[tokens.length];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tokens.length; i++)</span><br><span class=\"line\">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> integers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">         System.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.print(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pass = <span class=\"number\">0</span>; pass &lt; x.length - <span class=\"number\">1</span>; pass++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.length -<span class=\"number\">1</span>; i &gt; pass; i++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (x[i] &lt; x[pass]&gt;) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">int</span> temp = x[i];</span><br><span class=\"line\">                  x[i] = x[pass];</span><br><span class=\"line\">                  x[pass] = temp;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BubbleSort reads a comma-separated list of integers from its command-line argument. It outputs the array length, calculates and outputs the number of inversions (larger items to the left of smaller items in the unsorted array), outputs the unsorted array, sorts the array, and outputs the sorted array. (Selection Sort and Insertion Sort, which I’ll introduce next, behave similary.)</p>\n<p>Compile Listing 3 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac BubbleSort.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java BubbleSort <span class=\"string\">\"18,16,90,-3\"</span></span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N = 4</span><br><span class=\"line\">I = 4</span><br><span class=\"line\">18 16 90 -3</span><br><span class=\"line\">-3 16 18 90</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"The-Selection-Sort-algorithm\"><a href=\"#The-Selection-Sort-algorithm\" class=\"headerlink\" title=\"The Selection Sort algorithm\"></a>The Selection Sort algorithm</h2><p>The Selection Sort algorithm orders a one-dimensional array of $n$ data items into ascending order or descending order. An outer loop makes $n - 1$ passes over the array. Each pass uses an inner loop to find the next smallest (ascending sort) or lastest (descending sort) data item, which is exchanged with the pass-numbered data item.</p>\n<p>Selection Sort assumes that the data item at the pass-numbered index is the smallest (ascending sort) or the largest (descending sort) of the remaining data items. It searches the rest of the array for a data item that’s smaller/larger than this data item, and performs an exchange at the end of the search when a smaller/larger data item is found.</p>\n<p>The following pseudocode expresses Selection Sort in a one-dimensinal array of integers/ascending sort context:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER i, min, pass</span><br><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">FOR pass = 0 TO LENGTH(x) - 2</span><br><span class=\"line\">   min = pass</span><br><span class=\"line\">   FOR i = pass + 1 TO LENGTH(x) - 1</span><br><span class=\"line\">      IF x[i] LT x[min] THEN</span><br><span class=\"line\">         min = i</span><br><span class=\"line\">      END IF</span><br><span class=\"line\">   NEXT i</span><br><span class=\"line\">   IF min NE pass THEN</span><br><span class=\"line\">      EXCHANGE x[min], x[pass]</span><br><span class=\"line\">   END IF</span><br><span class=\"line\">NEXT pass</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Selection Sort is faily easy to understand. For example, consider a one-dimensional unordered array of four integers: [18, 16, 90, -3], where integer 18 is located at index 0  and integer -3 is located at index 3. When requested to sort this array into  ascending order, the Selection Sort pseudocode performs the sort as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pass 0                        Pass 1                        Pass 2</span><br><span class=\"line\">======                        ======                        ======</span><br><span class=\"line\">18  16  90  -3                -3  16  90  18                -3  16  90  18</span><br><span class=\"line\">^                                 ^                                 ^</span><br><span class=\"line\">|                                 |                                 |</span><br><span class=\"line\">min = 0                           min = 1                           min = 2</span><br><span class=\"line\"></span><br><span class=\"line\">18  16  90  -3                -3  16  90  18                -3  16  90  18</span><br><span class=\"line\">    ^                                 ^                                 ^</span><br><span class=\"line\">    |                                 |                                 |</span><br><span class=\"line\">    16 &lt; 18, min = 1                  90 &gt; 16, min = 1                  18 &lt; 90, min = 3</span><br><span class=\"line\">                                                                    ^   ^</span><br><span class=\"line\">18  16  90  -3                -3  16  90  18                        |   |</span><br><span class=\"line\">        ^                                 ^                         -----</span><br><span class=\"line\">        |                                 |                 -3  16  18  90</span><br><span class=\"line\">        90 &gt; 16, min = 1                  18 &gt; 16, min = 1</span><br><span class=\"line\"></span><br><span class=\"line\">18  16  90  -3                               </span><br><span class=\"line\">            ^   </span><br><span class=\"line\">            |</span><br><span class=\"line\">            -3 &lt; 16 min = 3</span><br><span class=\"line\">^           ^</span><br><span class=\"line\">|           |</span><br><span class=\"line\">------------- </span><br><span class=\"line\">-3  16  90  18</span><br></pre></td></tr></table></figure></p>\n<p>Selection Sort has a time complexity of $O(n^2)$ comparisons and $O(n)$ exchanges. The algorithm offers quadratic performance in terms of comparisons and linear performance in terms of exchanges, which makes it somewhat more efficient than Bubble Sort.</p>\n<p>Listing 4 shows the SelectionSort application in Java code.</p>\n<h3 id=\"Listing-4-A-Java-example-with-the-Selection-Sort-algorithm\"><a href=\"#Listing-4-A-Java-example-with-the-Selection-Sort-algorithm\" class=\"headerlink\" title=\"Listing 4. A Java example with the Selection Sort algorithm\"></a>Listing 4. A Java example with the Selection Sort algorithm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class SelectionSort</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   public static void main(String[] args)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      // Validate command line arguments count.</span><br><span class=\"line\"></span><br><span class=\"line\">      if (args.length != 1)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(&quot;usage: java SelectionSort integers&quot;);</span><br><span class=\"line\">         return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // Read integers from first command-line argument. Return if integers </span><br><span class=\"line\">      // could not be read.</span><br><span class=\"line\"></span><br><span class=\"line\">      int[] ints = readIntegers(args[0]);</span><br><span class=\"line\">      if (ints == null)</span><br><span class=\"line\">         return;</span><br><span class=\"line\"></span><br><span class=\"line\">      // Output integer array&apos;s length and number of inversions statistics to</span><br><span class=\"line\">      // standard output device.</span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(&quot;N = &quot; + ints.length);</span><br><span class=\"line\">      int inversions = 0;</span><br><span class=\"line\">      for (int i = 0; i &lt; ints.length - 1; i++)</span><br><span class=\"line\">         for (int j = i + 1; j &lt; ints.length; j++)</span><br><span class=\"line\">            if (ints[i] &gt; ints[j])</span><br><span class=\"line\">               inversions++;</span><br><span class=\"line\">      System.out.println(&quot;I = &quot; + inversions);</span><br><span class=\"line\"></span><br><span class=\"line\">      // Output unsorted integer values to standard output, sort the array, </span><br><span class=\"line\">      // and output sorted values to standard output.</span><br><span class=\"line\"></span><br><span class=\"line\">      dump(ints);</span><br><span class=\"line\">      sort(ints);</span><br><span class=\"line\">      dump(ints);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   static void dump(int[] a)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      for (int i = 0; i &lt; a.length; i++)</span><br><span class=\"line\">         System.out.print(a[i] + &quot; &quot;);</span><br><span class=\"line\">      System.out.print(&apos;\\n&apos;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   static int[] readIntegers(String s)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      String[] tokens = s.split(&quot;,&quot;);</span><br><span class=\"line\">      int[] integers = new int[tokens.length];</span><br><span class=\"line\">      for (int i = 0; i &lt; tokens.length; i++)</span><br><span class=\"line\">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class=\"line\">      return integers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   static void sort(int[] x)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      for (int pass = 0; pass &lt; x.length - 1; pass++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         int min = pass;</span><br><span class=\"line\"></span><br><span class=\"line\">         for (int i = pass + 1; i &lt; x.length; i++)</span><br><span class=\"line\">            if (x[i] &lt; x[min])</span><br><span class=\"line\">               min = i;</span><br><span class=\"line\"></span><br><span class=\"line\">         if (min != pass)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            int temp = x[min];</span><br><span class=\"line\">            x[min] = x[pass];</span><br><span class=\"line\">            x[pass] = temp;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Compile Listing 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac SelectionSort.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java SelectionSort <span class=\"string\">\"18,16,90,-3\"</span></span><br></pre></td></tr></table></figure></p>\n<p>You should oberve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N = 4</span><br><span class=\"line\">I = 4</span><br><span class=\"line\">18 16 90 -3</span><br><span class=\"line\">-3 16 18 90</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"The-Insertion-Sort-algorithm\"><a href=\"#The-Insertion-Sort-algorithm\" class=\"headerlink\" title=\"The Insertion Sort algorithm\"></a>The Insertion Sort algorithm</h2><p>The Insertion Sort algorithm orders a one-dimensional array of $n$ daata items into ascending order or descending order. An outer loop makes $n - 1$ passes over the array. Each pass selects the next data item to be inserted into the appropriate position. It uses an inner loop to find this position, shifting data items to make room.</p>\n<p>Insertion Sort begins by dividing the data structure into sorted and unsorted sections. Initially, the sorted section contains the data item at index 0; hte unsorted section contains all other data ites. During the sort, each unsorted section data item is inserted into the proper position in the sorted section and the unsorted section shrinks (收缩) by on data item.</p>\n<p>Here is pseudocode for the Insertion Sort algorithm in a one-dimensinal array of integers, where you are doing an ascending sort:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER a, i, j</span><br><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">FOR i = 1 TO LENGTH(x) - 1</span><br><span class=\"line\">   a = x[i]</span><br><span class=\"line\">   j = i</span><br><span class=\"line\">   WHILE j GT 0 AND x[j - 1] GT a</span><br><span class=\"line\">      x[j] = x[j - 1]</span><br><span class=\"line\">      j = j - 1</span><br><span class=\"line\">   END WHILE</span><br><span class=\"line\">   x[j] = a</span><br><span class=\"line\">NEXT i</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Like Bubble Sort, Insertion Sort is fairly easy to understand. For example, consider a one-dimensional unordered array of four integers: [18, 16, 90, -3], where integer 18 is located at index 0 and integer -3 is located at index 3. When instructed to sort this array into ascending order, the algorithm performs the sort as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1                 i = 2                 i = 3</span><br><span class=\"line\">      =====                 =====                 =====</span><br><span class=\"line\">18 | 16   90   -3     16   18 | 90   -3     16   18   90 | -3     -3   16   18   90</span><br><span class=\"line\">     ^                          ^                          ^</span><br><span class=\"line\">     |                          |                          | </span><br><span class=\"line\">     a,j                        a,j                        a,j</span><br></pre></td></tr></table></figure></p>\n<p>The sorted section appears on the left and initially consists of [18]. The unsorted section apprears on the right and initially consists of [16, 90, -3].</p>\n<p>Insertion Sort has a time complexity of $O(n)$ comparisons for the bast case (data is already sorted or nearly sorted) and $O(n^2)$ for the average and worst cases. The algorithm offers linear (best case) or quadratic (average/worst case) performance.</p>\n<p>Listing 5 shows the source code for the InsertionSort application.</p>\n<h3 id=\"Listing-5-A-Java-example-with-the-Insertion-Sort-algorithm\"><a href=\"#Listing-5-A-Java-example-with-the-Insertion-Sort-algorithm\" class=\"headerlink\" title=\"Listing 5. A Java example with the Insertion Sort algorithm\"></a>Listing 5. A Java example with the Insertion Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Validate command line arguments count.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args.length != <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"usage: java InsertionSort integers\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read integers from first command-line argument. Return if integers </span></span><br><span class=\"line\">      <span class=\"comment\">// could not be read.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] ints = readIntegers(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ints == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Output integer array's length and number of inversions statistics to</span></span><br><span class=\"line\">      <span class=\"comment\">// standard output device.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"N = \"</span> + ints.length);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> inversions = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ints.length - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; ints.length; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ints[i] &gt; ints[j])</span><br><span class=\"line\">               inversions++;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"I = \"</span> + inversions);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Output unsorted integer values to standard output, sort the array, </span></span><br><span class=\"line\">      <span class=\"comment\">// and output sorted values to standard output.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      dump(ints);</span><br><span class=\"line\">      sort(ints);</span><br><span class=\"line\">      dump(ints);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">         System.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.print(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] readIntegers(String s)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      String[] tokens = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] integers = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[tokens.length];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tokens.length; i++)</span><br><span class=\"line\">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> integers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> j, a;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// For all integer values except the leftmost value ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; x.length; i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Get integer value a.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         a = x[i];</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Get index of a. This is the initial insert position, which is</span></span><br><span class=\"line\">         <span class=\"comment\">// used if a is larger than all values in the sorted section.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         j = i;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// While values exist to the left of a's insert position and the</span></span><br><span class=\"line\">         <span class=\"comment\">// value immediately to the left of that insert position is</span></span><br><span class=\"line\">         <span class=\"comment\">// numerically greater than a's value ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; x[j - <span class=\"number\">1</span>] &gt; a)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Shift left value -- x[j - 1] -- one position to its right --</span></span><br><span class=\"line\">            <span class=\"comment\">// x[j].</span></span><br><span class=\"line\"></span><br><span class=\"line\">            x[j] = x[j - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Update insert position to shifted value's original position</span></span><br><span class=\"line\">            <span class=\"comment\">// (one position to the left).</span></span><br><span class=\"line\"></span><br><span class=\"line\">            j--;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Insert a at insert position (which is either the initial insert</span></span><br><span class=\"line\">         <span class=\"comment\">// position or the final insert position), where a is greater than</span></span><br><span class=\"line\">         <span class=\"comment\">// or equal to all values to its left.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         x[j] = a;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Compile Listing 5 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac InsertionSort.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting appilcaiton as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java InsertionSort <span class=\"string\">\"18,16,90,-3\"</span></span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N = 4</span><br><span class=\"line\">I = 4</span><br><span class=\"line\">18 16 90 -3</span><br><span class=\"line\">-3 16 18 90</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>An array is a fundamental data strecture category, and a building block for more complex data structures. In this second tutorial in the data structures and algorithms series, you will learn how arrays are understood and used in Java programming. I’ll start with the concept of an array and how arrays are represented in the Java language. I’ll then introduce you to one-dimensional arrays and the tree ways that you can use them in your Java programs. Finally, we’ll explore five algorithms used to search and sort one-dimentional arrays: Linear Search, Binary Search, Bubble Sort, Selection Sort, and Insertion Srot.</p>\n<p>Note that this tutorial builds on Data Structures and algorithms, Part 1, which introduced the theoretical side of data structures and the algorithms associated with them. That tutorial includes an in-depth discussion of algorithms and how to use space and time complexity factors to evaluate and select the most efficient algorithm for your Java program. We’ll get much more hands-on in this turorial, because I assume you’ve already read Part 1.</p>\n<h2 id=\"What-is-an-array\"><a href=\"#What-is-an-array\" class=\"headerlink\" title=\"What is an array?\"></a>What is an array?</h2><p>An array is a sequence of elements where each element is associated with at least on index. An element is a group of memory locations that store a single data item. An index is a nonnegative integer, which is this case is used to uniquely identify an element. This relationship is simmilar to how a box number uniquely identifies a house on a given street.</p>\n<p>The number of indexes associated with any element is the array’s dimension. In this article, we’ll be talking about one-dimensional arrays. The next article in this series introduces multi-dimensional arrays.</p>\n<p>Java supports arrays. Each element ocuupies the same number of bytes, and the exact (精确) number depends on the types of the element’s data item. Furthermore, all elements share the same type.</p>\n<blockquote>\n<p>Java arrays are not resizable<br>Java Arrays hava a fixed size, You cannot change an array’s size after creating it. Instead, if you needed to change an array’s size, you would create another array of the desired size an copy all desired elements from the original array to the new one.</p>\n</blockquote>\n<h2 id=\"One-dimensional-arrays\"><a href=\"#One-dimensional-arrays\" class=\"headerlink\" title=\"One-dimensional arrays\"></a>One-dimensional arrays</h2><p>The simplest kind of array has one dimension. A one-dimensional array associates each element with one index. One-dimensional arrays are used to store lists of data items. There are three techniques for creating one-dimensinal arrays in Java:</p>\n<ul>\n<li>Use only an initializer</li>\n<li>Use only keyword new</li>\n<li>Use keyword new with an initiazlier</li>\n</ul>\n<h3 id=\"Creating-a-one-dimensinal-array-with-only-an-initializer\"><a href=\"#Creating-a-one-dimensinal-array-with-only-an-initializer\" class=\"headerlink\" title=\"Creating a one-dimensinal array with only an initializer\"></a>Creating a one-dimensinal array with only an initializer</h3><p>Here’s the syntax to create a one-dimensional array using just an initializer:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"string\">'J'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'a'</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>The syntax that one-dimensional array is an optional, comma-separated (分开的) list of expressions appearing between open and close brace characters. Futhermore, all expressions must evaluate to compatible types. For example, in a two-element one-dimensional array of doubles, both elements might be of type double, or one element might be a double while the other element is a float or an integer type (such as int).</p>\n<h3 id=\"Creating-a-one-dimensional-array-with-the-keyword-new\"><a href=\"#Creating-a-one-dimensional-array-with-the-keyword-new\" class=\"headerlink\" title=\"Creating a one-dimensional array with the keyword new\"></a>Creating a one-dimensional array with the keyword new</h3><p>The keyword new allocates memory for an array and returns its reference. Here’s the syntax for this approach:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure></p>\n<p>The syntax states that a one-dimensional array is a region of (positive) int_exper elements that share the same type. furthermore, all elements are zeroed, and are interpreted as 0, 0L, 0F, 0.0, false, null.</p>\n<h3 id=\"Creating-a-one-dimensional-array-with-the-new-keyword-and-an-initializer\"><a href=\"#Creating-a-one-dimensional-array-with-the-new-keyword-and-an-initializer\" class=\"headerlink\" title=\"Creating a one-dimensional array with the new keyword and an initializer\"></a>Creating a one-dimensional array with the new keyword and an initializer</h3><p>Here’s the syntax to create a one-dimensional array using the keyword new with an initializer. As you seee, it blends the syntax from the previous two approaches:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'J'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'a'</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>In this case, because the number of elements can be determined from the comma-separated list of expressions, it isn’t necessary (or allowed) to provide an int_expr between the square brackets.</p>\n<p>Something to note is that the syntax fro creating an array with only an initializer is no different in effect from the syntax using an initializer an a keyword. The initializer-only syntax is an example of syntactic sugar, which means syntax that make the language sweeter, or easier, to use.</p>\n<h2 id=\"Array-variables\"><a href=\"#Array-variables\" class=\"headerlink\" title=\"Array variables\"></a>Array variables</h2><p>By itself, a newly-created one-dimensional array is useless. Its reference must be assigned to an array variable of a compatibe type, either directly or via a method call. The following two lines of syntax how you would declare this variable.</p>\n<p>Each syntax declares an array variable that stores a reference to a one-dimensional array. Although you can use either syntax, placing the square brackets after type is preferred (推荐).</p>\n<p>Examples:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] name1 = &#123; <span class=\"string\">'J'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'a'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">char</span>[] name2 = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">char</span>[] name3 = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">'J'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'a'</span> &#125;;</span><br><span class=\"line\">output(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;); <span class=\"comment\">// output(&#123; 2, 3 &#125;); results in a compiler error</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">output</span><span class=\"params\">(<span class=\"keyword\">char</span>[] name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In the examples, name1, name2, name3 and name are array variables. The single pair of square brackets states that each stores references to one-dimensional arrays.</p>\n<p>Keyword char indicates that each element must store a value of char type. However, you can specify a non-char value if Java can convert it to char. For example, <code>char[] chars = {&#39;A&#39;, 10}</code> is legal because 10 is a samll enough positive in (meaning that it fits into the char range of 0 through 65535) to be converted to a char. In constact, <code>char[] chars = {&#39;A&#39;, 80000}</code> would be illegal.</p>\n<p>An array variable is associated with a <code>.length</code> property that returns the length of the associated one-dimensional array as a positive int; for example, <code>name1.length</code> return 4.</p>\n<p>Given an array variable, you can access any element in a one-dimensional array by specifying an expression that argees with the following syntax:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_var <span class=\"string\">'['</span> index <span class=\"string\">']'</span></span><br></pre></td></tr></table></figure></p>\n<p>Here, index is a positive int that ranges from 0 (Java arrays are zero-based) to one less than the vlaue returned from the <code>.length</code> property.</p>\n<p>Example:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> ch = names[<span class=\"number\">0</span>]; <span class=\"comment\">// Get value.</span></span><br><span class=\"line\">names[<span class=\"number\">1</span>] = <span class=\"string\">'A'</span>;     <span class=\"comment\">// Set value.</span></span><br></pre></td></tr></table></figure></p>\n<p>If you specify a negative index or an index that is greater than or equal to the value returned by the array variable’s <code>.length</code> property, Java creates and throws a ArrayIndexOutOfBoundsException object.</p>\n<h2 id=\"Algorithms-for-searching-and-sorting\"><a href=\"#Algorithms-for-searching-and-sorting\" class=\"headerlink\" title=\"Algorithms for searching and sorting\"></a>Algorithms for searching and sorting</h2><p>It is a very common task to search one-dimensional arrays for specify data items, and there are a variety of algorithms for doing it. One of the most popular search algorithms is called Linear Search. Another option is Binary Search, which is usually more performant but also more demanding: in order to use Binary Search, the array’s data items must first be sorted, or ordered. Although not very performant, Bubble Sort, Selction Sort, and Insertion Sort are all simple algorithms for sorting a one-dimensional array. Each works well enough for shorter arrays.</p>\n<blockquote>\n<p>Space complexity<br>Each of the algorithms discussed in this section - Linear Search, Binary Search, Bubble Sort, Selection Sort, and Insertion Sort — exhibits a $O(1)$ (constant) space complexity for variable storage.</p>\n</blockquote>\n<h2 id=\"The-Linear-Search-algorithm\"><a href=\"#The-Linear-Search-algorithm\" class=\"headerlink\" title=\"The Linear Search algorithm\"></a>The Linear Search algorithm</h2><p>Linear Search searches a one—dimensional array of $n$ data items for a specific one. It functions by comparing data items from the lowest index to the highest until it finds the specified data item, or until there are no more data items to compare.</p>\n<p>The following pseudocode expresses Linear Search used for a one-dimensional array of integers:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER i, srch = ...</span><br><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">FOR i = 0 TO LENGTH(x) - 1</span><br><span class=\"line\">   IF x[i] EQ srch THEN</span><br><span class=\"line\">      PRINT &quot;Found &quot;, srch</span><br><span class=\"line\">      END</span><br><span class=\"line\">   END IF</span><br><span class=\"line\">NEXT i</span><br><span class=\"line\">PRINT &quot;Not found&quot;, srch</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Consider a one-dimensional unordered array of five integers [1, 4, 3, 2, 6], where integer 1 is located at index 0 and integer 6 is located at index 4. The pseudocode preforms the following tasks to find integer 3 in this array:</p>\n<ol>\n<li>Compare the integer at index 0 (1) with 3.</li>\n<li>Because there’s no match, compare the integer at index 1 (4) with 3.</li>\n<li>Because there’s still no match, compare the integer at index 2 (3) with 3.</li>\n<li>Because there’s a match, print Found 3 and exit.</li>\n</ol>\n<p>Liear Search has a time complexity of $O(n)$, which is pronounced Big Oh of $n$. For $n$ data items, this algorithm requires a maximum of $n$ comparisons. On average, it performs $\\frac n2$ comparisons. Linear Search offers linear performance.</p>\n<blockquote>\n<p>Efficiency<br>A downside of (负面) the Linear Search algorithm is that it is inefficient (效率低的). For an array of 4,000,000 data items, it would perform an average of 2,000,000 comparisons to find the specified item.</p>\n</blockquote>\n<h2 id=\"Explore-Linear-Search\"><a href=\"#Explore-Linear-Search\" class=\"headerlink\" title=\"Explore Linear Search\"></a>Explore Linear Search</h2><p>To let you experiment with Linear Search, I’ve created the LinearSearch Java application in Listing 1.</p>\n<h3 id=\"Listing-1-A-Java-example-with-the-Linear-Search-algorithm\"><a href=\"#Listing-1-A-Java-example-with-the-Linear-Search-algorithm\" class=\"headerlink\" title=\"Listing 1. A Java example with the Linear Search algorithm\"></a>Listing 1. A Java example with the Linear Search algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Validate command line arguments count.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args.length != <span class=\"number\">2</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"usage: java LinearSearch integers integer\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read integers from first command-line argument. Return if integers </span></span><br><span class=\"line\">      <span class=\"comment\">// could not be read.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] ints = readIntegers(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ints == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read search integer; NumberFormatException is thrown if the integer</span></span><br><span class=\"line\">      <span class=\"comment\">// isn't valid.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> srchint = Integer.parseInt(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Perform the search and output the result.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(srchint + (search(ints, srchint) ? <span class=\"string\">\" found\"</span></span><br><span class=\"line\">                                                          : <span class=\"string\">\" not found\"</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] readIntegers(String s)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      String[] tokens = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] integers = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[tokens.length];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tokens.length; i++)</span><br><span class=\"line\">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> integers;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, <span class=\"keyword\">int</span> srchint)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x.length; i++)</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (srchint == x[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The LinearSearch application reads a comma-separated list of integers from its first command-line argument. It searchs the array for the integer identified by the second command-line argument, and outputs a found/not found message.</p>\n<blockquote>\n<p>Beware of the number format exception<br>Specify digits and +/- sign characters only in each command-line argument. Otherwise, this application (and the subsequent search and sort applicaitons) will create and throw a NumberFormatException object.</p>\n</blockquote>\n<p>To experiment with this application, start by compiling Listing 1:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac LinearSearch.java</span><br></pre></td></tr></table></figure></p>\n<p>Next, run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LinearSearch <span class=\"string\">\"4,5,8\"</span> 5</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 found</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application a second time, as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java LinearSearch <span class=\"string\">\"4,5,8\"</span> 15</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15 not found</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"The-Binary-Search-algorithm\"><a href=\"#The-Binary-Search-algorithm\" class=\"headerlink\" title=\"The Binary Search algorithm\"></a>The Binary Search algorithm</h2><p>The Binary Search algorithm searches an ordered one-dimensional array of $n$ data items for a specific data item. This algorithm consists of the following steps:   </p>\n<ol>\n<li>Set low and high index variables to the indexes of the array’s first and last data items, respectively (分别)</li>\n<li>Terminate if the low index is greater than the high index. The serached-for data item is not in the array</li>\n<li>Calculate the middle index by summing the low and high indexes and dividing the sum by 2</li>\n<li>Compare the searched-for data item with the middle-indexed data item. Terminate if they are the same. The searched-for data item has been foud</li>\n<li>If the searched-for data item is greater than the middle-indexed data item, set the low index to the middle index plus one and transfer execution to Step 2. Binary Search repeats the search in the upper half of the array</li>\n<li>The searched-for data item must be smaller than the middle-indexed data item, so set the high index to the middle index minus on and transfer execution to Step 2. Binary Search repeats the earch in the lower half of the array</li>\n</ol>\n<p>Here is pseudocode representing the Binary Search algorithm for a one-dimensional array of integers:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">DECLARE INTEGER loIndex = 0</span><br><span class=\"line\">DECLARE INTEGER hiIndex = LENGTH(x) - 1</span><br><span class=\"line\">DECLARE INTEGER midIndex, srch = ...</span><br><span class=\"line\">WHILE loIndex LE hiIndex</span><br><span class=\"line\">   midIndex = (loIndex + hiIndex) / 2</span><br><span class=\"line\">   IF srch GT x[midIndex] THEN</span><br><span class=\"line\">      loIndex = midIndex + 1</span><br><span class=\"line\">   ELSE</span><br><span class=\"line\">   IF srch LT x[midIndex] THEN</span><br><span class=\"line\">      hiIndex = midIndex - 1</span><br><span class=\"line\">   ELSE</span><br><span class=\"line\">      EXIT WHILE</span><br><span class=\"line\">   END IF</span><br><span class=\"line\">END WHILE</span><br><span class=\"line\">IF loIndex GT hiIndex THEN</span><br><span class=\"line\">   PRINT srch, &quot; not found&quot;</span><br><span class=\"line\">ELSE</span><br><span class=\"line\">   PRINT srch, &quot; found&quot;</span><br><span class=\"line\">END IF</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Binary Search isn’t hard to understand. For example, consider a one-dimensional ordered array of six integers [3, 4, 5, 6, 7, 8], where integer 3 is located at idnex 0 and integer 8 is located at index 5. The pseudocode does the following to find integer 6 in this array:</p>\n<ol>\n<li>Obtain the low index (0) and high index (5)</li>\n<li>Calculate the middle index: (0 + 5) / 2 = 2</li>\n<li>Because the integer at index 2 (5) is less than 6, set the low index to 2 + 1 = 3</li>\n<li>Calculate the middle index: (3 + 5) / 2 = 4</li>\n<li>Because the integer at idnex 4 (7) is greater than 6, set the high idnex to 4 - 1 = 3</li>\n<li>Calculate the middle index: (3 + 3) / 2 = 3</li>\n<li>Becuase the integer at index 3 (6) equals 6, print 3 found and exit</li>\n</ol>\n<p>Binary Search has a time complexity of $O(log_2n)$, which is pronounced Big Oh of log $n$ to the base 2. For $n$ data items, Binary Search required a maximum of $1 + log_2n$ comparisons, making this algorithm vastly more efficient than Linear Serach, in most cases. The algorithm offers logarithmic performance (for more about logarithmic performance, see Figure 3 int Part 1 of this series).</p>\n<blockquote>\n<p>When Linear Search outperforms Bineary Search<br>Although Binary Search is typically more efficient than Linear Search, Binary Search isn’t as efficient for short arrays. This was discovered by famous computer scientist Donald Knuth.</p>\n</blockquote>\n<p>Listing 2 is a BinarySearch Java application that lets you experiment with Binary Search.</p>\n<h3 id=\"Listing-2-A-Java-example-with-the-Binary-Search-algorithm\"><a href=\"#Listing-2-A-Java-example-with-the-Binary-Search-algorithm\" class=\"headerlink\" title=\"Listing 2. A Java example with the Binary Search algorithm\"></a>Listing 2. A Java example with the Binary Search algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Validate command line arguments count.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args.length != <span class=\"number\">2</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"usage: java BinarySearch integers integer\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read integers from first command-line argument. Return if integers </span></span><br><span class=\"line\">      <span class=\"comment\">// could not be read.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] ints = readIntegers(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ints == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read search integer; NumberFormatException is thrown if the integer</span></span><br><span class=\"line\">      <span class=\"comment\">// isn't valid.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> srchint = Integer.parseInt(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Perform the search and output the result.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(srchint + (search(ints, srchint) ? <span class=\"string\">\" found\"</span></span><br><span class=\"line\">                                                          : <span class=\"string\">\" not found\"</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] readIntegers(String s)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      String[] tokens = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] integers = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[tokens.length];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tokens.length; i++)</span><br><span class=\"line\">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> integers;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x, <span class=\"keyword\">int</span> srchint)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> hiIndex = x.length - <span class=\"number\">1</span>, loIndex = <span class=\"number\">0</span>, midIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (loIndex &lt;= hiIndex)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         midIndex = (loIndex + hiIndex) / <span class=\"number\">2</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (srchint &gt; x[midIndex])</span><br><span class=\"line\">            loIndex = midIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (srchint &lt; x[midIndex])</span><br><span class=\"line\">            hiIndex = midIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The BinarySearch application reads a comma-separated list of integers from its first command-line argument. It searchs the array for the integer identified by the second command-line argument, and outputs a found/not found message.</p>\n<blockquote>\n<p>A bug in Binary Search<br>Joshua Bloch (author of Effictive Java) discovered a bug in the Binary Search algorithm, which can lead to a thrown instance of the ArrayIndexOutOfBoundsException class in Java. This bug manifests itself for arrays whose lengths are $2^{30}$ (roughly one billion) or greater.</p>\n</blockquote>\n<p>Compile the code in Listing 2 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac BinarySearch.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java BinarySearch <span class=\"string\">\"4,5,8\"</span> 5</span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15 not found</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"The-Bubble-Sort-algorithm\"><a href=\"#The-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"The Bubble Sort algorithm\"></a>The Bubble Sort algorithm</h2><p>The Bubble Sort algorithm orders a one-dimensional array of $n$ data items into ascending or descending order. An outer loop makes $n-1$ passes over the array. Each pass uses an inner loop to exchange data items such that the next smallest (ascending) or largest (descending) data item “bubbles” towrads the beginning of the array.</p>\n<p>The “Bubbling” action occurs in the inner loop, where each iteration compares the pass-numbered data item with each successive data item. If a successor data item is smaller (ascending sort) or larger (descending sort) than the pass-numbered data item, the successor data item is exchanged with the pass-numbered data item. </p>\n<p>Here is pseudocode representing  Bubble Sort in a one-dimensional array of integers/ascending sort context:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER i, pass</span><br><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">FOR pass = 0 TO LENGTH(x) - 2</span><br><span class=\"line\">   FOR i = LENGTH(x) - 1 DOWNTO pass + 1</span><br><span class=\"line\">      IF x[i] LT x[pass] THEN // switch to &gt; for descending sort</span><br><span class=\"line\">         EXCHANGE x[i], x[pass]</span><br><span class=\"line\">      END IF</span><br><span class=\"line\">   NEXT i</span><br><span class=\"line\">NEXT pass</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Bubble Sort is faily easy to understand. For example, consider a one-dimensional, unordered array of four integers: [18 16, 90, -3], where integer 18 is located at index 0 and integer -3 is located at index 3. When requested to sort this array into ascending order, Bubble Sort would execute as follow:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pass 0               Pass 1               Pass 2</span><br><span class=\"line\">======               ======               ======</span><br><span class=\"line\">18  16  90  -3       -3  16  90  18       -3  16  90  18</span><br><span class=\"line\">^           ^            ^       ^                ^   ^</span><br><span class=\"line\">|           |            |       |                |   |</span><br><span class=\"line\">-------------            ---------                -----</span><br><span class=\"line\">-3  16  90  18       -3  16  90  18       -3  16  18  90</span><br><span class=\"line\">^       ^                ^   ^ </span><br><span class=\"line\">|       |                |   |</span><br><span class=\"line\">---------                -----</span><br><span class=\"line\">-3  16  90  18       -3  16  90  18</span><br><span class=\"line\">^   ^</span><br><span class=\"line\">|   |</span><br><span class=\"line\">-----</span><br><span class=\"line\">-3  16  90  18</span><br></pre></td></tr></table></figure></p>\n<p>In terms of comparisons and also in terms of exchanges, Bubble Sort has a time complexity of $O(n^2)$, which is pronounced “Big Oh of $n$ squared”. Bubble Sort offers quadratic performance, which isn’t a problem for shorter-length arrays — espicially when you consider that Bubble Sort is easy to code. (See Part 1 for more about quadratic performance.)</p>\n<p>The BubbleSort Java application in Listing lets you experiment with Bubble Sort.</p>\n<h3 id=\"Listing-3-A-Java-example-with-the-Bubble-Sort-algorithm\"><a href=\"#Listing-3-A-Java-example-with-the-Bubble-Sort-algorithm\" class=\"headerlink\" title=\"Listing 3. A Java example with the Bubble Sort algorithm\"></a>Listing 3. A Java example with the Bubble Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Validate command line arguments count.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args.length != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"usage: java BubbleSort integers\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read integers from first command-line argument. Return if integers could not be read.</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] ints = readInteger(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ints == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Output integer array's length and number of inversions statistics to standard outpou device.</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"N = \"</span> + ints.length);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> inversions = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ints.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; ints.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">int</span>[i] &gt; <span class=\"keyword\">int</span>[j]) &#123;</span><br><span class=\"line\">               inversions ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"I = \"</span> + inversions);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Output unsorted integer values to standard output, sort the array, and output sorted values to standard output.</span></span><br><span class=\"line\">      dum(ints);</span><br><span class=\"line\">      sort(ints);</span><br><span class=\"line\">      dump(intns);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] readIntegers(String s) &#123;</span><br><span class=\"line\">      String[] tokens = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] integers = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[tokens.length];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tokens.length; i++)</span><br><span class=\"line\">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> integers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">         System.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.print(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pass = <span class=\"number\">0</span>; pass &lt; x.length - <span class=\"number\">1</span>; pass++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.length -<span class=\"number\">1</span>; i &gt; pass; i++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (x[i] &lt; x[pass]&gt;) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">int</span> temp = x[i];</span><br><span class=\"line\">                  x[i] = x[pass];</span><br><span class=\"line\">                  x[pass] = temp;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BubbleSort reads a comma-separated list of integers from its command-line argument. It outputs the array length, calculates and outputs the number of inversions (larger items to the left of smaller items in the unsorted array), outputs the unsorted array, sorts the array, and outputs the sorted array. (Selection Sort and Insertion Sort, which I’ll introduce next, behave similary.)</p>\n<p>Compile Listing 3 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac BubbleSort.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java BubbleSort <span class=\"string\">\"18,16,90,-3\"</span></span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N = 4</span><br><span class=\"line\">I = 4</span><br><span class=\"line\">18 16 90 -3</span><br><span class=\"line\">-3 16 18 90</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"The-Selection-Sort-algorithm\"><a href=\"#The-Selection-Sort-algorithm\" class=\"headerlink\" title=\"The Selection Sort algorithm\"></a>The Selection Sort algorithm</h2><p>The Selection Sort algorithm orders a one-dimensional array of $n$ data items into ascending order or descending order. An outer loop makes $n - 1$ passes over the array. Each pass uses an inner loop to find the next smallest (ascending sort) or lastest (descending sort) data item, which is exchanged with the pass-numbered data item.</p>\n<p>Selection Sort assumes that the data item at the pass-numbered index is the smallest (ascending sort) or the largest (descending sort) of the remaining data items. It searches the rest of the array for a data item that’s smaller/larger than this data item, and performs an exchange at the end of the search when a smaller/larger data item is found.</p>\n<p>The following pseudocode expresses Selection Sort in a one-dimensinal array of integers/ascending sort context:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER i, min, pass</span><br><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">FOR pass = 0 TO LENGTH(x) - 2</span><br><span class=\"line\">   min = pass</span><br><span class=\"line\">   FOR i = pass + 1 TO LENGTH(x) - 1</span><br><span class=\"line\">      IF x[i] LT x[min] THEN</span><br><span class=\"line\">         min = i</span><br><span class=\"line\">      END IF</span><br><span class=\"line\">   NEXT i</span><br><span class=\"line\">   IF min NE pass THEN</span><br><span class=\"line\">      EXCHANGE x[min], x[pass]</span><br><span class=\"line\">   END IF</span><br><span class=\"line\">NEXT pass</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Selection Sort is faily easy to understand. For example, consider a one-dimensional unordered array of four integers: [18, 16, 90, -3], where integer 18 is located at index 0  and integer -3 is located at index 3. When requested to sort this array into  ascending order, the Selection Sort pseudocode performs the sort as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pass 0                        Pass 1                        Pass 2</span><br><span class=\"line\">======                        ======                        ======</span><br><span class=\"line\">18  16  90  -3                -3  16  90  18                -3  16  90  18</span><br><span class=\"line\">^                                 ^                                 ^</span><br><span class=\"line\">|                                 |                                 |</span><br><span class=\"line\">min = 0                           min = 1                           min = 2</span><br><span class=\"line\"></span><br><span class=\"line\">18  16  90  -3                -3  16  90  18                -3  16  90  18</span><br><span class=\"line\">    ^                                 ^                                 ^</span><br><span class=\"line\">    |                                 |                                 |</span><br><span class=\"line\">    16 &lt; 18, min = 1                  90 &gt; 16, min = 1                  18 &lt; 90, min = 3</span><br><span class=\"line\">                                                                    ^   ^</span><br><span class=\"line\">18  16  90  -3                -3  16  90  18                        |   |</span><br><span class=\"line\">        ^                                 ^                         -----</span><br><span class=\"line\">        |                                 |                 -3  16  18  90</span><br><span class=\"line\">        90 &gt; 16, min = 1                  18 &gt; 16, min = 1</span><br><span class=\"line\"></span><br><span class=\"line\">18  16  90  -3                               </span><br><span class=\"line\">            ^   </span><br><span class=\"line\">            |</span><br><span class=\"line\">            -3 &lt; 16 min = 3</span><br><span class=\"line\">^           ^</span><br><span class=\"line\">|           |</span><br><span class=\"line\">------------- </span><br><span class=\"line\">-3  16  90  18</span><br></pre></td></tr></table></figure></p>\n<p>Selection Sort has a time complexity of $O(n^2)$ comparisons and $O(n)$ exchanges. The algorithm offers quadratic performance in terms of comparisons and linear performance in terms of exchanges, which makes it somewhat more efficient than Bubble Sort.</p>\n<p>Listing 4 shows the SelectionSort application in Java code.</p>\n<h3 id=\"Listing-4-A-Java-example-with-the-Selection-Sort-algorithm\"><a href=\"#Listing-4-A-Java-example-with-the-Selection-Sort-algorithm\" class=\"headerlink\" title=\"Listing 4. A Java example with the Selection Sort algorithm\"></a>Listing 4. A Java example with the Selection Sort algorithm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class SelectionSort</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   public static void main(String[] args)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      // Validate command line arguments count.</span><br><span class=\"line\"></span><br><span class=\"line\">      if (args.length != 1)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(&quot;usage: java SelectionSort integers&quot;);</span><br><span class=\"line\">         return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // Read integers from first command-line argument. Return if integers </span><br><span class=\"line\">      // could not be read.</span><br><span class=\"line\"></span><br><span class=\"line\">      int[] ints = readIntegers(args[0]);</span><br><span class=\"line\">      if (ints == null)</span><br><span class=\"line\">         return;</span><br><span class=\"line\"></span><br><span class=\"line\">      // Output integer array&apos;s length and number of inversions statistics to</span><br><span class=\"line\">      // standard output device.</span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(&quot;N = &quot; + ints.length);</span><br><span class=\"line\">      int inversions = 0;</span><br><span class=\"line\">      for (int i = 0; i &lt; ints.length - 1; i++)</span><br><span class=\"line\">         for (int j = i + 1; j &lt; ints.length; j++)</span><br><span class=\"line\">            if (ints[i] &gt; ints[j])</span><br><span class=\"line\">               inversions++;</span><br><span class=\"line\">      System.out.println(&quot;I = &quot; + inversions);</span><br><span class=\"line\"></span><br><span class=\"line\">      // Output unsorted integer values to standard output, sort the array, </span><br><span class=\"line\">      // and output sorted values to standard output.</span><br><span class=\"line\"></span><br><span class=\"line\">      dump(ints);</span><br><span class=\"line\">      sort(ints);</span><br><span class=\"line\">      dump(ints);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   static void dump(int[] a)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      for (int i = 0; i &lt; a.length; i++)</span><br><span class=\"line\">         System.out.print(a[i] + &quot; &quot;);</span><br><span class=\"line\">      System.out.print(&apos;\\n&apos;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   static int[] readIntegers(String s)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      String[] tokens = s.split(&quot;,&quot;);</span><br><span class=\"line\">      int[] integers = new int[tokens.length];</span><br><span class=\"line\">      for (int i = 0; i &lt; tokens.length; i++)</span><br><span class=\"line\">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class=\"line\">      return integers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   static void sort(int[] x)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      for (int pass = 0; pass &lt; x.length - 1; pass++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         int min = pass;</span><br><span class=\"line\"></span><br><span class=\"line\">         for (int i = pass + 1; i &lt; x.length; i++)</span><br><span class=\"line\">            if (x[i] &lt; x[min])</span><br><span class=\"line\">               min = i;</span><br><span class=\"line\"></span><br><span class=\"line\">         if (min != pass)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            int temp = x[min];</span><br><span class=\"line\">            x[min] = x[pass];</span><br><span class=\"line\">            x[pass] = temp;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Compile Listing 4 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac SelectionSort.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting application as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java SelectionSort <span class=\"string\">\"18,16,90,-3\"</span></span><br></pre></td></tr></table></figure></p>\n<p>You should oberve the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N = 4</span><br><span class=\"line\">I = 4</span><br><span class=\"line\">18 16 90 -3</span><br><span class=\"line\">-3 16 18 90</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"The-Insertion-Sort-algorithm\"><a href=\"#The-Insertion-Sort-algorithm\" class=\"headerlink\" title=\"The Insertion Sort algorithm\"></a>The Insertion Sort algorithm</h2><p>The Insertion Sort algorithm orders a one-dimensional array of $n$ daata items into ascending order or descending order. An outer loop makes $n - 1$ passes over the array. Each pass selects the next data item to be inserted into the appropriate position. It uses an inner loop to find this position, shifting data items to make room.</p>\n<p>Insertion Sort begins by dividing the data structure into sorted and unsorted sections. Initially, the sorted section contains the data item at index 0; hte unsorted section contains all other data ites. During the sort, each unsorted section data item is inserted into the proper position in the sorted section and the unsorted section shrinks (收缩) by on data item.</p>\n<p>Here is pseudocode for the Insertion Sort algorithm in a one-dimensinal array of integers, where you are doing an ascending sort:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE INTEGER a, i, j</span><br><span class=\"line\">DECLARE INTEGER x[] = [ ... ]</span><br><span class=\"line\">FOR i = 1 TO LENGTH(x) - 1</span><br><span class=\"line\">   a = x[i]</span><br><span class=\"line\">   j = i</span><br><span class=\"line\">   WHILE j GT 0 AND x[j - 1] GT a</span><br><span class=\"line\">      x[j] = x[j - 1]</span><br><span class=\"line\">      j = j - 1</span><br><span class=\"line\">   END WHILE</span><br><span class=\"line\">   x[j] = a</span><br><span class=\"line\">NEXT i</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>Like Bubble Sort, Insertion Sort is fairly easy to understand. For example, consider a one-dimensional unordered array of four integers: [18, 16, 90, -3], where integer 18 is located at index 0 and integer -3 is located at index 3. When instructed to sort this array into ascending order, the algorithm performs the sort as follows:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1                 i = 2                 i = 3</span><br><span class=\"line\">      =====                 =====                 =====</span><br><span class=\"line\">18 | 16   90   -3     16   18 | 90   -3     16   18   90 | -3     -3   16   18   90</span><br><span class=\"line\">     ^                          ^                          ^</span><br><span class=\"line\">     |                          |                          | </span><br><span class=\"line\">     a,j                        a,j                        a,j</span><br></pre></td></tr></table></figure></p>\n<p>The sorted section appears on the left and initially consists of [18]. The unsorted section apprears on the right and initially consists of [16, 90, -3].</p>\n<p>Insertion Sort has a time complexity of $O(n)$ comparisons for the bast case (data is already sorted or nearly sorted) and $O(n^2)$ for the average and worst cases. The algorithm offers linear (best case) or quadratic (average/worst case) performance.</p>\n<p>Listing 5 shows the source code for the InsertionSort application.</p>\n<h3 id=\"Listing-5-A-Java-example-with-the-Insertion-Sort-algorithm\"><a href=\"#Listing-5-A-Java-example-with-the-Insertion-Sort-algorithm\" class=\"headerlink\" title=\"Listing 5. A Java example with the Insertion Sort algorithm\"></a>Listing 5. A Java example with the Insertion Sort algorithm</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Validate command line arguments count.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args.length != <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.err.println(<span class=\"string\">\"usage: java InsertionSort integers\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read integers from first command-line argument. Return if integers </span></span><br><span class=\"line\">      <span class=\"comment\">// could not be read.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] ints = readIntegers(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ints == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Output integer array's length and number of inversions statistics to</span></span><br><span class=\"line\">      <span class=\"comment\">// standard output device.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"N = \"</span> + ints.length);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> inversions = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ints.length - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; ints.length; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ints[i] &gt; ints[j])</span><br><span class=\"line\">               inversions++;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"I = \"</span> + inversions);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Output unsorted integer values to standard output, sort the array, </span></span><br><span class=\"line\">      <span class=\"comment\">// and output sorted values to standard output.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      dump(ints);</span><br><span class=\"line\">      sort(ints);</span><br><span class=\"line\">      dump(ints);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">         System.out.print(a[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      System.out.print(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] readIntegers(String s)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      String[] tokens = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] integers = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[tokens.length];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tokens.length; i++)</span><br><span class=\"line\">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> integers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] x)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> j, a;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// For all integer values except the leftmost value ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; x.length; i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Get integer value a.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         a = x[i];</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Get index of a. This is the initial insert position, which is</span></span><br><span class=\"line\">         <span class=\"comment\">// used if a is larger than all values in the sorted section.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         j = i;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// While values exist to the left of a's insert position and the</span></span><br><span class=\"line\">         <span class=\"comment\">// value immediately to the left of that insert position is</span></span><br><span class=\"line\">         <span class=\"comment\">// numerically greater than a's value ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; x[j - <span class=\"number\">1</span>] &gt; a)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Shift left value -- x[j - 1] -- one position to its right --</span></span><br><span class=\"line\">            <span class=\"comment\">// x[j].</span></span><br><span class=\"line\"></span><br><span class=\"line\">            x[j] = x[j - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Update insert position to shifted value's original position</span></span><br><span class=\"line\">            <span class=\"comment\">// (one position to the left).</span></span><br><span class=\"line\"></span><br><span class=\"line\">            j--;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Insert a at insert position (which is either the initial insert</span></span><br><span class=\"line\">         <span class=\"comment\">// position or the final insert position), where a is greater than</span></span><br><span class=\"line\">         <span class=\"comment\">// or equal to all values to its left.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         x[j] = a;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Compile Listing 5 as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac InsertionSort.java</span><br></pre></td></tr></table></figure></p>\n<p>Run the resulting appilcaiton as follows:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java InsertionSort <span class=\"string\">\"18,16,90,-3\"</span></span><br></pre></td></tr></table></figure></p>\n<p>You should observe the following output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N = 4</span><br><span class=\"line\">I = 4</span><br><span class=\"line\">18 16 90 -3</span><br><span class=\"line\">-3 16 18 90</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Spring Series Part 3, Spring WebFlux","date":"2020-04-19T03:00:03.000Z","_content":"Spring WebFlux introduces reactive web development to the Spring ecosystem. This article will get you started with reactive systems and reactive programming with Spring. First you'll find out why reactive systems are important and how they're implemented in Spring framework 5, then you'll get a hands-on introduction to building reactive services using Spring WebFlux. We'll build our first reactive application using annotations. I'll also show you how to build a similar application using Spring's newer functional features.\n\n## Reactive systems and Spring WebFlux\nThe term reactive is currently popular with developers and IT managers, but I've noticed some uncertainty about what it actually means. To get clearer on what reactive systems are, it's helpful to understand the fundamental problem they're designed to solve. In this section we'll talk about reactive systems in general, and I'll introduce the Reactive Systems API for Java applications.\n\n> Scalability in Spring MVC\n> Spring MVC has earned its place among (在…中) the top choices for building Java web applications and web services. Spring MVC seamlessly (无缝地) integrates (使合并) annotations into the robust (强健) architecture of a Spring-based application. This enables developers familiar with Spring to quickly build satisfying, highly functional web applications. Scalability (可扩展性) is a challenge for Spring MVC applications, however. That is the problem Spring WebFlux seeks to address.\n\n### Blocking vs non-blocking web frameworks\nIn traditional web applications, when a web server receives a request from a client, it accepts that requests and places it in an execution queue. A thread in the execution queue's thread pool then receives the request, reads its input parameters, and generates a response. Along the way, if the execution thread needs to call a blocking resource -- such as a database, a filesystem, or another web service -- that thread executes the blocking until the external resource responds, which causes performance issues and limits scalability. To combat these issues, developers create generously sized thread pools, so that while one thread is blocked another thread can continue to process requests. Figure 1 shows the execution flow for a traditional, blocking web application.\n\n![Figure 1. Threaded execution model](001.jpg)\n\nNon-blocking web frameworks such as NodeJS and Play take a different approach (方法). Instead of executing a blocking request and waiting for it to complete, the use non-blocking I/O. In this paradigm (范例), an application executes a request, provides code to be executed when a response is returned, and then given its thread back to the server. When an external resource returns a response, the provided code will be executed. Internally (内部的), non-blocking frameworks operate using an event loop. Within the loop, the appliation code either provides a callback or a future containing the code to execute when the asnchronous (异步) loop completes.\n\nBy nature, non-blocking frameworks are event-driven. This requires a different programming paradigm and a new approach to reasoning (推理) about how your code will be executed. Once you've warpped (变形的) your head arround it, reactive programming can lead to very scalable applications.\n\n> Callbacks, promises, and futures\n> In early days, JavaScript handled all asynchronous functionality via callbacks. In this scenario, when an event occurs (such as when a response from a service call becomes available) the callback is executed. While callbacks are still prevalent, JavaScript's asynchronous functionality has more recently moved to promises. With promises, a function call returns immediately, returning a promise to deliver the results at a future time. Rather than promises, Java implements a similar paradigm using futures. In this usage, a method returns a future that will have a value at some time in the future.\n\n## Reactive programming\nYou may have hear the term reactive programming related to web development frameworks and tools, but what does it really mean? The term as we've come to know it originated from the Reactive Manifesto, which defines reactive systems as having four core traits (特征):\n- Reactive systems are **responsive**, meaning that they respond in a timely manner (及时的), in all possible circumstances (环境). They focus on providing rapid (瞬间) and consistent response times, establishing (建立) reliable upper bounds (上边界) so they deliver (兑现) a consistent quality of service\n- Reactive systems are **resilient** (能复原的), meaning that they remain reponsive in the face of failure. Resilience is achieved (实现) by the techniques of relication (同步复制), containment (包容), isolation (隔离性), and delegation (委派). By isolating application compoents from each other, you can contain failures and protect the system as a whole\n- Reactive systems are elastic (灵活的), meaning that they stay responsive under varying workloads. This is achieved by scaling application components elastically to meet the current demand (需要)\n- Reactive systems are message-driven, meaning that they rely on asynchronous message passing between components. This allows you to create coupling (耦合), isolation, and location transparency (透明度)\n\nFigure 2 shows how these traits (特征) flow together in a reactive system.\n\n![Figure 2. Traits of a reactive system](002.jpg)\n\n## Characteristics of a reactive system\nReactive systems are built by creating isolated components that communicate with one another asynchronously and can scale quickly to meet the current load. Components still fail in reactive systems, but there are defind actions to perform as a result of the failure, which keeps the system as a whole functional and responsive.\n\nThe Reaactive Manifesto is abstract, but reactive applicaitons are typically characcterized by follwoing components or techniques:\n- **Data streams**: A stream is a squence of events ordered in time, such as user interactions, REST service calls, JMS messages, and results from a database\n- **Asynchronous**: Data stream events are captured asychronously and your code defines what to do when an event is emiited, when an error occurs, and when the stream of events has completed\n- **Non-blocking**: As you process events, your code should not block and preform synchronouss calls; intead, it should make asychronous calls and respond as the results of those calls are returned\n- **Back pressure**: Components control the number of event and how often they are emitted (发出). In reactive terms, your component is referred to as the subscriber and events are emitted by a pushlier. This is important because the subscriber is in control of how much data it receives and thus will not overburden (超载) itself\n- **Failure message**: Instead of components throwing exceptions, failures are sent as message to a handler function. Whereas throwing exceptions breaks the stream, defining a function to handle failures as the occur does not\n\n## The Reactive Streams API\nThe new Reactive Stream API was created by engineers from Netflix, Pivotal, Lightbeand, RedHat, Twitter, and Oracle, among others. Pushished in 2015, the Reactive Streams API is now part of Java 9. It defines four interfaces:\n- **Publisher**: Emits a sequence of events to subscriber\n- **Subscriber**: Recevies and processes events emitted by a Publisher\n- **Subscription**: Defines a one-to-one relationship between a Publisher and a Subscriber\n- **Processor**: Represent a processing stage consisting of both a Subscriber and a Publisher and obeys the contracts of both\n\nFigure 3 shows the relationship between a Publisher, and Subscription.\n\n![Figure 3. Interfaces in the Reactive Streams API](003.jpg)\n\nIn essence (本质), a Subscriber creates a Subscription to a Publisher and, when the Publisher has available data, it sends an event to the Subscriber with a stream of elements. Note that the Subscriber managers its back pressure (挤压) inside its Subscription (订阅) to the Publisher.\n\nNow that you know a litte bit about reactive systems and the Reactive Streams API, let's turn our attention to the tools Spring uses to implement reactive systems: Spring WebFlux and the Reactor library.\n\n## Project Reactor\nProject Reactor is a third-party framework based on Java's Reactive Streams Specification, which is used to build ono-blocking web applications. Project Reactor provides two publishers that are heavily used in Spring WebFlux:\n- **Mono**: Returns 0 or 1 element\n- **Flux**: Returns 0 or more elements. A Flux can be endless, meaning that it can keep emitting elements forever, or it can return a sequence of elements and then send a completion notification when it has returned all of its elements\n\nMonos and fluxs are conceptually similar to futures, but more powerful. When you invoke a function that returns a mono or a flux, it will return immediately. The results of the function call will be delivered to you through the mono or flux when they become available.\n\nIn Spring WebFlux, you will reactive libraries that return monos and fluxes and your controllers will return monos and fluexs. Because these return immediately, your controllers will effectively give up their threads and allow Reactor to handle responses asynchronously. It is improtant to note that only by using reactive libraries can you WebFlux services stay reactive. If you use non-reative libraries, such as JDBC calls, your ocde will block and wait for those calls to complete before returning.\n\n> Reactive programming with MongoDB\n>  Currently, there aren't many reactive database libraries, so you may be wondering if it's practical to write rective services. The good news is that MongoDB has reactive support and there are a couple of third-party reactive database drivers for MySQL and Postgres. For all other use cases, WebFlux provides a machanism for executing JDBC calls in a reactive manner, albeit using a secondary thread pool that makes blocking JDBC calls.\n\n## Get started with Spring WebFlux\nFor our first how-to example, we'll create a simple book service that persists books to and from MongoDB in a reactive fashion.\n\nStart by navigating to the Spring Initializr homepage, where you'll choose a Maven Project with Java and select the most current release of Spring Boot (2.0.3 at time of this writing). Give your project a group name, such as \"com.javaworld.webflux\", and an artifact name, such as \"bookservice\". Expand the Switch to the full version like to show the full list of dependencies. Select the following dependencies for the example application:\n- Web -> Reactive Web: The dependency inlucdes Spring WebBlux\n- NoSQL -> Reactive MongoDB: This dependency inluceds the reactive drivers for MongoDB\n- NoSQL -> Embedded MongoDB: This dependency allows us to run an embedded version of MongoDB, so there is no need to install a separate instance. Usually this is used for testing, but we'll include it in our release code to avoid installing MongoDB\n- Core -> Lombok: Using Lombok is optional as you do not need it to build a Spring WebFlux. The benefit of using Project Lombok is that is enables you to add annotations to classes that will automatically generate getters and setters, constructors, hashCode(), equals(), and more.\n\nWhen you're finished you should see something similar to Figure 4.\n\n![Figure 4. Screenshot of the Spring Initializr project](004.jpg)\n\nPressing Generate Proejct will trigger the download of a zip file containing your proejct source code. Unzip the download file and open it in your favorite IDE. If you're using IntelliJ, choose File and then Open, and navigate to the directory where the download zip file has been decompressed.\n\nYou'll find that Spring Initializr has generated two important files:\n- A Maven pom.xml file, includes all necessary dependencies for the application\n- BookserviceApplicataion.java, which is the Spring Boot starter class for the application\n\nListing 1 shows the contents fo the generated pom.xml file.\n\n### Listing 1. Maven pom.xml for the Spring WebFlux example application\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.javaworld.webflux</groupId>\n    <artifactId>bookservice</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>bookservice</name>\n    <description>Demo project for Spring Boot</description>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.3.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-webflux</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>de.flapdoodle.embed</groupId>\n            <artifactId>de.flapdoodle.embed.mongo</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.projectreactor</groupId>\n            <artifactId>reactor-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n### Application dependencies\nThe `<parent>` node references version 2.0.3.RELEASE of the spring-boot-starter-parent POM file. The parent POM file ensures that all dependency versions are compatible with this version of Spring Boot. These dependencies include:\n- spring-boot-starter-webflux: Packs everything you need to run a WebFlux application, including spring-web (which gives you all of the Spring MVC capabilities) and Netty, which will be our reactive web server, plus a lot more\n- spring-boot-starter-data-mongodb-reactive: Includes the MongoDB drivers, reactive support for MongoDB, and Spring Data to make writing persistence (坚持) code easier\n- de.flapdoodle.embed.mongo: Includes an embedded MongoDB instance. By default this dependency will be scoped to \"test\" so that you can write tests that run against an embedded MongoDB instance and then connect to a standalone MongoDB instance in production. For the purpose of this example I removed the test scoping so that we can run our book service against this embedded MongoDB instance\n- lombok: Adds annotation niceties for generating getters and setters, constructors, and forth to the application's model classes\n- spring-boot-starter-test: Includes Spring testing utilities as well as JUnit and Mockito\n- reactor-test: Includes testing utilities for testing the Reactor engine, which is used by Spring WebFlux for reactive functionality\n\n## The Spring Boot starter class\nListing 2 shows the BookserviceApplication.java file.\n\n### Listing 2. BookserviceApplication\n```java\n@SpringBootApplication\npublic class BookserviceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(BookserviceApplication.class, args);\n    }\n}\n```\n\nThe BookserviceApplication is annotated with the **@SpringBootApplication** annotation. **@SpringBootApplication** is a convenience (方便) annotation that encompasses (包含) the following annotations:\n- **@EnableAutoConfiguration** enables auto-configuration of the Spring application context, attemping to guess and configure beans that you are likely to need. Auto-configuration classes are usually applied based on your CLASSPATH and the beans you have defined. For example, when you include the embedded MongoDB dependency in your CLASSPATH, Spring will automatically create an instance in memory and wire it into the application context\n- **@SpringBootConfiguration** identifies this class as containing the Spring Boot configuration\n- **@ComponentScan** directs Spring to scan the CLASSPATH, in the current package and all sub-packages, for Spring components. In short, this allows you to create a web package and add a **@Controller**, which Spring will find and make available to the application\n\nThe BookserviceApplication itself defines a main() method that delegates to the SpringApplication.run() method, which starts the application.\n\n### Using Spring WebFlux with annotations\nIn order to build our book service we need to define the following classes and interfaces:\n- **Book**: A model class representing a book in our service\n- **BookRepository**: A Spring Data MongoDB interface telling Spring Data to generate persistence code for books to and from MongoDB\n- **BookService** and **BookServiceImpl**: The \"business\" service used to interact with the BookRepository to persist book to and from MongoDB. In this example, a service is not necessary and we could place calls to the BookRepository directly in our controller. When building Spring applications it is recommended to create this layer as a business interface between your controllers and persistence repository, however. The business interface enables you to change your repository -- such as moving to an SQL-based database or calling another web service -- without impacting your controllers.\n- **BookController**: The web controller that will receive web requests and return reactive reponse (Monos and Fluxs)\n\n## Example application source code\nListing 3 shows the source code for our model class, Book.java\n\n### Listing 3. Book.java\n```java\n@Document\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Book {\n    private String id;\n    private String title;\n    private String author;\n}\n```\n\nThe Book class is a simple POJO that contains an ID, title, and author. It is annotated with the **@Document** annotation, which identifies it as a MongoDB document. Spring Data will map documents to collections in MongoDB. THe next three annotations -- **@Data**, **@NoArgsContructor**, and **@AllArgsConstructor** -- are Lombok annotations. **@Data** includes the following capabilities:\n- Generates getters and setters for all fields; setters are only generated for non-final properties\n- Generates a required arguments constructor\n- Generates a **ToString()** method\n- Generates **equals()** and **hashCode()** methods that uses all non-transient (非暂态) fields\n\nIn order to work with Spring Data, we need a no-argument constructor so I added **@NoArgsContructor**. For testing purposes I also added an all-argument constructor, **@AllArgsConstructor**.\n\nAs mentioned above, Lombok is not required and you can simply implement getters, setters, and constructors to the class as you normally would do.\n\nListing 4 shows the source code for the BookRepository interafce.\n\n### Listing 4. BookRepository.java\n```java\npublic interface BookRepository extends ReactiveMongoRepository<Book, String> {\n}\n```\n\nThe BookRepsiotry is a Spring Data interface, meaning that you define the interface and Spring Data weill generate the code that implements that interface. Specifically, BookRepository extends teh ReactiveMongoRepository, which defines the following reactive methods (remember that these are methods that return either monos or fluxs):\n- `Mono<Book> save()`\n- `Flux<Book> saveAll()`\n- `Flux<Book> findById()`\n- `Mono<Boolean> existsById()`\n- `Flux<Book> findAll()`\n- `Flux<Book> findAllById()`\n- `Mono<Long> count()`\n- `Mono<Void> delete()`\n- `Mono<Void> deleteById()`\n- `Mono<Voidd> delteAll()`\n- `Flux<Book> insert()`\n\nThe query methods that return one element (such as `findById()`) return `Mono<Book>`. The methods that return more than one elements (such as `findAll()`) return `Flux<Book>`. It is interesting to note that the `delete` methods return a `Mono<Void>`. `Mono<Void>` means that there is no return type, but when the operation finishes it will publish a completion notification. Recall that these are publishers, so your code, or Spring WebFlux itself, will ultimately define functionality to execute when a message is published to its subscribers.\n\nThe BookRepository is defined with two generic parameters: Book, which is the type of document that the repository managers, and String, which is the type of the primary key (the Book's id field). Your code can use the BookRepository methods to execute asynonchroous queries against MongoDB.\n\nListing 5 and 6 show the source code for the BookService and BookServiceImpl, respectively.\n\n### Listing 5. BookService.java\n```java\npublic interface BookService {\n\n    Mono<Book> findById(String id);\n\n    Flux<Book> findAll();\n\n    Mono<Book> save(Book book);\n\n    Mono<Void> deleteById(String id);\n}\n```\n\n### Listing 6. BookServiceImple.java\n```java\n@Service\npublic class BookServiceImpl implements BookService {\n\n    private BookRepository bookRepository;\n\n    public BookServiceImpl(BookRepository bookRepsotiry) {\n        this.bookRepository = bookRepository;\n    }\n\n    @Override\n    public Mono<Book> findById(String id) {\n        return bookRepository.findById(id);\n    }\n\n    @Override\n    public Flux<Book> findAll() {\n        return bookRepository.findAll();\n    }\n\n    @Override\n    public Mono<Book> save(Book book) {\n        return bookRepository.save(book);\n    }\n\n    @Override\n    public Mono<Void> deleteById(String id) {\n        return bookRepository.deleteById(id);\n    }\n}\n```\n\nServices represent business functionality and are identified in Spring using the `@Service` annotation. In this example, business functionality simply delegates to the underlying (隐含的) repository. If you needed to perform more complex logic on the queries or on the objects being persisted, this is where you would do it.\n\nListing 7 shows the source code for the BookController class.\n\n### Listing 7. BookController.java\n```java\n@RestController\npublic class BookController {\n    private BookService bookService;\n    public BookController(BookService bookService) {\n        this.bookService = bookService;\n    }\n    @GetMapping(value = \"/book/{id}\")\n    public Mono<Book> getBookById(@PathVariable String id) {\n        return bookService.findById(id);\n    }\n    @GetMapping(value = \"/books\")\n    public Flux<Book> getAllBooks() {\n        return bookService.findAll();\n    }\n    @PostMapping(value = \"/book\")\n    public Mono<Book> createBook(@RequestBody Book book) {\n        return bookService.save(book);\n    }\n}\n```\n\n## About the code\nIf you're already familiar with Spring MVC, you'll notice that the Spring WebFlux application code looks remarkably familiar. The only difference is that all controllers and services return reactive types, namely monos and fluxes. We've also employed a reactive MongoDB driver instead of a nonreactive driver. While the code is familiar, the implementation is quite different. Under the hood, Spring WebFlux will invoke your handler method, capture the reactive reponse, and then leverage Reactor to wait for the response to be published, all asynchronously.\n\nHere are some points to note about the example application:\n- `BookController` is annotated with the `@RestController` annotation, which is a convenience annotation. This annotation includes the `@Controller` annotation, which is used to identify a class that handles web request, and `@ResponseBody`, which indicates that method return values should be bound to the web response body\n- `getBookById()` method, which is annotated with the `@GetMapping` annotation. `@GetMapping` is a convenience annotation for `@RequestMapping(method = RequestMethod.GET)`. It handles the URI path: `/book/{id}`, where the id is the value retrieved from the path and passed as the `@PathVariable` in the method call. The implementation simply delegates to the BookService's `findById()` method. Note that this method returns a `Mono<Book>`, which again is a publisher that will provide WebFlux with a Book instance when it becomes available, ultimately from the reactive MongoDB call to `findById()`.\n- `getAllBooks()` method handles the `/books` URI path and delegates to the BookService's `findALl()` method. In this case it returns a `Flux<Book>`, which is a pulisher that send a stream of Books to Spring WebFlux. When all books have been retrieved from MongoDB, the reactive MongoDB `findAll()` method will publish a completion notification telling WebFlux that it is finished. WebFlux can then send the response back to the caller\n- Finally, the `createBook()` method is annotated with the `@PostMapping` annotation, which is a convenience annotation for `@RequestMapping(method = RequestMethod.POST)`. `@PostMapping` handles the `/book` URI path. The `@RequestBody` annotation, included when we added `@RestController` tells WebFlux to convert the object received from the caller into a Book instance. The `createBook()` method delegates to the BookService's `save()` method and then returns a `Mono<Book>` that publishes the newly created Book.\n\n> Three styles of denpendency injection\n> The BookController uses contructor injetcion to autowire a BookService into itself. Recall that Spring supports three types of denpendency injection:\n> - Constructor injection: when a Spring-managed bean defines a constructor that accepts another Spring-managed bean, Spring will automatically retrieve an instance of that bean from the application context and pass it to the constructor\n> - Setter injection: when a Spring-managed bean defines a setter method that accepts another Spring-managed bean, Spring will likewise find it in the application context and invoke the setter method\n> - @Autowired: when a Spring-managed bean defines a field annotated with the @Autowired annotation, Spring will automatically set the value of the filed\n\n## Run the application\nYou can run your new service by exeucting the following command from the root directory of your project:\n```bash\nmvn spring-boot:run\n```\n\nNow take out your favorite REST service testing tool, like Poster, or execute the following cURL commands on your command-line. See the responses below each cURL command:\n```bash\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"title\": \"Book 1\", \"author\": \"Mr Author\"}' http://localhost:8080/book\n{\"id\":\"5b2ea197c0f951f7354085d7\",\"title\":\"Book 1\",\"author\":\"Mr Author\"}\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"title\": \"Book 2\", \"author\": \"Other Author\"}' http://localhost:8080/book\n{\"id\":\"5b2ea1b0c0f951f7354085d8\",\"title\":\"Book 2\",\"author\":\"Other Author\"}\n$ curl http://localhost:8080/books\n[{\"id\":\"5b2ea197c0f951f7354085d7\",\"title\":\"Book 1\",\"author\":\"Mr Author\"},{\"id\":\"5b2ea1b0c0f951f7354085d8\",\"title\":\"Book 2\",\"author\":\"Other Author\"}]\n$ curl http://localhost:8080/book/5b2ea197c0f951f7354085d7\n{\"id\":\"5b2ea197c0f951f7354085d7\",\"title\":\"Book 1\",\"author\":\"Mr Author\"}\n```\n\n## Functional reactive services with Spring WebFlux\nSpring WebFlux application can be built using either Spring MVC annotations (which you just saw) or functional programming techniques. Functional programming has many benefits, such as immutable data objects, inherent thread safety, the ability to pass functions to other functions, and the ability to program declaratively rather than imperatively (meaning that you describe the problem you are solving, not hte steps that define how to solve the problem).\n\nPure functions -- or functions that provide the same result every time they are given the same input -- limit side-effects, which makes testing easier. They also allows for easy parallelization and caching. If you haven't taken the time to start learning functional programming, I encourage you to do so; It will change how you approach and solve problems.\n\nArjen Poutsma, a mamber of the Spring WebFlux team, posted a vieo on YouTube entitled \"New in Spring Framework 5.0: Functional Web framework\" that describes the motivation behind building functional web applications and how Spring WebFlux can be used functionally. In short, he argues for more library, less framework, meaning that WebFlux can be used as a library that leaves you in control of your web application. This is an efficient alternative to utilizing the full Spring framework, which is the approach we took in the previous section.\n\nWe'll conclude this tutorial by using Spring WebFlux to build another BookHandler application, this time using functional techniques.\n\n## Router and handler\nOur functional Spring WebFlux application will be based on two main components, a router and a handler. The router is responsible ofr routing HTTP requests to handler functions. Handler functions are responsible for executing business functionality and building responses.\n\nListing 8 shows the source code for the BookHandler class.\n\n### Listing 8. BookHandler.java\n```java\n@Component\npublic class BookHandler {\n    private final BookService bookService;\n    public BookHandler(BookService bookService) {\n        this.bookService = bookService;\n    }\n    public Mono<ServerResponse> findById(ServerRequest request) {\n        String id = request.pathVariable(\"id\");\n        return ok()\n                .contentType(MediaType.APPLICATION_JSON)\n                .body(bookService.findById(id), Book.class);\n    }\n    public Mono<ServerResponse> findAll(ServerRequest request) {\n        return ok()\n                .contentType(MediaType.APPLICATION_JSON)\n                .body(bookService.findAll(), Book.class);\n    }\n    public Mono<ServerResponse> save(ServerRequest request) {\n        final Mono<Book> book = request.bodyToMono(Book.class);\n        return ok()\n                .contentType(MediaType.APPLICATION_JSON)\n                .body(fromPublisher(book.flatMap(bookService::save), Book.class));\n    }\n    public Mono<ServerResponse> delete(ServerRequest request) {\n        String id = request.pathVariable(\"id\");\n        return ok()\n                .contentType(MediaType.APPLICATION_JSON)\n                .body(bookService.deleteById(id), Void.class);\n    }\n}\n```\n\nThe BookHandler is annotated with `@Component`, a generic annotation that identifies the class as being a Spring-managed bean. Spring will discover this component when it does its component scan and add it to the application context. This is not a controller, but rather a standard Spring bean that will be wired into the BookRouter, defined below.\n\nThe functions in the BookHandler return `Mono<ServerResponse>`. This component is a litte different from the BookController built in the previous section, which returned `Mono<Book>` and `Flux<Book>`. When building a handler function, you are responsible for building the response that will ultimately be returned to the caller. All methods are requried to return a `Mon<ServerResponse>`, even if the body of the response contains a Flux.\n\nEach method is passed a ServerRequest argument, which provides access to request parameters, such as path variables, query parameters, and, in the case of the `save()` method, the body of a POST or PUT.\n\nIn order to build a response body, we construct it using a BodyBuilder. The `ok()` method returns a BodyBuilder with an HTTP status code of 200; it is a convenience method for `status(HttpStatus.OK)`. The BodyBuilder interface defines methods for setting the content type, content length, as well as HTTP header values. The `body()` method sets the contents to be returned to the caller and returns a `Mono<ServerResponse>`.\n\n## Important methods: save() and flatMap()\nThe method in this class that deservers special attention is the `save()` method. First, in order to deserialize the body payload to a class instance, we invoke the `bodyToMono()` method. This mehtod returns a `Mono<Book>`, which is a publisher that will provide a Book instance asynchronously when it is available. With the `Mono<Book>` in hand, we construct the response using the `ok()` method, as usual, and then the `body()` method is implemented as folows:\n```java\nfromPublisher(book.flatMap(bookService::save), Book.class)\n```\n\nThe `fromPbulisher()` method reutrns a BodyInserter, which the `body()` method expects, from a publisher function and the class of the object that will be published, Book.class in this case. The publisher function is passed the following:\n```java\nbook.flatMap(bookService::save)\n```\n\nYou're probably already familiar with the Java 8 `map()` funciton, which converts every input item in a stream (or in the Mono in this case) into another object. The Java 8 `flatMap()` function is similar, but it \"flattens\" the response. For example, if we were constructing a list of objects and the map function returned am embedded list, rather than a list of lists, the `flatMap()` funciton would return a single list that contained all of the elements in all embedded lists.\n\nWe can read this function as follow: for each Book in the book object, which is a Mono so there will only be one, call the BookService's `save()` method, and return the result of `BookService::save` to the caller (`fromPublisher()` in this case) as a single Mono object (not a `Mono<Mono<Book>>`). The `faltMap()` function takes care of flattening embedded Monos into a single Mono.\n\n## Example application code\nListing 9 show the source code for the BookRouter class.\n\n### Listing 9. BookRouther.java\n```java\n@Configuration\npublic class BookRouter {\n    @Bean\n    public RouterFunction<ServerResponse> route(BookHandler handler) {\n        return RouterFunctions\n                .route(GET(\"/fbooks\").and(accept(MediaType.APPLICATION_JSON)), handler::findAll)\n                .andRoute(GET(\"/fbook/{id}\").and(accept(MediaType.APPLICATION_STREAM_JSON)), handler::findById)\n                .andRoute(POST(\"/fbook\").and(accept(MediaType.APPLICATION_JSON)), handler::save)\n                .andRoute(DELETE(\"/fbook/{id}\").and(accept(MediaType.APPLICATION_JSON)), handler::delete);\n    }\n}\n```\n\nThe BookRouter class is annotated with `@Configuration`, which is a Spring annotation that identifies a class as a configuration class whose method create other Spring beans. In this example, the `router()` method creates a bean of type `RouterFunciton<ServerResponse>`. Router functions are responsible for translting HTTP routes (HTTP verb and URI path) into handler functions. For example, the first route reads: if there is a request of type GET for the URI path `/fbooks` and a media accept type of APOLICATION_JSON, then invoke the BookHandler's `findAll()` method.\n\nThe syntax might look a little strange, so let's take it apart. First, consider the `GET()` method:\n```java\nGET(\"/fbooks\").and(accept(MediaType.APPLICATION_JSON)), handler::findAll\n```\n\nThe `GET()` method is statically imported from the RequestPredicates class and reutrns a RequestPredicate instance. A predicate is a boolean-valued function with a `test()` method that evaluates the predicate and returns true or false if the predicate's conditions are met. A RequestPredicate evaluates a ServerRequest to determine whether or not this route should handle the request. So our goal is to define the criteria under which our handler function should be called.\n\n`GET()` is a convenience method for \n\n```\nmethod(HttpMethod.GET).and(path(String Pattern))\n```\n\nThis means that the RequestPredicate will compare the HTTP verb in the ServerRequest to HttpMehod.GET and the path to the specified URI pattern. We then chain `accept(MediaType.APPICATION_JSON)` to the predicate using the `and()` method, which is a standard Predicate funciton that evaluates two prediates using AND boolean logic. The `accept()` method adds a condition to the predicate that verifies the \"Accept\" HTTP header against the provided media type. In the end, the `handler::findAll` method will be invoked if the following conditions are true:\n- The HTTP verb is GET\n- THe URI path is `/fbooks`\n- The HTTP \"ACCEPT\" header is \"applicaiton/json\"\n\nThe `RoutherFunction::route` method returns a RouterFunction that allows you to add additional routes by invoking the `addRoute()` method. As you can see, we leverage this capability to chain together several different routes: GET with an id request parameter, POST and DELETE.\n\nThe only other magic in the BookRouter::route method is the Spring injection of the BookHandler. The router() method is annotated with `@Bean`, which means that it returns a Spring-managed bean. When Spring invokes this method it will see that requires a BookHandler argument. Having already discovered the BookHandler (annotated with `@Component`), and having added it to the application context, it will pass the Spring-managed BookHandler to the `route()` method.\n\nIn summary, the `BookRouter::route` create a RouterFunction, which is composed of several router functions that define the conditions for which specific handler functions should be invoked.\n\n## Run and test the application\nYou can test this code by starting the Spring Boot application with the following command:\n```bash\nmvn spring-boot:run\n```\n\nNow you have two sets of end-points: `/book` uses the BookController and `/fbook` uses the functional BookRouter and BookHandler. The following are sample cURL commands to invoke these services:\n```bash\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"title\": \"Book 1\", \"author\": \"Author\"}' http://localhost:8080/fbook\n{\"id\":\"5b394748aaac8a7c67f94367\",\"title\":\"Book 1\",\"author\":\"Author\"}\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"title\": \"Book 2\", \"author\": \"Author\"}' http://localhost:8080/fbook\n{\"id\":\"5b39474daaac8a7c67f94368\",\"title\":\"Book 2\",\"author\":\"Author\"}\n$ curl http://localhost:8080/fbooks\n[{\"id\":\"5b394748aaac8a7c67f94367\",\"title\":\"Book 1\",\"author\":\"Author\"},\n {\"id\":\"5b39474daaac8a7c67f94368\",\"title\":\"Book 2\",\"author\":\"Author\"}]\n$ curl http://localhost:8080/fbook/5b39474daaac8a7c67f94368\n{\"id\":\"5b39474daaac8a7c67f94368\",\"title\":\"Book 2\",\"author\":\"Author\"}\n$ curl --header \"Content-Type: application/json\" --request DELETE http://localhost:8080/fbook/5b39474daaac8a7c67f94368\n$ curl http://localhost:8080/fbooks\n[{\"id\":\"5b394748aaac8a7c67f94367\",\"title\":\"Book 1\",\"author\":\"Author\"}]\n```\n\n## Conclusion\nSpring WebFlux is Spring's reactive web framework that uses the Reactor library to asynchronously manage web requests. I start this article by reviewing reactive systems and the Reactive Streaming API, and described the problems they're designed to solve. I then showd you two ways to create a Spring WebFlux application: the tradition-based approach and the fuctnional approach. Spring WebFlux was introduced in Spring framework 5, and is new to the Spring ecosystem. It will undoubtedly continue to evolve. Still, it is already a powerful framework and library very scalable reactive web applications.","source":"_posts/JavaWorld/Spring Series Part 3, Spring WebFlux.md","raw":"---\ntitle: Spring Series Part 3, Spring WebFlux\n\ntag:\n- The Spring Series\n\ncategories:\n- JavaWorld\n\ndate: 2020-04-19 11:00:03\n---\nSpring WebFlux introduces reactive web development to the Spring ecosystem. This article will get you started with reactive systems and reactive programming with Spring. First you'll find out why reactive systems are important and how they're implemented in Spring framework 5, then you'll get a hands-on introduction to building reactive services using Spring WebFlux. We'll build our first reactive application using annotations. I'll also show you how to build a similar application using Spring's newer functional features.\n\n## Reactive systems and Spring WebFlux\nThe term reactive is currently popular with developers and IT managers, but I've noticed some uncertainty about what it actually means. To get clearer on what reactive systems are, it's helpful to understand the fundamental problem they're designed to solve. In this section we'll talk about reactive systems in general, and I'll introduce the Reactive Systems API for Java applications.\n\n> Scalability in Spring MVC\n> Spring MVC has earned its place among (在…中) the top choices for building Java web applications and web services. Spring MVC seamlessly (无缝地) integrates (使合并) annotations into the robust (强健) architecture of a Spring-based application. This enables developers familiar with Spring to quickly build satisfying, highly functional web applications. Scalability (可扩展性) is a challenge for Spring MVC applications, however. That is the problem Spring WebFlux seeks to address.\n\n### Blocking vs non-blocking web frameworks\nIn traditional web applications, when a web server receives a request from a client, it accepts that requests and places it in an execution queue. A thread in the execution queue's thread pool then receives the request, reads its input parameters, and generates a response. Along the way, if the execution thread needs to call a blocking resource -- such as a database, a filesystem, or another web service -- that thread executes the blocking until the external resource responds, which causes performance issues and limits scalability. To combat these issues, developers create generously sized thread pools, so that while one thread is blocked another thread can continue to process requests. Figure 1 shows the execution flow for a traditional, blocking web application.\n\n![Figure 1. Threaded execution model](001.jpg)\n\nNon-blocking web frameworks such as NodeJS and Play take a different approach (方法). Instead of executing a blocking request and waiting for it to complete, the use non-blocking I/O. In this paradigm (范例), an application executes a request, provides code to be executed when a response is returned, and then given its thread back to the server. When an external resource returns a response, the provided code will be executed. Internally (内部的), non-blocking frameworks operate using an event loop. Within the loop, the appliation code either provides a callback or a future containing the code to execute when the asnchronous (异步) loop completes.\n\nBy nature, non-blocking frameworks are event-driven. This requires a different programming paradigm and a new approach to reasoning (推理) about how your code will be executed. Once you've warpped (变形的) your head arround it, reactive programming can lead to very scalable applications.\n\n> Callbacks, promises, and futures\n> In early days, JavaScript handled all asynchronous functionality via callbacks. In this scenario, when an event occurs (such as when a response from a service call becomes available) the callback is executed. While callbacks are still prevalent, JavaScript's asynchronous functionality has more recently moved to promises. With promises, a function call returns immediately, returning a promise to deliver the results at a future time. Rather than promises, Java implements a similar paradigm using futures. In this usage, a method returns a future that will have a value at some time in the future.\n\n## Reactive programming\nYou may have hear the term reactive programming related to web development frameworks and tools, but what does it really mean? The term as we've come to know it originated from the Reactive Manifesto, which defines reactive systems as having four core traits (特征):\n- Reactive systems are **responsive**, meaning that they respond in a timely manner (及时的), in all possible circumstances (环境). They focus on providing rapid (瞬间) and consistent response times, establishing (建立) reliable upper bounds (上边界) so they deliver (兑现) a consistent quality of service\n- Reactive systems are **resilient** (能复原的), meaning that they remain reponsive in the face of failure. Resilience is achieved (实现) by the techniques of relication (同步复制), containment (包容), isolation (隔离性), and delegation (委派). By isolating application compoents from each other, you can contain failures and protect the system as a whole\n- Reactive systems are elastic (灵活的), meaning that they stay responsive under varying workloads. This is achieved by scaling application components elastically to meet the current demand (需要)\n- Reactive systems are message-driven, meaning that they rely on asynchronous message passing between components. This allows you to create coupling (耦合), isolation, and location transparency (透明度)\n\nFigure 2 shows how these traits (特征) flow together in a reactive system.\n\n![Figure 2. Traits of a reactive system](002.jpg)\n\n## Characteristics of a reactive system\nReactive systems are built by creating isolated components that communicate with one another asynchronously and can scale quickly to meet the current load. Components still fail in reactive systems, but there are defind actions to perform as a result of the failure, which keeps the system as a whole functional and responsive.\n\nThe Reaactive Manifesto is abstract, but reactive applicaitons are typically characcterized by follwoing components or techniques:\n- **Data streams**: A stream is a squence of events ordered in time, such as user interactions, REST service calls, JMS messages, and results from a database\n- **Asynchronous**: Data stream events are captured asychronously and your code defines what to do when an event is emiited, when an error occurs, and when the stream of events has completed\n- **Non-blocking**: As you process events, your code should not block and preform synchronouss calls; intead, it should make asychronous calls and respond as the results of those calls are returned\n- **Back pressure**: Components control the number of event and how often they are emitted (发出). In reactive terms, your component is referred to as the subscriber and events are emitted by a pushlier. This is important because the subscriber is in control of how much data it receives and thus will not overburden (超载) itself\n- **Failure message**: Instead of components throwing exceptions, failures are sent as message to a handler function. Whereas throwing exceptions breaks the stream, defining a function to handle failures as the occur does not\n\n## The Reactive Streams API\nThe new Reactive Stream API was created by engineers from Netflix, Pivotal, Lightbeand, RedHat, Twitter, and Oracle, among others. Pushished in 2015, the Reactive Streams API is now part of Java 9. It defines four interfaces:\n- **Publisher**: Emits a sequence of events to subscriber\n- **Subscriber**: Recevies and processes events emitted by a Publisher\n- **Subscription**: Defines a one-to-one relationship between a Publisher and a Subscriber\n- **Processor**: Represent a processing stage consisting of both a Subscriber and a Publisher and obeys the contracts of both\n\nFigure 3 shows the relationship between a Publisher, and Subscription.\n\n![Figure 3. Interfaces in the Reactive Streams API](003.jpg)\n\nIn essence (本质), a Subscriber creates a Subscription to a Publisher and, when the Publisher has available data, it sends an event to the Subscriber with a stream of elements. Note that the Subscriber managers its back pressure (挤压) inside its Subscription (订阅) to the Publisher.\n\nNow that you know a litte bit about reactive systems and the Reactive Streams API, let's turn our attention to the tools Spring uses to implement reactive systems: Spring WebFlux and the Reactor library.\n\n## Project Reactor\nProject Reactor is a third-party framework based on Java's Reactive Streams Specification, which is used to build ono-blocking web applications. Project Reactor provides two publishers that are heavily used in Spring WebFlux:\n- **Mono**: Returns 0 or 1 element\n- **Flux**: Returns 0 or more elements. A Flux can be endless, meaning that it can keep emitting elements forever, or it can return a sequence of elements and then send a completion notification when it has returned all of its elements\n\nMonos and fluxs are conceptually similar to futures, but more powerful. When you invoke a function that returns a mono or a flux, it will return immediately. The results of the function call will be delivered to you through the mono or flux when they become available.\n\nIn Spring WebFlux, you will reactive libraries that return monos and fluxes and your controllers will return monos and fluexs. Because these return immediately, your controllers will effectively give up their threads and allow Reactor to handle responses asynchronously. It is improtant to note that only by using reactive libraries can you WebFlux services stay reactive. If you use non-reative libraries, such as JDBC calls, your ocde will block and wait for those calls to complete before returning.\n\n> Reactive programming with MongoDB\n>  Currently, there aren't many reactive database libraries, so you may be wondering if it's practical to write rective services. The good news is that MongoDB has reactive support and there are a couple of third-party reactive database drivers for MySQL and Postgres. For all other use cases, WebFlux provides a machanism for executing JDBC calls in a reactive manner, albeit using a secondary thread pool that makes blocking JDBC calls.\n\n## Get started with Spring WebFlux\nFor our first how-to example, we'll create a simple book service that persists books to and from MongoDB in a reactive fashion.\n\nStart by navigating to the Spring Initializr homepage, where you'll choose a Maven Project with Java and select the most current release of Spring Boot (2.0.3 at time of this writing). Give your project a group name, such as \"com.javaworld.webflux\", and an artifact name, such as \"bookservice\". Expand the Switch to the full version like to show the full list of dependencies. Select the following dependencies for the example application:\n- Web -> Reactive Web: The dependency inlucdes Spring WebBlux\n- NoSQL -> Reactive MongoDB: This dependency inluceds the reactive drivers for MongoDB\n- NoSQL -> Embedded MongoDB: This dependency allows us to run an embedded version of MongoDB, so there is no need to install a separate instance. Usually this is used for testing, but we'll include it in our release code to avoid installing MongoDB\n- Core -> Lombok: Using Lombok is optional as you do not need it to build a Spring WebFlux. The benefit of using Project Lombok is that is enables you to add annotations to classes that will automatically generate getters and setters, constructors, hashCode(), equals(), and more.\n\nWhen you're finished you should see something similar to Figure 4.\n\n![Figure 4. Screenshot of the Spring Initializr project](004.jpg)\n\nPressing Generate Proejct will trigger the download of a zip file containing your proejct source code. Unzip the download file and open it in your favorite IDE. If you're using IntelliJ, choose File and then Open, and navigate to the directory where the download zip file has been decompressed.\n\nYou'll find that Spring Initializr has generated two important files:\n- A Maven pom.xml file, includes all necessary dependencies for the application\n- BookserviceApplicataion.java, which is the Spring Boot starter class for the application\n\nListing 1 shows the contents fo the generated pom.xml file.\n\n### Listing 1. Maven pom.xml for the Spring WebFlux example application\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.javaworld.webflux</groupId>\n    <artifactId>bookservice</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>bookservice</name>\n    <description>Demo project for Spring Boot</description>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.3.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-webflux</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>de.flapdoodle.embed</groupId>\n            <artifactId>de.flapdoodle.embed.mongo</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.projectreactor</groupId>\n            <artifactId>reactor-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n### Application dependencies\nThe `<parent>` node references version 2.0.3.RELEASE of the spring-boot-starter-parent POM file. The parent POM file ensures that all dependency versions are compatible with this version of Spring Boot. These dependencies include:\n- spring-boot-starter-webflux: Packs everything you need to run a WebFlux application, including spring-web (which gives you all of the Spring MVC capabilities) and Netty, which will be our reactive web server, plus a lot more\n- spring-boot-starter-data-mongodb-reactive: Includes the MongoDB drivers, reactive support for MongoDB, and Spring Data to make writing persistence (坚持) code easier\n- de.flapdoodle.embed.mongo: Includes an embedded MongoDB instance. By default this dependency will be scoped to \"test\" so that you can write tests that run against an embedded MongoDB instance and then connect to a standalone MongoDB instance in production. For the purpose of this example I removed the test scoping so that we can run our book service against this embedded MongoDB instance\n- lombok: Adds annotation niceties for generating getters and setters, constructors, and forth to the application's model classes\n- spring-boot-starter-test: Includes Spring testing utilities as well as JUnit and Mockito\n- reactor-test: Includes testing utilities for testing the Reactor engine, which is used by Spring WebFlux for reactive functionality\n\n## The Spring Boot starter class\nListing 2 shows the BookserviceApplication.java file.\n\n### Listing 2. BookserviceApplication\n```java\n@SpringBootApplication\npublic class BookserviceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(BookserviceApplication.class, args);\n    }\n}\n```\n\nThe BookserviceApplication is annotated with the **@SpringBootApplication** annotation. **@SpringBootApplication** is a convenience (方便) annotation that encompasses (包含) the following annotations:\n- **@EnableAutoConfiguration** enables auto-configuration of the Spring application context, attemping to guess and configure beans that you are likely to need. Auto-configuration classes are usually applied based on your CLASSPATH and the beans you have defined. For example, when you include the embedded MongoDB dependency in your CLASSPATH, Spring will automatically create an instance in memory and wire it into the application context\n- **@SpringBootConfiguration** identifies this class as containing the Spring Boot configuration\n- **@ComponentScan** directs Spring to scan the CLASSPATH, in the current package and all sub-packages, for Spring components. In short, this allows you to create a web package and add a **@Controller**, which Spring will find and make available to the application\n\nThe BookserviceApplication itself defines a main() method that delegates to the SpringApplication.run() method, which starts the application.\n\n### Using Spring WebFlux with annotations\nIn order to build our book service we need to define the following classes and interfaces:\n- **Book**: A model class representing a book in our service\n- **BookRepository**: A Spring Data MongoDB interface telling Spring Data to generate persistence code for books to and from MongoDB\n- **BookService** and **BookServiceImpl**: The \"business\" service used to interact with the BookRepository to persist book to and from MongoDB. In this example, a service is not necessary and we could place calls to the BookRepository directly in our controller. When building Spring applications it is recommended to create this layer as a business interface between your controllers and persistence repository, however. The business interface enables you to change your repository -- such as moving to an SQL-based database or calling another web service -- without impacting your controllers.\n- **BookController**: The web controller that will receive web requests and return reactive reponse (Monos and Fluxs)\n\n## Example application source code\nListing 3 shows the source code for our model class, Book.java\n\n### Listing 3. Book.java\n```java\n@Document\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Book {\n    private String id;\n    private String title;\n    private String author;\n}\n```\n\nThe Book class is a simple POJO that contains an ID, title, and author. It is annotated with the **@Document** annotation, which identifies it as a MongoDB document. Spring Data will map documents to collections in MongoDB. THe next three annotations -- **@Data**, **@NoArgsContructor**, and **@AllArgsConstructor** -- are Lombok annotations. **@Data** includes the following capabilities:\n- Generates getters and setters for all fields; setters are only generated for non-final properties\n- Generates a required arguments constructor\n- Generates a **ToString()** method\n- Generates **equals()** and **hashCode()** methods that uses all non-transient (非暂态) fields\n\nIn order to work with Spring Data, we need a no-argument constructor so I added **@NoArgsContructor**. For testing purposes I also added an all-argument constructor, **@AllArgsConstructor**.\n\nAs mentioned above, Lombok is not required and you can simply implement getters, setters, and constructors to the class as you normally would do.\n\nListing 4 shows the source code for the BookRepository interafce.\n\n### Listing 4. BookRepository.java\n```java\npublic interface BookRepository extends ReactiveMongoRepository<Book, String> {\n}\n```\n\nThe BookRepsiotry is a Spring Data interface, meaning that you define the interface and Spring Data weill generate the code that implements that interface. Specifically, BookRepository extends teh ReactiveMongoRepository, which defines the following reactive methods (remember that these are methods that return either monos or fluxs):\n- `Mono<Book> save()`\n- `Flux<Book> saveAll()`\n- `Flux<Book> findById()`\n- `Mono<Boolean> existsById()`\n- `Flux<Book> findAll()`\n- `Flux<Book> findAllById()`\n- `Mono<Long> count()`\n- `Mono<Void> delete()`\n- `Mono<Void> deleteById()`\n- `Mono<Voidd> delteAll()`\n- `Flux<Book> insert()`\n\nThe query methods that return one element (such as `findById()`) return `Mono<Book>`. The methods that return more than one elements (such as `findAll()`) return `Flux<Book>`. It is interesting to note that the `delete` methods return a `Mono<Void>`. `Mono<Void>` means that there is no return type, but when the operation finishes it will publish a completion notification. Recall that these are publishers, so your code, or Spring WebFlux itself, will ultimately define functionality to execute when a message is published to its subscribers.\n\nThe BookRepository is defined with two generic parameters: Book, which is the type of document that the repository managers, and String, which is the type of the primary key (the Book's id field). Your code can use the BookRepository methods to execute asynonchroous queries against MongoDB.\n\nListing 5 and 6 show the source code for the BookService and BookServiceImpl, respectively.\n\n### Listing 5. BookService.java\n```java\npublic interface BookService {\n\n    Mono<Book> findById(String id);\n\n    Flux<Book> findAll();\n\n    Mono<Book> save(Book book);\n\n    Mono<Void> deleteById(String id);\n}\n```\n\n### Listing 6. BookServiceImple.java\n```java\n@Service\npublic class BookServiceImpl implements BookService {\n\n    private BookRepository bookRepository;\n\n    public BookServiceImpl(BookRepository bookRepsotiry) {\n        this.bookRepository = bookRepository;\n    }\n\n    @Override\n    public Mono<Book> findById(String id) {\n        return bookRepository.findById(id);\n    }\n\n    @Override\n    public Flux<Book> findAll() {\n        return bookRepository.findAll();\n    }\n\n    @Override\n    public Mono<Book> save(Book book) {\n        return bookRepository.save(book);\n    }\n\n    @Override\n    public Mono<Void> deleteById(String id) {\n        return bookRepository.deleteById(id);\n    }\n}\n```\n\nServices represent business functionality and are identified in Spring using the `@Service` annotation. In this example, business functionality simply delegates to the underlying (隐含的) repository. If you needed to perform more complex logic on the queries or on the objects being persisted, this is where you would do it.\n\nListing 7 shows the source code for the BookController class.\n\n### Listing 7. BookController.java\n```java\n@RestController\npublic class BookController {\n    private BookService bookService;\n    public BookController(BookService bookService) {\n        this.bookService = bookService;\n    }\n    @GetMapping(value = \"/book/{id}\")\n    public Mono<Book> getBookById(@PathVariable String id) {\n        return bookService.findById(id);\n    }\n    @GetMapping(value = \"/books\")\n    public Flux<Book> getAllBooks() {\n        return bookService.findAll();\n    }\n    @PostMapping(value = \"/book\")\n    public Mono<Book> createBook(@RequestBody Book book) {\n        return bookService.save(book);\n    }\n}\n```\n\n## About the code\nIf you're already familiar with Spring MVC, you'll notice that the Spring WebFlux application code looks remarkably familiar. The only difference is that all controllers and services return reactive types, namely monos and fluxes. We've also employed a reactive MongoDB driver instead of a nonreactive driver. While the code is familiar, the implementation is quite different. Under the hood, Spring WebFlux will invoke your handler method, capture the reactive reponse, and then leverage Reactor to wait for the response to be published, all asynchronously.\n\nHere are some points to note about the example application:\n- `BookController` is annotated with the `@RestController` annotation, which is a convenience annotation. This annotation includes the `@Controller` annotation, which is used to identify a class that handles web request, and `@ResponseBody`, which indicates that method return values should be bound to the web response body\n- `getBookById()` method, which is annotated with the `@GetMapping` annotation. `@GetMapping` is a convenience annotation for `@RequestMapping(method = RequestMethod.GET)`. It handles the URI path: `/book/{id}`, where the id is the value retrieved from the path and passed as the `@PathVariable` in the method call. The implementation simply delegates to the BookService's `findById()` method. Note that this method returns a `Mono<Book>`, which again is a publisher that will provide WebFlux with a Book instance when it becomes available, ultimately from the reactive MongoDB call to `findById()`.\n- `getAllBooks()` method handles the `/books` URI path and delegates to the BookService's `findALl()` method. In this case it returns a `Flux<Book>`, which is a pulisher that send a stream of Books to Spring WebFlux. When all books have been retrieved from MongoDB, the reactive MongoDB `findAll()` method will publish a completion notification telling WebFlux that it is finished. WebFlux can then send the response back to the caller\n- Finally, the `createBook()` method is annotated with the `@PostMapping` annotation, which is a convenience annotation for `@RequestMapping(method = RequestMethod.POST)`. `@PostMapping` handles the `/book` URI path. The `@RequestBody` annotation, included when we added `@RestController` tells WebFlux to convert the object received from the caller into a Book instance. The `createBook()` method delegates to the BookService's `save()` method and then returns a `Mono<Book>` that publishes the newly created Book.\n\n> Three styles of denpendency injection\n> The BookController uses contructor injetcion to autowire a BookService into itself. Recall that Spring supports three types of denpendency injection:\n> - Constructor injection: when a Spring-managed bean defines a constructor that accepts another Spring-managed bean, Spring will automatically retrieve an instance of that bean from the application context and pass it to the constructor\n> - Setter injection: when a Spring-managed bean defines a setter method that accepts another Spring-managed bean, Spring will likewise find it in the application context and invoke the setter method\n> - @Autowired: when a Spring-managed bean defines a field annotated with the @Autowired annotation, Spring will automatically set the value of the filed\n\n## Run the application\nYou can run your new service by exeucting the following command from the root directory of your project:\n```bash\nmvn spring-boot:run\n```\n\nNow take out your favorite REST service testing tool, like Poster, or execute the following cURL commands on your command-line. See the responses below each cURL command:\n```bash\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"title\": \"Book 1\", \"author\": \"Mr Author\"}' http://localhost:8080/book\n{\"id\":\"5b2ea197c0f951f7354085d7\",\"title\":\"Book 1\",\"author\":\"Mr Author\"}\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"title\": \"Book 2\", \"author\": \"Other Author\"}' http://localhost:8080/book\n{\"id\":\"5b2ea1b0c0f951f7354085d8\",\"title\":\"Book 2\",\"author\":\"Other Author\"}\n$ curl http://localhost:8080/books\n[{\"id\":\"5b2ea197c0f951f7354085d7\",\"title\":\"Book 1\",\"author\":\"Mr Author\"},{\"id\":\"5b2ea1b0c0f951f7354085d8\",\"title\":\"Book 2\",\"author\":\"Other Author\"}]\n$ curl http://localhost:8080/book/5b2ea197c0f951f7354085d7\n{\"id\":\"5b2ea197c0f951f7354085d7\",\"title\":\"Book 1\",\"author\":\"Mr Author\"}\n```\n\n## Functional reactive services with Spring WebFlux\nSpring WebFlux application can be built using either Spring MVC annotations (which you just saw) or functional programming techniques. Functional programming has many benefits, such as immutable data objects, inherent thread safety, the ability to pass functions to other functions, and the ability to program declaratively rather than imperatively (meaning that you describe the problem you are solving, not hte steps that define how to solve the problem).\n\nPure functions -- or functions that provide the same result every time they are given the same input -- limit side-effects, which makes testing easier. They also allows for easy parallelization and caching. If you haven't taken the time to start learning functional programming, I encourage you to do so; It will change how you approach and solve problems.\n\nArjen Poutsma, a mamber of the Spring WebFlux team, posted a vieo on YouTube entitled \"New in Spring Framework 5.0: Functional Web framework\" that describes the motivation behind building functional web applications and how Spring WebFlux can be used functionally. In short, he argues for more library, less framework, meaning that WebFlux can be used as a library that leaves you in control of your web application. This is an efficient alternative to utilizing the full Spring framework, which is the approach we took in the previous section.\n\nWe'll conclude this tutorial by using Spring WebFlux to build another BookHandler application, this time using functional techniques.\n\n## Router and handler\nOur functional Spring WebFlux application will be based on two main components, a router and a handler. The router is responsible ofr routing HTTP requests to handler functions. Handler functions are responsible for executing business functionality and building responses.\n\nListing 8 shows the source code for the BookHandler class.\n\n### Listing 8. BookHandler.java\n```java\n@Component\npublic class BookHandler {\n    private final BookService bookService;\n    public BookHandler(BookService bookService) {\n        this.bookService = bookService;\n    }\n    public Mono<ServerResponse> findById(ServerRequest request) {\n        String id = request.pathVariable(\"id\");\n        return ok()\n                .contentType(MediaType.APPLICATION_JSON)\n                .body(bookService.findById(id), Book.class);\n    }\n    public Mono<ServerResponse> findAll(ServerRequest request) {\n        return ok()\n                .contentType(MediaType.APPLICATION_JSON)\n                .body(bookService.findAll(), Book.class);\n    }\n    public Mono<ServerResponse> save(ServerRequest request) {\n        final Mono<Book> book = request.bodyToMono(Book.class);\n        return ok()\n                .contentType(MediaType.APPLICATION_JSON)\n                .body(fromPublisher(book.flatMap(bookService::save), Book.class));\n    }\n    public Mono<ServerResponse> delete(ServerRequest request) {\n        String id = request.pathVariable(\"id\");\n        return ok()\n                .contentType(MediaType.APPLICATION_JSON)\n                .body(bookService.deleteById(id), Void.class);\n    }\n}\n```\n\nThe BookHandler is annotated with `@Component`, a generic annotation that identifies the class as being a Spring-managed bean. Spring will discover this component when it does its component scan and add it to the application context. This is not a controller, but rather a standard Spring bean that will be wired into the BookRouter, defined below.\n\nThe functions in the BookHandler return `Mono<ServerResponse>`. This component is a litte different from the BookController built in the previous section, which returned `Mono<Book>` and `Flux<Book>`. When building a handler function, you are responsible for building the response that will ultimately be returned to the caller. All methods are requried to return a `Mon<ServerResponse>`, even if the body of the response contains a Flux.\n\nEach method is passed a ServerRequest argument, which provides access to request parameters, such as path variables, query parameters, and, in the case of the `save()` method, the body of a POST or PUT.\n\nIn order to build a response body, we construct it using a BodyBuilder. The `ok()` method returns a BodyBuilder with an HTTP status code of 200; it is a convenience method for `status(HttpStatus.OK)`. The BodyBuilder interface defines methods for setting the content type, content length, as well as HTTP header values. The `body()` method sets the contents to be returned to the caller and returns a `Mono<ServerResponse>`.\n\n## Important methods: save() and flatMap()\nThe method in this class that deservers special attention is the `save()` method. First, in order to deserialize the body payload to a class instance, we invoke the `bodyToMono()` method. This mehtod returns a `Mono<Book>`, which is a publisher that will provide a Book instance asynchronously when it is available. With the `Mono<Book>` in hand, we construct the response using the `ok()` method, as usual, and then the `body()` method is implemented as folows:\n```java\nfromPublisher(book.flatMap(bookService::save), Book.class)\n```\n\nThe `fromPbulisher()` method reutrns a BodyInserter, which the `body()` method expects, from a publisher function and the class of the object that will be published, Book.class in this case. The publisher function is passed the following:\n```java\nbook.flatMap(bookService::save)\n```\n\nYou're probably already familiar with the Java 8 `map()` funciton, which converts every input item in a stream (or in the Mono in this case) into another object. The Java 8 `flatMap()` function is similar, but it \"flattens\" the response. For example, if we were constructing a list of objects and the map function returned am embedded list, rather than a list of lists, the `flatMap()` funciton would return a single list that contained all of the elements in all embedded lists.\n\nWe can read this function as follow: for each Book in the book object, which is a Mono so there will only be one, call the BookService's `save()` method, and return the result of `BookService::save` to the caller (`fromPublisher()` in this case) as a single Mono object (not a `Mono<Mono<Book>>`). The `faltMap()` function takes care of flattening embedded Monos into a single Mono.\n\n## Example application code\nListing 9 show the source code for the BookRouter class.\n\n### Listing 9. BookRouther.java\n```java\n@Configuration\npublic class BookRouter {\n    @Bean\n    public RouterFunction<ServerResponse> route(BookHandler handler) {\n        return RouterFunctions\n                .route(GET(\"/fbooks\").and(accept(MediaType.APPLICATION_JSON)), handler::findAll)\n                .andRoute(GET(\"/fbook/{id}\").and(accept(MediaType.APPLICATION_STREAM_JSON)), handler::findById)\n                .andRoute(POST(\"/fbook\").and(accept(MediaType.APPLICATION_JSON)), handler::save)\n                .andRoute(DELETE(\"/fbook/{id}\").and(accept(MediaType.APPLICATION_JSON)), handler::delete);\n    }\n}\n```\n\nThe BookRouter class is annotated with `@Configuration`, which is a Spring annotation that identifies a class as a configuration class whose method create other Spring beans. In this example, the `router()` method creates a bean of type `RouterFunciton<ServerResponse>`. Router functions are responsible for translting HTTP routes (HTTP verb and URI path) into handler functions. For example, the first route reads: if there is a request of type GET for the URI path `/fbooks` and a media accept type of APOLICATION_JSON, then invoke the BookHandler's `findAll()` method.\n\nThe syntax might look a little strange, so let's take it apart. First, consider the `GET()` method:\n```java\nGET(\"/fbooks\").and(accept(MediaType.APPLICATION_JSON)), handler::findAll\n```\n\nThe `GET()` method is statically imported from the RequestPredicates class and reutrns a RequestPredicate instance. A predicate is a boolean-valued function with a `test()` method that evaluates the predicate and returns true or false if the predicate's conditions are met. A RequestPredicate evaluates a ServerRequest to determine whether or not this route should handle the request. So our goal is to define the criteria under which our handler function should be called.\n\n`GET()` is a convenience method for \n\n```\nmethod(HttpMethod.GET).and(path(String Pattern))\n```\n\nThis means that the RequestPredicate will compare the HTTP verb in the ServerRequest to HttpMehod.GET and the path to the specified URI pattern. We then chain `accept(MediaType.APPICATION_JSON)` to the predicate using the `and()` method, which is a standard Predicate funciton that evaluates two prediates using AND boolean logic. The `accept()` method adds a condition to the predicate that verifies the \"Accept\" HTTP header against the provided media type. In the end, the `handler::findAll` method will be invoked if the following conditions are true:\n- The HTTP verb is GET\n- THe URI path is `/fbooks`\n- The HTTP \"ACCEPT\" header is \"applicaiton/json\"\n\nThe `RoutherFunction::route` method returns a RouterFunction that allows you to add additional routes by invoking the `addRoute()` method. As you can see, we leverage this capability to chain together several different routes: GET with an id request parameter, POST and DELETE.\n\nThe only other magic in the BookRouter::route method is the Spring injection of the BookHandler. The router() method is annotated with `@Bean`, which means that it returns a Spring-managed bean. When Spring invokes this method it will see that requires a BookHandler argument. Having already discovered the BookHandler (annotated with `@Component`), and having added it to the application context, it will pass the Spring-managed BookHandler to the `route()` method.\n\nIn summary, the `BookRouter::route` create a RouterFunction, which is composed of several router functions that define the conditions for which specific handler functions should be invoked.\n\n## Run and test the application\nYou can test this code by starting the Spring Boot application with the following command:\n```bash\nmvn spring-boot:run\n```\n\nNow you have two sets of end-points: `/book` uses the BookController and `/fbook` uses the functional BookRouter and BookHandler. The following are sample cURL commands to invoke these services:\n```bash\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"title\": \"Book 1\", \"author\": \"Author\"}' http://localhost:8080/fbook\n{\"id\":\"5b394748aaac8a7c67f94367\",\"title\":\"Book 1\",\"author\":\"Author\"}\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"title\": \"Book 2\", \"author\": \"Author\"}' http://localhost:8080/fbook\n{\"id\":\"5b39474daaac8a7c67f94368\",\"title\":\"Book 2\",\"author\":\"Author\"}\n$ curl http://localhost:8080/fbooks\n[{\"id\":\"5b394748aaac8a7c67f94367\",\"title\":\"Book 1\",\"author\":\"Author\"},\n {\"id\":\"5b39474daaac8a7c67f94368\",\"title\":\"Book 2\",\"author\":\"Author\"}]\n$ curl http://localhost:8080/fbook/5b39474daaac8a7c67f94368\n{\"id\":\"5b39474daaac8a7c67f94368\",\"title\":\"Book 2\",\"author\":\"Author\"}\n$ curl --header \"Content-Type: application/json\" --request DELETE http://localhost:8080/fbook/5b39474daaac8a7c67f94368\n$ curl http://localhost:8080/fbooks\n[{\"id\":\"5b394748aaac8a7c67f94367\",\"title\":\"Book 1\",\"author\":\"Author\"}]\n```\n\n## Conclusion\nSpring WebFlux is Spring's reactive web framework that uses the Reactor library to asynchronously manage web requests. I start this article by reviewing reactive systems and the Reactive Streaming API, and described the problems they're designed to solve. I then showd you two ways to create a Spring WebFlux application: the tradition-based approach and the fuctnional approach. Spring WebFlux was introduced in Spring framework 5, and is new to the Spring ecosystem. It will undoubtedly continue to evolve. Still, it is already a powerful framework and library very scalable reactive web applications.","slug":"JavaWorld/Spring Series Part 3, Spring WebFlux","published":1,"updated":"2020-05-01T07:42:35.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9nw3me900d5m33p3rsk93kt","content":"<p>Spring WebFlux introduces reactive web development to the Spring ecosystem. This article will get you started with reactive systems and reactive programming with Spring. First you’ll find out why reactive systems are important and how they’re implemented in Spring framework 5, then you’ll get a hands-on introduction to building reactive services using Spring WebFlux. We’ll build our first reactive application using annotations. I’ll also show you how to build a similar application using Spring’s newer functional features.</p>\n<h2 id=\"Reactive-systems-and-Spring-WebFlux\"><a href=\"#Reactive-systems-and-Spring-WebFlux\" class=\"headerlink\" title=\"Reactive systems and Spring WebFlux\"></a>Reactive systems and Spring WebFlux</h2><p>The term reactive is currently popular with developers and IT managers, but I’ve noticed some uncertainty about what it actually means. To get clearer on what reactive systems are, it’s helpful to understand the fundamental problem they’re designed to solve. In this section we’ll talk about reactive systems in general, and I’ll introduce the Reactive Systems API for Java applications.</p>\n<blockquote>\n<p>Scalability in Spring MVC<br>Spring MVC has earned its place among (在…中) the top choices for building Java web applications and web services. Spring MVC seamlessly (无缝地) integrates (使合并) annotations into the robust (强健) architecture of a Spring-based application. This enables developers familiar with Spring to quickly build satisfying, highly functional web applications. Scalability (可扩展性) is a challenge for Spring MVC applications, however. That is the problem Spring WebFlux seeks to address.</p>\n</blockquote>\n<h3 id=\"Blocking-vs-non-blocking-web-frameworks\"><a href=\"#Blocking-vs-non-blocking-web-frameworks\" class=\"headerlink\" title=\"Blocking vs non-blocking web frameworks\"></a>Blocking vs non-blocking web frameworks</h3><p>In traditional web applications, when a web server receives a request from a client, it accepts that requests and places it in an execution queue. A thread in the execution queue’s thread pool then receives the request, reads its input parameters, and generates a response. Along the way, if the execution thread needs to call a blocking resource — such as a database, a filesystem, or another web service — that thread executes the blocking until the external resource responds, which causes performance issues and limits scalability. To combat these issues, developers create generously sized thread pools, so that while one thread is blocked another thread can continue to process requests. Figure 1 shows the execution flow for a traditional, blocking web application.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. Threaded execution model\"></p>\n<p>Non-blocking web frameworks such as NodeJS and Play take a different approach (方法). Instead of executing a blocking request and waiting for it to complete, the use non-blocking I/O. In this paradigm (范例), an application executes a request, provides code to be executed when a response is returned, and then given its thread back to the server. When an external resource returns a response, the provided code will be executed. Internally (内部的), non-blocking frameworks operate using an event loop. Within the loop, the appliation code either provides a callback or a future containing the code to execute when the asnchronous (异步) loop completes.</p>\n<p>By nature, non-blocking frameworks are event-driven. This requires a different programming paradigm and a new approach to reasoning (推理) about how your code will be executed. Once you’ve warpped (变形的) your head arround it, reactive programming can lead to very scalable applications.</p>\n<blockquote>\n<p>Callbacks, promises, and futures<br>In early days, JavaScript handled all asynchronous functionality via callbacks. In this scenario, when an event occurs (such as when a response from a service call becomes available) the callback is executed. While callbacks are still prevalent, JavaScript’s asynchronous functionality has more recently moved to promises. With promises, a function call returns immediately, returning a promise to deliver the results at a future time. Rather than promises, Java implements a similar paradigm using futures. In this usage, a method returns a future that will have a value at some time in the future.</p>\n</blockquote>\n<h2 id=\"Reactive-programming\"><a href=\"#Reactive-programming\" class=\"headerlink\" title=\"Reactive programming\"></a>Reactive programming</h2><p>You may have hear the term reactive programming related to web development frameworks and tools, but what does it really mean? The term as we’ve come to know it originated from the Reactive Manifesto, which defines reactive systems as having four core traits (特征):</p>\n<ul>\n<li>Reactive systems are <strong>responsive</strong>, meaning that they respond in a timely manner (及时的), in all possible circumstances (环境). They focus on providing rapid (瞬间) and consistent response times, establishing (建立) reliable upper bounds (上边界) so they deliver (兑现) a consistent quality of service</li>\n<li>Reactive systems are <strong>resilient</strong> (能复原的), meaning that they remain reponsive in the face of failure. Resilience is achieved (实现) by the techniques of relication (同步复制), containment (包容), isolation (隔离性), and delegation (委派). By isolating application compoents from each other, you can contain failures and protect the system as a whole</li>\n<li>Reactive systems are elastic (灵活的), meaning that they stay responsive under varying workloads. This is achieved by scaling application components elastically to meet the current demand (需要)</li>\n<li>Reactive systems are message-driven, meaning that they rely on asynchronous message passing between components. This allows you to create coupling (耦合), isolation, and location transparency (透明度)</li>\n</ul>\n<p>Figure 2 shows how these traits (特征) flow together in a reactive system.</p>\n<p><img src=\"002.jpg\" alt=\"Figure 2. Traits of a reactive system\"></p>\n<h2 id=\"Characteristics-of-a-reactive-system\"><a href=\"#Characteristics-of-a-reactive-system\" class=\"headerlink\" title=\"Characteristics of a reactive system\"></a>Characteristics of a reactive system</h2><p>Reactive systems are built by creating isolated components that communicate with one another asynchronously and can scale quickly to meet the current load. Components still fail in reactive systems, but there are defind actions to perform as a result of the failure, which keeps the system as a whole functional and responsive.</p>\n<p>The Reaactive Manifesto is abstract, but reactive applicaitons are typically characcterized by follwoing components or techniques:</p>\n<ul>\n<li><strong>Data streams</strong>: A stream is a squence of events ordered in time, such as user interactions, REST service calls, JMS messages, and results from a database</li>\n<li><strong>Asynchronous</strong>: Data stream events are captured asychronously and your code defines what to do when an event is emiited, when an error occurs, and when the stream of events has completed</li>\n<li><strong>Non-blocking</strong>: As you process events, your code should not block and preform synchronouss calls; intead, it should make asychronous calls and respond as the results of those calls are returned</li>\n<li><strong>Back pressure</strong>: Components control the number of event and how often they are emitted (发出). In reactive terms, your component is referred to as the subscriber and events are emitted by a pushlier. This is important because the subscriber is in control of how much data it receives and thus will not overburden (超载) itself</li>\n<li><strong>Failure message</strong>: Instead of components throwing exceptions, failures are sent as message to a handler function. Whereas throwing exceptions breaks the stream, defining a function to handle failures as the occur does not</li>\n</ul>\n<h2 id=\"The-Reactive-Streams-API\"><a href=\"#The-Reactive-Streams-API\" class=\"headerlink\" title=\"The Reactive Streams API\"></a>The Reactive Streams API</h2><p>The new Reactive Stream API was created by engineers from Netflix, Pivotal, Lightbeand, RedHat, Twitter, and Oracle, among others. Pushished in 2015, the Reactive Streams API is now part of Java 9. It defines four interfaces:</p>\n<ul>\n<li><strong>Publisher</strong>: Emits a sequence of events to subscriber</li>\n<li><strong>Subscriber</strong>: Recevies and processes events emitted by a Publisher</li>\n<li><strong>Subscription</strong>: Defines a one-to-one relationship between a Publisher and a Subscriber</li>\n<li><strong>Processor</strong>: Represent a processing stage consisting of both a Subscriber and a Publisher and obeys the contracts of both</li>\n</ul>\n<p>Figure 3 shows the relationship between a Publisher, and Subscription.</p>\n<p><img src=\"003.jpg\" alt=\"Figure 3. Interfaces in the Reactive Streams API\"></p>\n<p>In essence (本质), a Subscriber creates a Subscription to a Publisher and, when the Publisher has available data, it sends an event to the Subscriber with a stream of elements. Note that the Subscriber managers its back pressure (挤压) inside its Subscription (订阅) to the Publisher.</p>\n<p>Now that you know a litte bit about reactive systems and the Reactive Streams API, let’s turn our attention to the tools Spring uses to implement reactive systems: Spring WebFlux and the Reactor library.</p>\n<h2 id=\"Project-Reactor\"><a href=\"#Project-Reactor\" class=\"headerlink\" title=\"Project Reactor\"></a>Project Reactor</h2><p>Project Reactor is a third-party framework based on Java’s Reactive Streams Specification, which is used to build ono-blocking web applications. Project Reactor provides two publishers that are heavily used in Spring WebFlux:</p>\n<ul>\n<li><strong>Mono</strong>: Returns 0 or 1 element</li>\n<li><strong>Flux</strong>: Returns 0 or more elements. A Flux can be endless, meaning that it can keep emitting elements forever, or it can return a sequence of elements and then send a completion notification when it has returned all of its elements</li>\n</ul>\n<p>Monos and fluxs are conceptually similar to futures, but more powerful. When you invoke a function that returns a mono or a flux, it will return immediately. The results of the function call will be delivered to you through the mono or flux when they become available.</p>\n<p>In Spring WebFlux, you will reactive libraries that return monos and fluxes and your controllers will return monos and fluexs. Because these return immediately, your controllers will effectively give up their threads and allow Reactor to handle responses asynchronously. It is improtant to note that only by using reactive libraries can you WebFlux services stay reactive. If you use non-reative libraries, such as JDBC calls, your ocde will block and wait for those calls to complete before returning.</p>\n<blockquote>\n<p>Reactive programming with MongoDB<br> Currently, there aren’t many reactive database libraries, so you may be wondering if it’s practical to write rective services. The good news is that MongoDB has reactive support and there are a couple of third-party reactive database drivers for MySQL and Postgres. For all other use cases, WebFlux provides a machanism for executing JDBC calls in a reactive manner, albeit using a secondary thread pool that makes blocking JDBC calls.</p>\n</blockquote>\n<h2 id=\"Get-started-with-Spring-WebFlux\"><a href=\"#Get-started-with-Spring-WebFlux\" class=\"headerlink\" title=\"Get started with Spring WebFlux\"></a>Get started with Spring WebFlux</h2><p>For our first how-to example, we’ll create a simple book service that persists books to and from MongoDB in a reactive fashion.</p>\n<p>Start by navigating to the Spring Initializr homepage, where you’ll choose a Maven Project with Java and select the most current release of Spring Boot (2.0.3 at time of this writing). Give your project a group name, such as “com.javaworld.webflux”, and an artifact name, such as “bookservice”. Expand the Switch to the full version like to show the full list of dependencies. Select the following dependencies for the example application:</p>\n<ul>\n<li>Web -&gt; Reactive Web: The dependency inlucdes Spring WebBlux</li>\n<li>NoSQL -&gt; Reactive MongoDB: This dependency inluceds the reactive drivers for MongoDB</li>\n<li>NoSQL -&gt; Embedded MongoDB: This dependency allows us to run an embedded version of MongoDB, so there is no need to install a separate instance. Usually this is used for testing, but we’ll include it in our release code to avoid installing MongoDB</li>\n<li>Core -&gt; Lombok: Using Lombok is optional as you do not need it to build a Spring WebFlux. The benefit of using Project Lombok is that is enables you to add annotations to classes that will automatically generate getters and setters, constructors, hashCode(), equals(), and more.</li>\n</ul>\n<p>When you’re finished you should see something similar to Figure 4.</p>\n<p><img src=\"004.jpg\" alt=\"Figure 4. Screenshot of the Spring Initializr project\"></p>\n<p>Pressing Generate Proejct will trigger the download of a zip file containing your proejct source code. Unzip the download file and open it in your favorite IDE. If you’re using IntelliJ, choose File and then Open, and navigate to the directory where the download zip file has been decompressed.</p>\n<p>You’ll find that Spring Initializr has generated two important files:</p>\n<ul>\n<li>A Maven pom.xml file, includes all necessary dependencies for the application</li>\n<li>BookserviceApplicataion.java, which is the Spring Boot starter class for the application</li>\n</ul>\n<p>Listing 1 shows the contents fo the generated pom.xml file.</p>\n<h3 id=\"Listing-1-Maven-pom-xml-for-the-Spring-WebFlux-example-application\"><a href=\"#Listing-1-Maven-pom-xml-for-the-Spring-WebFlux-example-application\" class=\"headerlink\" title=\"Listing 1. Maven pom.xml for the Spring WebFlux example application\"></a>Listing 1. Maven pom.xml for the Spring WebFlux example application</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.javaworld.webflux<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>bookservice<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>bookservice<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb-reactive<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.flapdoodle.embed<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>de.flapdoodle.embed.mongo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.projectreactor<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>reactor-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Application-dependencies\"><a href=\"#Application-dependencies\" class=\"headerlink\" title=\"Application dependencies\"></a>Application dependencies</h3><p>The <code>&lt;parent&gt;</code> node references version 2.0.3.RELEASE of the spring-boot-starter-parent POM file. The parent POM file ensures that all dependency versions are compatible with this version of Spring Boot. These dependencies include:</p>\n<ul>\n<li>spring-boot-starter-webflux: Packs everything you need to run a WebFlux application, including spring-web (which gives you all of the Spring MVC capabilities) and Netty, which will be our reactive web server, plus a lot more</li>\n<li>spring-boot-starter-data-mongodb-reactive: Includes the MongoDB drivers, reactive support for MongoDB, and Spring Data to make writing persistence (坚持) code easier</li>\n<li>de.flapdoodle.embed.mongo: Includes an embedded MongoDB instance. By default this dependency will be scoped to “test” so that you can write tests that run against an embedded MongoDB instance and then connect to a standalone MongoDB instance in production. For the purpose of this example I removed the test scoping so that we can run our book service against this embedded MongoDB instance</li>\n<li>lombok: Adds annotation niceties for generating getters and setters, constructors, and forth to the application’s model classes</li>\n<li>spring-boot-starter-test: Includes Spring testing utilities as well as JUnit and Mockito</li>\n<li>reactor-test: Includes testing utilities for testing the Reactor engine, which is used by Spring WebFlux for reactive functionality</li>\n</ul>\n<h2 id=\"The-Spring-Boot-starter-class\"><a href=\"#The-Spring-Boot-starter-class\" class=\"headerlink\" title=\"The Spring Boot starter class\"></a>The Spring Boot starter class</h2><p>Listing 2 shows the BookserviceApplication.java file.</p>\n<h3 id=\"Listing-2-BookserviceApplication\"><a href=\"#Listing-2-BookserviceApplication\" class=\"headerlink\" title=\"Listing 2. BookserviceApplication\"></a>Listing 2. BookserviceApplication</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookserviceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(BookserviceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The BookserviceApplication is annotated with the <strong>@SpringBootApplication</strong> annotation. <strong>@SpringBootApplication</strong> is a convenience (方便) annotation that encompasses (包含) the following annotations:</p>\n<ul>\n<li><strong>@EnableAutoConfiguration</strong> enables auto-configuration of the Spring application context, attemping to guess and configure beans that you are likely to need. Auto-configuration classes are usually applied based on your CLASSPATH and the beans you have defined. For example, when you include the embedded MongoDB dependency in your CLASSPATH, Spring will automatically create an instance in memory and wire it into the application context</li>\n<li><strong>@SpringBootConfiguration</strong> identifies this class as containing the Spring Boot configuration</li>\n<li><strong>@ComponentScan</strong> directs Spring to scan the CLASSPATH, in the current package and all sub-packages, for Spring components. In short, this allows you to create a web package and add a <strong>@Controller</strong>, which Spring will find and make available to the application</li>\n</ul>\n<p>The BookserviceApplication itself defines a main() method that delegates to the SpringApplication.run() method, which starts the application.</p>\n<h3 id=\"Using-Spring-WebFlux-with-annotations\"><a href=\"#Using-Spring-WebFlux-with-annotations\" class=\"headerlink\" title=\"Using Spring WebFlux with annotations\"></a>Using Spring WebFlux with annotations</h3><p>In order to build our book service we need to define the following classes and interfaces:</p>\n<ul>\n<li><strong>Book</strong>: A model class representing a book in our service</li>\n<li><strong>BookRepository</strong>: A Spring Data MongoDB interface telling Spring Data to generate persistence code for books to and from MongoDB</li>\n<li><strong>BookService</strong> and <strong>BookServiceImpl</strong>: The “business” service used to interact with the BookRepository to persist book to and from MongoDB. In this example, a service is not necessary and we could place calls to the BookRepository directly in our controller. When building Spring applications it is recommended to create this layer as a business interface between your controllers and persistence repository, however. The business interface enables you to change your repository — such as moving to an SQL-based database or calling another web service — without impacting your controllers.</li>\n<li><strong>BookController</strong>: The web controller that will receive web requests and return reactive reponse (Monos and Fluxs)</li>\n</ul>\n<h2 id=\"Example-application-source-code\"><a href=\"#Example-application-source-code\" class=\"headerlink\" title=\"Example application source code\"></a>Example application source code</h2><p>Listing 3 shows the source code for our model class, Book.java</p>\n<h3 id=\"Listing-3-Book-java\"><a href=\"#Listing-3-Book-java\" class=\"headerlink\" title=\"Listing 3. Book.java\"></a>Listing 3. Book.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Document</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String author;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The Book class is a simple POJO that contains an ID, title, and author. It is annotated with the <strong>@Document</strong> annotation, which identifies it as a MongoDB document. Spring Data will map documents to collections in MongoDB. THe next three annotations — <strong>@Data</strong>, <strong>@NoArgsContructor</strong>, and <strong>@AllArgsConstructor</strong> — are Lombok annotations. <strong>@Data</strong> includes the following capabilities:</p>\n<ul>\n<li>Generates getters and setters for all fields; setters are only generated for non-final properties</li>\n<li>Generates a required arguments constructor</li>\n<li>Generates a <strong>ToString()</strong> method</li>\n<li>Generates <strong>equals()</strong> and <strong>hashCode()</strong> methods that uses all non-transient (非暂态) fields</li>\n</ul>\n<p>In order to work with Spring Data, we need a no-argument constructor so I added <strong>@NoArgsContructor</strong>. For testing purposes I also added an all-argument constructor, <strong>@AllArgsConstructor</strong>.</p>\n<p>As mentioned above, Lombok is not required and you can simply implement getters, setters, and constructors to the class as you normally would do.</p>\n<p>Listing 4 shows the source code for the BookRepository interafce.</p>\n<h3 id=\"Listing-4-BookRepository-java\"><a href=\"#Listing-4-BookRepository-java\" class=\"headerlink\" title=\"Listing 4. BookRepository.java\"></a>Listing 4. BookRepository.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReactiveMongoRepository</span>&lt;<span class=\"title\">Book</span>, <span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The BookRepsiotry is a Spring Data interface, meaning that you define the interface and Spring Data weill generate the code that implements that interface. Specifically, BookRepository extends teh ReactiveMongoRepository, which defines the following reactive methods (remember that these are methods that return either monos or fluxs):</p>\n<ul>\n<li><code>Mono&lt;Book&gt; save()</code></li>\n<li><code>Flux&lt;Book&gt; saveAll()</code></li>\n<li><code>Flux&lt;Book&gt; findById()</code></li>\n<li><code>Mono&lt;Boolean&gt; existsById()</code></li>\n<li><code>Flux&lt;Book&gt; findAll()</code></li>\n<li><code>Flux&lt;Book&gt; findAllById()</code></li>\n<li><code>Mono&lt;Long&gt; count()</code></li>\n<li><code>Mono&lt;Void&gt; delete()</code></li>\n<li><code>Mono&lt;Void&gt; deleteById()</code></li>\n<li><code>Mono&lt;Voidd&gt; delteAll()</code></li>\n<li><code>Flux&lt;Book&gt; insert()</code></li>\n</ul>\n<p>The query methods that return one element (such as <code>findById()</code>) return <code>Mono&lt;Book&gt;</code>. The methods that return more than one elements (such as <code>findAll()</code>) return <code>Flux&lt;Book&gt;</code>. It is interesting to note that the <code>delete</code> methods return a <code>Mono&lt;Void&gt;</code>. <code>Mono&lt;Void&gt;</code> means that there is no return type, but when the operation finishes it will publish a completion notification. Recall that these are publishers, so your code, or Spring WebFlux itself, will ultimately define functionality to execute when a message is published to its subscribers.</p>\n<p>The BookRepository is defined with two generic parameters: Book, which is the type of document that the repository managers, and String, which is the type of the primary key (the Book’s id field). Your code can use the BookRepository methods to execute asynonchroous queries against MongoDB.</p>\n<p>Listing 5 and 6 show the source code for the BookService and BookServiceImpl, respectively.</p>\n<h3 id=\"Listing-5-BookService-java\"><a href=\"#Listing-5-BookService-java\" class=\"headerlink\" title=\"Listing 5. BookService.java\"></a>Listing 5. BookService.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Mono&lt;Book&gt; <span class=\"title\">findById</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Flux&lt;Book&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Mono&lt;Book&gt; <span class=\"title\">save</span><span class=\"params\">(Book book)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Mono&lt;Void&gt; <span class=\"title\">deleteById</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Listing-6-BookServiceImple-java\"><a href=\"#Listing-6-BookServiceImple-java\" class=\"headerlink\" title=\"Listing 6. BookServiceImple.java\"></a>Listing 6. BookServiceImple.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BookService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookRepository bookRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookServiceImpl</span><span class=\"params\">(BookRepository bookRepsotiry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bookRepository = bookRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Book&gt; <span class=\"title\">findById</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookRepository.findById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Flux&lt;Book&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookRepository.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Book&gt; <span class=\"title\">save</span><span class=\"params\">(Book book)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookRepository.save(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Void&gt; <span class=\"title\">deleteById</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookRepository.deleteById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Services represent business functionality and are identified in Spring using the <code>@Service</code> annotation. In this example, business functionality simply delegates to the underlying (隐含的) repository. If you needed to perform more complex logic on the queries or on the objects being persisted, this is where you would do it.</p>\n<p>Listing 7 shows the source code for the BookController class.</p>\n<h3 id=\"Listing-7-BookController-java\"><a href=\"#Listing-7-BookController-java\" class=\"headerlink\" title=\"Listing 7. BookController.java\"></a>Listing 7. BookController.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookController</span><span class=\"params\">(BookService bookService)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bookService = bookService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/book/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Book&gt; <span class=\"title\">getBookById</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookService.findById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/books\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Flux&lt;Book&gt; <span class=\"title\">getAllBooks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookService.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/book\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Book&gt; <span class=\"title\">createBook</span><span class=\"params\">(@RequestBody Book book)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookService.save(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"About-the-code\"><a href=\"#About-the-code\" class=\"headerlink\" title=\"About the code\"></a>About the code</h2><p>If you’re already familiar with Spring MVC, you’ll notice that the Spring WebFlux application code looks remarkably familiar. The only difference is that all controllers and services return reactive types, namely monos and fluxes. We’ve also employed a reactive MongoDB driver instead of a nonreactive driver. While the code is familiar, the implementation is quite different. Under the hood, Spring WebFlux will invoke your handler method, capture the reactive reponse, and then leverage Reactor to wait for the response to be published, all asynchronously.</p>\n<p>Here are some points to note about the example application:</p>\n<ul>\n<li><code>BookController</code> is annotated with the <code>@RestController</code> annotation, which is a convenience annotation. This annotation includes the <code>@Controller</code> annotation, which is used to identify a class that handles web request, and <code>@ResponseBody</code>, which indicates that method return values should be bound to the web response body</li>\n<li><code>getBookById()</code> method, which is annotated with the <code>@GetMapping</code> annotation. <code>@GetMapping</code> is a convenience annotation for <code>@RequestMapping(method = RequestMethod.GET)</code>. It handles the URI path: <code>/book/{id}</code>, where the id is the value retrieved from the path and passed as the <code>@PathVariable</code> in the method call. The implementation simply delegates to the BookService’s <code>findById()</code> method. Note that this method returns a <code>Mono&lt;Book&gt;</code>, which again is a publisher that will provide WebFlux with a Book instance when it becomes available, ultimately from the reactive MongoDB call to <code>findById()</code>.</li>\n<li><code>getAllBooks()</code> method handles the <code>/books</code> URI path and delegates to the BookService’s <code>findALl()</code> method. In this case it returns a <code>Flux&lt;Book&gt;</code>, which is a pulisher that send a stream of Books to Spring WebFlux. When all books have been retrieved from MongoDB, the reactive MongoDB <code>findAll()</code> method will publish a completion notification telling WebFlux that it is finished. WebFlux can then send the response back to the caller</li>\n<li>Finally, the <code>createBook()</code> method is annotated with the <code>@PostMapping</code> annotation, which is a convenience annotation for <code>@RequestMapping(method = RequestMethod.POST)</code>. <code>@PostMapping</code> handles the <code>/book</code> URI path. The <code>@RequestBody</code> annotation, included when we added <code>@RestController</code> tells WebFlux to convert the object received from the caller into a Book instance. The <code>createBook()</code> method delegates to the BookService’s <code>save()</code> method and then returns a <code>Mono&lt;Book&gt;</code> that publishes the newly created Book.</li>\n</ul>\n<blockquote>\n<p>Three styles of denpendency injection<br>The BookController uses contructor injetcion to autowire a BookService into itself. Recall that Spring supports three types of denpendency injection:</p>\n<ul>\n<li>Constructor injection: when a Spring-managed bean defines a constructor that accepts another Spring-managed bean, Spring will automatically retrieve an instance of that bean from the application context and pass it to the constructor</li>\n<li>Setter injection: when a Spring-managed bean defines a setter method that accepts another Spring-managed bean, Spring will likewise find it in the application context and invoke the setter method</li>\n<li>@Autowired: when a Spring-managed bean defines a field annotated with the @Autowired annotation, Spring will automatically set the value of the filed</li>\n</ul>\n</blockquote>\n<h2 id=\"Run-the-application\"><a href=\"#Run-the-application\" class=\"headerlink\" title=\"Run the application\"></a>Run the application</h2><p>You can run your new service by exeucting the following command from the root directory of your project:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p>\n<p>Now take out your favorite REST service testing tool, like Poster, or execute the following cURL commands on your command-line. See the responses below each cURL command:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl --header <span class=\"string\">\"Content-Type: application/json\"</span> --request POST --data <span class=\"string\">'&#123;\"title\": \"Book 1\", \"author\": \"Mr Author\"&#125;'</span> http://localhost:8080/book</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b2ea197c0f951f7354085d7\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Mr Author\"</span>&#125;</span><br><span class=\"line\">$ curl --header <span class=\"string\">\"Content-Type: application/json\"</span> --request POST --data <span class=\"string\">'&#123;\"title\": \"Book 2\", \"author\": \"Other Author\"&#125;'</span> http://localhost:8080/book</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b2ea1b0c0f951f7354085d8\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 2\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Other Author\"</span>&#125;</span><br><span class=\"line\">$ curl http://localhost:8080/books</span><br><span class=\"line\">[&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b2ea197c0f951f7354085d7\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Mr Author\"</span>&#125;,&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b2ea1b0c0f951f7354085d8\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 2\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Other Author\"</span>&#125;]</span><br><span class=\"line\">$ curl http://localhost:8080/book/5b2ea197c0f951f7354085d7</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b2ea197c0f951f7354085d7\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Mr Author\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Functional-reactive-services-with-Spring-WebFlux\"><a href=\"#Functional-reactive-services-with-Spring-WebFlux\" class=\"headerlink\" title=\"Functional reactive services with Spring WebFlux\"></a>Functional reactive services with Spring WebFlux</h2><p>Spring WebFlux application can be built using either Spring MVC annotations (which you just saw) or functional programming techniques. Functional programming has many benefits, such as immutable data objects, inherent thread safety, the ability to pass functions to other functions, and the ability to program declaratively rather than imperatively (meaning that you describe the problem you are solving, not hte steps that define how to solve the problem).</p>\n<p>Pure functions — or functions that provide the same result every time they are given the same input — limit side-effects, which makes testing easier. They also allows for easy parallelization and caching. If you haven’t taken the time to start learning functional programming, I encourage you to do so; It will change how you approach and solve problems.</p>\n<p>Arjen Poutsma, a mamber of the Spring WebFlux team, posted a vieo on YouTube entitled “New in Spring Framework 5.0: Functional Web framework” that describes the motivation behind building functional web applications and how Spring WebFlux can be used functionally. In short, he argues for more library, less framework, meaning that WebFlux can be used as a library that leaves you in control of your web application. This is an efficient alternative to utilizing the full Spring framework, which is the approach we took in the previous section.</p>\n<p>We’ll conclude this tutorial by using Spring WebFlux to build another BookHandler application, this time using functional techniques.</p>\n<h2 id=\"Router-and-handler\"><a href=\"#Router-and-handler\" class=\"headerlink\" title=\"Router and handler\"></a>Router and handler</h2><p>Our functional Spring WebFlux application will be based on two main components, a router and a handler. The router is responsible ofr routing HTTP requests to handler functions. Handler functions are responsible for executing business functionality and building responses.</p>\n<p>Listing 8 shows the source code for the BookHandler class.</p>\n<h3 id=\"Listing-8-BookHandler-java\"><a href=\"#Listing-8-BookHandler-java\" class=\"headerlink\" title=\"Listing 8. BookHandler.java\"></a>Listing 8. BookHandler.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BookService bookService;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookHandler</span><span class=\"params\">(BookService bookService)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bookService = bookService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;ServerResponse&gt; <span class=\"title\">findById</span><span class=\"params\">(ServerRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String id = request.pathVariable(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ok()</span><br><span class=\"line\">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                .body(bookService.findById(id), Book.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;ServerResponse&gt; <span class=\"title\">findAll</span><span class=\"params\">(ServerRequest request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ok()</span><br><span class=\"line\">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                .body(bookService.findAll(), Book.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;ServerResponse&gt; <span class=\"title\">save</span><span class=\"params\">(ServerRequest request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Mono&lt;Book&gt; book = request.bodyToMono(Book.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ok()</span><br><span class=\"line\">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                .body(fromPublisher(book.flatMap(bookService::save), Book.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;ServerResponse&gt; <span class=\"title\">delete</span><span class=\"params\">(ServerRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String id = request.pathVariable(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ok()</span><br><span class=\"line\">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                .body(bookService.deleteById(id), Void.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The BookHandler is annotated with <code>@Component</code>, a generic annotation that identifies the class as being a Spring-managed bean. Spring will discover this component when it does its component scan and add it to the application context. This is not a controller, but rather a standard Spring bean that will be wired into the BookRouter, defined below.</p>\n<p>The functions in the BookHandler return <code>Mono&lt;ServerResponse&gt;</code>. This component is a litte different from the BookController built in the previous section, which returned <code>Mono&lt;Book&gt;</code> and <code>Flux&lt;Book&gt;</code>. When building a handler function, you are responsible for building the response that will ultimately be returned to the caller. All methods are requried to return a <code>Mon&lt;ServerResponse&gt;</code>, even if the body of the response contains a Flux.</p>\n<p>Each method is passed a ServerRequest argument, which provides access to request parameters, such as path variables, query parameters, and, in the case of the <code>save()</code> method, the body of a POST or PUT.</p>\n<p>In order to build a response body, we construct it using a BodyBuilder. The <code>ok()</code> method returns a BodyBuilder with an HTTP status code of 200; it is a convenience method for <code>status(HttpStatus.OK)</code>. The BodyBuilder interface defines methods for setting the content type, content length, as well as HTTP header values. The <code>body()</code> method sets the contents to be returned to the caller and returns a <code>Mono&lt;ServerResponse&gt;</code>.</p>\n<h2 id=\"Important-methods-save-and-flatMap\"><a href=\"#Important-methods-save-and-flatMap\" class=\"headerlink\" title=\"Important methods: save() and flatMap()\"></a>Important methods: save() and flatMap()</h2><p>The method in this class that deservers special attention is the <code>save()</code> method. First, in order to deserialize the body payload to a class instance, we invoke the <code>bodyToMono()</code> method. This mehtod returns a <code>Mono&lt;Book&gt;</code>, which is a publisher that will provide a Book instance asynchronously when it is available. With the <code>Mono&lt;Book&gt;</code> in hand, we construct the response using the <code>ok()</code> method, as usual, and then the <code>body()</code> method is implemented as folows:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fromPublisher(book.flatMap(bookService::save), Book.class)</span><br></pre></td></tr></table></figure></p>\n<p>The <code>fromPbulisher()</code> method reutrns a BodyInserter, which the <code>body()</code> method expects, from a publisher function and the class of the object that will be published, Book.class in this case. The publisher function is passed the following:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book.flatMap(bookService::save)</span><br></pre></td></tr></table></figure></p>\n<p>You’re probably already familiar with the Java 8 <code>map()</code> funciton, which converts every input item in a stream (or in the Mono in this case) into another object. The Java 8 <code>flatMap()</code> function is similar, but it “flattens” the response. For example, if we were constructing a list of objects and the map function returned am embedded list, rather than a list of lists, the <code>flatMap()</code> funciton would return a single list that contained all of the elements in all embedded lists.</p>\n<p>We can read this function as follow: for each Book in the book object, which is a Mono so there will only be one, call the BookService’s <code>save()</code> method, and return the result of <code>BookService::save</code> to the caller (<code>fromPublisher()</code> in this case) as a single Mono object (not a <code>Mono&lt;Mono&lt;Book&gt;&gt;</code>). The <code>faltMap()</code> function takes care of flattening embedded Monos into a single Mono.</p>\n<h2 id=\"Example-application-code\"><a href=\"#Example-application-code\" class=\"headerlink\" title=\"Example application code\"></a>Example application code</h2><p>Listing 9 show the source code for the BookRouter class.</p>\n<h3 id=\"Listing-9-BookRouther-java\"><a href=\"#Listing-9-BookRouther-java\" class=\"headerlink\" title=\"Listing 9. BookRouther.java\"></a>Listing 9. BookRouther.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookRouter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RouterFunction&lt;ServerResponse&gt; <span class=\"title\">route</span><span class=\"params\">(BookHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> RouterFunctions</span><br><span class=\"line\">                .route(GET(<span class=\"string\">\"/fbooks\"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::findAll)</span><br><span class=\"line\">                .andRoute(GET(<span class=\"string\">\"/fbook/&#123;id&#125;\"</span>).and(accept(MediaType.APPLICATION_STREAM_JSON)), handler::findById)</span><br><span class=\"line\">                .andRoute(POST(<span class=\"string\">\"/fbook\"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::save)</span><br><span class=\"line\">                .andRoute(DELETE(<span class=\"string\">\"/fbook/&#123;id&#125;\"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::delete);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The BookRouter class is annotated with <code>@Configuration</code>, which is a Spring annotation that identifies a class as a configuration class whose method create other Spring beans. In this example, the <code>router()</code> method creates a bean of type <code>RouterFunciton&lt;ServerResponse&gt;</code>. Router functions are responsible for translting HTTP routes (HTTP verb and URI path) into handler functions. For example, the first route reads: if there is a request of type GET for the URI path <code>/fbooks</code> and a media accept type of APOLICATION_JSON, then invoke the BookHandler’s <code>findAll()</code> method.</p>\n<p>The syntax might look a little strange, so let’s take it apart. First, consider the <code>GET()</code> method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET(<span class=\"string\">\"/fbooks\"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::findAll</span><br></pre></td></tr></table></figure></p>\n<p>The <code>GET()</code> method is statically imported from the RequestPredicates class and reutrns a RequestPredicate instance. A predicate is a boolean-valued function with a <code>test()</code> method that evaluates the predicate and returns true or false if the predicate’s conditions are met. A RequestPredicate evaluates a ServerRequest to determine whether or not this route should handle the request. So our goal is to define the criteria under which our handler function should be called.</p>\n<p><code>GET()</code> is a convenience method for </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">method(HttpMethod.GET).and(path(String Pattern))</span><br></pre></td></tr></table></figure>\n<p>This means that the RequestPredicate will compare the HTTP verb in the ServerRequest to HttpMehod.GET and the path to the specified URI pattern. We then chain <code>accept(MediaType.APPICATION_JSON)</code> to the predicate using the <code>and()</code> method, which is a standard Predicate funciton that evaluates two prediates using AND boolean logic. The <code>accept()</code> method adds a condition to the predicate that verifies the “Accept” HTTP header against the provided media type. In the end, the <code>handler::findAll</code> method will be invoked if the following conditions are true:</p>\n<ul>\n<li>The HTTP verb is GET</li>\n<li>THe URI path is <code>/fbooks</code></li>\n<li>The HTTP “ACCEPT” header is “applicaiton/json”</li>\n</ul>\n<p>The <code>RoutherFunction::route</code> method returns a RouterFunction that allows you to add additional routes by invoking the <code>addRoute()</code> method. As you can see, we leverage this capability to chain together several different routes: GET with an id request parameter, POST and DELETE.</p>\n<p>The only other magic in the BookRouter::route method is the Spring injection of the BookHandler. The router() method is annotated with <code>@Bean</code>, which means that it returns a Spring-managed bean. When Spring invokes this method it will see that requires a BookHandler argument. Having already discovered the BookHandler (annotated with <code>@Component</code>), and having added it to the application context, it will pass the Spring-managed BookHandler to the <code>route()</code> method.</p>\n<p>In summary, the <code>BookRouter::route</code> create a RouterFunction, which is composed of several router functions that define the conditions for which specific handler functions should be invoked.</p>\n<h2 id=\"Run-and-test-the-application\"><a href=\"#Run-and-test-the-application\" class=\"headerlink\" title=\"Run and test the application\"></a>Run and test the application</h2><p>You can test this code by starting the Spring Boot application with the following command:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p>\n<p>Now you have two sets of end-points: <code>/book</code> uses the BookController and <code>/fbook</code> uses the functional BookRouter and BookHandler. The following are sample cURL commands to invoke these services:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl --header <span class=\"string\">\"Content-Type: application/json\"</span> --request POST --data <span class=\"string\">'&#123;\"title\": \"Book 1\", \"author\": \"Author\"&#125;'</span> http://localhost:8080/fbook</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b394748aaac8a7c67f94367\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;</span><br><span class=\"line\">$ curl --header <span class=\"string\">\"Content-Type: application/json\"</span> --request POST --data <span class=\"string\">'&#123;\"title\": \"Book 2\", \"author\": \"Author\"&#125;'</span> http://localhost:8080/fbook</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b39474daaac8a7c67f94368\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 2\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;</span><br><span class=\"line\">$ curl http://localhost:8080/fbooks</span><br><span class=\"line\">[&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b394748aaac8a7c67f94367\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b39474daaac8a7c67f94368\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 2\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;]</span><br><span class=\"line\">$ curl http://localhost:8080/fbook/5b39474daaac8a7c67f94368</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b39474daaac8a7c67f94368\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 2\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;</span><br><span class=\"line\">$ curl --header <span class=\"string\">\"Content-Type: application/json\"</span> --request DELETE http://localhost:8080/fbook/5b39474daaac8a7c67f94368</span><br><span class=\"line\">$ curl http://localhost:8080/fbooks</span><br><span class=\"line\">[&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b394748aaac8a7c67f94367\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Spring WebFlux is Spring’s reactive web framework that uses the Reactor library to asynchronously manage web requests. I start this article by reviewing reactive systems and the Reactive Streaming API, and described the problems they’re designed to solve. I then showd you two ways to create a Spring WebFlux application: the tradition-based approach and the fuctnional approach. Spring WebFlux was introduced in Spring framework 5, and is new to the Spring ecosystem. It will undoubtedly continue to evolve. Still, it is already a powerful framework and library very scalable reactive web applications.</p>\n","site":{"data":{"projects":[{"name":"Hexo","url":"https://hexo.io/","desc":"A fast, simple & powerful blog framework"},{"name":"Font Awesome","url":"http://fontawesome.io/","desc":"The iconic font and CSS toolkit"}]}},"excerpt":"","more":"<p>Spring WebFlux introduces reactive web development to the Spring ecosystem. This article will get you started with reactive systems and reactive programming with Spring. First you’ll find out why reactive systems are important and how they’re implemented in Spring framework 5, then you’ll get a hands-on introduction to building reactive services using Spring WebFlux. We’ll build our first reactive application using annotations. I’ll also show you how to build a similar application using Spring’s newer functional features.</p>\n<h2 id=\"Reactive-systems-and-Spring-WebFlux\"><a href=\"#Reactive-systems-and-Spring-WebFlux\" class=\"headerlink\" title=\"Reactive systems and Spring WebFlux\"></a>Reactive systems and Spring WebFlux</h2><p>The term reactive is currently popular with developers and IT managers, but I’ve noticed some uncertainty about what it actually means. To get clearer on what reactive systems are, it’s helpful to understand the fundamental problem they’re designed to solve. In this section we’ll talk about reactive systems in general, and I’ll introduce the Reactive Systems API for Java applications.</p>\n<blockquote>\n<p>Scalability in Spring MVC<br>Spring MVC has earned its place among (在…中) the top choices for building Java web applications and web services. Spring MVC seamlessly (无缝地) integrates (使合并) annotations into the robust (强健) architecture of a Spring-based application. This enables developers familiar with Spring to quickly build satisfying, highly functional web applications. Scalability (可扩展性) is a challenge for Spring MVC applications, however. That is the problem Spring WebFlux seeks to address.</p>\n</blockquote>\n<h3 id=\"Blocking-vs-non-blocking-web-frameworks\"><a href=\"#Blocking-vs-non-blocking-web-frameworks\" class=\"headerlink\" title=\"Blocking vs non-blocking web frameworks\"></a>Blocking vs non-blocking web frameworks</h3><p>In traditional web applications, when a web server receives a request from a client, it accepts that requests and places it in an execution queue. A thread in the execution queue’s thread pool then receives the request, reads its input parameters, and generates a response. Along the way, if the execution thread needs to call a blocking resource — such as a database, a filesystem, or another web service — that thread executes the blocking until the external resource responds, which causes performance issues and limits scalability. To combat these issues, developers create generously sized thread pools, so that while one thread is blocked another thread can continue to process requests. Figure 1 shows the execution flow for a traditional, blocking web application.</p>\n<p><img src=\"001.jpg\" alt=\"Figure 1. Threaded execution model\"></p>\n<p>Non-blocking web frameworks such as NodeJS and Play take a different approach (方法). Instead of executing a blocking request and waiting for it to complete, the use non-blocking I/O. In this paradigm (范例), an application executes a request, provides code to be executed when a response is returned, and then given its thread back to the server. When an external resource returns a response, the provided code will be executed. Internally (内部的), non-blocking frameworks operate using an event loop. Within the loop, the appliation code either provides a callback or a future containing the code to execute when the asnchronous (异步) loop completes.</p>\n<p>By nature, non-blocking frameworks are event-driven. This requires a different programming paradigm and a new approach to reasoning (推理) about how your code will be executed. Once you’ve warpped (变形的) your head arround it, reactive programming can lead to very scalable applications.</p>\n<blockquote>\n<p>Callbacks, promises, and futures<br>In early days, JavaScript handled all asynchronous functionality via callbacks. In this scenario, when an event occurs (such as when a response from a service call becomes available) the callback is executed. While callbacks are still prevalent, JavaScript’s asynchronous functionality has more recently moved to promises. With promises, a function call returns immediately, returning a promise to deliver the results at a future time. Rather than promises, Java implements a similar paradigm using futures. In this usage, a method returns a future that will have a value at some time in the future.</p>\n</blockquote>\n<h2 id=\"Reactive-programming\"><a href=\"#Reactive-programming\" class=\"headerlink\" title=\"Reactive programming\"></a>Reactive programming</h2><p>You may have hear the term reactive programming related to web development frameworks and tools, but what does it really mean? The term as we’ve come to know it originated from the Reactive Manifesto, which defines reactive systems as having four core traits (特征):</p>\n<ul>\n<li>Reactive systems are <strong>responsive</strong>, meaning that they respond in a timely manner (及时的), in all possible circumstances (环境). They focus on providing rapid (瞬间) and consistent response times, establishing (建立) reliable upper bounds (上边界) so they deliver (兑现) a consistent quality of service</li>\n<li>Reactive systems are <strong>resilient</strong> (能复原的), meaning that they remain reponsive in the face of failure. Resilience is achieved (实现) by the techniques of relication (同步复制), containment (包容), isolation (隔离性), and delegation (委派). By isolating application compoents from each other, you can contain failures and protect the system as a whole</li>\n<li>Reactive systems are elastic (灵活的), meaning that they stay responsive under varying workloads. This is achieved by scaling application components elastically to meet the current demand (需要)</li>\n<li>Reactive systems are message-driven, meaning that they rely on asynchronous message passing between components. This allows you to create coupling (耦合), isolation, and location transparency (透明度)</li>\n</ul>\n<p>Figure 2 shows how these traits (特征) flow together in a reactive system.</p>\n<p><img src=\"002.jpg\" alt=\"Figure 2. Traits of a reactive system\"></p>\n<h2 id=\"Characteristics-of-a-reactive-system\"><a href=\"#Characteristics-of-a-reactive-system\" class=\"headerlink\" title=\"Characteristics of a reactive system\"></a>Characteristics of a reactive system</h2><p>Reactive systems are built by creating isolated components that communicate with one another asynchronously and can scale quickly to meet the current load. Components still fail in reactive systems, but there are defind actions to perform as a result of the failure, which keeps the system as a whole functional and responsive.</p>\n<p>The Reaactive Manifesto is abstract, but reactive applicaitons are typically characcterized by follwoing components or techniques:</p>\n<ul>\n<li><strong>Data streams</strong>: A stream is a squence of events ordered in time, such as user interactions, REST service calls, JMS messages, and results from a database</li>\n<li><strong>Asynchronous</strong>: Data stream events are captured asychronously and your code defines what to do when an event is emiited, when an error occurs, and when the stream of events has completed</li>\n<li><strong>Non-blocking</strong>: As you process events, your code should not block and preform synchronouss calls; intead, it should make asychronous calls and respond as the results of those calls are returned</li>\n<li><strong>Back pressure</strong>: Components control the number of event and how often they are emitted (发出). In reactive terms, your component is referred to as the subscriber and events are emitted by a pushlier. This is important because the subscriber is in control of how much data it receives and thus will not overburden (超载) itself</li>\n<li><strong>Failure message</strong>: Instead of components throwing exceptions, failures are sent as message to a handler function. Whereas throwing exceptions breaks the stream, defining a function to handle failures as the occur does not</li>\n</ul>\n<h2 id=\"The-Reactive-Streams-API\"><a href=\"#The-Reactive-Streams-API\" class=\"headerlink\" title=\"The Reactive Streams API\"></a>The Reactive Streams API</h2><p>The new Reactive Stream API was created by engineers from Netflix, Pivotal, Lightbeand, RedHat, Twitter, and Oracle, among others. Pushished in 2015, the Reactive Streams API is now part of Java 9. It defines four interfaces:</p>\n<ul>\n<li><strong>Publisher</strong>: Emits a sequence of events to subscriber</li>\n<li><strong>Subscriber</strong>: Recevies and processes events emitted by a Publisher</li>\n<li><strong>Subscription</strong>: Defines a one-to-one relationship between a Publisher and a Subscriber</li>\n<li><strong>Processor</strong>: Represent a processing stage consisting of both a Subscriber and a Publisher and obeys the contracts of both</li>\n</ul>\n<p>Figure 3 shows the relationship between a Publisher, and Subscription.</p>\n<p><img src=\"003.jpg\" alt=\"Figure 3. Interfaces in the Reactive Streams API\"></p>\n<p>In essence (本质), a Subscriber creates a Subscription to a Publisher and, when the Publisher has available data, it sends an event to the Subscriber with a stream of elements. Note that the Subscriber managers its back pressure (挤压) inside its Subscription (订阅) to the Publisher.</p>\n<p>Now that you know a litte bit about reactive systems and the Reactive Streams API, let’s turn our attention to the tools Spring uses to implement reactive systems: Spring WebFlux and the Reactor library.</p>\n<h2 id=\"Project-Reactor\"><a href=\"#Project-Reactor\" class=\"headerlink\" title=\"Project Reactor\"></a>Project Reactor</h2><p>Project Reactor is a third-party framework based on Java’s Reactive Streams Specification, which is used to build ono-blocking web applications. Project Reactor provides two publishers that are heavily used in Spring WebFlux:</p>\n<ul>\n<li><strong>Mono</strong>: Returns 0 or 1 element</li>\n<li><strong>Flux</strong>: Returns 0 or more elements. A Flux can be endless, meaning that it can keep emitting elements forever, or it can return a sequence of elements and then send a completion notification when it has returned all of its elements</li>\n</ul>\n<p>Monos and fluxs are conceptually similar to futures, but more powerful. When you invoke a function that returns a mono or a flux, it will return immediately. The results of the function call will be delivered to you through the mono or flux when they become available.</p>\n<p>In Spring WebFlux, you will reactive libraries that return monos and fluxes and your controllers will return monos and fluexs. Because these return immediately, your controllers will effectively give up their threads and allow Reactor to handle responses asynchronously. It is improtant to note that only by using reactive libraries can you WebFlux services stay reactive. If you use non-reative libraries, such as JDBC calls, your ocde will block and wait for those calls to complete before returning.</p>\n<blockquote>\n<p>Reactive programming with MongoDB<br> Currently, there aren’t many reactive database libraries, so you may be wondering if it’s practical to write rective services. The good news is that MongoDB has reactive support and there are a couple of third-party reactive database drivers for MySQL and Postgres. For all other use cases, WebFlux provides a machanism for executing JDBC calls in a reactive manner, albeit using a secondary thread pool that makes blocking JDBC calls.</p>\n</blockquote>\n<h2 id=\"Get-started-with-Spring-WebFlux\"><a href=\"#Get-started-with-Spring-WebFlux\" class=\"headerlink\" title=\"Get started with Spring WebFlux\"></a>Get started with Spring WebFlux</h2><p>For our first how-to example, we’ll create a simple book service that persists books to and from MongoDB in a reactive fashion.</p>\n<p>Start by navigating to the Spring Initializr homepage, where you’ll choose a Maven Project with Java and select the most current release of Spring Boot (2.0.3 at time of this writing). Give your project a group name, such as “com.javaworld.webflux”, and an artifact name, such as “bookservice”. Expand the Switch to the full version like to show the full list of dependencies. Select the following dependencies for the example application:</p>\n<ul>\n<li>Web -&gt; Reactive Web: The dependency inlucdes Spring WebBlux</li>\n<li>NoSQL -&gt; Reactive MongoDB: This dependency inluceds the reactive drivers for MongoDB</li>\n<li>NoSQL -&gt; Embedded MongoDB: This dependency allows us to run an embedded version of MongoDB, so there is no need to install a separate instance. Usually this is used for testing, but we’ll include it in our release code to avoid installing MongoDB</li>\n<li>Core -&gt; Lombok: Using Lombok is optional as you do not need it to build a Spring WebFlux. The benefit of using Project Lombok is that is enables you to add annotations to classes that will automatically generate getters and setters, constructors, hashCode(), equals(), and more.</li>\n</ul>\n<p>When you’re finished you should see something similar to Figure 4.</p>\n<p><img src=\"004.jpg\" alt=\"Figure 4. Screenshot of the Spring Initializr project\"></p>\n<p>Pressing Generate Proejct will trigger the download of a zip file containing your proejct source code. Unzip the download file and open it in your favorite IDE. If you’re using IntelliJ, choose File and then Open, and navigate to the directory where the download zip file has been decompressed.</p>\n<p>You’ll find that Spring Initializr has generated two important files:</p>\n<ul>\n<li>A Maven pom.xml file, includes all necessary dependencies for the application</li>\n<li>BookserviceApplicataion.java, which is the Spring Boot starter class for the application</li>\n</ul>\n<p>Listing 1 shows the contents fo the generated pom.xml file.</p>\n<h3 id=\"Listing-1-Maven-pom-xml-for-the-Spring-WebFlux-example-application\"><a href=\"#Listing-1-Maven-pom-xml-for-the-Spring-WebFlux-example-application\" class=\"headerlink\" title=\"Listing 1. Maven pom.xml for the Spring WebFlux example application\"></a>Listing 1. Maven pom.xml for the Spring WebFlux example application</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.javaworld.webflux<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>bookservice<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>bookservice<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb-reactive<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.flapdoodle.embed<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>de.flapdoodle.embed.mongo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.projectreactor<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>reactor-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Application-dependencies\"><a href=\"#Application-dependencies\" class=\"headerlink\" title=\"Application dependencies\"></a>Application dependencies</h3><p>The <code>&lt;parent&gt;</code> node references version 2.0.3.RELEASE of the spring-boot-starter-parent POM file. The parent POM file ensures that all dependency versions are compatible with this version of Spring Boot. These dependencies include:</p>\n<ul>\n<li>spring-boot-starter-webflux: Packs everything you need to run a WebFlux application, including spring-web (which gives you all of the Spring MVC capabilities) and Netty, which will be our reactive web server, plus a lot more</li>\n<li>spring-boot-starter-data-mongodb-reactive: Includes the MongoDB drivers, reactive support for MongoDB, and Spring Data to make writing persistence (坚持) code easier</li>\n<li>de.flapdoodle.embed.mongo: Includes an embedded MongoDB instance. By default this dependency will be scoped to “test” so that you can write tests that run against an embedded MongoDB instance and then connect to a standalone MongoDB instance in production. For the purpose of this example I removed the test scoping so that we can run our book service against this embedded MongoDB instance</li>\n<li>lombok: Adds annotation niceties for generating getters and setters, constructors, and forth to the application’s model classes</li>\n<li>spring-boot-starter-test: Includes Spring testing utilities as well as JUnit and Mockito</li>\n<li>reactor-test: Includes testing utilities for testing the Reactor engine, which is used by Spring WebFlux for reactive functionality</li>\n</ul>\n<h2 id=\"The-Spring-Boot-starter-class\"><a href=\"#The-Spring-Boot-starter-class\" class=\"headerlink\" title=\"The Spring Boot starter class\"></a>The Spring Boot starter class</h2><p>Listing 2 shows the BookserviceApplication.java file.</p>\n<h3 id=\"Listing-2-BookserviceApplication\"><a href=\"#Listing-2-BookserviceApplication\" class=\"headerlink\" title=\"Listing 2. BookserviceApplication\"></a>Listing 2. BookserviceApplication</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookserviceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(BookserviceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The BookserviceApplication is annotated with the <strong>@SpringBootApplication</strong> annotation. <strong>@SpringBootApplication</strong> is a convenience (方便) annotation that encompasses (包含) the following annotations:</p>\n<ul>\n<li><strong>@EnableAutoConfiguration</strong> enables auto-configuration of the Spring application context, attemping to guess and configure beans that you are likely to need. Auto-configuration classes are usually applied based on your CLASSPATH and the beans you have defined. For example, when you include the embedded MongoDB dependency in your CLASSPATH, Spring will automatically create an instance in memory and wire it into the application context</li>\n<li><strong>@SpringBootConfiguration</strong> identifies this class as containing the Spring Boot configuration</li>\n<li><strong>@ComponentScan</strong> directs Spring to scan the CLASSPATH, in the current package and all sub-packages, for Spring components. In short, this allows you to create a web package and add a <strong>@Controller</strong>, which Spring will find and make available to the application</li>\n</ul>\n<p>The BookserviceApplication itself defines a main() method that delegates to the SpringApplication.run() method, which starts the application.</p>\n<h3 id=\"Using-Spring-WebFlux-with-annotations\"><a href=\"#Using-Spring-WebFlux-with-annotations\" class=\"headerlink\" title=\"Using Spring WebFlux with annotations\"></a>Using Spring WebFlux with annotations</h3><p>In order to build our book service we need to define the following classes and interfaces:</p>\n<ul>\n<li><strong>Book</strong>: A model class representing a book in our service</li>\n<li><strong>BookRepository</strong>: A Spring Data MongoDB interface telling Spring Data to generate persistence code for books to and from MongoDB</li>\n<li><strong>BookService</strong> and <strong>BookServiceImpl</strong>: The “business” service used to interact with the BookRepository to persist book to and from MongoDB. In this example, a service is not necessary and we could place calls to the BookRepository directly in our controller. When building Spring applications it is recommended to create this layer as a business interface between your controllers and persistence repository, however. The business interface enables you to change your repository — such as moving to an SQL-based database or calling another web service — without impacting your controllers.</li>\n<li><strong>BookController</strong>: The web controller that will receive web requests and return reactive reponse (Monos and Fluxs)</li>\n</ul>\n<h2 id=\"Example-application-source-code\"><a href=\"#Example-application-source-code\" class=\"headerlink\" title=\"Example application source code\"></a>Example application source code</h2><p>Listing 3 shows the source code for our model class, Book.java</p>\n<h3 id=\"Listing-3-Book-java\"><a href=\"#Listing-3-Book-java\" class=\"headerlink\" title=\"Listing 3. Book.java\"></a>Listing 3. Book.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Document</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String author;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The Book class is a simple POJO that contains an ID, title, and author. It is annotated with the <strong>@Document</strong> annotation, which identifies it as a MongoDB document. Spring Data will map documents to collections in MongoDB. THe next three annotations — <strong>@Data</strong>, <strong>@NoArgsContructor</strong>, and <strong>@AllArgsConstructor</strong> — are Lombok annotations. <strong>@Data</strong> includes the following capabilities:</p>\n<ul>\n<li>Generates getters and setters for all fields; setters are only generated for non-final properties</li>\n<li>Generates a required arguments constructor</li>\n<li>Generates a <strong>ToString()</strong> method</li>\n<li>Generates <strong>equals()</strong> and <strong>hashCode()</strong> methods that uses all non-transient (非暂态) fields</li>\n</ul>\n<p>In order to work with Spring Data, we need a no-argument constructor so I added <strong>@NoArgsContructor</strong>. For testing purposes I also added an all-argument constructor, <strong>@AllArgsConstructor</strong>.</p>\n<p>As mentioned above, Lombok is not required and you can simply implement getters, setters, and constructors to the class as you normally would do.</p>\n<p>Listing 4 shows the source code for the BookRepository interafce.</p>\n<h3 id=\"Listing-4-BookRepository-java\"><a href=\"#Listing-4-BookRepository-java\" class=\"headerlink\" title=\"Listing 4. BookRepository.java\"></a>Listing 4. BookRepository.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReactiveMongoRepository</span>&lt;<span class=\"title\">Book</span>, <span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The BookRepsiotry is a Spring Data interface, meaning that you define the interface and Spring Data weill generate the code that implements that interface. Specifically, BookRepository extends teh ReactiveMongoRepository, which defines the following reactive methods (remember that these are methods that return either monos or fluxs):</p>\n<ul>\n<li><code>Mono&lt;Book&gt; save()</code></li>\n<li><code>Flux&lt;Book&gt; saveAll()</code></li>\n<li><code>Flux&lt;Book&gt; findById()</code></li>\n<li><code>Mono&lt;Boolean&gt; existsById()</code></li>\n<li><code>Flux&lt;Book&gt; findAll()</code></li>\n<li><code>Flux&lt;Book&gt; findAllById()</code></li>\n<li><code>Mono&lt;Long&gt; count()</code></li>\n<li><code>Mono&lt;Void&gt; delete()</code></li>\n<li><code>Mono&lt;Void&gt; deleteById()</code></li>\n<li><code>Mono&lt;Voidd&gt; delteAll()</code></li>\n<li><code>Flux&lt;Book&gt; insert()</code></li>\n</ul>\n<p>The query methods that return one element (such as <code>findById()</code>) return <code>Mono&lt;Book&gt;</code>. The methods that return more than one elements (such as <code>findAll()</code>) return <code>Flux&lt;Book&gt;</code>. It is interesting to note that the <code>delete</code> methods return a <code>Mono&lt;Void&gt;</code>. <code>Mono&lt;Void&gt;</code> means that there is no return type, but when the operation finishes it will publish a completion notification. Recall that these are publishers, so your code, or Spring WebFlux itself, will ultimately define functionality to execute when a message is published to its subscribers.</p>\n<p>The BookRepository is defined with two generic parameters: Book, which is the type of document that the repository managers, and String, which is the type of the primary key (the Book’s id field). Your code can use the BookRepository methods to execute asynonchroous queries against MongoDB.</p>\n<p>Listing 5 and 6 show the source code for the BookService and BookServiceImpl, respectively.</p>\n<h3 id=\"Listing-5-BookService-java\"><a href=\"#Listing-5-BookService-java\" class=\"headerlink\" title=\"Listing 5. BookService.java\"></a>Listing 5. BookService.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Mono&lt;Book&gt; <span class=\"title\">findById</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Flux&lt;Book&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Mono&lt;Book&gt; <span class=\"title\">save</span><span class=\"params\">(Book book)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Mono&lt;Void&gt; <span class=\"title\">deleteById</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Listing-6-BookServiceImple-java\"><a href=\"#Listing-6-BookServiceImple-java\" class=\"headerlink\" title=\"Listing 6. BookServiceImple.java\"></a>Listing 6. BookServiceImple.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BookService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookRepository bookRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookServiceImpl</span><span class=\"params\">(BookRepository bookRepsotiry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bookRepository = bookRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Book&gt; <span class=\"title\">findById</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookRepository.findById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Flux&lt;Book&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookRepository.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Book&gt; <span class=\"title\">save</span><span class=\"params\">(Book book)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookRepository.save(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Void&gt; <span class=\"title\">deleteById</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookRepository.deleteById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Services represent business functionality and are identified in Spring using the <code>@Service</code> annotation. In this example, business functionality simply delegates to the underlying (隐含的) repository. If you needed to perform more complex logic on the queries or on the objects being persisted, this is where you would do it.</p>\n<p>Listing 7 shows the source code for the BookController class.</p>\n<h3 id=\"Listing-7-BookController-java\"><a href=\"#Listing-7-BookController-java\" class=\"headerlink\" title=\"Listing 7. BookController.java\"></a>Listing 7. BookController.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookController</span><span class=\"params\">(BookService bookService)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bookService = bookService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/book/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Book&gt; <span class=\"title\">getBookById</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookService.findById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/books\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Flux&lt;Book&gt; <span class=\"title\">getAllBooks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookService.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/book\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Book&gt; <span class=\"title\">createBook</span><span class=\"params\">(@RequestBody Book book)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookService.save(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"About-the-code\"><a href=\"#About-the-code\" class=\"headerlink\" title=\"About the code\"></a>About the code</h2><p>If you’re already familiar with Spring MVC, you’ll notice that the Spring WebFlux application code looks remarkably familiar. The only difference is that all controllers and services return reactive types, namely monos and fluxes. We’ve also employed a reactive MongoDB driver instead of a nonreactive driver. While the code is familiar, the implementation is quite different. Under the hood, Spring WebFlux will invoke your handler method, capture the reactive reponse, and then leverage Reactor to wait for the response to be published, all asynchronously.</p>\n<p>Here are some points to note about the example application:</p>\n<ul>\n<li><code>BookController</code> is annotated with the <code>@RestController</code> annotation, which is a convenience annotation. This annotation includes the <code>@Controller</code> annotation, which is used to identify a class that handles web request, and <code>@ResponseBody</code>, which indicates that method return values should be bound to the web response body</li>\n<li><code>getBookById()</code> method, which is annotated with the <code>@GetMapping</code> annotation. <code>@GetMapping</code> is a convenience annotation for <code>@RequestMapping(method = RequestMethod.GET)</code>. It handles the URI path: <code>/book/{id}</code>, where the id is the value retrieved from the path and passed as the <code>@PathVariable</code> in the method call. The implementation simply delegates to the BookService’s <code>findById()</code> method. Note that this method returns a <code>Mono&lt;Book&gt;</code>, which again is a publisher that will provide WebFlux with a Book instance when it becomes available, ultimately from the reactive MongoDB call to <code>findById()</code>.</li>\n<li><code>getAllBooks()</code> method handles the <code>/books</code> URI path and delegates to the BookService’s <code>findALl()</code> method. In this case it returns a <code>Flux&lt;Book&gt;</code>, which is a pulisher that send a stream of Books to Spring WebFlux. When all books have been retrieved from MongoDB, the reactive MongoDB <code>findAll()</code> method will publish a completion notification telling WebFlux that it is finished. WebFlux can then send the response back to the caller</li>\n<li>Finally, the <code>createBook()</code> method is annotated with the <code>@PostMapping</code> annotation, which is a convenience annotation for <code>@RequestMapping(method = RequestMethod.POST)</code>. <code>@PostMapping</code> handles the <code>/book</code> URI path. The <code>@RequestBody</code> annotation, included when we added <code>@RestController</code> tells WebFlux to convert the object received from the caller into a Book instance. The <code>createBook()</code> method delegates to the BookService’s <code>save()</code> method and then returns a <code>Mono&lt;Book&gt;</code> that publishes the newly created Book.</li>\n</ul>\n<blockquote>\n<p>Three styles of denpendency injection<br>The BookController uses contructor injetcion to autowire a BookService into itself. Recall that Spring supports three types of denpendency injection:</p>\n<ul>\n<li>Constructor injection: when a Spring-managed bean defines a constructor that accepts another Spring-managed bean, Spring will automatically retrieve an instance of that bean from the application context and pass it to the constructor</li>\n<li>Setter injection: when a Spring-managed bean defines a setter method that accepts another Spring-managed bean, Spring will likewise find it in the application context and invoke the setter method</li>\n<li>@Autowired: when a Spring-managed bean defines a field annotated with the @Autowired annotation, Spring will automatically set the value of the filed</li>\n</ul>\n</blockquote>\n<h2 id=\"Run-the-application\"><a href=\"#Run-the-application\" class=\"headerlink\" title=\"Run the application\"></a>Run the application</h2><p>You can run your new service by exeucting the following command from the root directory of your project:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p>\n<p>Now take out your favorite REST service testing tool, like Poster, or execute the following cURL commands on your command-line. See the responses below each cURL command:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl --header <span class=\"string\">\"Content-Type: application/json\"</span> --request POST --data <span class=\"string\">'&#123;\"title\": \"Book 1\", \"author\": \"Mr Author\"&#125;'</span> http://localhost:8080/book</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b2ea197c0f951f7354085d7\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Mr Author\"</span>&#125;</span><br><span class=\"line\">$ curl --header <span class=\"string\">\"Content-Type: application/json\"</span> --request POST --data <span class=\"string\">'&#123;\"title\": \"Book 2\", \"author\": \"Other Author\"&#125;'</span> http://localhost:8080/book</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b2ea1b0c0f951f7354085d8\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 2\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Other Author\"</span>&#125;</span><br><span class=\"line\">$ curl http://localhost:8080/books</span><br><span class=\"line\">[&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b2ea197c0f951f7354085d7\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Mr Author\"</span>&#125;,&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b2ea1b0c0f951f7354085d8\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 2\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Other Author\"</span>&#125;]</span><br><span class=\"line\">$ curl http://localhost:8080/book/5b2ea197c0f951f7354085d7</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b2ea197c0f951f7354085d7\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Mr Author\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Functional-reactive-services-with-Spring-WebFlux\"><a href=\"#Functional-reactive-services-with-Spring-WebFlux\" class=\"headerlink\" title=\"Functional reactive services with Spring WebFlux\"></a>Functional reactive services with Spring WebFlux</h2><p>Spring WebFlux application can be built using either Spring MVC annotations (which you just saw) or functional programming techniques. Functional programming has many benefits, such as immutable data objects, inherent thread safety, the ability to pass functions to other functions, and the ability to program declaratively rather than imperatively (meaning that you describe the problem you are solving, not hte steps that define how to solve the problem).</p>\n<p>Pure functions — or functions that provide the same result every time they are given the same input — limit side-effects, which makes testing easier. They also allows for easy parallelization and caching. If you haven’t taken the time to start learning functional programming, I encourage you to do so; It will change how you approach and solve problems.</p>\n<p>Arjen Poutsma, a mamber of the Spring WebFlux team, posted a vieo on YouTube entitled “New in Spring Framework 5.0: Functional Web framework” that describes the motivation behind building functional web applications and how Spring WebFlux can be used functionally. In short, he argues for more library, less framework, meaning that WebFlux can be used as a library that leaves you in control of your web application. This is an efficient alternative to utilizing the full Spring framework, which is the approach we took in the previous section.</p>\n<p>We’ll conclude this tutorial by using Spring WebFlux to build another BookHandler application, this time using functional techniques.</p>\n<h2 id=\"Router-and-handler\"><a href=\"#Router-and-handler\" class=\"headerlink\" title=\"Router and handler\"></a>Router and handler</h2><p>Our functional Spring WebFlux application will be based on two main components, a router and a handler. The router is responsible ofr routing HTTP requests to handler functions. Handler functions are responsible for executing business functionality and building responses.</p>\n<p>Listing 8 shows the source code for the BookHandler class.</p>\n<h3 id=\"Listing-8-BookHandler-java\"><a href=\"#Listing-8-BookHandler-java\" class=\"headerlink\" title=\"Listing 8. BookHandler.java\"></a>Listing 8. BookHandler.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BookService bookService;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookHandler</span><span class=\"params\">(BookService bookService)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bookService = bookService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;ServerResponse&gt; <span class=\"title\">findById</span><span class=\"params\">(ServerRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String id = request.pathVariable(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ok()</span><br><span class=\"line\">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                .body(bookService.findById(id), Book.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;ServerResponse&gt; <span class=\"title\">findAll</span><span class=\"params\">(ServerRequest request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ok()</span><br><span class=\"line\">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                .body(bookService.findAll(), Book.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;ServerResponse&gt; <span class=\"title\">save</span><span class=\"params\">(ServerRequest request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Mono&lt;Book&gt; book = request.bodyToMono(Book.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ok()</span><br><span class=\"line\">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                .body(fromPublisher(book.flatMap(bookService::save), Book.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;ServerResponse&gt; <span class=\"title\">delete</span><span class=\"params\">(ServerRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String id = request.pathVariable(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ok()</span><br><span class=\"line\">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                .body(bookService.deleteById(id), Void.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The BookHandler is annotated with <code>@Component</code>, a generic annotation that identifies the class as being a Spring-managed bean. Spring will discover this component when it does its component scan and add it to the application context. This is not a controller, but rather a standard Spring bean that will be wired into the BookRouter, defined below.</p>\n<p>The functions in the BookHandler return <code>Mono&lt;ServerResponse&gt;</code>. This component is a litte different from the BookController built in the previous section, which returned <code>Mono&lt;Book&gt;</code> and <code>Flux&lt;Book&gt;</code>. When building a handler function, you are responsible for building the response that will ultimately be returned to the caller. All methods are requried to return a <code>Mon&lt;ServerResponse&gt;</code>, even if the body of the response contains a Flux.</p>\n<p>Each method is passed a ServerRequest argument, which provides access to request parameters, such as path variables, query parameters, and, in the case of the <code>save()</code> method, the body of a POST or PUT.</p>\n<p>In order to build a response body, we construct it using a BodyBuilder. The <code>ok()</code> method returns a BodyBuilder with an HTTP status code of 200; it is a convenience method for <code>status(HttpStatus.OK)</code>. The BodyBuilder interface defines methods for setting the content type, content length, as well as HTTP header values. The <code>body()</code> method sets the contents to be returned to the caller and returns a <code>Mono&lt;ServerResponse&gt;</code>.</p>\n<h2 id=\"Important-methods-save-and-flatMap\"><a href=\"#Important-methods-save-and-flatMap\" class=\"headerlink\" title=\"Important methods: save() and flatMap()\"></a>Important methods: save() and flatMap()</h2><p>The method in this class that deservers special attention is the <code>save()</code> method. First, in order to deserialize the body payload to a class instance, we invoke the <code>bodyToMono()</code> method. This mehtod returns a <code>Mono&lt;Book&gt;</code>, which is a publisher that will provide a Book instance asynchronously when it is available. With the <code>Mono&lt;Book&gt;</code> in hand, we construct the response using the <code>ok()</code> method, as usual, and then the <code>body()</code> method is implemented as folows:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fromPublisher(book.flatMap(bookService::save), Book.class)</span><br></pre></td></tr></table></figure></p>\n<p>The <code>fromPbulisher()</code> method reutrns a BodyInserter, which the <code>body()</code> method expects, from a publisher function and the class of the object that will be published, Book.class in this case. The publisher function is passed the following:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book.flatMap(bookService::save)</span><br></pre></td></tr></table></figure></p>\n<p>You’re probably already familiar with the Java 8 <code>map()</code> funciton, which converts every input item in a stream (or in the Mono in this case) into another object. The Java 8 <code>flatMap()</code> function is similar, but it “flattens” the response. For example, if we were constructing a list of objects and the map function returned am embedded list, rather than a list of lists, the <code>flatMap()</code> funciton would return a single list that contained all of the elements in all embedded lists.</p>\n<p>We can read this function as follow: for each Book in the book object, which is a Mono so there will only be one, call the BookService’s <code>save()</code> method, and return the result of <code>BookService::save</code> to the caller (<code>fromPublisher()</code> in this case) as a single Mono object (not a <code>Mono&lt;Mono&lt;Book&gt;&gt;</code>). The <code>faltMap()</code> function takes care of flattening embedded Monos into a single Mono.</p>\n<h2 id=\"Example-application-code\"><a href=\"#Example-application-code\" class=\"headerlink\" title=\"Example application code\"></a>Example application code</h2><p>Listing 9 show the source code for the BookRouter class.</p>\n<h3 id=\"Listing-9-BookRouther-java\"><a href=\"#Listing-9-BookRouther-java\" class=\"headerlink\" title=\"Listing 9. BookRouther.java\"></a>Listing 9. BookRouther.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookRouter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RouterFunction&lt;ServerResponse&gt; <span class=\"title\">route</span><span class=\"params\">(BookHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> RouterFunctions</span><br><span class=\"line\">                .route(GET(<span class=\"string\">\"/fbooks\"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::findAll)</span><br><span class=\"line\">                .andRoute(GET(<span class=\"string\">\"/fbook/&#123;id&#125;\"</span>).and(accept(MediaType.APPLICATION_STREAM_JSON)), handler::findById)</span><br><span class=\"line\">                .andRoute(POST(<span class=\"string\">\"/fbook\"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::save)</span><br><span class=\"line\">                .andRoute(DELETE(<span class=\"string\">\"/fbook/&#123;id&#125;\"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::delete);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The BookRouter class is annotated with <code>@Configuration</code>, which is a Spring annotation that identifies a class as a configuration class whose method create other Spring beans. In this example, the <code>router()</code> method creates a bean of type <code>RouterFunciton&lt;ServerResponse&gt;</code>. Router functions are responsible for translting HTTP routes (HTTP verb and URI path) into handler functions. For example, the first route reads: if there is a request of type GET for the URI path <code>/fbooks</code> and a media accept type of APOLICATION_JSON, then invoke the BookHandler’s <code>findAll()</code> method.</p>\n<p>The syntax might look a little strange, so let’s take it apart. First, consider the <code>GET()</code> method:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET(<span class=\"string\">\"/fbooks\"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::findAll</span><br></pre></td></tr></table></figure></p>\n<p>The <code>GET()</code> method is statically imported from the RequestPredicates class and reutrns a RequestPredicate instance. A predicate is a boolean-valued function with a <code>test()</code> method that evaluates the predicate and returns true or false if the predicate’s conditions are met. A RequestPredicate evaluates a ServerRequest to determine whether or not this route should handle the request. So our goal is to define the criteria under which our handler function should be called.</p>\n<p><code>GET()</code> is a convenience method for </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">method(HttpMethod.GET).and(path(String Pattern))</span><br></pre></td></tr></table></figure>\n<p>This means that the RequestPredicate will compare the HTTP verb in the ServerRequest to HttpMehod.GET and the path to the specified URI pattern. We then chain <code>accept(MediaType.APPICATION_JSON)</code> to the predicate using the <code>and()</code> method, which is a standard Predicate funciton that evaluates two prediates using AND boolean logic. The <code>accept()</code> method adds a condition to the predicate that verifies the “Accept” HTTP header against the provided media type. In the end, the <code>handler::findAll</code> method will be invoked if the following conditions are true:</p>\n<ul>\n<li>The HTTP verb is GET</li>\n<li>THe URI path is <code>/fbooks</code></li>\n<li>The HTTP “ACCEPT” header is “applicaiton/json”</li>\n</ul>\n<p>The <code>RoutherFunction::route</code> method returns a RouterFunction that allows you to add additional routes by invoking the <code>addRoute()</code> method. As you can see, we leverage this capability to chain together several different routes: GET with an id request parameter, POST and DELETE.</p>\n<p>The only other magic in the BookRouter::route method is the Spring injection of the BookHandler. The router() method is annotated with <code>@Bean</code>, which means that it returns a Spring-managed bean. When Spring invokes this method it will see that requires a BookHandler argument. Having already discovered the BookHandler (annotated with <code>@Component</code>), and having added it to the application context, it will pass the Spring-managed BookHandler to the <code>route()</code> method.</p>\n<p>In summary, the <code>BookRouter::route</code> create a RouterFunction, which is composed of several router functions that define the conditions for which specific handler functions should be invoked.</p>\n<h2 id=\"Run-and-test-the-application\"><a href=\"#Run-and-test-the-application\" class=\"headerlink\" title=\"Run and test the application\"></a>Run and test the application</h2><p>You can test this code by starting the Spring Boot application with the following command:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p>\n<p>Now you have two sets of end-points: <code>/book</code> uses the BookController and <code>/fbook</code> uses the functional BookRouter and BookHandler. The following are sample cURL commands to invoke these services:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl --header <span class=\"string\">\"Content-Type: application/json\"</span> --request POST --data <span class=\"string\">'&#123;\"title\": \"Book 1\", \"author\": \"Author\"&#125;'</span> http://localhost:8080/fbook</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b394748aaac8a7c67f94367\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;</span><br><span class=\"line\">$ curl --header <span class=\"string\">\"Content-Type: application/json\"</span> --request POST --data <span class=\"string\">'&#123;\"title\": \"Book 2\", \"author\": \"Author\"&#125;'</span> http://localhost:8080/fbook</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b39474daaac8a7c67f94368\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 2\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;</span><br><span class=\"line\">$ curl http://localhost:8080/fbooks</span><br><span class=\"line\">[&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b394748aaac8a7c67f94367\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b39474daaac8a7c67f94368\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 2\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;]</span><br><span class=\"line\">$ curl http://localhost:8080/fbook/5b39474daaac8a7c67f94368</span><br><span class=\"line\">&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b39474daaac8a7c67f94368\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 2\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;</span><br><span class=\"line\">$ curl --header <span class=\"string\">\"Content-Type: application/json\"</span> --request DELETE http://localhost:8080/fbook/5b39474daaac8a7c67f94368</span><br><span class=\"line\">$ curl http://localhost:8080/fbooks</span><br><span class=\"line\">[&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"5b394748aaac8a7c67f94367\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Book 1\"</span>,<span class=\"string\">\"author\"</span>:<span class=\"string\">\"Author\"</span>&#125;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Spring WebFlux is Spring’s reactive web framework that uses the Reactor library to asynchronously manage web requests. I start this article by reviewing reactive systems and the Reactive Streaming API, and described the problems they’re designed to solve. I then showd you two ways to create a Spring WebFlux application: the tradition-based approach and the fuctnional approach. Spring WebFlux was introduced in Spring framework 5, and is new to the Spring ecosystem. It will undoubtedly continue to evolve. Still, it is already a powerful framework and library very scalable reactive web applications.</p>\n"}],"PostAsset":[{"_id":"source/_posts/HTTPS 教程/SSL 协议/001.webp","post":"ck9nw3m2q0006m33p70uat7pq","slug":"001.webp","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第01期：何为学习/001.png","post":"ck9nw3m82006lm33pz4zcrcnm","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第02期：学习步骤/001.jpeg","post":"ck9nw3m84006nm33pzwk2ldjz","slug":"001.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第06期：导图步骤/001.jpeg","post":"ck9nw3m8d006zm33p1sdgju15","slug":"001.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/深入浅出JVM/1. 什么是JVM/001.png","slug":"001.png","post":"ck9nw3m8j0077m33pp3s555rb","modified":1,"renderable":0},{"_id":"source/_posts/深入浅出JVM/Questions/001.png","post":"ck9nw3m8v007im33pu1edi3m6","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第03期：学习误区/001.png","post":"ck9nw3m86006sm33pyrrcxdyw","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第03期：学习误区/002.png","post":"ck9nw3m86006sm33pyrrcxdyw","slug":"002.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第04期：分而治之/001.png","post":"ck9nw3m89006tm33p1148uk0k","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第04期：分而治之/002.png","post":"ck9nw3m89006tm33p1148uk0k","slug":"002.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第04期：分而治之/003.png","post":"ck9nw3m89006tm33p1148uk0k","slug":"003.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第05期：思维导图/001.png","post":"ck9nw3m8b006xm33p2drvdffb","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第05期：思维导图/002.png","post":"ck9nw3m8b006xm33p2drvdffb","slug":"002.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第05期：思维导图/003.png","post":"ck9nw3m8b006xm33p2drvdffb","slug":"003.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第07期：费曼技巧/001.png","post":"ck9nw3m8g0074m33p57em17st","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第07期：费曼技巧/002.png","post":"ck9nw3m8g0074m33p57em17st","slug":"002.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第07期：费曼技巧/003.png","post":"ck9nw3m8g0074m33p57em17st","slug":"003.png","modified":1,"renderable":1},{"_id":"source/_posts/学习观/第07期：费曼技巧/004.png","post":"ck9nw3m8g0074m33p57em17st","slug":"004.png","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms/001.jpg","post":"ck9nw3m3d000pm33p861z4e9t","slug":"001.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms/002.jpg","post":"ck9nw3m3d000pm33p861z4e9t","slug":"002.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms/003.jpg","post":"ck9nw3m3d000pm33p861z4e9t","slug":"003.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms/004.jpg","post":"ck9nw3m3d000pm33p861z4e9t","slug":"004.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Singly-linked lists and their algorithms/005.jpg","post":"ck9nw3m3d000pm33p861z4e9t","slug":"005.jpg","modified":1,"renderable":1},{"_id":"source/_posts/其它/黑苹果使用指南/001.webp","post":"ck9nw3m6f004jm33pnv1xjzo4","slug":"001.webp","modified":1,"renderable":1},{"_id":"source/_posts/其它/黑苹果使用指南/002.jpg","post":"ck9nw3m6f004jm33pnv1xjzo4","slug":"002.jpg","modified":1,"renderable":1},{"_id":"source/_posts/其它/黑苹果使用指南/003.jpg","post":"ck9nw3m6f004jm33pnv1xjzo4","slug":"003.jpg","modified":1,"renderable":1},{"_id":"source/_posts/其它/黑苹果使用指南/004.jpg","post":"ck9nw3m6f004jm33pnv1xjzo4","slug":"004.jpg","modified":1,"renderable":1},{"_id":"source/_posts/其它/黑苹果使用指南/005.jpg","post":"ck9nw3m6f004jm33pnv1xjzo4","slug":"005.jpg","modified":1,"renderable":1},{"_id":"source/_posts/其它/黑苹果使用指南/006.png","post":"ck9nw3m6f004jm33pnv1xjzo4","slug":"006.png","modified":1,"renderable":1},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/001.png","slug":"001.png","post":"ck9nw3m5k003dm33p3htboff7","modified":1,"renderable":0},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/002.png","slug":"002.png","post":"ck9nw3m5k003dm33p3htboff7","modified":1,"renderable":0},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/003.png","slug":"003.png","post":"ck9nw3m5k003dm33p3htboff7","modified":1,"renderable":0},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/004.png","slug":"004.png","post":"ck9nw3m5k003dm33p3htboff7","modified":1,"renderable":0},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/005.png","slug":"005.png","post":"ck9nw3m5k003dm33p3htboff7","modified":1,"renderable":0},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/006.png","post":"ck9nw3m5k003dm33p3htboff7","slug":"006.png","modified":1,"renderable":1},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/007.png","slug":"007.png","post":"ck9nw3m5k003dm33p3htboff7","modified":1,"renderable":0},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/008.png","slug":"008.png","post":"ck9nw3m5k003dm33p3htboff7","modified":1,"renderable":0},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/021.png","slug":"021.png","post":"ck9nw3m5k003dm33p3htboff7","modified":1,"renderable":0},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/022.png","slug":"022.png","post":"ck9nw3m5k003dm33p3htboff7","modified":1,"renderable":0},{"_id":"source/_posts/Nginx 教程/2. Nginx 目录介绍/023.png","post":"ck9nw3m5k003dm33p3htboff7","slug":"023.png","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Doubly-linked lists and circular-linked lists, and their algorithms/001.jpg","post":"ck9nw3mb300bim33pvf5uuq7v","slug":"001.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Doubly-linked lists and circular-linked lists, and their algorithms/002.jpg","post":"ck9nw3mb300bim33pvf5uuq7v","slug":"002.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/What is a data structure and how to write your first algorithm in Java/001.jpg","post":"ck9nw3mco00chm33pvit9ce3w","slug":"001.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/What is a data structure and how to write your first algorithm in Java/002.jpg","post":"ck9nw3mco00chm33pvit9ce3w","slug":"002.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/What is a data structure and how to write your first algorithm in Java/003.jpg","post":"ck9nw3mco00chm33pvit9ce3w","slug":"003.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm/001.jpg","post":"ck9nw3mcm00cem33p1ipz0x4f","slug":"001.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm/002.jpg","post":"ck9nw3mcm00cem33p1ipz0x4f","slug":"002.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm/003.jpg","post":"ck9nw3mcm00cem33p1ipz0x4f","slug":"003.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm/004.jpg","post":"ck9nw3mcm00cem33p1ipz0x4f","slug":"004.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Multidimensional arrays and the Matrix Multiplication algorithm/005.jpg","post":"ck9nw3mcm00cem33p1ipz0x4f","slug":"005.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC/001.jpg","post":"ck9nw3md800cxm33p0zygjkm8","slug":"001.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC/002.jpg","post":"ck9nw3md800cxm33p0zygjkm8","slug":"002.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC/003.jpg","post":"ck9nw3md800cxm33p0zygjkm8","slug":"003.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC/004.jpg","post":"ck9nw3md800cxm33p0zygjkm8","slug":"004.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Spring Series Part 2, Spring MVC/005.jpg","post":"ck9nw3md800cxm33p0zygjkm8","slug":"005.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Spring Series Part 3, Spring WebFlux/001.jpg","post":"ck9nw3me900d5m33p3rsk93kt","slug":"001.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Spring Series Part 3, Spring WebFlux/002.jpg","post":"ck9nw3me900d5m33p3rsk93kt","slug":"002.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Spring Series Part 3, Spring WebFlux/003.jpg","post":"ck9nw3me900d5m33p3rsk93kt","slug":"003.jpg","modified":1,"renderable":1},{"_id":"source/_posts/JavaWorld/Spring Series Part 3, Spring WebFlux/004.jpg","post":"ck9nw3me900d5m33p3rsk93kt","slug":"004.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck9nw3m2p0005m33pi47d0umf","category_id":"ck9nw3m2s0007m33p1x7nki6m","_id":"ck9nw3m36000gm33pwpks0ppm"},{"post_id":"ck9nw3m32000bm33pggzt9jt8","category_id":"ck9nw3m2s0007m33p1x7nki6m","_id":"ck9nw3m39000jm33p8xc6t9hj"},{"post_id":"ck9nw3m33000dm33py57txcll","category_id":"ck9nw3m2s0007m33p1x7nki6m","_id":"ck9nw3m3c000nm33popfianak"},{"post_id":"ck9nw3m2q0006m33p70uat7pq","category_id":"ck9nw3m33000cm33pb46c1qva","_id":"ck9nw3m3e000rm33pm9z5n1wl"},{"post_id":"ck9nw3m2v0008m33pp1a1ockg","category_id":"ck9nw3m2s0007m33p1x7nki6m","_id":"ck9nw3m3h000um33pi36n0chc"},{"post_id":"ck9nw3m35000fm33pjhkum98i","category_id":"ck9nw3m3c000om33p59hzbnvg","_id":"ck9nw3m3m0010m33pj2iwn9yo"},{"post_id":"ck9nw3m38000im33p46i71n2t","category_id":"ck9nw3m3c000om33p59hzbnvg","_id":"ck9nw3m3u0014m33pomdsc7ix"},{"post_id":"ck9nw3m3a000lm33p5q4fiup3","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3m40001cm33pr3el1k4u"},{"post_id":"ck9nw3m3d000pm33p861z4e9t","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3m44001im33p8wma3dif"},{"post_id":"ck9nw3m3f000sm33porxvuvw3","category_id":"ck9nw3m3z001bm33pd94nw1rr","_id":"ck9nw3m4a001qm33ps85ggwtw"},{"post_id":"ck9nw3m3j000wm33pvlincmbm","category_id":"ck9nw3m3z001bm33pd94nw1rr","_id":"ck9nw3m4d001vm33ppkdrgi0e"},{"post_id":"ck9nw3m3k000xm33pimg5p1jd","category_id":"ck9nw3m4a001pm33p01k01el5","_id":"ck9nw3m4j0021m33pu5et3vgq"},{"post_id":"ck9nw3m3n0011m33ptdw7a7jq","category_id":"ck9nw3m4a001pm33p01k01el5","_id":"ck9nw3m4m0027m33py1529x43"},{"post_id":"ck9nw3m3s0012m33pd4b8zhk7","category_id":"ck9nw3m4a001pm33p01k01el5","_id":"ck9nw3m4q002bm33p4pw7h3bp"},{"post_id":"ck9nw3m4n0029m33p1exzprii","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m4u002gm33pjng5b2a1"},{"post_id":"ck9nw3m3v0016m33piy8mz2vh","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m4w002km33pzn18jx8k"},{"post_id":"ck9nw3m4o002am33pk6svv153","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m4y002mm33powz0myol"},{"post_id":"ck9nw3m4r002dm33po52voq3e","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m50002pm33pi24z661l"},{"post_id":"ck9nw3m3y0018m33p2lhg85o6","category_id":"ck9nw3m4a001pm33p01k01el5","_id":"ck9nw3m52002rm33pubdlli54"},{"post_id":"ck9nw3m4t002fm33pt6i5iw3r","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m54002um33pfzmj1nf6"},{"post_id":"ck9nw3m4v002jm33p4y7lhxcj","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m56002wm33pshf6d760"},{"post_id":"ck9nw3m40001dm33pyq95cvl5","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m58002zm33pcy9n2rzq"},{"post_id":"ck9nw3m4x002lm33p9r9mlco9","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5a0031m33pg907805m"},{"post_id":"ck9nw3m4z002om33ps4f0h61k","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5c0034m33p360ub0kn"},{"post_id":"ck9nw3m42001fm33ppwosq8wp","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5e0036m33ptri738oc"},{"post_id":"ck9nw3m51002qm33p0i1183qr","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5h0039m33p3llihimy"},{"post_id":"ck9nw3m53002tm33p5adfx5ar","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5i003bm33p7fbsoqos"},{"post_id":"ck9nw3m44001jm33pcdgxr5km","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5l003em33p0chrlavo"},{"post_id":"ck9nw3m55002vm33pdukv3t8n","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5o003hm33p0mleg42r"},{"post_id":"ck9nw3m57002ym33p2xl0gh6q","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5q003km33pp4gvr0cz"},{"post_id":"ck9nw3m47001mm33pdptdlmt5","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5s003nm33p3h4kj57z"},{"post_id":"ck9nw3m580030m33pfbdu903s","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5v003rm33p5zkrbylj"},{"post_id":"ck9nw3m5b0033m33p2k1bbskc","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m5y003vm33pdsfxzjpw"},{"post_id":"ck9nw3m49001om33pgsh40zy0","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m60003zm33px2za2cka"},{"post_id":"ck9nw3m5d0035m33pv7vuxd3e","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m610041m33pb1pssfh7"},{"post_id":"ck9nw3m5f0038m33p31tqlm6l","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m630046m33pm4jzowo8"},{"post_id":"ck9nw3m4b001sm33pdwgaonxt","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m690048m33p2hocgiev"},{"post_id":"ck9nw3m4c001tm33pkp6wbg34","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m6b004bm33pyul6asnb"},{"post_id":"ck9nw3m4f001xm33p1o6g2q5j","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m6c004fm33pqic8akok"},{"post_id":"ck9nw3m4g001ym33pgcgrrhko","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m6e004im33pkdw2a55j"},{"post_id":"ck9nw3m4j0022m33pj92no83h","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m6h004lm33prr3y94t7"},{"post_id":"ck9nw3m4l0024m33pju8aylap","category_id":"ck9nw3m4m0026m33pz0fcmqlb","_id":"ck9nw3m6n004pm33pyr3mknf8"},{"post_id":"ck9nw3m5h003am33pcfb9hvaf","category_id":"ck9nw3m690049m33popfolwfp","_id":"ck9nw3m6q004rm33pyttkzebw"},{"post_id":"ck9nw3m5k003dm33p3htboff7","category_id":"ck9nw3m690049m33popfolwfp","_id":"ck9nw3m6t004wm33pkvhpy9f6"},{"post_id":"ck9nw3m5m003gm33pfhpd5xi3","category_id":"ck9nw3m690049m33popfolwfp","_id":"ck9nw3m6y0050m33p7ijy0e9j"},{"post_id":"ck9nw3m5p003jm33p5n3qbbus","category_id":"ck9nw3m690049m33popfolwfp","_id":"ck9nw3m730055m33pmwdeee5b"},{"post_id":"ck9nw3m5q003lm33ptflwrf5p","category_id":"ck9nw3m6y004zm33pb0lncjni","_id":"ck9nw3m77005dm33p9i3q1jcq"},{"post_id":"ck9nw3m5t003qm33puzuoifb9","category_id":"ck9nw3m740057m33pozekb6ly","_id":"ck9nw3m7d005km33ps07ma20e"},{"post_id":"ck9nw3m5w003tm33pg8t6octm","category_id":"ck9nw3m77005em33pv4gb2k5e","_id":"ck9nw3m7j005rm33pzcwt2j8m"},{"post_id":"ck9nw3m5z003ym33pw9aafu6z","category_id":"ck9nw3m7d005lm33pnxitgdth","_id":"ck9nw3m7o0060m33pdsgtum6c"},{"post_id":"ck9nw3m600040m33pjwnvg88l","category_id":"ck9nw3m7d005lm33pnxitgdth","_id":"ck9nw3m7t0067m33pjguor3gi"},{"post_id":"ck9nw3m620044m33pvc5iquc2","category_id":"ck9nw3m7d005lm33pnxitgdth","_id":"ck9nw3m7x006em33pkoecd1oy"},{"post_id":"ck9nw3m640047m33p8mp4gioz","category_id":"ck9nw3m7d005lm33pnxitgdth","_id":"ck9nw3m82006km33pkr19n3b0"},{"post_id":"ck9nw3m6a004am33pav4uftmp","category_id":"ck9nw3m7d005lm33pnxitgdth","_id":"ck9nw3m86006rm33pd0y9px79"},{"post_id":"ck9nw3m6b004em33p4bizf23n","category_id":"ck9nw3m7d005lm33pnxitgdth","_id":"ck9nw3m8b006wm33p2f9emm4g"},{"post_id":"ck9nw3m6d004hm33p0wrsezsx","category_id":"ck9nw3m7d005lm33pnxitgdth","_id":"ck9nw3m8g0073m33pt0f9ou0n"},{"post_id":"ck9nw3m6f004jm33pnv1xjzo4","category_id":"ck9nw3m7d005lm33pnxitgdth","_id":"ck9nw3m8j0076m33p3xwtov82"},{"post_id":"ck9nw3m6i004om33pi0pf3i8q","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m8q007fm33ph8iogumt"},{"post_id":"ck9nw3m6o004qm33pcdrez88b","category_id":"ck9nw3m8k0079m33pe42afrd7","_id":"ck9nw3m8w007lm33pn8b3nkrm"},{"post_id":"ck9nw3m6s004um33pjol7123x","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m90007sm33ppey63xzr"},{"post_id":"ck9nw3m6u004xm33pj923ki4i","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m93007wm33pm68dkcma"},{"post_id":"ck9nw3m6z0051m33pgvtbqoh2","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m970082m33p9dch061p"},{"post_id":"ck9nw3m710053m33pmfzwjra9","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m980085m33phjo90ba0"},{"post_id":"ck9nw3m730056m33p8y8yidpr","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m99008am33p5vphbr3e"},{"post_id":"ck9nw3m750059m33pnl5unytb","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9a008dm33pp652p2wp"},{"post_id":"ck9nw3m76005cm33ptmokhrrj","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9b008hm33phcxkevly"},{"post_id":"ck9nw3m78005gm33puu98q1pm","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9d008lm33pz5pozgt9"},{"post_id":"ck9nw3m79005im33phliuuo4n","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9e008pm33pt143whc0"},{"post_id":"ck9nw3m7e005nm33pi9umdub8","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9g008tm33paa3a6b19"},{"post_id":"ck9nw3m7f005pm33panzxid6i","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9i008xm33pba2rmr42"},{"post_id":"ck9nw3m7j005um33p0y9ho68y","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9j0091m33pwo0bvbb3"},{"post_id":"ck9nw3m7m005wm33pi3bcapnz","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9k0095m33pcvjogpbr"},{"post_id":"ck9nw3m7o0061m33pxcvq6qdn","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9m009am33pqkt59ffj"},{"post_id":"ck9nw3m7q0063m33pbh8ng65o","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9n009dm33pv80rqdfx"},{"post_id":"ck9nw3m7t0068m33p5hzre2us","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9o009gm33pvod658a0"},{"post_id":"ck9nw3m7v006am33pc8ytdgkf","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9q009lm33p6k2hdrbz"},{"post_id":"ck9nw3m7x006fm33p0xkpsrac","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9r009om33pjfeyne57"},{"post_id":"ck9nw3m7z006hm33p2fdv5flb","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3m9s009sm33pbwqxrtck"},{"post_id":"ck9nw3m82006lm33pz4zcrcnm","category_id":"ck9nw3m9r009nm33p8jtp4akw","_id":"ck9nw3m9u009wm33pzv0u1337"},{"post_id":"ck9nw3m84006nm33pzwk2ldjz","category_id":"ck9nw3m9r009nm33p8jtp4akw","_id":"ck9nw3m9v00a1m33pmf41322j"},{"post_id":"ck9nw3m86006sm33pyrrcxdyw","category_id":"ck9nw3m9r009nm33p8jtp4akw","_id":"ck9nw3m9w00a4m33poqply5wj"},{"post_id":"ck9nw3m89006tm33p1148uk0k","category_id":"ck9nw3m9r009nm33p8jtp4akw","_id":"ck9nw3ma000a8m33pkzv1st89"},{"post_id":"ck9nw3m8b006xm33p2drvdffb","category_id":"ck9nw3m9r009nm33p8jtp4akw","_id":"ck9nw3ma400acm33pxnn4mzpp"},{"post_id":"ck9nw3m8d006zm33p1sdgju15","category_id":"ck9nw3m9r009nm33p8jtp4akw","_id":"ck9nw3ma500agm33pw8whylew"},{"post_id":"ck9nw3m8g0074m33p57em17st","category_id":"ck9nw3m9r009nm33p8jtp4akw","_id":"ck9nw3maa00ajm33peptn9mf2"},{"post_id":"ck9nw3m8i0075m33paibb5wg8","category_id":"ck9nw3ma500afm33p015917hx","_id":"ck9nw3mac00anm33p8c7p2ju4"},{"post_id":"ck9nw3m8j0077m33pp3s555rb","category_id":"ck9nw3maa00akm33pd2dvsoht","_id":"ck9nw3mae00atm33pq5ipt8bn"},{"post_id":"ck9nw3m8m007bm33p56w2lyzb","category_id":"ck9nw3maa00akm33pd2dvsoht","_id":"ck9nw3mae00avm33pgi8522im"},{"post_id":"ck9nw3m8p007dm33puf4vpdti","category_id":"ck9nw3maa00akm33pd2dvsoht","_id":"ck9nw3mag00b0m33pso6uto7n"},{"post_id":"ck9nw3m8r007hm33pssklrark","category_id":"ck9nw3maa00akm33pd2dvsoht","_id":"ck9nw3mah00b3m33pl6fllcxi"},{"post_id":"ck9nw3m8v007im33pu1edi3m6","category_id":"ck9nw3maf00azm33pkxkde9p4","_id":"ck9nw3mai00b7m33p90za8g3m"},{"post_id":"ck9nw3m8x007mm33pq25qcs8i","category_id":"ck9nw3mah00b4m33pc1i0oph0","_id":"ck9nw3mal00bcm33p2plsxubw"},{"post_id":"ck9nw3m91007tm33pho1oxtk7","category_id":"ck9nw3mah00b4m33pc1i0oph0","_id":"ck9nw3mam00bfm33pmurrcy2w"},{"post_id":"ck9nw3m92007um33pdmdgjutd","category_id":"ck9nw3mah00b4m33pc1i0oph0","_id":"ck9nw3mam00bgm33ppf5ktkuj"},{"post_id":"ck9nw3m94007ym33pjesfov01","category_id":"ck9nw3mah00b4m33pc1i0oph0","_id":"ck9nw3man00bhm33pptl25992"},{"post_id":"ck9nw3mb300bim33pvf5uuq7v","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mbc00bnm33pi0igwrzj"},{"post_id":"ck9nw3mb600bjm33pg9qi48gn","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mbg00bqm33pt4r89xew"},{"post_id":"ck9nw3mb900blm33pec5wzdzx","category_id":"ck9nw3m3z001bm33pd94nw1rr","_id":"ck9nw3mbo00bsm33p22ox4rs2"},{"post_id":"ck9nw3mbb00bmm33pgageg645","category_id":"ck9nw3m4a001pm33p01k01el5","_id":"ck9nw3mbp00bwm33prbmb9baq"},{"post_id":"ck9nw3mbd00bpm33p8f2rgbwz","category_id":"ck9nw3m8f0072m33pl2g02vvh","_id":"ck9nw3mbq00bym33pxdh40f4w"},{"post_id":"ck9nw3mbn00brm33p5q6xbtf2","category_id":"ck9nw3maf00azm33pkxkde9p4","_id":"ck9nw3mbr00c0m33prsk82de7"},{"post_id":"ck9nw3mbo00bum33pn2d09x5x","category_id":"ck9nw3mah00b4m33pc1i0oph0","_id":"ck9nw3mbr00c2m33pukkm7vra"},{"post_id":"ck9nw3mcb00c4m33po1vmbpu9","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mcj00c9m33p19gmkulr"},{"post_id":"ck9nw3mcd00c5m33p3o0yq35m","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mck00cbm33pwercd0lg"},{"post_id":"ck9nw3mcg00c7m33pzlj8jf55","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mcn00cfm33pph29ftdi"},{"post_id":"ck9nw3mci00c8m33pjubd2ts1","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mcr00cim33pvzz8jbyd"},{"post_id":"ck9nw3mcj00cam33pi8rtg9d1","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mcu00cmm33pzfhaf91b"},{"post_id":"ck9nw3mcm00cem33p1ipz0x4f","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mcu00com33ptoozop4v"},{"post_id":"ck9nw3mco00chm33pvit9ce3w","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mcv00crm33pxnnixs13"},{"post_id":"ck9nw3mct00clm33ptl8x8n0a","category_id":"ck9nw3m690049m33popfolwfp","_id":"ck9nw3mcv00ctm33p6jiz72nb"},{"post_id":"ck9nw3md400cwm33pw0gqqpe5","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mdd00d1m33px325q8if"},{"post_id":"ck9nw3md800cxm33p0zygjkm8","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mde00d3m33p5jgfm0fd"},{"post_id":"ck9nw3mda00czm33prwaovdyz","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3mdf00d4m33pznflb5d9"},{"post_id":"ck9nw3me900d5m33p3rsk93kt","category_id":"ck9nw3m3m000zm33pft2xambs","_id":"ck9nw3med00d7m33p6xuyiuz6"}],"PostTag":[{"post_id":"ck9nw3m2q0006m33p70uat7pq","tag_id":"ck9nw3m2y0009m33ptphm0rsw","_id":"ck9nw3m3c000mm33pupm37csr"},{"post_id":"ck9nw3m2q0006m33p70uat7pq","tag_id":"ck9nw3m34000em33p8m8p2sup","_id":"ck9nw3m3e000qm33p8vrxoimd"},{"post_id":"ck9nw3m35000fm33pjhkum98i","tag_id":"ck9nw3m3a000km33pn5xws6bz","_id":"ck9nw3m3x0017m33ppzt80nhd"},{"post_id":"ck9nw3m35000fm33pjhkum98i","tag_id":"ck9nw3m3h000tm33pc2lu0oj9","_id":"ck9nw3m3z0019m33p07vv3r7p"},{"post_id":"ck9nw3m35000fm33pjhkum98i","tag_id":"ck9nw3m3m000ym33pfo1suwxe","_id":"ck9nw3m42001em33pijvbdya0"},{"post_id":"ck9nw3m38000im33p46i71n2t","tag_id":"ck9nw3m3a000km33pn5xws6bz","_id":"ck9nw3m44001gm33pyvq3uazh"},{"post_id":"ck9nw3m3a000lm33p5q4fiup3","tag_id":"ck9nw3m3z001am33p5gu2toab","_id":"ck9nw3m46001lm33purqr1jsc"},{"post_id":"ck9nw3m3d000pm33p861z4e9t","tag_id":"ck9nw3m3z001am33p5gu2toab","_id":"ck9nw3m4b001rm33pskwvdoga"},{"post_id":"ck9nw3m3f000sm33porxvuvw3","tag_id":"ck9nw3m48001nm33p39ppnzmi","_id":"ck9nw3m4k0023m33pca9wew3s"},{"post_id":"ck9nw3m3f000sm33porxvuvw3","tag_id":"ck9nw3m4d001um33plfi0i04u","_id":"ck9nw3m4m0025m33pik64g5zq"},{"post_id":"ck9nw3m3j000wm33pvlincmbm","tag_id":"ck9nw3m4h001zm33pteveqh9i","_id":"ck9nw3m4t002em33pzj8knu2o"},{"post_id":"ck9nw3m3j000wm33pvlincmbm","tag_id":"ck9nw3m4n0028m33p8wqjco14","_id":"ck9nw3m4u002hm33ptv52z0wd"},{"post_id":"ck9nw3m5p003jm33p5n3qbbus","tag_id":"ck9nw3m5m003fm33p3bkth7o7","_id":"ck9nw3m5t003pm33pqkiv3btd"},{"post_id":"ck9nw3m5h003am33pcfb9hvaf","tag_id":"ck9nw3m5m003fm33p3bkth7o7","_id":"ck9nw3m5v003sm33puip143jy"},{"post_id":"ck9nw3m5k003dm33p3htboff7","tag_id":"ck9nw3m5m003fm33p3bkth7o7","_id":"ck9nw3m5y003xm33puvtsobxe"},{"post_id":"ck9nw3m5q003lm33ptflwrf5p","tag_id":"ck9nw3m5x003um33pwrfev197","_id":"ck9nw3m630045m33prmnt9y5n"},{"post_id":"ck9nw3m5w003tm33pg8t6octm","tag_id":"ck9nw3m610042m33pasydufad","_id":"ck9nw3m6b004cm33pyoqc7cwr"},{"post_id":"ck9nw3m640047m33p8mp4gioz","tag_id":"ck9nw3m6b004dm33pgjvgam43","_id":"ck9nw3m6i004mm33pyg06rds3"},{"post_id":"ck9nw3m6a004am33pav4uftmp","tag_id":"ck9nw3m6h004km33px5y2ago0","_id":"ck9nw3m6t004vm33pfwrhjdyv"},{"post_id":"ck9nw3m6b004em33p4bizf23n","tag_id":"ck9nw3m6q004sm33p8wth2pxn","_id":"ck9nw3m710052m33pr4ilyyec"},{"post_id":"ck9nw3m6d004hm33p0wrsezsx","tag_id":"ck9nw3m6q004sm33p8wth2pxn","_id":"ck9nw3m740058m33pbc3qyjk0"},{"post_id":"ck9nw3m730056m33p8y8yidpr","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m76005am33pcuo2zyw7"},{"post_id":"ck9nw3m6i004om33pi0pf3i8q","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m78005fm33px9m6on09"},{"post_id":"ck9nw3m750059m33pnl5unytb","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m79005hm33pb3lsjb6s"},{"post_id":"ck9nw3m76005cm33ptmokhrrj","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m7d005mm33puot9oqax"},{"post_id":"ck9nw3m78005gm33puu98q1pm","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m7f005om33pjnjmm4qn"},{"post_id":"ck9nw3m79005im33phliuuo4n","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m7j005sm33pdauqv950"},{"post_id":"ck9nw3m7e005nm33pi9umdub8","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m7l005vm33pz52offya"},{"post_id":"ck9nw3m6o004qm33pcdrez88b","tag_id":"ck9nw3m76005bm33p4noio7vd","_id":"ck9nw3m7n005ym33p7k93ode7"},{"post_id":"ck9nw3m6o004qm33pcdrez88b","tag_id":"ck9nw3m7b005jm33pkkg3f3sc","_id":"ck9nw3m7q0062m33pas51ro9e"},{"post_id":"ck9nw3m7f005pm33panzxid6i","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m7s0065m33plt4jck10"},{"post_id":"ck9nw3m6s004um33pjol7123x","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m7u0069m33p46yjm3fv"},{"post_id":"ck9nw3m6u004xm33pj923ki4i","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m7x006cm33p87q5v9cf"},{"post_id":"ck9nw3m6z0051m33pgvtbqoh2","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m7z006gm33pz5uqlseh"},{"post_id":"ck9nw3m710053m33pmfzwjra9","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m83006mm33pyzagkmzs"},{"post_id":"ck9nw3m7z006hm33p2fdv5flb","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3m85006om33pakznkobe"},{"post_id":"ck9nw3m7j005um33p0y9ho68y","tag_id":"ck9nw3m81006im33pz0scrf63","_id":"ck9nw3m8d006ym33pf24w6g7v"},{"post_id":"ck9nw3m7j005um33p0y9ho68y","tag_id":"ck9nw3m86006pm33pmiewiiy9","_id":"ck9nw3m8e0070m33p3qfbeh5e"},{"post_id":"ck9nw3m7m005wm33pi3bcapnz","tag_id":"ck9nw3m81006im33pz0scrf63","_id":"ck9nw3m8l007am33p1a29k8ee"},{"post_id":"ck9nw3m7m005wm33pi3bcapnz","tag_id":"ck9nw3m8f0071m33pb487p9r1","_id":"ck9nw3m8o007cm33pf92dqnej"},{"post_id":"ck9nw3m7o0061m33pxcvq6qdn","tag_id":"ck9nw3m81006im33pz0scrf63","_id":"ck9nw3m8y007nm33p8ie26li2"},{"post_id":"ck9nw3m7o0061m33pxcvq6qdn","tag_id":"ck9nw3m8q007em33pj37ya0x9","_id":"ck9nw3m8z007pm33pdi8lj1e2"},{"post_id":"ck9nw3m7q0063m33pbh8ng65o","tag_id":"ck9nw3m81006im33pz0scrf63","_id":"ck9nw3m95007zm33pkor83gvc"},{"post_id":"ck9nw3m7q0063m33pbh8ng65o","tag_id":"ck9nw3m8z007qm33p0v2tdzhd","_id":"ck9nw3m960080m33ptxgd7wa5"},{"post_id":"ck9nw3m7t0068m33p5hzre2us","tag_id":"ck9nw3m81006im33pz0scrf63","_id":"ck9nw3m990087m33pfixrd49s"},{"post_id":"ck9nw3m7t0068m33p5hzre2us","tag_id":"ck9nw3m8z007qm33p0v2tdzhd","_id":"ck9nw3m990088m33pdaeq9n7y"},{"post_id":"ck9nw3m7v006am33pc8ytdgkf","tag_id":"ck9nw3m81006im33pz0scrf63","_id":"ck9nw3m9b008fm33pvavd1nja"},{"post_id":"ck9nw3m7v006am33pc8ytdgkf","tag_id":"ck9nw3m99008bm33pawpnm0ai","_id":"ck9nw3m9b008im33p86j66w3j"},{"post_id":"ck9nw3m7x006fm33p0xkpsrac","tag_id":"ck9nw3m81006im33pz0scrf63","_id":"ck9nw3m9e008nm33phg7qqv75"},{"post_id":"ck9nw3m7x006fm33p0xkpsrac","tag_id":"ck9nw3m8f0071m33pb487p9r1","_id":"ck9nw3m9f008qm33pwf1wp0vw"},{"post_id":"ck9nw3m82006lm33pz4zcrcnm","tag_id":"ck9nw3m9e008mm33p5roacq01","_id":"ck9nw3m9h008vm33pqhefkino"},{"post_id":"ck9nw3m82006lm33pz4zcrcnm","tag_id":"ck9nw3m9f008rm33pz82sqeqf","_id":"ck9nw3m9j008ym33peof8fc1i"},{"post_id":"ck9nw3m84006nm33pzwk2ldjz","tag_id":"ck9nw3m9e008mm33p5roacq01","_id":"ck9nw3m9k0093m33pahiuqo5c"},{"post_id":"ck9nw3m84006nm33pzwk2ldjz","tag_id":"ck9nw3m9j008zm33pv435mgwl","_id":"ck9nw3m9l0096m33puk93n87u"},{"post_id":"ck9nw3m86006sm33pyrrcxdyw","tag_id":"ck9nw3m9e008mm33p5roacq01","_id":"ck9nw3m9m0098m33p8dxwrs1f"},{"post_id":"ck9nw3m89006tm33p1148uk0k","tag_id":"ck9nw3m9e008mm33p5roacq01","_id":"ck9nw3m9o009hm33ps2tdzwwa"},{"post_id":"ck9nw3m89006tm33p1148uk0k","tag_id":"ck9nw3m9m009bm33pye5qlmvm","_id":"ck9nw3m9p009im33p30lth4g4"},{"post_id":"ck9nw3m8b006xm33p2drvdffb","tag_id":"ck9nw3m9e008mm33p5roacq01","_id":"ck9nw3m9r009pm33peavcrxz2"},{"post_id":"ck9nw3m8b006xm33p2drvdffb","tag_id":"ck9nw3m9p009jm33pnd1jcrvm","_id":"ck9nw3m9s009qm33p9dh40mm7"},{"post_id":"ck9nw3m8d006zm33p1sdgju15","tag_id":"ck9nw3m9e008mm33p5roacq01","_id":"ck9nw3m9u009xm33p4d01snhu"},{"post_id":"ck9nw3m8d006zm33p1sdgju15","tag_id":"ck9nw3m9s009rm33pc4fcfe81","_id":"ck9nw3m9u009ym33pwakgcm5a"},{"post_id":"ck9nw3m8g0074m33p57em17st","tag_id":"ck9nw3m9e008mm33p5roacq01","_id":"ck9nw3m9x00a5m33pl8wjxy43"},{"post_id":"ck9nw3m8g0074m33p57em17st","tag_id":"ck9nw3m9v009zm33pcbnwc8rl","_id":"ck9nw3m9z00a6m33ptz3j4o4u"},{"post_id":"ck9nw3m8i0075m33paibb5wg8","tag_id":"ck9nw3m9w00a2m33pa1rqv616","_id":"ck9nw3ma300aam33pwz71k74h"},{"post_id":"ck9nw3m8j0077m33pp3s555rb","tag_id":"ck9nw3ma100a9m33pa30nxmel","_id":"ck9nw3ma500aem33pbfq3yeoc"},{"post_id":"ck9nw3m8m007bm33p56w2lyzb","tag_id":"ck9nw3ma100a9m33pa30nxmel","_id":"ck9nw3ma600aim33pbd3n8wjp"},{"post_id":"ck9nw3m8p007dm33puf4vpdti","tag_id":"ck9nw3ma100a9m33pa30nxmel","_id":"ck9nw3mab00amm33pa1xv79e1"},{"post_id":"ck9nw3m8r007hm33pssklrark","tag_id":"ck9nw3ma100a9m33pa30nxmel","_id":"ck9nw3mad00aqm33pnuynf832"},{"post_id":"ck9nw3m8v007im33pu1edi3m6","tag_id":"ck9nw3ma100a9m33pa30nxmel","_id":"ck9nw3maf00axm33p457vppxo"},{"post_id":"ck9nw3m8v007im33pu1edi3m6","tag_id":"ck9nw3mad00arm33pgh006lv0","_id":"ck9nw3maf00aym33pb6fxglzl"},{"post_id":"ck9nw3m8x007mm33pq25qcs8i","tag_id":"ck9nw3mae00awm33py7tyuj4z","_id":"ck9nw3mag00b2m33p6ar19gd7"},{"post_id":"ck9nw3m91007tm33pho1oxtk7","tag_id":"ck9nw3mae00awm33py7tyuj4z","_id":"ck9nw3mai00b6m33p3zyx0qfh"},{"post_id":"ck9nw3m92007um33pdmdgjutd","tag_id":"ck9nw3mae00awm33py7tyuj4z","_id":"ck9nw3mak00bam33p0m9d7a4z"},{"post_id":"ck9nw3m94007ym33pjesfov01","tag_id":"ck9nw3mae00awm33py7tyuj4z","_id":"ck9nw3mal00bdm33pf5fow42p"},{"post_id":"ck9nw3mb300bim33pvf5uuq7v","tag_id":"ck9nw3m3z001am33p5gu2toab","_id":"ck9nw3mb800bkm33pr83d2t80"},{"post_id":"ck9nw3mbd00bpm33p8f2rgbwz","tag_id":"ck9nw3m720054m33pq0ecq1ly","_id":"ck9nw3mbo00btm33pd42tbjud"},{"post_id":"ck9nw3mbn00brm33p5q6xbtf2","tag_id":"ck9nw3ma100a9m33pa30nxmel","_id":"ck9nw3mbq00bxm33pe5gxg8w3"},{"post_id":"ck9nw3mbo00bum33pn2d09x5x","tag_id":"ck9nw3mae00awm33py7tyuj4z","_id":"ck9nw3mbr00bzm33pmpy0p160"},{"post_id":"ck9nw3mb900blm33pec5wzdzx","tag_id":"ck9nw3mbc00bom33psg9c4fea","_id":"ck9nw3mbr00c1m33p891q0s53"},{"post_id":"ck9nw3mb900blm33pec5wzdzx","tag_id":"ck9nw3mbp00bvm33pymxsknb5","_id":"ck9nw3mbr00c3m33pdp8d0s3n"},{"post_id":"ck9nw3mci00c8m33pjubd2ts1","tag_id":"ck9nw3mcf00c6m33phwlzaxg8","_id":"ck9nw3mcl00cdm33pr2gu1xnj"},{"post_id":"ck9nw3mcb00c4m33po1vmbpu9","tag_id":"ck9nw3mcf00c6m33phwlzaxg8","_id":"ck9nw3mco00cgm33psgf45f1a"},{"post_id":"ck9nw3mcm00cem33p1ipz0x4f","tag_id":"ck9nw3m3z001am33p5gu2toab","_id":"ck9nw3mcs00ckm33p4upbq4vw"},{"post_id":"ck9nw3mcd00c5m33p3o0yq35m","tag_id":"ck9nw3mcf00c6m33phwlzaxg8","_id":"ck9nw3mcu00cnm33pytmz8t2o"},{"post_id":"ck9nw3mco00chm33pvit9ce3w","tag_id":"ck9nw3m3z001am33p5gu2toab","_id":"ck9nw3mcv00cqm33p38biry8r"},{"post_id":"ck9nw3mct00clm33ptl8x8n0a","tag_id":"ck9nw3m5m003fm33p3bkth7o7","_id":"ck9nw3mcv00csm33pog93ws9k"},{"post_id":"ck9nw3mcg00c7m33pzlj8jf55","tag_id":"ck9nw3mcf00c6m33phwlzaxg8","_id":"ck9nw3mcv00cum33pod5ncd4a"},{"post_id":"ck9nw3mcj00cam33pi8rtg9d1","tag_id":"ck9nw3mcu00cpm33ptgpllot2","_id":"ck9nw3mcv00cvm33p5hiidvta"},{"post_id":"ck9nw3md400cwm33pw0gqqpe5","tag_id":"ck9nw3mcf00c6m33phwlzaxg8","_id":"ck9nw3mda00cym33plhx0lr0t"},{"post_id":"ck9nw3md800cxm33p0zygjkm8","tag_id":"ck9nw3mcu00cpm33ptgpllot2","_id":"ck9nw3mdd00d0m33p30z2vr81"},{"post_id":"ck9nw3mda00czm33prwaovdyz","tag_id":"ck9nw3m3z001am33p5gu2toab","_id":"ck9nw3mde00d2m33puab07too"},{"post_id":"ck9nw3me900d5m33p3rsk93kt","tag_id":"ck9nw3mcu00cpm33ptgpllot2","_id":"ck9nw3mec00d6m33pfvdnbt6c"}],"Tag":[{"name":"SSL","_id":"ck9nw3m2y0009m33ptphm0rsw"},{"name":"HTTPS","_id":"ck9nw3m34000em33p8m8p2sup"},{"name":"Java 8","_id":"ck9nw3m3a000km33pn5xws6bz"},{"name":"日期","_id":"ck9nw3m3h000tm33pc2lu0oj9"},{"name":"时间","_id":"ck9nw3m3m000ym33pfo1suwxe"},{"name":"Data structures and algorithms in Java","_id":"ck9nw3m3z001am33p5gu2toab"},{"name":"SSH","_id":"ck9nw3m48001nm33p39ppnzmi"},{"name":"LINUX","_id":"ck9nw3m4d001um33plfi0i04u"},{"name":"Linux","_id":"ck9nw3m4h001zm33pteveqh9i"},{"name":"防火墙","_id":"ck9nw3m4n0028m33p8wqjco14"},{"name":"Nginx","_id":"ck9nw3m5m003fm33p3bkth7o7"},{"name":"redis","_id":"ck9nw3m5x003um33pwrfev197"},{"name":"用户登录","_id":"ck9nw3m610042m33pasydufad"},{"name":"Icebartech","_id":"ck9nw3m6b004dm33pgjvgam43"},{"name":"科学上网","_id":"ck9nw3m6h004km33px5y2ago0"},{"name":"自然拼读法","_id":"ck9nw3m6q004sm33p8wth2pxn"},{"name":"thread","_id":"ck9nw3m720054m33pq0ecq1ly"},{"name":"单点登录","_id":"ck9nw3m76005bm33p4noio7vd"},{"name":"用户帐号系统设计","_id":"ck9nw3m7b005jm33pkkg3f3sc"},{"name":"Thread","_id":"ck9nw3m81006im33pz0scrf63"},{"name":"FixedThreadPool","_id":"ck9nw3m86006pm33pmiewiiy9"},{"name":"ThreadPoolExcutor","_id":"ck9nw3m8f0071m33pb487p9r1"},{"name":"CachedThreadPool","_id":"ck9nw3m8q007em33pj37ya0x9"},{"name":"SingleThreadExecutor","_id":"ck9nw3m8z007qm33p0v2tdzhd"},{"name":"WorkStealingPool","_id":"ck9nw3m99008bm33pawpnm0ai"},{"name":"学习观","_id":"ck9nw3m9e008mm33p5roacq01"},{"name":"何为学习","_id":"ck9nw3m9f008rm33pz82sqeqf"},{"name":"学习步骤","_id":"ck9nw3m9j008zm33pv435mgwl"},{"name":"分而治之","_id":"ck9nw3m9m009bm33pye5qlmvm"},{"name":"思维导图","_id":"ck9nw3m9p009jm33pnd1jcrvm"},{"name":"导图步骤","_id":"ck9nw3m9s009rm33pc4fcfe81"},{"name":"费曼技巧","_id":"ck9nw3m9v009zm33pcbnwc8rl"},{"name":"正则表达式","_id":"ck9nw3m9w00a2m33pa1rqv616"},{"name":"JVM","_id":"ck9nw3ma100a9m33pa30nxmel"},{"name":"questions","_id":"ck9nw3mad00arm33pgh006lv0"},{"name":"mermaid","_id":"ck9nw3mae00awm33py7tyuj4z"},{"name":"ssh","_id":"ck9nw3mbc00bom33psg9c4fea"},{"name":"linux","_id":"ck9nw3mbp00bvm33pymxsknb5"},{"name":"Advanced Java language features","_id":"ck9nw3mcf00c6m33phwlzaxg8"},{"name":"The Spring Series","_id":"ck9nw3mcu00cpm33ptgpllot2"}]}}